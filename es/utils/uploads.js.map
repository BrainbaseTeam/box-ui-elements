{"version":3,"sources":["../../src/utils/uploads.js"],"names":["getProp","DEFAULT_API_OPTIONS","doesFileContainAPIOptions","file","options","doesDataTransferItemContainAPIOptions","item","getFile","getDataTransferItem","getFileAPIOptions","getDataTransferItemAPIOptions","isValidDateObject","date","Object","prototype","toString","call","Number","isNaN","getTime","toISOStringNoMS","toISOString","replace","getFileLastModifiedAsISONoMSIfPossible","lastModified","lastModifiedDate","Date","tryParseJson","maybeJson","JSON","parse","e","getBoundedExpBackoffRetryDelay","initialRetryDelay","maxRetryDelay","retryNum","delay","getEntryFromDataTransferItem","entry","webkitGetAsEntry","mozGetAsEntry","getAsEntry","isDataTransferItemAFolder","itemData","isDirectory","getFileFromEntry","Promise","resolve","getFileFromDataTransferItem","getFileId","rootFolderId","name","fileWithOptions","folderId","uploadInitTimestamp","now","fileName","webkitRelativePath","getDataTransferItemId","isMultiputSupported","cryptoObj","window","crypto","msCrypto","location","protocol","subtle"],"mappings":"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","sourcesContent":["/**\n * @flow\n * @file Utility functions for uploads\n * @author Box\n */\nimport getProp from 'lodash/get';\n\nconst DEFAULT_API_OPTIONS = {};\n\n/**\n * Returns true if file contains API options\n *\n * @param {UploadFile | UploadFileWithAPIOptions} item\n * @returns {boolean}\n */\nfunction doesFileContainAPIOptions(file: UploadFile | UploadFileWithAPIOptions): boolean {\n    // $FlowFixMe UploadFileWithAPIOptions has `file` and `options` properties\n    return !!(file.options && file.file);\n}\n\n/**\n * Returns true if item contains API options\n *\n * @param {DataTransferItem | UploadDataTransferItemWithAPIOptions} item\n * @returns {boolean}\n */\nfunction doesDataTransferItemContainAPIOptions(item: DataTransferItem | UploadDataTransferItemWithAPIOptions): boolean {\n    // $FlowFixMe UploadDataTransferItemWithAPIOptions has `item` and `options` properties\n    return !!(item.options && item.item);\n}\n\n/**\n * Converts UploadFile or UploadFileWithAPIOptions to UploadFile\n *\n * @param {UploadFile | UploadFileWithAPIOptions} file\n * @returns {UploadFile}\n */\nfunction getFile(file: UploadFile | UploadFileWithAPIOptions): UploadFile {\n    if (doesFileContainAPIOptions(file)) {\n        return ((file: any): UploadFileWithAPIOptions).file;\n    }\n\n    return ((file: any): UploadFile);\n}\n\n/**\n * Converts DataTransferItem or UploadDataTransferItemWithAPIOptions to DataTransferItem\n *\n * @param {DataTransferItem | UploadDataTransferItemWithAPIOptions} item\n * @returns {DataTransferItem}\n */\nfunction getDataTransferItem(item: DataTransferItem | UploadDataTransferItemWithAPIOptions): DataTransferItem {\n    if (doesDataTransferItemContainAPIOptions(item)) {\n        return ((item: any): UploadDataTransferItemWithAPIOptions).item;\n    }\n\n    return ((item: any): DataTransferItem);\n}\n\n/**\n * Get API Options from file\n *\n * @param {UploadFile | UploadFileWithAPIOptions} file\n * @returns {UploadItemAPIOptions}\n */\nfunction getFileAPIOptions(file: UploadFile | UploadFileWithAPIOptions): UploadItemAPIOptions {\n    if (doesFileContainAPIOptions(file)) {\n        return ((file: any): UploadFileWithAPIOptions).options || DEFAULT_API_OPTIONS;\n    }\n\n    return DEFAULT_API_OPTIONS;\n}\n\n/**\n * Get API Options from item\n *\n * @param {DataTransferItem | UploadDataTransferItemWithAPIOptions} item\n * @returns {UploadItemAPIOptions}\n */\nfunction getDataTransferItemAPIOptions(\n    item: DataTransferItem | UploadDataTransferItemWithAPIOptions,\n): UploadItemAPIOptions {\n    if (doesDataTransferItemContainAPIOptions(item)) {\n        return ((item: any): UploadDataTransferItemWithAPIOptions).options || DEFAULT_API_OPTIONS;\n    }\n\n    return DEFAULT_API_OPTIONS;\n}\n\n/**\n * Returns true if the given object is a Date instance encoding a valid date\n * (i.e. new Date('this is not a timestamp') should return false).\n *\n * Code adapted from\n * http://stackoverflow.com/questions/1353684/detecting-an-invalid-date-date-instance-in-javascript\n *\n * @param {Date} date\n * @return {boolean}\n */\nfunction isValidDateObject(date: Date): boolean {\n    return Object.prototype.toString.call(date) === '[object Date]' && !Number.isNaN(date.getTime());\n}\n\n/**\n * Remove milliseconds from date time string\n *\n * @param {Date} date\n * @return {string}\n */\nfunction toISOStringNoMS(date: Date): string {\n    return date.toISOString().replace(/\\.[0-9]{3}/, '');\n}\n\n/**\n * Returns the file's last modified date as an ISO string with no MS component (e.g.\n * '2017-04-18T17:14:27Z'), or null if no such date can be extracted from the file object.\n * (Nothing on the Internet guarantees that the file object has this info.)\n *\n * @param {UploadFile} file\n * @return {?string}\n */\nfunction getFileLastModifiedAsISONoMSIfPossible(file: UploadFile): ?string {\n    // The compatibility chart at https://developer.mozilla.org/en-US/docs/Web/API/File/lastModified#Browser_compatibility\n    // is not up to date as of 12-13-2018. Edge & ie11 do not support lastModified, but support lastModifiedDate.\n    const lastModified = file.lastModified || file.lastModifiedDate;\n    if (\n        lastModified &&\n        (typeof lastModified === 'string' || typeof lastModified === 'number' || lastModified instanceof Date)\n    ) {\n        const lastModifiedDate = new Date(lastModified);\n        if (isValidDateObject(lastModifiedDate)) {\n            return toISOStringNoMS(lastModifiedDate);\n        }\n    }\n\n    return null;\n}\n\n/**\n * If maybeJson is valid JSON string, return the result of calling JSON.parse\n * on it.  Otherwise, return null.\n *\n * @param {string} maybeJson\n * @return {?Object}\n */\nfunction tryParseJson(maybeJson: string): ?Object {\n    try {\n        return JSON.parse(maybeJson);\n    } catch (e) {\n        return null;\n    }\n}\n\n/**\n * Get bounded exponential backoff retry delay\n *\n * @param {number} initialRetryDelay\n * @param {number} maxRetryDelay\n * @param {number} retryNum - Current retry number (first retry will have value of 0).\n * @return {number}\n */\nfunction getBoundedExpBackoffRetryDelay(initialRetryDelay: number, maxRetryDelay: number, retryNum: number) {\n    const delay = initialRetryDelay * retryNum ** 2;\n    return delay > maxRetryDelay ? maxRetryDelay : delay;\n}\n\n/**\n * Get entry from dataTransferItem\n *\n * @param {DataTransferItem} item\n * @returns {FileSystemFileEntry}\n */\nfunction getEntryFromDataTransferItem(item: DataTransferItem): FileSystemFileEntry {\n    const entry =\n        // $FlowFixMe\n        item.webkitGetAsEntry || item.mozGetAsEntry || item.getAsEntry;\n\n    return entry.call(item);\n}\n\n/**\n * Check if a dataTransferItem is a folder\n *\n * @param {UploadDataTransferItemWithAPIOptions | DataTransferItem} itemData\n * @returns {boolean}\n */\nfunction isDataTransferItemAFolder(itemData: UploadDataTransferItemWithAPIOptions | DataTransferItem): boolean {\n    const item = getDataTransferItem(itemData);\n    const entry = getEntryFromDataTransferItem(((item: any): DataTransferItem));\n    if (!entry) {\n        return false;\n    }\n\n    return entry.isDirectory;\n}\n\n/**\n * Get file from FileSystemFileEntry\n *\n * @param {FileSystemFileEntry} entry\n * @returns {Promise<UploadFile>}\n */\nfunction getFileFromEntry(entry: FileSystemFileEntry): Promise<UploadFile> {\n    return new Promise(resolve => {\n        entry.file(file => {\n            resolve(file);\n        });\n    });\n}\n\n/**\n * Get file from DataTransferItem or UploadDataTransferItemWithAPIOptions\n *\n * @param {UploadDataTransferItemWithAPIOptions | DataTransferItem} itemData\n * @returns {Promise<UploadFile | UploadFileWithAPIOptions | null>}\n */\nasync function getFileFromDataTransferItem(\n    itemData: UploadDataTransferItemWithAPIOptions | DataTransferItem,\n): Promise<UploadFile | UploadFileWithAPIOptions | null> {\n    const item = getDataTransferItem(itemData);\n    const entry = getEntryFromDataTransferItem(((item: any): DataTransferItem));\n    if (!entry) {\n        return null;\n    }\n\n    const file = await getFileFromEntry(entry);\n\n    if (doesDataTransferItemContainAPIOptions(itemData)) {\n        return {\n            file: ((file: any): UploadFile),\n            options: getDataTransferItemAPIOptions(itemData),\n        };\n    }\n\n    return file;\n}\n\n/**\n * Generates file id based on file properties\n *\n * When folderId or uploadInitTimestamp is missing from file options, file name is returned as file id.\n * Otherwise, fileName_folderId_uploadInitTimestamp is used as file id.\n *\n * @param {UploadFileWithAPIOptions | UploadFile} file\n * @param {string} rootFolderId\n * @returns {string}\n */\nfunction getFileId(file: UploadFileWithAPIOptions | UploadFile, rootFolderId: string): string {\n    if (!doesFileContainAPIOptions(file)) {\n        return ((file: any): UploadFile).name;\n    }\n\n    const fileWithOptions = ((file: any): UploadFileWithAPIOptions);\n    const folderId = getProp(fileWithOptions, 'options.folderId', rootFolderId);\n    const uploadInitTimestamp = getProp(fileWithOptions, 'options.uploadInitTimestamp', Date.now());\n    const fileName = fileWithOptions.file.webkitRelativePath || fileWithOptions.file.name;\n\n    return `${fileName}_${folderId}_${uploadInitTimestamp}`;\n}\n\n/**\n * Generates item id based on item properties\n * E.g., folder1_0_123124124\n *\n * @param {DataTransferItem | UploadDataTransferItemWithAPIOptions} itemData\n * @param {string} rootFolderId\n * @returns {string}\n */\nfunction getDataTransferItemId(\n    itemData: DataTransferItem | UploadDataTransferItemWithAPIOptions,\n    rootFolderId: string,\n): string {\n    const item = getDataTransferItem(itemData);\n    const { name } = getEntryFromDataTransferItem(item);\n    const { folderId = rootFolderId, uploadInitTimestamp = Date.now() } = getDataTransferItemAPIOptions(itemData);\n\n    return `${name}_${folderId}_${uploadInitTimestamp}`;\n}\n\n/**\n * Multiput uploads require the use of crypto, which is only supported in secure contexts\n */\nfunction isMultiputSupported(): boolean {\n    const cryptoObj = window.crypto || window.msCrypto;\n    return window.location.protocol === 'https:' && cryptoObj && cryptoObj.subtle;\n}\n\nexport {\n    DEFAULT_API_OPTIONS,\n    doesDataTransferItemContainAPIOptions,\n    doesFileContainAPIOptions,\n    getBoundedExpBackoffRetryDelay,\n    getDataTransferItem,\n    getDataTransferItemAPIOptions,\n    getDataTransferItemId,\n    getEntryFromDataTransferItem,\n    getFile,\n    getFileAPIOptions,\n    getFileFromDataTransferItem,\n    getFileFromEntry,\n    getFileId,\n    getFileLastModifiedAsISONoMSIfPossible,\n    isDataTransferItemAFolder,\n    isMultiputSupported,\n    toISOStringNoMS,\n    tryParseJson,\n};\n"],"file":"uploads.js"}