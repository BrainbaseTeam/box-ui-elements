{"version":3,"sources":["../../src/utils/Browser.js"],"names":["isDashSupported","Browser","global","navigator","userAgent","getUserAgent","test","isMobile","isSafari","isMobileChromeOniOS","recheck","mse","MediaSource","isTypeSupported","clipboard","writeText","readText"],"mappings":";;;;;;AAAA;;;;;AAMA,IAAIA,eAAJ;;IAEMC,O;;;;;;;;;;AACF;;;;;;mCAM8B;AAC1B,aAAOC,MAAM,CAACC,SAAP,CAAiBC,SAAxB;AACH;AAED;;;;;;;;;;;+BAQ2B;AACvB,UAAMA,SAAS,GAAGH,OAAO,CAACI,YAAR,EAAlB;AACA,aACI,kEAAkEC,IAAlE,CAAuEF,SAAvE,KAAqF,QAAQE,IAAR,CAAaF,SAAb,CADzF;AAGH;AAED;;;;;;;;2BAKc;AACV,aAAO,WAAWE,IAAX,CAAgBL,OAAO,CAACI,YAAR,EAAhB,CAAP;AACH;AAED;;;;;;;;+BAKkB;AACd,UAAMD,SAAS,GAAGH,OAAO,CAACI,YAAR,EAAlB;AACA,aAAO,eAAeC,IAAf,CAAoBF,SAApB,KAAkC,CAAC,YAAYE,IAAZ,CAAiBF,SAAjB,CAA1C;AACH;AAED;;;;;;;;;qCAMwB;AACpB,aAAOH,OAAO,CAACM,QAAR,MAAsBN,OAAO,CAACO,QAAR,EAAtB,IAA4C,CAACP,OAAO,CAACQ,mBAAR,EAApD;AACH;AAED;;;;;;;;;0CAM6B;AACzB,UAAML,SAAS,GAAGH,OAAO,CAACI,YAAR,EAAlB;AACA,aAAOJ,OAAO,CAACM,QAAR,MAAsB,eAAeD,IAAf,CAAoBF,SAApB,CAAtB,IAAwD,WAAWE,IAAX,CAAgBF,SAAhB,CAA/D;AACH;AAED;;;;;;;;;;;;kCAS6C;AAAA,UAA1BM,OAA0B,uEAAP,KAAO;;AACzC,UAAI,OAAOV,eAAP,KAA2B,WAA3B,IAA0CU,OAA9C,EAAuD;AACnD,YAAMC,GAAG,GAAGT,MAAM,CAACU,WAAnB;AACAZ,QAAAA,eAAe,GACX,CAAC,CAACW,GAAF,IACA,OAAOA,GAAG,CAACE,eAAX,KAA+B,UAD/B,IAEAF,GAAG,CAACE,eAAJ,CAAoB,iCAApB,CAHJ;AAIH;;AAED,aAAOb,eAAP;AACH;AAED;;;;;;;;;;;;;0CAU6B;AACzB,aAAO,CAAC,EAAEE,MAAM,CAACC,SAAP,CAAiBW,SAAjB,IAA8BZ,MAAM,CAACC,SAAP,CAAiBW,SAAjB,CAA2BC,SAA3D,CAAR;AACH;AAED;;;;;;;;;;;;;2CAU8B;AAC1B,aAAO,CAAC,EAAEb,MAAM,CAACC,SAAP,CAAiBW,SAAjB,IAA8BZ,MAAM,CAACC,SAAP,CAAiBW,SAAjB,CAA2BE,QAA3D,CAAR;AACH;;;;;;AAGL,eAAef,OAAf","sourcesContent":["/**\n * @flow\n * @file Helper for some browser utilities\n * @author Box\n */\n\nlet isDashSupported;\n\nclass Browser {\n    /**\n     * Returns the user agent.\n     * Helps in mocking out.\n     *\n     * @return {String} navigator userAgent\n     */\n    static getUserAgent(): string {\n        return global.navigator.userAgent;\n    }\n\n    /**\n     * Returns whether browser is mobile, including tablets.\n     *\n     * We rely on user agent (UA) to avoid matching desktops with touchscreens.\n     * @see https://developer.mozilla.org/en-US/docs/Web/HTTP/Browser_detection_using_the_user_agent#mobile_tablet_or_desktop\n     *\n     * @return {boolean} Whether browser is mobile\n     */\n    static isMobile(): boolean {\n        const userAgent = Browser.getUserAgent();\n        return (\n            /iphone|ipad|ipod|android|blackberry|bb10|mini|windows\\sce|palm/i.test(userAgent) || /Mobi/i.test(userAgent)\n        );\n    }\n\n    /**\n     * Returns whether browser is IE.\n     *\n     * @return {boolena} Whether browser is IE\n     */\n    static isIE() {\n        return /Trident/i.test(Browser.getUserAgent());\n    }\n\n    /**\n     * Returns whether browser is Safari.\n     *\n     * @return {boolean} Whether browser is Safari\n     */\n    static isSafari() {\n        const userAgent = Browser.getUserAgent();\n        return /AppleWebKit/i.test(userAgent) && !/Chrome\\//i.test(userAgent);\n    }\n\n    /**\n     * Returns whether browser is Mobile Safari.\n     *\n     * @see https://developer.chrome.com/docs/multidevice/user-agent/\n     * @return {boolean} Whether browser is Mobile Safari\n     */\n    static isMobileSafari() {\n        return Browser.isMobile() && Browser.isSafari() && !Browser.isMobileChromeOniOS();\n    }\n\n    /**\n     * Returns whether browser is Mobile Chrome on iOS.\n     *\n     * @see https://developer.chrome.com/docs/multidevice/user-agent/\n     * @return {boolean} Whether browser is Mobile Chrome on iOS\n     */\n    static isMobileChromeOniOS() {\n        const userAgent = Browser.getUserAgent();\n        return Browser.isMobile() && /AppleWebKit/i.test(userAgent) && /CriOS\\//i.test(userAgent);\n    }\n\n    /**\n     * Checks the browser for Dash support using H264 high.\n     * Dash requires MediaSource extensions to exist and be applicable\n     * to the H264 container (since we use H264 and not webm)\n     *\n     * @public\n     * @param {boolean} recheck - recheck support\n     * @return {boolean} true if dash is usable\n     */\n    static canPlayDash(recheck: boolean = false) {\n        if (typeof isDashSupported === 'undefined' || recheck) {\n            const mse = global.MediaSource;\n            isDashSupported =\n                !!mse &&\n                typeof mse.isTypeSupported === 'function' &&\n                mse.isTypeSupported('video/mp4; codecs=\"avc1.64001E\"');\n        }\n\n        return isDashSupported;\n    }\n\n    /**\n     * Checks whether the browser has support for the Clipboard API. This new API supercedes\n     * the `execCommand`-based API and uses Promises for detecting whether it works or not.\n     *\n     * This check determines if the browser can support writing to the clipboard.\n     * @see https://www.w3.org/TR/clipboard-apis/#async-clipboard-api\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/Clipboard\n     *\n     * @return {boolean} whether writing to the clipboard is possible\n     */\n    static canWriteToClipboard() {\n        return !!(global.navigator.clipboard && global.navigator.clipboard.writeText);\n    }\n\n    /**\n     * Checks whether the browser has support for the Clipboard API. This new API supercedes\n     * the `execCommand`-based API and uses Promises for detecting whether it works or not.\n     *\n     * This check determines if the browser can support reading from the clipboard.\n     * @see https://www.w3.org/TR/clipboard-apis/#async-clipboard-api\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/Clipboard\n     *\n     * @return {boolean} whether reading from the clipboard is possible\n     */\n    static canReadFromClipboard() {\n        return !!(global.navigator.clipboard && global.navigator.clipboard.readText);\n    }\n}\n\nexport default Browser;\n"],"file":"Browser.js"}