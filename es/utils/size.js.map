{"version":3,"sources":["../../src/utils/size.js"],"names":["size","kilo","decimals","sizes","exp","Math","floor","log","parseFloat","toFixed"],"mappings":"AAAA;;;;;;AAMA;;;;;;AAMA,eAAe,UAASA,IAAT,EAAgC;AAC3C,MAAI,CAACA,IAAL,EAAW,OAAO,QAAP;AACX,MAAMC,IAAY,GAAG,IAArB;AACA,MAAMC,QAAgB,GAAG,CAAzB;AACA,MAAMC,KAAe,GAAG,CAAC,OAAD,EAAU,IAAV,EAAgB,IAAhB,EAAsB,IAAtB,EAA4B,IAA5B,EAAkC,IAAlC,CAAxB;AACA,MAAMC,GAAW,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,GAAL,CAASP,IAAT,IAAiBK,IAAI,CAACE,GAAL,CAASN,IAAT,CAA5B,CAApB;AACA,mBAAUO,UAAU,CAAC,CAACR,IAAI,YAAGC,IAAH,EAAWG,GAAX,CAAL,EAAqBK,OAArB,CAA6BP,QAA7B,CAAD,CAApB,cAAgEC,KAAK,CAACC,GAAD,CAArE;AACH","sourcesContent":["/**\n * @flow\n * @file Function to create size in words out of number\n * @author Box\n */\n\n/**\n * Gets the size in words\n *\n * @param {number} size in bytes\n * @return {string} size in words\n */\nexport default function(size?: number): string {\n    if (!size) return '0 Byte';\n    const kilo: number = 1024;\n    const decimals: number = 2;\n    const sizes: string[] = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB'];\n    const exp: number = Math.floor(Math.log(size) / Math.log(kilo));\n    return `${parseFloat((size / kilo ** exp).toFixed(decimals))} ${sizes[exp]}`;\n}\n"],"file":"size.js"}