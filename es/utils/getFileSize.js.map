{"version":3,"sources":["../../src/utils/getFileSize.js"],"names":["filesize","defaultDigitalUnits","bcp47TagToDigitalUnits","fi","fr","ru","getFileSize","size","locale","settings","round","localizedUnits","symbols","reduce","unit","index"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,UAArB;AAEA,IAAMC,mBAAmB,GAAG,CAAC,GAAD,EAAM,IAAN,EAAY,IAAZ,EAAkB,IAAlB,EAAwB,IAAxB,EAA8B,IAA9B,EAAoC,IAApC,EAA0C,IAA1C,EAAgD,IAAhD,CAA5B;AACA,IAAMC,sBAAsB,GAAG;AAC3BC,EAAAA,EAAE,EAAE,CAAC,GAAD,EAAM,IAAN,EAAY,IAAZ,EAAkB,IAAlB,EAAwB,IAAxB,EAA8B,IAA9B,EAAoC,IAApC,EAA0C,IAA1C,EAAgD,IAAhD,CADuB;AAE3BC,EAAAA,EAAE,EAAE,CAAC,GAAD,EAAM,IAAN,EAAY,IAAZ,EAAkB,IAAlB,EAAwB,IAAxB,EAA8B,IAA9B,EAAoC,IAApC,EAA0C,IAA1C,EAAgD,IAAhD,CAFuB;AAG3BC,EAAAA,EAAE,EAAE,CAAC,GAAD,EAAM,IAAN,EAAY,IAAZ,EAAkB,IAAlB,EAAwB,IAAxB,EAA8B,IAA9B,EAAoC,IAApC,EAA0C,IAA1C,EAAgD,IAAhD;AAHuB,CAA/B;AAMA;;;;;;;AAMA,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAACC,IAAD,EAAyB;AAAA,MAAlBC,MAAkB,uEAAT,IAAS;AACzC,MAAMC,QAAQ,GAAG;AAAEC,IAAAA,KAAK,EAAE,CAAT;AAAYF,IAAAA,MAAM,EAANA;AAAZ,GAAjB;AAEA,MAAMG,cAAc,GAAGT,sBAAsB,CAACM,MAAD,CAA7C;;AACA,MAAIG,cAAJ,EAAoB;AAChB;AACAF,IAAAA,QAAQ,CAACG,OAAT,GAAmBX,mBAAmB,CAACY,MAApB,CAA2B,UAACD,OAAD,EAAUE,IAAV,EAAgBC,KAAhB,EAA0B;AACpEH,MAAAA,OAAO,CAACE,IAAD,CAAP,GAAgBH,cAAc,CAACI,KAAD,CAA9B;AACA,aAAOH,OAAP;AACH,KAHkB,EAGhB,EAHgB,CAAnB;AAIH;;AAED,SAAOZ,QAAQ,CAACO,IAAD,EAAOE,QAAP,CAAf;AACH,CAbD;;AAeA,eAAeH,WAAf","sourcesContent":["import filesize from 'filesize';\n\nconst defaultDigitalUnits = ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\nconst bcp47TagToDigitalUnits = {\n    fi: ['t', 'kt', 'Mt', 'Gt', 'Tt', 'Pt', 'Et', 'Zt', 'Yt'],\n    fr: ['o', 'Ko', 'Mo', 'Go', 'To', 'Po', 'Eo', 'Zo', 'Yo'],\n    ru: ['Б', 'КБ', 'МБ', 'ГБ', 'ТБ', 'ПБ', 'ЭБ', 'ЗБ', 'ЙБ'],\n};\n\n/**\n * Formats a file size from number of bytes to a human-readable, localized string.\n * @param {number} size Number of bytes\n * @param {string} [locale] Optional locale, defaults to 'en'\n * @returns {string} The size as a localized string\n */\nconst getFileSize = (size, locale = 'en') => {\n    const settings = { round: 1, locale };\n\n    const localizedUnits = bcp47TagToDigitalUnits[locale];\n    if (localizedUnits) {\n        // map default units to localized units, ex. { B: Б, KB: КБ, ... }\n        settings.symbols = defaultDigitalUnits.reduce((symbols, unit, index) => {\n            symbols[unit] = localizedUnits[index];\n            return symbols;\n        }, {});\n    }\n\n    return filesize(size, settings);\n};\n\nexport default getFileSize;\n"],"file":"getFileSize.js"}