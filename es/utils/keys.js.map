{"version":3,"sources":["../../src/utils/keys.js"],"names":["decode","event","modifier","keyIdentifier","key","ctrlKey","shiftKey","metaKey","indexOf","String","fromCharCode","Number","replace"],"mappings":"AAAA;;;;;;AAMA;;;;;;;;;;;;AAYA,SAASA,MAAT,CAAgBC,KAAhB,EAA4E;AACxE,MAAIC,QAAQ,GAAG,EAAf,CADwE,CAGxE;AACA;AACA;AACA;;AANwE,MAOhEC,aAPgE,GAO9CF,KAP8C,CAOhEE,aAPgE;AAQxE,MAAIC,GAAW,GAAGH,KAAK,CAACG,GAAN,IAAaD,aAAb,IAA8B,EAAhD,CARwE,CAUxE;;AACA,MAAIF,KAAK,CAACI,OAAV,EAAmB;AACfH,IAAAA,QAAQ,GAAG,SAAX;AACH,GAFD,MAEO,IAAID,KAAK,CAACK,QAAV,EAAoB;AACvBJ,IAAAA,QAAQ,GAAG,OAAX;AACH,GAFM,MAEA,IAAID,KAAK,CAACM,OAAV,EAAmB;AACtBL,IAAAA,QAAQ,GAAG,MAAX;AACH,GAjBuE,CAmBxE;AACA;AACA;;;AACA,MAAIE,GAAG,KAAKF,QAAZ,EAAsB;AAClBE,IAAAA,GAAG,GAAG,EAAN;AACH,GAxBuE,CA0BxE;AACA;;;AACA,MAAIA,GAAG,CAACI,OAAJ,CAAY,IAAZ,MAAsB,CAA1B,EAA6B;AACzB,QAAIJ,GAAG,KAAK,QAAZ,EAAsB;AAClBA,MAAAA,GAAG,GAAG,QAAN;AACH,KAFD,MAEO;AACHA,MAAAA,GAAG,GAAGK,MAAM,CAACC,YAAP,CAAoBC,MAAM,CAACP,GAAG,CAACQ,OAAJ,CAAY,IAAZ,EAAkB,IAAlB,CAAD,CAA1B,CAAN;AACH;AACJ,GAlCuE,CAoCxE;;;AACA,MAAI,CAACR,GAAL,EAAU;AACN,WAAO,EAAP;AACH,GAvCuE,CAyCxE;;;AACA,MAAIA,GAAG,KAAK,GAAZ,EAAiB;AACbA,IAAAA,GAAG,GAAG,OAAN;AACH,GA5CuE,CA8CxE;AACA;;;AACA,MAAIA,GAAG,KAAK,KAAZ,EAAmB;AACfA,IAAAA,GAAG,GAAG,QAAN;AACH,GAlDuE,CAoDxE;AACA;;;AACA,MAAIA,GAAG,KAAK,OAAR,IAAmBA,GAAG,KAAK,MAA3B,IAAqCA,GAAG,KAAK,MAA7C,IAAuDA,GAAG,KAAK,IAAnE,EAAyE;AACrEA,IAAAA,GAAG,kBAAWA,GAAX,CAAH;AACH;;AAED,MAAIF,QAAJ,EAAc;AACVA,IAAAA,QAAQ,IAAI,GAAZ;AACH;;AAED,SAAOA,QAAQ,GAAGE,GAAlB;AACH;;AAED,SAASJ,MAAT,G,CAAmB","sourcesContent":["/**\n * @flow\n * @file Helper functions for keyboard events\n * @author Box\n */\n\n/**\n * Function to decode key events into keys.\n * Works for both React synthetic and native events.\n *\n * Will output in the format Shift+I, Control+I...\n * Will outpur Space for spacebar.\n * Will return empty string for modifiers only.\n *\n * @public\n * @param {Event} event - Keyboard event\n * @return {string} Decoded keydown key or empty string\n */\nfunction decode(event: KeyboardEvent | SyntheticKeyboardEvent<HTMLElement>) {\n    let modifier = '';\n\n    // KeyboardEvent.key is the new spec supported in Chrome, Firefox and IE.\n    // KeyboardEvent.keyIdentifier is the old spec supported in Safari.\n    // Priority is given to the new spec.\n    // $FlowFixMe\n    const { keyIdentifier } = event;\n    let key: string = event.key || keyIdentifier || '';\n\n    // Get the modifiers on their own\n    if (event.ctrlKey) {\n        modifier = 'Control';\n    } else if (event.shiftKey) {\n        modifier = 'Shift';\n    } else if (event.metaKey) {\n        modifier = 'Meta';\n    }\n\n    // The key and keyIdentifier specs also include modifiers.\n    // Since we are manually getting the modifiers above we do\n    // not want to trap them again here.\n    if (key === modifier) {\n        key = '';\n    }\n\n    // keyIdentifier spec returns UTF8 char codes\n    // Need to convert them back to ascii.\n    if (key.indexOf('U+') === 0) {\n        if (key === 'U+001B') {\n            key = 'Escape';\n        } else {\n            key = String.fromCharCode(Number(key.replace('U+', '0x')));\n        }\n    }\n\n    // If nothing was pressed or we evaluated to nothing, just return\n    if (!key) {\n        return '';\n    }\n\n    // Special casing for space bar\n    if (key === ' ') {\n        key = 'Space';\n    }\n\n    // Edge bug which outputs \"Esc\" instead of \"Escape\"\n    // https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/5290772/\n    if (key === 'Esc') {\n        key = 'Escape';\n    }\n\n    // keyIdentifier spec does not prefix the word Arrow.\n    // Newer key spec does it automatically.\n    if (key === 'Right' || key === 'Left' || key === 'Down' || key === 'Up') {\n        key = `Arrow${key}`;\n    }\n\n    if (modifier) {\n        modifier += '+';\n    }\n\n    return modifier + key;\n}\n\nexport { decode }; // eslint-disable-line\n"],"file":"keys.js"}