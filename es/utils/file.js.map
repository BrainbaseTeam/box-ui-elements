{"version":3,"sources":["../../src/utils/file.js"],"names":["getProp","TYPED_ID_FILE_PREFIX","TYPED_ID_FOLDER_PREFIX","FILE_EXTENSION_BOX_NOTE","FILE_EXTENSION_GOOGLE_DOC","FILE_EXTENSION_GOOGLE_SHEET","FILE_EXTENSION_GOOGLE_SLIDE","FILE_EXTENSION_GOOGLE_SLIDE_LEGACY","FILE_EXT_REGEX","getTypedFileId","id","getTypedFolderId","isBoxNote","file","extension","isGSuiteExtension","getFileExtension","filename","result","exec"],"mappings":"AAAA;;;;;AAMA,OAAOA,OAAP,MAAoB,YAApB;AACA,SACIC,oBADJ,EAEIC,sBAFJ,EAGIC,uBAHJ,EAIIC,yBAJJ,EAKIC,2BALJ,EAMIC,2BANJ,EAOIC,kCAPJ,QAQO,cARP;AAWA,IAAMC,cAAc,GAAG,iBAAvB,C,CAA0C;;AAE1C;;;;;;;;AAOA,OAAO,SAASC,cAAT,CAAwBC,EAAxB,EAA4C;AAC/C,mBAAUT,oBAAV,SAAiCS,EAAjC;AACH;AAED;;;;;;AAKA,OAAO,SAASC,gBAAT,CAA0BD,EAA1B,EAA8C;AACjD,mBAAUR,sBAAV,SAAmCQ,EAAnC;AACH;AAED;;;;;;AAKA,OAAO,SAASE,SAAT,CAAmBC,IAAnB,EAA2C;AAC9C,SAAOA,IAAI,CAACC,SAAL,KAAmBX,uBAA1B;AACH;AAED;;;;;;AAKA,OAAO,SAASY,iBAAT,CAA2BD,SAA3B,EAAuD;AAC1D,SACIA,SAAS,KAAKV,yBAAd,IACAU,SAAS,KAAKT,2BADd,IAEAS,SAAS,KAAKR,2BAFd,IAGAQ,SAAS,KAAKP,kCAJlB;AAMH;AAED;;;;;;AAKA,OAAO,SAASS,gBAAT,CAA0BC,QAA1B,EAA2D;AAC9D,MAAI,OAAOA,QAAP,KAAoB,QAAxB,EAAkC;AAC9B,WAAO,EAAP;AACH;;AAED,MAAMC,MAAM,GAAGV,cAAc,CAACW,IAAf,CAAoBF,QAApB,CAAf;AACA,SAAOjB,OAAO,CAACkB,MAAD,EAAS,KAAT,EAAgB,EAAhB,CAAd;AACH","sourcesContent":["/**\n * @flow strict\n * @file Helper for throwing errors\n * @author Box\n */\n\nimport getProp from 'lodash/get';\nimport {\n    TYPED_ID_FILE_PREFIX,\n    TYPED_ID_FOLDER_PREFIX,\n    FILE_EXTENSION_BOX_NOTE,\n    FILE_EXTENSION_GOOGLE_DOC,\n    FILE_EXTENSION_GOOGLE_SHEET,\n    FILE_EXTENSION_GOOGLE_SLIDE,\n    FILE_EXTENSION_GOOGLE_SLIDE_LEGACY,\n} from '../constants';\nimport type { BoxItem } from '../common/types/core';\n\nconst FILE_EXT_REGEX = /\\.([0-9a-z]+)$/i; // Case insensitive regex to extract file extension without \".\"\n\n/**\n * Returns typed id for file. Useful for when\n * making file based XHRs where auth token\n * can be per file as used by Preview.\n * @param {id} id the file id\n * @return {string} typed id for file\n */\nexport function getTypedFileId(id: string): string {\n    return `${TYPED_ID_FILE_PREFIX}${id}`;\n}\n\n/**\n * Returns typed id for folder.\n * @param {id} id the folder id\n * @return {string} typed id for folder\n */\nexport function getTypedFolderId(id: string): string {\n    return `${TYPED_ID_FOLDER_PREFIX}${id}`;\n}\n\n/**\n * Determines if the file is a box note\n * @param {Object} file a box file\n * @return boolean true if it is a box note\n */\nexport function isBoxNote(file: BoxItem): boolean {\n    return file.extension === FILE_EXTENSION_BOX_NOTE;\n}\n\n/**\n * Determines whether a file extension is associated with a G Suite file.\n * @param {string} extension\n * @return boolean true if the extension is a valid G Suite extension\n */\nexport function isGSuiteExtension(extension: string): boolean {\n    return (\n        extension === FILE_EXTENSION_GOOGLE_DOC ||\n        extension === FILE_EXTENSION_GOOGLE_SHEET ||\n        extension === FILE_EXTENSION_GOOGLE_SLIDE ||\n        extension === FILE_EXTENSION_GOOGLE_SLIDE_LEGACY\n    );\n}\n\n/**\n * Returns the extension from the file name\n * @param {string} filename a Box file\n * @return {string} typed id for file\n */\nexport function getFileExtension(filename: string | void): string {\n    if (typeof filename !== 'string') {\n        return '';\n    }\n\n    const result = FILE_EXT_REGEX.exec(filename);\n    return getProp(result, '[1]', '');\n}\n"],"file":"file.js"}