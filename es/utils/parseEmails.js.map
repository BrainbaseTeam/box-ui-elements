{"version":3,"sources":["../../src/utils/parseEmails.js"],"names":["parseEmails","text","emails","match","map","c","trim","length","charAt","substr","checkIsExternalUser","isCurrentUserOwner","ownerEmailDomain","emailToCheck","split"],"mappings":"AAAA;;;;;;;;;;;AAWA,SAASA,WAAT,CAAqBC,IAArB,EAA2B;AACvB,MAAIA,IAAI,KAAK,IAAT,IAAiB,OAAOA,IAAP,KAAgB,WAArC,EAAkD;AAC9C;AACA,WAAO,EAAP;AACH;;AAED,MAAMC,MAAM,GAAGD,IAAI,CAACE,KAAL,CAAW,wCAAX,CAAf;;AAEA,MAAI,CAACD,MAAL,EAAa;AACT;AACA,WAAO,EAAP;AACH;;AAED,SAAOA,MAAM,CAACE,GAAP,CAAW,UAAAC,CAAC,EAAI;AACnB;AACAA,IAAAA,CAAC,GAAGA,CAAC,CAACC,IAAF,EAAJ,CAFmB,CAInB;AACA;;AACA,WAAOD,CAAC,CAACE,MAAF,IAAY,CAAZ,IAAiBF,CAAC,CAACG,MAAF,CAAS,CAAT,MAAgB,GAAjC,IAAwCH,CAAC,CAACG,MAAF,CAASH,CAAC,CAACE,MAAF,GAAW,CAApB,MAA2B,GAA1E,EAA+E;AAC3EF,MAAAA,CAAC,GAAGA,CAAC,CAACI,MAAF,CAAS,CAAT,EAAYJ,CAAC,CAACE,MAAF,GAAW,CAAvB,CAAJ;AACH;;AAED,WAAOF,CAAP;AACH,GAXM,CAAP;AAYH;AAED;;;;;;;;;;;;AAUA,OAAO,IAAMK,mBAAmB,GAAG,SAAtBA,mBAAsB,CAACC,kBAAD,EAAqBC,gBAArB,EAAuCC,YAAvC,EAAwD;AACvF,MAAI,CAACA,YAAD,IAAiB,CAACD,gBAAlB,IAAsC,CAACD,kBAA3C,EAA+D,OAAO,KAAP;AAC/D,SAAOE,YAAY,CAACC,KAAb,CAAmB,GAAnB,EAAwB,CAAxB,MAA+BF,gBAAtC;AACH,CAHM;AAKP,eAAeZ,WAAf","sourcesContent":["/**\n * Parse a string containing email addresses and potential contact information\n * or delimiters and return an array of email addresses\n *\n * @param  {string} text The input string\n * @return {array} A list of separated emails\n *\n * @example\n * parseEmails('Foo Bar <fbar@example.com>; Test User <test@example.com>')\n * returns [\"fbar@example.com\",\"test@example.com\"]\n */\nfunction parseEmails(text) {\n    if (text === null || typeof text === 'undefined') {\n        // Input text is either null or undefined\n        return [];\n    }\n\n    const emails = text.match(/[^\\s[<(]+@[^\\s<>@,/\\\\]+\\.[^\\s<>,;)]+/gi);\n\n    if (!emails) {\n        // No match pattern is found\n        return [];\n    }\n\n    return emails.map(c => {\n        // Trim the leading and trailing spaces\n        c = c.trim();\n\n        // Remove double quote pairs from both ends\n        // example '\"\"\"abc\"\"\"' will be altered to 'abc'\n        while (c.length >= 2 && c.charAt(0) === '\"' && c.charAt(c.length - 1) === '\"') {\n            c = c.substr(1, c.length - 2);\n        }\n\n        return c;\n    });\n}\n\n/**\n * Check if an email belongs to an external collaborator.\n * External collaborator icons will only be displayed in the USM if the current user owns\n * the item and if the collaborator's email domain differs from the owner's email domain.\n *\n * @param {boolean} isCurrentUserOwner\n * @param {string | null} ownerEmailDomain\n * @param {string | undefined} emailToCheck\n * @returns {boolean}\n */\nexport const checkIsExternalUser = (isCurrentUserOwner, ownerEmailDomain, emailToCheck) => {\n    if (!emailToCheck || !ownerEmailDomain || !isCurrentUserOwner) return false;\n    return emailToCheck.split('@')[1] !== ownerEmailDomain;\n};\n\nexport default parseEmails;\n"],"file":"parseEmails.js"}