{"version":3,"sources":["../../src/utils/sorter.js"],"names":["comparator","getBadItemError","isSortingNeeded","order","sortBy","sortDirection","Array","isArray","some","entry","by","direction","item","cache","item_collection","entries","sort","sortFeedItems","args","feedItems","reduce","items","itemContainer","concat","a","b","Date","parse","created_at"],"mappings":"AAAA;;;;;AAMA,OAAOA,UAAP,MAAuB,cAAvB;AACA,SAASC,eAAT,QAAgC,SAAhC;;AAYA,SAASC,eAAT,CAAyBC,KAAzB,EAA0CC,MAA1C,EAA0DC,aAA1D,EAAiG;AAC7F,SAAO,CAACC,KAAK,CAACC,OAAN,CAAcJ,KAAd,CAAD,IAAyB,CAACA,KAAK,CAACK,IAAN,CAAW,UAAAC,KAAK;AAAA,WAAIA,KAAK,CAACC,EAAN,KAAaN,MAAb,IAAuBK,KAAK,CAACE,SAAN,KAAoBN,aAA/C;AAAA,GAAhB,CAAjC;AACH;AAED;;;;;;;;;;;AASA,eAAe,UACXO,IADW,EAEXR,MAFW,EAGXC,aAHW,EAIXQ,KAJW,EAKK;AAAA,MACRC,eADQ,GAC8BF,IAD9B,CACRE,eADQ;;AAEhB,MAAI,CAACA,eAAL,EAAsB;AAClB,UAAMb,eAAe,EAArB;AACH;;AAJe,MAMRc,OANQ,GAMuCD,eANvC,CAMRC,OANQ;AAAA,MAMCZ,KAND,GAMuCW,eANvC,CAMCX,KAND;;AAOhB,MAAI,CAACG,KAAK,CAACC,OAAN,CAAcQ,OAAd,CAAL,EAA6B;AACzB,UAAMd,eAAe,EAArB;AACH;;AAED,MAAIC,eAAe,CAACC,KAAD,EAAQC,MAAR,EAAgBC,aAAhB,CAAnB,EAAmD;AAC/CU,IAAAA,OAAO,CAACC,IAAR,CAAahB,UAAU,CAACI,MAAD,EAASC,aAAT,EAAwBQ,KAAxB,CAAvB;AACAC,IAAAA,eAAe,CAACX,KAAhB,GAAwB,CACpB;AACIO,MAAAA,EAAE,EAAEN,MADR;AAEIO,MAAAA,SAAS,EAAEN;AAFf,KADoB,CAAxB;AAMH;;AAED,SAAOO,IAAP;AACH;AAED;;;;;;;;AAOA,OAAO,SAASK,aAAT,GAEM;AAAA,oCADNC,IACM;AADNA,IAAAA,IACM;AAAA;;AACT,MAAMC,SAAoB,GAAGD,IAAI,CAC5BE,MADwB,CACjB,UAACC,KAAD,EAAQC,aAAR,EAA0B;AAC9B,QAAIA,aAAJ,EAAmB;AACf,aAAOD,KAAK,CAACE,MAAN,CAAaD,aAAa,CAACP,OAA3B,CAAP;AACH;;AAED,WAAOM,KAAP;AACH,GAPwB,EAOtB,EAPsB,EAQxBL,IARwB,CAQnB,UAACQ,CAAD,EAAIC,CAAJ;AAAA,WAAUC,IAAI,CAACC,KAAL,CAAWH,CAAC,CAACI,UAAb,IAA2BF,IAAI,CAACC,KAAL,CAAWF,CAAC,CAACG,UAAb,CAArC;AAAA,GARmB,CAA7B;AAUA,SAAOT,SAAP;AACH","sourcesContent":["/**\n * @flow\n * @file Function to sort the item list\n * @author Box\n */\n\nimport comparator from './comparator';\nimport { getBadItemError } from './error';\nimport type { Annotations, AppActivityItems, Comments, FeedItems, Tasks } from '../common/types/feed';\nimport type {\n    SortBy,\n    SortDirection,\n    Order,\n    FlattenedBoxItem,\n    FlattenedBoxItemCollection,\n    FileVersions,\n} from '../common/types/core';\nimport type APICache from './Cache';\n\nfunction isSortingNeeded(order?: Order[], sortBy: SortBy, sortDirection: SortDirection): boolean {\n    return !Array.isArray(order) || !order.some(entry => entry.by === sortBy && entry.direction === sortDirection);\n}\n\n/**\n * Sorts items in place\n *\n * @param {Object} item box item object\n * @param {string} sortBy sort by field\n * @param {string} sortDirection the sort direction\n * @param {Cache} cache item cache\n * @return {void}\n */\nexport default function(\n    item: FlattenedBoxItem,\n    sortBy: SortBy,\n    sortDirection: SortDirection,\n    cache: APICache,\n): FlattenedBoxItem {\n    const { item_collection }: FlattenedBoxItem = item;\n    if (!item_collection) {\n        throw getBadItemError();\n    }\n\n    const { entries, order }: FlattenedBoxItemCollection = item_collection;\n    if (!Array.isArray(entries)) {\n        throw getBadItemError();\n    }\n\n    if (isSortingNeeded(order, sortBy, sortDirection)) {\n        entries.sort(comparator(sortBy, sortDirection, cache));\n        item_collection.order = [\n            {\n                by: sortBy,\n                direction: sortDirection,\n            },\n        ];\n    }\n\n    return item;\n}\n\n/**\n * Sort valid feed items, descending by created_at time.\n *\n * @param {Array<?Comments | ?Tasks | ?FileVersions>} args - Arguments list of each item container\n * type that is allowed in the feed.\n * @return {Array<?Comments | ?Tasks | ?FileVersions>} the sorted feed items\n */\nexport function sortFeedItems(\n    ...args: Array<?Comments | ?Tasks | ?FileVersions | ?AppActivityItems | ?Annotations>\n): FeedItems {\n    const feedItems: FeedItems = args\n        .reduce((items, itemContainer) => {\n            if (itemContainer) {\n                return items.concat(itemContainer.entries);\n            }\n\n            return items;\n        }, [])\n        .sort((a, b) => Date.parse(a.created_at) - Date.parse(b.created_at));\n\n    return feedItems;\n}\n"],"file":"sorter.js"}