{"version":3,"sources":["../../src/utils/dom.js"],"names":["React","scrollIntoViewIfNeeded","KEYS","OVERLAY_WRAPPER_CLASS","isInputElement","element","HTMLElement","tag","tagName","toLowerCase","getAttribute","isFocusableElement","isCheckbox","classList","contains","parentElement","isButton","isActivateKey","event","key","enter","space","isLeftClick","button","altKey","ctrlKey","metaKey","shiftKey","focus","root","selector","focusRoot","querySelector","scrollIntoView","itemEl","options","parentEl","closest","scrollMode","boundary","useIsContentOverflowed","contentRef","useState","isContentOverflowed","setIsContentOverflowed","useLayoutEffect","current","offsetWidth","scrollWidth","willOverflow"],"mappings":"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","sourcesContent":["/**\n * @flow\n * @file File for some simple dom utilities\n * @author Box\n */\nimport * as React from 'react';\nimport scrollIntoViewIfNeeded from 'scroll-into-view-if-needed';\n\nimport { KEYS, OVERLAY_WRAPPER_CLASS } from '../constants';\nimport './domPolyfill';\n\n/**\n * Checks if an html element is some type of input-able\n * element or text area type where characters can be typed.\n *\n * @param {HTMLElement|null} element - the dom element to check\n * @return {boolean} true if its one of the above elements\n */\nexport function isInputElement(element: HTMLElement | EventTarget | null): boolean {\n    if (!element || !(element instanceof HTMLElement)) {\n        return false;\n    }\n\n    const tag = element.tagName.toLowerCase();\n    return (\n        tag === 'input' ||\n        tag === 'select' ||\n        tag === 'textarea' ||\n        (tag === 'div' && !!element.getAttribute('contenteditable'))\n    );\n}\n\n/**\n * Checks if an html element is some kind of element\n * that the user would want to keep their focus on.\n *\n * @param {HTMLElement|null} element - the dom element to check\n * @return {boolean} true if its one of the above elements\n */\nexport function isFocusableElement(element: HTMLElement | EventTarget | null): boolean {\n    if (!element || !(element instanceof HTMLElement)) {\n        return false;\n    }\n\n    const tag = element.tagName.toLowerCase();\n\n    // Box React UI sensitive checks\n    const isCheckbox =\n        element.classList.contains('checkbox-pointer-target') ||\n        (element.parentElement instanceof HTMLElement\n            ? element.parentElement.classList.contains('checkbox-label')\n            : false);\n\n    const isButton =\n        element.classList.contains('btn-content') ||\n        (element.parentElement instanceof HTMLElement && element.parentElement.classList.contains('btn')) ||\n        (element.parentElement instanceof HTMLElement && element.parentElement.classList.contains('bdl-Button')) ||\n        false;\n\n    return isInputElement(element) || tag === 'button' || tag === 'a' || tag === 'option' || isCheckbox || isButton;\n}\n\n/**\n * Checks if a keyboard event is intended to activate an element.\n *\n * @param {SyntheticKeyboardEvent<HTMLElement>} event - The keyboard event\n * @returns {boolean} true if the event is intended to activate the element\n */\nexport function isActivateKey(event: SyntheticKeyboardEvent<HTMLElement>) {\n    return event.key === KEYS.enter || event.key === KEYS.space;\n}\n\n/**\n * Checks if a mouse event is an unmodified left click.\n *\n * @param {SyntheticMouseEvent<HTMLElement>} event - The mouse event\n * @returns {boolean} true if the event is an unmodified left click\n */\nexport function isLeftClick(event: SyntheticMouseEvent<HTMLElement>) {\n    return event.button === 0 && !event.altKey && !event.ctrlKey && !event.metaKey && !event.shiftKey;\n}\n\n/**\n * Focuses a DOM element if it exists.\n *\n * @param {HTMLElement} root - the root dom element to search\n * @param {string} selector - the query selector\n * @param {boolean|void} [focusRoot] - if root should be focused\n * @return {void}\n */\nexport function focus(root: ?HTMLElement, selector?: string, focusRoot: boolean = true): void {\n    if (!root) {\n        return;\n    }\n\n    if (!selector) {\n        root.focus();\n        return;\n    }\n\n    const element = root.querySelector(selector);\n    if (element && typeof element.focus === 'function') {\n        element.focus();\n    } else if (focusRoot) {\n        root.focus();\n    }\n}\n\n/**\n * Scrolls the container / modal / wrapper instead of the body\n *\n * @param {HTMLElement} itemEl - the base dom element to search\n * @param {Object} options - scroll into view options to override\n * @return {void}\n */\nexport function scrollIntoView(itemEl: ?HTMLElement, options?: Object = {}): void {\n    // @NOTE: breaks encapsulation but alternative is unknown child ref\n    if (itemEl) {\n        const parentEl = itemEl.closest(`.body, .modal, .${OVERLAY_WRAPPER_CLASS}`);\n        scrollIntoViewIfNeeded(itemEl, {\n            scrollMode: 'if-needed',\n            boundary: parentEl,\n            ...options,\n        });\n    }\n}\n\n/**\n *\n * A React hook that tells you if an element (passed in as a ref) has content that overflows its container,\n * i.e., if the text is wider than the box around it.\n *\n * @param {{ current: null | HTMLElement }} contentRef\n * @return {boolean}\n */\nexport function useIsContentOverflowed(contentRef: { current: null | HTMLElement }): boolean {\n    const [isContentOverflowed, setIsContentOverflowed] = React.useState<boolean>(false);\n\n    // This function should be set as the ref prop for the measured component.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    React.useLayoutEffect(() => {\n        const { current } = contentRef;\n        if (!current) {\n            return;\n        }\n        const { offsetWidth, scrollWidth } = current;\n        const willOverflow = offsetWidth < scrollWidth;\n        if (willOverflow !== isContentOverflowed) {\n            setIsContentOverflowed(willOverflow);\n        }\n    });\n\n    return isContentOverflowed;\n}\n"],"file":"dom.js"}