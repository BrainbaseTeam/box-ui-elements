{"version":3,"sources":["../../src/utils/webcrypto.js"],"names":["getCrypto","window","crypto","msCrypto","digest","algorithm","buffer","cryptoRef","subtle","Promise","resolve","reject","cryptoOperation","name","oncomplete","event","target","result","onerror","getRandomValues","copy","Uint8Array"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAASA,SAAT,GAA6B;AACzB,SAAOC,MAAM,CAACC,MAAP,IAAiBD,MAAM,CAACE,QAA/B;AACH;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,MAAT,CAAgBC,SAAhB,EAAmCC,MAAnC,EAA8E;AAC1E,MAAMC,SAAS,GAAGP,SAAS,EAA3B;;AAEA,MAAIO,SAAS,KAAKN,MAAM,CAACE,QAAzB,EAAmC;AAC/B,WAAOI,SAAS,CAACC,MAAV,CAAiBJ,MAAjB,CAAwBC,SAAxB,EAAmCC,MAAnC,CAAP;AACH,GALyE,CAO1E;AACA;;;AACA,SAAO,IAAIG,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,QAAMC,eAAe,GAAGL,SAAS,CAACC,MAAV,CAAiBJ,MAAjB,CAAwB;AAAES,MAAAA,IAAI,EAAER;AAAR,KAAxB,EAA6CC,MAA7C,CAAxB;;AAEAM,IAAAA,eAAe,CAACE,UAAhB,GAA6B,UAAAC,KAAK,EAAI;AAClCL,MAAAA,OAAO,CAACK,KAAK,CAACC,MAAN,CAAaC,MAAd,CAAP;AACH,KAFD;;AAIAL,IAAAA,eAAe,CAACM,OAAhB,GAA0BP,MAA1B;AACH,GARM,CAAP;AASH;AAED;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASQ,eAAT,CAAyBb,MAAzB,EAAyD;AACrD,MAAMC,SAAS,GAAGP,SAAS,EAA3B;AACA,MAAMoB,IAAI,GAAG,IAAIC,UAAJ,CAAef,MAAf,CAAb;AACAC,EAAAA,SAAS,CAACY,eAAV,CAA0BC,IAA1B;AAEA,SAAOA,IAAP;AACH;;AAED,SAASpB,SAAT,EAAoBI,MAApB,EAA4Be,eAA5B","sourcesContent":["/**\n * @flow\n * @file Wrapper to provide a consistent interface for the webcrypto API\n * @author Box\n */\n\n/**\n * Returns the correct crypto library based on browser implementation\n *\n * @return {Object}\n */\nfunction getCrypto(): Object {\n    return window.crypto || window.msCrypto;\n}\n\n/**\n * Returns a Promise of a digest generated from the\n * hash function and text given as parameters\n *\n * @param {string} algorithm\n * @param {ArrayBuffer} buffer\n * @return {Promise} Promise - resolves with an ArrayBuffer containing the digest result\n */\nfunction digest(algorithm: string, buffer: ArrayBuffer): Promise<ArrayBuffer> {\n    const cryptoRef = getCrypto();\n\n    if (cryptoRef !== window.msCrypto) {\n        return cryptoRef.subtle.digest(algorithm, buffer);\n    }\n\n    // IE11 implements an early version of the SubtleCrypto interface which doesn't use Promises\n    // See http://web-developer-articles.blogspot.com/2015/05/web-cryptography-api.html\n    return new Promise((resolve, reject) => {\n        const cryptoOperation = cryptoRef.subtle.digest({ name: algorithm }, buffer);\n\n        cryptoOperation.oncomplete = event => {\n            resolve(event.target.result);\n        };\n\n        cryptoOperation.onerror = reject;\n    });\n}\n\n/**\n * Given a buffer/byteArray fills it with random values and returns the same array\n *\n * @param {Uint8Array} buffer\n * @return {Uint8Array}\n */\nfunction getRandomValues(buffer: Uint8Array): Uint8Array {\n    const cryptoRef = getCrypto();\n    const copy = new Uint8Array(buffer);\n    cryptoRef.getRandomValues(copy);\n\n    return copy;\n}\n\nexport { getCrypto, digest, getRandomValues };\n"],"file":"webcrypto.js"}