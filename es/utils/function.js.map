{"version":3,"sources":["../../src/utils/function.js"],"names":["retryNumOfTimes","func","times","initialTimeout","backoffFactor","tries","timeout","Promise","resolve","hardReject","doTry","tryResolve","tryReject","then","catch","reason","executeAfterTimeout","time","setTimeout"],"mappings":"AAAA;;;;;;AAMA;;;;;;;;;;;;AAaA,SAASA,eAAT,CACIC,IADJ,EAEIC,KAFJ,EAKgB;AAAA,MAFZC,cAEY,uEAFc,CAEd;AAAA,MADZC,aACY,uEADa,CACb;AACZ,MAAIC,KAAK,GAAG,CAAZ;AACA,MAAIC,OAAO,GAAGH,cAAd;AAEA,SAAO,IAAII,OAAJ,CAAY,UAACC,OAAD,EAAUC,UAAV,EAAyB;AACxC,aAASC,KAAT,GAAiB;AACbL,MAAAA,KAAK,IAAI,CAAT;AAEA,UAAIE,OAAJ,CAAY,UAACI,UAAD,EAAaC,SAAb,EAA2B;AACnCX,QAAAA,IAAI,CAACU,UAAD,EAAaC,SAAb,EAAwBH,UAAxB,CAAJ;AACH,OAFD,EAGKI,IAHL,CAGUL,OAHV,EAIKM,KAJL,CAIW,UAAAC,MAAM,EAAI;AACb,YAAIV,KAAK,GAAGH,KAAZ,EAAmB;AACfI,UAAAA,OAAO,IAAIF,aAAX,CADe,CAEf;;AACAY,UAAAA,mBAAmB,CAACV,OAAD,CAAnB;AACA;AACH;;AAEDG,QAAAA,UAAU,CAACM,MAAD,CAAV;AACH,OAbL;AAcH;;AAED,aAASC,mBAAT,CAA6BC,IAA7B,EAAmC;AAC/BC,MAAAA,UAAU,CAAC,YAAM;AACbR,QAAAA,KAAK;AACR,OAFS,EAEPO,IAFO,CAAV;AAGH;;AAEDD,IAAAA,mBAAmB,CAACV,OAAD,CAAnB;AACH,GA3BM,CAAP;AA4BH,C,CAED;;;AACA,SAASN,eAAT","sourcesContent":["/**\n * @flow\n * @file Function utilities\n * @author Box\n */\n\n/**\n * Wrapper around the promises.create() method to allow a promise to retry\n * multiple times. A third parameter (besides resolve and reject) is passed\n * that allows the function to cancel retrying and immediately reject.\n *\n * @param {function} func - The function that performs the operation as a promise.\n * @param {number} times - Maximum number of times the operation should be attempted.\n * @param {number} [initialTimeout] - Optional timeout to retry the promise with after it fails, in milliseconds.\n * Otherwise, the input `func` is invoked after 1 event loop.\n * @param {number} [backoffFactor] - Optional exponential backoff factor to retry the promise with after it fails\n * @return {Promise} Promise - proxies the promise of the passed function.\n */\n\nfunction retryNumOfTimes(\n    func: Function,\n    times: number,\n    initialTimeout?: number = 0,\n    backoffFactor?: number = 1,\n): Promise<any> {\n    let tries = 0;\n    let timeout = initialTimeout;\n\n    return new Promise((resolve, hardReject) => {\n        function doTry() {\n            tries += 1;\n\n            new Promise((tryResolve, tryReject) => {\n                func(tryResolve, tryReject, hardReject);\n            })\n                .then(resolve)\n                .catch(reason => {\n                    if (tries < times) {\n                        timeout *= backoffFactor;\n                        // eslint-disable-next-line no-use-before-define\n                        executeAfterTimeout(timeout);\n                        return;\n                    }\n\n                    hardReject(reason);\n                });\n        }\n\n        function executeAfterTimeout(time) {\n            setTimeout(() => {\n                doTry();\n            }, time);\n        }\n\n        executeAfterTimeout(timeout);\n    });\n}\n\n// eslint-disable-next-line import/prefer-default-export\nexport { retryNumOfTimes };\n"],"file":"function.js"}