{"version":3,"sources":["../../src/utils/parseCSV.js"],"names":["parseCSV","text","components","match","map","c","trim","length","charAt","substr"],"mappings":"AAAA;;;;;;;;;;AAUA,SAASA,QAAT,CAAkBC,IAAlB,EAAwB;AACpB,MAAIA,IAAI,KAAK,IAAT,IAAiB,OAAOA,IAAP,KAAgB,WAArC,EAAkD;AAC9C;AACA,WAAO,EAAP;AACH,GAJmB,CAMpB;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMC,UAAU,GAAGD,IAAI,CAACE,KAAL,CAAW,wCAAX,CAAnB;;AACA,MAAI,CAACD,UAAL,EAAiB;AACb;AACA,WAAO,EAAP;AACH;;AAED,SAAOA,UAAU,CAACE,GAAX,CAAe,UAAAC,CAAC,EAAI;AACvB;AACAA,IAAAA,CAAC,GAAGA,CAAC,CAACC,IAAF,EAAJ,CAFuB,CAIvB;AACA;;AACA,WAAOD,CAAC,CAACE,MAAF,IAAY,CAAZ,IAAiBF,CAAC,CAACG,MAAF,CAAS,CAAT,MAAgB,GAAjC,IAAwCH,CAAC,CAACG,MAAF,CAASH,CAAC,CAACE,MAAF,GAAW,CAApB,MAA2B,GAA1E,EAA+E;AAC3EF,MAAAA,CAAC,GAAGA,CAAC,CAACI,MAAF,CAAS,CAAT,EAAYJ,CAAC,CAACE,MAAF,GAAW,CAAvB,CAAJ;AACH;;AAED,WAAOF,CAAP;AACH,GAXM,CAAP;AAYH;;AAED,eAAeL,QAAf","sourcesContent":["/**\n * Parse a comma separated values text and return an array of separated strings\n *\n * @param  {string} text The input string\n * @return {array} A list of separated strings\n *\n * @example\n * parse('a, b, \"c, d\"')\n * returns [\"a\", \"b\", \"c, d\"]\n */\nfunction parseCSV(text) {\n    if (text === null || typeof text === 'undefined') {\n        // Input text is either null or undefined\n        return [];\n    }\n\n    // Convert the comma separated text into array\n    //\n    // The logic of the regular expression is simple\n    // look ahead comma or carriage return and retrieve:\n    //   1. either strings that are surrounded by double quotes\n    //   2. or strings that do not contain comma and carriage return\n    const components = text.match(/(\".*?\"|[^\",\\r\\n]+)(?=\\s*[,\\r\\n]|\\s*$)/g);\n    if (!components) {\n        // No match pattern is found\n        return [];\n    }\n\n    return components.map(c => {\n        // Trim the leading and trailing spaces\n        c = c.trim();\n\n        // Remove double quote pairs from both ends\n        // example '\"\"\"abc\"\"\"' will be altered to 'abc'\n        while (c.length >= 2 && c.charAt(0) === '\"' && c.charAt(c.length - 1) === '\"') {\n            c = c.substr(1, c.length - 2);\n        }\n\n        return c;\n    });\n}\n\nexport default parseCSV;\n"],"file":"parseCSV.js"}