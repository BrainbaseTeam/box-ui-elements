{"version":3,"sources":["../../src/utils/flatten.js"],"names":["getBadItemError","TYPE_FOLDER","TYPE_FILE","TYPE_WEBLINK","list","folderAPI","fileAPI","weblinkAPI","items","forEach","item","id","type","api","Error","cache","getCache","key","getCacheKey","has","merge","set","push"],"mappings":"AAAA;;;;;AAMA,SAASA,eAAT,QAAgC,SAAhC;AACA,SAASC,WAAT,EAAsBC,SAAtB,EAAiCC,YAAjC,QAAqD,cAArD;;AAIA;;;;;;;;;;;;AAYA,eAAe,UAASC,IAAT,EAA0BC,SAA1B,EAAgDC,OAAhD,EAAkEC,UAAlE,EAAoG;AAC/G,MAAMC,KAAe,GAAG,EAAxB;AACAJ,EAAAA,IAAI,CAACK,OAAL,CAAa,UAACC,IAAD,EAAmB;AAAA,QACpBC,EADoB,GACED,IADF,CACpBC,EADoB;AAAA,QAChBC,IADgB,GACEF,IADF,CAChBE,IADgB;;AAE5B,QAAI,CAACD,EAAD,IAAO,CAACC,IAAZ,EAAkB;AACd,YAAMZ,eAAe,EAArB;AACH;;AAED,QAAIa,GAAJ;;AACA,YAAQD,IAAR;AACI,WAAKX,WAAL;AACIY,QAAAA,GAAG,GAAGR,SAAN;AACA;;AACJ,WAAKH,SAAL;AACIW,QAAAA,GAAG,GAAGP,OAAN;AACA;;AACJ,WAAKH,YAAL;AACIU,QAAAA,GAAG,GAAGN,UAAN;AACA;;AACJ;AACI,cAAM,IAAIO,KAAJ,CAAU,eAAV,CAAN;AAXR;;AAcA,QAAMC,KAAe,GAAGF,GAAG,CAACG,QAAJ,EAAxB;AACA,QAAMC,GAAW,GAAGJ,GAAG,CAACK,WAAJ,CAAgBP,EAAhB,CAApB;;AAEA,QAAII,KAAK,CAACI,GAAN,CAAUF,GAAV,CAAJ,EAAoB;AAChBF,MAAAA,KAAK,CAACK,KAAN,CAAYH,GAAZ,EAAiBP,IAAjB;AACH,KAFD,MAEO;AACHK,MAAAA,KAAK,CAACM,GAAN,CAAUJ,GAAV,EAAeP,IAAf;AACH;;AAEDF,IAAAA,KAAK,CAACc,IAAN,CAAWL,GAAX;AACH,GA/BD;AAgCA,SAAOT,KAAP;AACH","sourcesContent":["/**\n * @flow\n * @file Function to flatten an item list\n * @author Box\n */\n\nimport { getBadItemError } from './error';\nimport { TYPE_FOLDER, TYPE_FILE, TYPE_WEBLINK } from '../constants';\nimport type { BoxItem } from '../common/types/core';\nimport type APICache from './Cache';\n\n/**\n * Takes an item list and flattens it by moving\n * all item entries into the cache and replacing the list\n * entries with references to those items in the cache.\n * Web links are trated as files.\n *\n * @param {Array} list to flatten\n * @param {Folder} folderAPI api for files\n * @param {File} fileAPI api for files\n * @param {WebLink} weblinkAPI api for web links\n * @return {Array} list with items replaced with reference keys\n */\nexport default function(list: BoxItem[], folderAPI: FolderAPI, fileAPI: FileAPI, weblinkAPI: WebLinkAPI): string[] {\n    const items: string[] = [];\n    list.forEach((item: BoxItem) => {\n        const { id, type }: BoxItem = item;\n        if (!id || !type) {\n            throw getBadItemError();\n        }\n\n        let api;\n        switch (type) {\n            case TYPE_FOLDER:\n                api = folderAPI;\n                break;\n            case TYPE_FILE:\n                api = fileAPI;\n                break;\n            case TYPE_WEBLINK:\n                api = weblinkAPI;\n                break;\n            default:\n                throw new Error('Unknown Type!');\n        }\n\n        const cache: APICache = api.getCache();\n        const key: string = api.getCacheKey(id);\n\n        if (cache.has(key)) {\n            cache.merge(key, item);\n        } else {\n            cache.set(key, item);\n        }\n\n        items.push(key);\n    });\n    return items;\n}\n"],"file":"flatten.js"}