{"version":3,"sources":["../../src/utils/LocalStore.js"],"names":["Cache","KEY_PREFIX","SERVICE_VERSION","LocalStore","memoryStore","localStorage","window","isLocalStorageAvailable","canUseLocalStorage","key","setItem","buildKey","removeItem","e","value","JSON","stringify","set","item","getItem","parse","get","unset"],"mappings":";;;;;;AAAA;AACA;AACA;AACA;AACA;AAEA,OAAOA,KAAP,MAAkB,SAAlB;AAEA,IAAMC,UAAU,GAAG,YAAnB;AACA,IAAMC,eAAe,GAAG,GAAxB;;IAEMC,U;AAOF;AACJ;AACA;AACA;AACA;AACI,wBAAc;AAAA;;AACV,SAAKC,WAAL,GAAmB,IAAIJ,KAAJ,EAAnB;AACA,SAAKK,YAAL,GAAoBC,MAAM,CAACD,YAA3B;AACA,SAAKE,uBAAL,GAA+B,KAAKC,kBAAL,EAA/B;AACH;AAED;AACJ;AACA;AACA;AACA;AACA;AACA;;;;;6BACaC,G,EAAqB;AAC1B,uBAAUR,UAAV,cAAwBC,eAAxB,cAA2CO,GAA3C;AACH;AAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;yCACkC;AAC1B,UAAI,CAAC,KAAKJ,YAAV,EAAwB;AACpB,eAAO,KAAP;AACH;;AAED,UAAI;AACA,aAAKA,YAAL,CAAkBK,OAAlB,CAA0B,KAAKC,QAAL,CAAc,SAAd,CAA1B,EAAoD,WAApD;AACA,aAAKN,YAAL,CAAkBO,UAAlB,CAA6B,KAAKD,QAAL,CAAc,SAAd,CAA7B;AACA,eAAO,IAAP;AACH,OAJD,CAIE,OAAOE,CAAP,EAAU;AACR,eAAO,KAAP;AACH;AACJ;AAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;;4BACYJ,G,EAAaK,K,EAAY;AAC7B,UAAI,KAAKP,uBAAT,EAAkC;AAC9B,YAAI;AACA,eAAKF,YAAL,CAAkBK,OAAlB,CAA0B,KAAKC,QAAL,CAAcF,GAAd,CAA1B,EAA8CM,IAAI,CAACC,SAAL,CAAeF,KAAf,CAA9C;AACH,SAFD,CAEE,OAAOD,CAAP,EAAU,CACR;AACH;AACJ,OAND,MAMO;AACH,aAAKT,WAAL,CAAiBa,GAAjB,CAAqBR,GAArB,EAA0BK,KAA1B;AACH;AACJ;AAED;AACJ;AACA;AACA;AACA;AACA;AACA;;;;4BACYL,G,EAAsB;AAC1B,UAAI,KAAKF,uBAAT,EAAkC;AAC9B,YAAI;AACA,cAAMW,IAAI,GAAG,KAAKb,YAAL,CAAkBc,OAAlB,CAA0B,KAAKR,QAAL,CAAcF,GAAd,CAA1B,CAAb;;AACA,cAAI,CAACS,IAAL,EAAW;AACP,mBAAO,IAAP;AACH;;AAED,iBAAOH,IAAI,CAACK,KAAL,CAAWF,IAAX,CAAP;AACH,SAPD,CAOE,OAAOL,CAAP,EAAU;AACR,iBAAO,IAAP;AACH;AACJ,OAXD,MAWO;AACH,eAAO,KAAKT,WAAL,CAAiBiB,GAAjB,CAAqBZ,GAArB,CAAP;AACH;AACJ;AAED;AACJ;AACA;AACA;AACA;AACA;AACA;;;;+BACeA,G,EAAmB;AAC1B,UAAI,KAAKF,uBAAT,EAAkC;AAC9B,YAAI;AACA,eAAKF,YAAL,CAAkBO,UAAlB,CAA6B,KAAKD,QAAL,CAAcF,GAAd,CAA7B;AACH,SAFD,CAEE,OAAOI,CAAP,EAAU,CACR;AACH;;AAED;AACH;;AAED,WAAKT,WAAL,CAAiBkB,KAAjB,CAAuBb,GAAvB;AACH;;;;;;AAGL,eAAeN,UAAf","sourcesContent":["/**\n * @flow\n * @file Local storage wrapper that falls back to an in memory store\n * @author Box\n */\n\nimport Cache from './Cache';\n\nconst KEY_PREFIX = 'localStore';\nconst SERVICE_VERSION = '0';\n\nclass LocalStore {\n    memoryStore: APICache;\n\n    localStorage: typeof localStorage;\n\n    isLocalStorageAvailable: boolean;\n\n    /**\n     * [constructor]\n     *\n     * @return {void}\n     */\n    constructor() {\n        this.memoryStore = new Cache();\n        this.localStorage = window.localStorage;\n        this.isLocalStorageAvailable = this.canUseLocalStorage();\n    }\n\n    /**\n     * Builds a key for the session store\n     * @private\n     * @param  {string} key\n     *\n     * @return {string}\n     */\n    buildKey(key: string): string {\n        return `${KEY_PREFIX}/${SERVICE_VERSION}/${key}`;\n    }\n\n    /**\n     * Test to see browser can use local storage.\n     * See http://stackoverflow.com/questions/14555347\n     * Note that this will return false if we are actually hitting the maximum localStorage\n     * size (5MB / 2.5M chars)\n     *\n     * @private\n     * @return {boolean} True if browser can use localStore\n     */\n    canUseLocalStorage(): boolean {\n        if (!this.localStorage) {\n            return false;\n        }\n\n        try {\n            this.localStorage.setItem(this.buildKey('TestKey'), 'testValue');\n            this.localStorage.removeItem(this.buildKey('TestKey'));\n            return true;\n        } catch (e) {\n            return false;\n        }\n    }\n\n    /**\n     * Set an item\n     *\n     * @param {string} key\n     * @param {*} value\n     *\n     * @return {void}\n     */\n    setItem(key: string, value: any) {\n        if (this.isLocalStorageAvailable) {\n            try {\n                this.localStorage.setItem(this.buildKey(key), JSON.stringify(value));\n            } catch (e) {\n                // no-op\n            }\n        } else {\n            this.memoryStore.set(key, value);\n        }\n    }\n\n    /**\n     * Get an item\n     *\n     * @param  {string} key\n     *\n     * @return {*}\n     */\n    getItem(key: string): ?Object {\n        if (this.isLocalStorageAvailable) {\n            try {\n                const item = this.localStorage.getItem(this.buildKey(key));\n                if (!item) {\n                    return null;\n                }\n\n                return JSON.parse(item);\n            } catch (e) {\n                return null;\n            }\n        } else {\n            return this.memoryStore.get(key);\n        }\n    }\n\n    /**\n     * Remove an item\n     *\n     * @param  {string} key\n     *\n     * @return {void}\n     */\n    removeItem(key: string): void {\n        if (this.isLocalStorageAvailable) {\n            try {\n                this.localStorage.removeItem(this.buildKey(key));\n            } catch (e) {\n                // no-op\n            }\n\n            return;\n        }\n\n        this.memoryStore.unset(key);\n    }\n}\n\nexport default LocalStore;\n"],"file":"LocalStore.js"}