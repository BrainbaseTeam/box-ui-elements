{"version":3,"sources":["../../src/utils/Cache.js"],"names":["merge","Cache","cache","key","value","has","set","get","Error","prefix","Object","keys","forEach","startsWith","hasOwnProperty","call","undefined"],"mappings":";;;;;;AAAA;;;;;AAMA,OAAOA,MAAP,MAAkB,cAAlB;;IAGMC,K;;;AACF;;;;AAKA;;;;;AAKA,mBAAc;AAAA;;AACV,SAAKC,KAAL,GAAa,EAAb;AACH;AAED;;;;;;;;;;;wBAOIC,G,EAAaC,K,EAAkB;AAC/B,WAAKF,KAAL,CAAWC,GAAX,IAAkBC,KAAlB;AACH;AAED;;;;;;;;;;0BAOMD,G,EAAaC,K,EAAkB;AACjC,UAAI,KAAKC,GAAL,CAASF,GAAT,CAAJ,EAAmB;AACf,aAAKG,GAAL,CAASH,GAAT,EAAcH,MAAK,CAAC,EAAD,EAAK,KAAKO,GAAL,CAASJ,GAAT,CAAL,EAAoBC,KAApB,CAAnB;AACH,OAFD,MAEO;AACH,cAAM,IAAII,KAAJ,eAAiBL,GAAjB,oBAAN;AACH;AACJ;AAED;;;;;;;;;0BAMMA,G,EAAmB;AACrB,aAAO,KAAKD,KAAL,CAAWC,GAAX,CAAP;AACH;AAED;;;;;;;;;;6BAOSM,M,EAAsB;AAAA;;AAC3BC,MAAAA,MAAM,CAACC,IAAP,CAAY,KAAKT,KAAjB,EAAwBU,OAAxB,CAAgC,UAACT,GAAD,EAAiB;AAC7C,YAAIA,GAAG,CAACU,UAAJ,CAAeJ,MAAf,CAAJ,EAA4B;AACxB,iBAAO,KAAI,CAACP,KAAL,CAAWC,GAAX,CAAP;AACH;AACJ,OAJD;AAKH;AAED;;;;;;;;;wBAMIA,G,EAAsB;AACtB,aAAO,GAAGW,cAAH,CAAkBC,IAAlB,CAAuB,KAAKb,KAA5B,EAAmCC,GAAnC,CAAP;AACH;AAED;;;;;;;;;wBAMIA,G,EAAkB;AAClB,UAAI,KAAKE,GAAL,CAASF,GAAT,CAAJ,EAAmB;AACf,eAAO,KAAKD,KAAL,CAAWC,GAAX,CAAP;AACH;;AAED,aAAOa,SAAP;AACH;;;;;;AAGL,eAAef,KAAf","sourcesContent":["/**\n * @flow\n * @file A simple in-memory cache\n * @author Box\n */\n\nimport merge from 'lodash/merge';\nimport type { StringAnyMap } from '../common/types/core';\n\nclass Cache {\n    /**\n     * @property {*}\n     */\n    cache: StringAnyMap;\n\n    /**\n     * [constructor]\n     *\n     * @return {Cache} Cache instance\n     */\n    constructor() {\n        this.cache = {};\n    }\n\n    /**\n     * Caches a simple object in memory.\n     *\n     * @param {string} key The cache key\n     * @param {*} value The cache value\n     * @return {void}\n     */\n    set(key: string, value: any): void {\n        this.cache[key] = value;\n    }\n\n    /**\n     * Merges cached values for objects.\n     *\n     * @param {string} key The cache key\n     * @param {*} value The cache value\n     * @return {void}\n     */\n    merge(key: string, value: any): void {\n        if (this.has(key)) {\n            this.set(key, merge({}, this.get(key), value));\n        } else {\n            throw new Error(`Key ${key} not in cache!`);\n        }\n    }\n\n    /**\n     * Deletes object from in-memory cache.\n     *\n     * @param {string} key The cache key\n     * @return {void}\n     */\n    unset(key: string): void {\n        delete this.cache[key];\n    }\n\n    /**\n     * Deletes all object from in-memory cache\n     * that match the key as prefix.\n     *\n     * @param {string} prefix The cache key prefix\n     * @return {void}\n     */\n    unsetAll(prefix: string): void {\n        Object.keys(this.cache).forEach((key: string) => {\n            if (key.startsWith(prefix)) {\n                delete this.cache[key];\n            }\n        });\n    }\n\n    /**\n     * Checks if cache has provided key.\n     *\n     * @param {string} key The cache key\n     * @return {boolean} Whether the cache has key\n     */\n    has(key: string): boolean {\n        return {}.hasOwnProperty.call(this.cache, key);\n    }\n\n    /**\n     * Fetches a cached object from in-memory cache if available.\n     *\n     * @param {string} key Key of cached object\n     * @return {*} Cached object\n     */\n    get(key: string): any {\n        if (this.has(key)) {\n            return this.cache[key];\n        }\n\n        return undefined;\n    }\n}\n\nexport default Cache;\n"],"file":"Cache.js"}