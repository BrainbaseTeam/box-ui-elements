{"version":3,"sources":["../../../src/common/types/metadata.js"],"names":["FIELD_TYPE_DATE","FIELD_TYPE_ENUM","FIELD_TYPE_FLOAT","FIELD_TYPE_MULTISELECT","FIELD_TYPE_STRING"],"mappings":"AACA,SACIA,eADJ,EAEIC,eAFJ,EAGIC,gBAHJ,EAIIC,sBAJJ,EAKIC,iBALJ,QAMO,mDANP","sourcesContent":["// @flow strict\nimport {\n    FIELD_TYPE_DATE,\n    FIELD_TYPE_ENUM,\n    FIELD_TYPE_FLOAT,\n    FIELD_TYPE_MULTISELECT,\n    FIELD_TYPE_STRING,\n} from '../../features/metadata-instance-fields/constants';\nimport type { SkillCards } from './skills';\n\ntype MetadataFieldType =\n    | typeof FIELD_TYPE_DATE\n    | typeof FIELD_TYPE_ENUM\n    | typeof FIELD_TYPE_FLOAT\n    | typeof FIELD_TYPE_MULTISELECT\n    | typeof FIELD_TYPE_STRING;\n\ntype MetadataTemplateFieldOption = {\n    id?: string,\n    key: string,\n};\n\ntype MetadataTemplateField = {\n    description?: string,\n    displayName: string,\n    hidden?: boolean,\n    id: string,\n    isHidden?: boolean,\n    key: string, // V2\n    options?: Array<MetadataTemplateFieldOption>, // V3\n    type: MetadataFieldType,\n};\n\ntype MetadataTemplate = {\n    displayName?: string,\n    fields?: Array<MetadataTemplateField>,\n    hidden?: boolean,\n    id: string,\n    isHidden?: boolean,\n    scope: string, // V2\n    templateKey: string, // V3\n};\n\ntype MetadataTemplateSchemaResponse = {\n    data?: MetadataTemplate,\n};\n\ntype MetadataSkillsTemplate = {\n    boxSkillsCards?: SkillCards,\n};\n\n// $FlowFixMe flow strict doesn't like use of \"any\"\ntype MetadataFieldValue = string | number | Array<any>;\n\ntype MetadataFields = { [string]: MetadataFieldValue };\n\ntype MetadataQueryInstanceTypeField = {\n    displayName: string,\n    key: string,\n    options?: MetadataTemplateFieldOption,\n    type: string,\n    value: ?MetadataFieldValue,\n};\n\ntype MetadataQueryInstanceTemplate = {\n    fields: Array<MetadataQueryInstanceTypeField>,\n    id: string,\n};\n\ntype MetadataType = {\n    enterprise?: MetadataQueryInstanceTemplate,\n    global?: MetadataSkillsTemplate,\n};\n\ntype MetadataCascadePolicy = {\n    canEdit?: boolean,\n    id?: string,\n};\n\ntype MetadataCascadingPolicyData = {\n    id?: string,\n    isEnabled: boolean,\n    overwrite: boolean,\n};\n\ntype MetadataInstance = {\n    canEdit: boolean,\n    cascadePolicy?: MetadataCascadePolicy,\n    data: MetadataFields,\n    id: string,\n};\n\ntype MetadataInstanceV2 = {\n    $canEdit: boolean,\n    $id: string,\n    $parent: string,\n    $scope: string,\n    $template: string,\n    $type: string,\n    $typeVersion: number,\n    $version: number,\n};\n\ntype MetadataEditor = {\n    hasError?: boolean,\n    instance: MetadataInstance,\n    isDirty?: boolean,\n    template: MetadataTemplate,\n};\n\nexport type {\n    MetadataFieldType,\n    MetadataTemplateFieldOption,\n    MetadataTemplateField,\n    MetadataTemplate,\n    MetadataTemplateSchemaResponse,\n    MetadataFieldValue,\n    MetadataFields,\n    MetadataQueryInstanceTypeField,\n    MetadataType,\n    MetadataCascadePolicy,\n    MetadataCascadingPolicyData,\n    MetadataInstanceV2,\n    MetadataEditor,\n};\n"],"file":"metadata.js"}