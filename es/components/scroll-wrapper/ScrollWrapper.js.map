{"version":3,"sources":["../../../src/components/scroll-wrapper/ScrollWrapper.js"],"names":["React","classNames","noop","throttle","ScrollWrapper","props","shouldShowTopScrollShadow","shouldShowBottomScrollShadow","newState","getScrollShadowState","setState","scrollRef","addEventListener","throttledOnContentScroll","observer","observe","attributes","childlist","subtree","scrollTop","scrollHeight","clientHeight","onContentScroll","MutationObserver","disconnect","removeEventListener","children","className","scrollRefFn","shadowSize","rest","state","classes","el","Component"],"mappings":"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","sourcesContent":["// @flow\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport noop from 'lodash/noop';\nimport throttle from 'lodash/throttle';\n\nimport './ScrollWrapper.scss';\n\ntype Props = {\n    /** Contents for this element */\n    children: React.Node,\n    /** Optional class name(s) to pass thru to the component */\n    className?: string,\n    /** Optional function to get the scrollRef in parent components */\n    scrollRefFn: (?HTMLElement) => void,\n    /** Optional prop to set the shadow size, like background-size ('cover' or 'contain') */\n    shadowSize: 'cover' | 'contain',\n};\n\ntype State = {\n    shouldShowBottomScrollShadow: boolean,\n    shouldShowTopScrollShadow: boolean,\n};\n\nclass ScrollWrapper extends React.Component<Props, State> {\n    static defaultProps = {\n        scrollRefFn: noop,\n        shadowSize: 'cover',\n    };\n\n    state = {\n        shouldShowTopScrollShadow: false,\n        shouldShowBottomScrollShadow: false,\n    };\n\n    constructor(props: Props) {\n        super(props);\n\n        this.observer = new MutationObserver(this.throttledOnContentScroll);\n    }\n\n    componentDidMount = () => {\n        const newState = this.getScrollShadowState();\n        this.setState(newState);\n\n        if (this.scrollRef) {\n            this.scrollRef.addEventListener('transitionend', this.throttledOnContentScroll);\n\n            // Apparently, flow only allows for one truthy check per command, so I have to either:\n            // 1) duplicate this check per call, or\n            // 2) nest if checks (_slightly more performant_)\n            if (this.scrollRef) {\n                this.observer.observe(this.scrollRef, {\n                    attributes: true,\n                    childlist: true,\n                    subtree: true,\n                });\n            }\n        }\n    };\n\n    componentWillUnmount() {\n        this.observer.disconnect();\n\n        if (this.scrollRef) {\n            this.scrollRef.removeEventListener('transitionend', this.throttledOnContentScroll);\n        }\n    }\n\n    onContentScroll = (): void => {\n        const newState = this.getScrollShadowState();\n        this.setState(newState);\n    };\n\n    getScrollShadowState = () => {\n        const { scrollTop, scrollHeight, clientHeight } = this.scrollRef || {};\n        const newState = {};\n\n        if (scrollTop > 0 && scrollTop < scrollHeight - clientHeight) {\n            newState.shouldShowTopScrollShadow = true;\n            newState.shouldShowBottomScrollShadow = true;\n        }\n\n        if (scrollTop === 0) {\n            newState.shouldShowTopScrollShadow = false;\n        }\n\n        if (scrollTop < scrollHeight - clientHeight) {\n            newState.shouldShowBottomScrollShadow = true;\n        }\n\n        if (scrollTop === scrollHeight - clientHeight) {\n            newState.shouldShowBottomScrollShadow = false;\n        }\n\n        return newState;\n    };\n\n    observer: MutationObserver;\n\n    scrollRef: ?HTMLDivElement = null;\n\n    // Throttle to 10 fps\n    throttledOnContentScroll = throttle(this.onContentScroll, 100);\n\n    render() {\n        const { children, className = '', scrollRefFn, shadowSize, ...rest } = this.props;\n        const { shouldShowTopScrollShadow, shouldShowBottomScrollShadow } = this.state;\n\n        const classes = classNames(`scroll-container`, className, {\n            'is-showing-top-shadow': shouldShowTopScrollShadow,\n            'is-showing-bottom-shadow': shouldShowBottomScrollShadow,\n        });\n\n        return (\n            <div className={classes} {...rest}>\n                <div\n                    className={classNames('scroll-wrap-container', `style--${shadowSize}`)}\n                    onScroll={this.throttledOnContentScroll}\n                    ref={el => {\n                        this.scrollRef = el;\n                        scrollRefFn(el);\n                    }}\n                >\n                    {children}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default ScrollWrapper;\n"],"file":"ScrollWrapper.js"}