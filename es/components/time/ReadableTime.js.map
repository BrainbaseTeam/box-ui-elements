{"version":3,"sources":["../../../src/components/time/ReadableTime.js"],"names":["React","FormattedMessage","FormattedRelative","FormattedDate","ONE_HOUR_MS","isToday","isYesterday","isCurrentYear","messages","ReadableTime","timestamp","relativeThreshold","allowFutureTimestamps","alwaysShowTime","showWeekday","relativeIfNewerThanTs","Date","now","shouldShowYear","dateMessage","eventTime","date","weekday","eventTimeToday","eventTimeYesterday","eventTimeWeekdayLong","eventTimeDate","eventTimeDateShort","output","time","Math","abs"],"mappings":"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","sourcesContent":["// @flow\nimport React from 'react';\nimport { FormattedMessage, FormattedRelative, FormattedDate } from 'react-intl';\n\nimport { ONE_HOUR_MS } from '../../constants';\nimport { isToday, isYesterday, isCurrentYear } from '../../utils/datetime';\n\nimport messages from './messages';\n\ntype Props = {\n    /** A boolean that will cause future timestamps (usually due to incorrect computer time) to be corrected to the isToday message */\n    allowFutureTimestamps?: boolean,\n    /** A boolean that will include the time alongside the date, if the date is shown */\n    alwaysShowTime?: boolean,\n    /** The number of milliseconds before now that a relative (vs. absolute) time should be displayed (Default: 1 hour) */\n    relativeThreshold?: number,\n    /** A boolean that will include the weekday alongside the date, if the date is shown */\n    showWeekday?: boolean,\n    /** The timestamp which should be used to display the date */\n    timestamp: number,\n};\n\nconst ReadableTime = ({\n    timestamp,\n    relativeThreshold = ONE_HOUR_MS,\n    allowFutureTimestamps = true,\n    alwaysShowTime = false,\n    showWeekday = false,\n}: Props) => {\n    const relativeIfNewerThanTs = Date.now() - relativeThreshold;\n    const shouldShowYear = !isCurrentYear(timestamp);\n\n    if (!allowFutureTimestamps && timestamp > Date.now()) {\n        // TODO: what is the reasoning behind this rule?\n        timestamp = relativeIfNewerThanTs; // Default to 'Today' for timestamps that would show a future date\n    }\n\n    // e.g. Oct 5, 2018\n    let dateMessage = messages.eventTime;\n    let date = null;\n    let weekday = null;\n    if (isToday(timestamp)) {\n        // e.g. Today at 12:30 PM\n        dateMessage = messages.eventTimeToday;\n    } else if (isYesterday(timestamp)) {\n        // e.g. Yesterday at 11:30 AM\n        dateMessage = messages.eventTimeYesterday;\n    } else if (showWeekday) {\n        // e.g. Monday, Oct 5, 2018\n        dateMessage = messages.eventTimeWeekdayLong;\n        weekday = <FormattedDate value={timestamp} weekday=\"long\" />;\n    } else if (shouldShowYear && alwaysShowTime) {\n        // e.g. Oct 5, 2018 at 10:30 PM\n        dateMessage = messages.eventTimeDate;\n    } else if (!shouldShowYear && alwaysShowTime) {\n        // e.g. Oct 5 at 10:30 PM\n        dateMessage = messages.eventTimeDateShort;\n        date = <FormattedDate value={timestamp} month=\"short\" day=\"numeric\" />;\n    } else if (!shouldShowYear && !alwaysShowTime) {\n        // e.g. Oct 5\n        return <FormattedDate value={timestamp} month=\"short\" day=\"numeric\" />;\n    }\n\n    let output = <FormattedMessage {...dateMessage} values={{ time: timestamp, date, weekday }} />;\n\n    // if the time stamp is within +/- the relative threshold for the current time,\n    // print the default time format\n    if (Math.abs(Date.now() - timestamp) <= relativeThreshold) {\n        output = <FormattedRelative value={timestamp} />;\n    }\n\n    return output;\n};\n\nexport default ReadableTime;\n"],"file":"ReadableTime.js"}