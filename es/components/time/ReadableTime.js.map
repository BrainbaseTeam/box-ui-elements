{"version":3,"sources":["../../../src/components/time/ReadableTime.js"],"names":["injectIntl","ONE_HOUR_MS","isToday","isYesterday","isCurrentYear","messages","nonUppercaseLocales","ReadableTime","intl","timestamp","relativeThreshold","allowFutureTimestamps","alwaysShowTime","showWeekday","uppercase","shouldUppercase","includes","locale","relativeIfNewerThanTs","Date","now","shouldShowYear","dateMessage","eventTime","date","weekday","output","eventTimeToday","eventTimeYesterday","eventTimeWeekdayLong","formatDate","eventTimeDate","eventTimeDateShort","month","day","toLocaleUpperCase","values","time","formatMessage","timeDiff","Math","abs","formatRelativeTime","formatRelative","ReadableTimeComponent"],"mappings":"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","sourcesContent":["// @flow\n\nimport { injectIntl } from 'react-intl';\n\nimport { ONE_HOUR_MS } from '../../constants';\nimport { isToday, isYesterday, isCurrentYear } from '../../utils/datetime';\n\nimport messages from './messages';\n\ntype Props = {\n    /** A boolean that will cause future timestamps (usually due to incorrect computer time) to be corrected to the isToday message */\n    allowFutureTimestamps?: boolean,\n    /** A boolean that will include the time alongside the date, if the date is shown */\n    alwaysShowTime?: boolean,\n    /** intl object */\n    intl: any,\n    /** The number of milliseconds before now that a relative (vs. absolute) time should be displayed (Default: 1 hour) */\n    relativeThreshold?: number,\n    /** A boolean that will include the weekday alongside the date, if the date is shown */\n    showWeekday?: boolean,\n    /** The timestamp which should be used to display the date */\n    timestamp: number,\n    /** Whether to generate and make locale aware an uppercase version of the string */\n    uppercase?: boolean,\n};\n\n// exclude languages that do not have a grammar for uppercase (e.g. russian)\nconst nonUppercaseLocales = ['ru'];\nconst ReadableTime = ({\n    intl,\n    timestamp,\n    relativeThreshold = ONE_HOUR_MS,\n    allowFutureTimestamps = true,\n    alwaysShowTime = false,\n    showWeekday = false,\n    uppercase = false,\n}: Props): string => {\n    const shouldUppercase = uppercase && !nonUppercaseLocales.includes(intl.locale);\n    const relativeIfNewerThanTs = Date.now() - relativeThreshold;\n    const shouldShowYear = !isCurrentYear(timestamp);\n\n    if (!allowFutureTimestamps && timestamp > Date.now()) {\n        // TODO: what is the reasoning behind this rule?\n        timestamp = relativeIfNewerThanTs; // Default to 'Today' for timestamps that would show a future date\n    }\n\n    // e.g. Oct 5, 2018\n    let dateMessage = messages.eventTime;\n    let date = null;\n    let weekday = null;\n    let output;\n    if (isToday(timestamp)) {\n        // e.g. Today at 12:30 PM\n        dateMessage = messages.eventTimeToday;\n    } else if (isYesterday(timestamp)) {\n        // e.g. Yesterday at 11:30 AM\n        dateMessage = messages.eventTimeYesterday;\n    } else if (showWeekday) {\n        // e.g. Monday, Oct 5, 2018\n        dateMessage = messages.eventTimeWeekdayLong;\n        weekday = intl.formatDate(timestamp, { weekday: 'long' });\n    } else if (shouldShowYear && alwaysShowTime) {\n        // e.g. Oct 5, 2018 at 10:30 PM\n        dateMessage = messages.eventTimeDate;\n    } else if (!shouldShowYear && alwaysShowTime) {\n        // e.g. Oct 5 at 10:30 PM\n        dateMessage = messages.eventTimeDateShort;\n        date = intl.formatDate(timestamp, { month: 'short', day: 'numeric' });\n    } else if (!shouldShowYear && !alwaysShowTime) {\n        // e.g. Oct 5\n        output = intl.formatDate(timestamp, { month: 'short', day: 'numeric' });\n        return shouldUppercase ? output.toLocaleUpperCase(intl.locale) : output;\n    }\n    const values = { time: timestamp, date, weekday };\n    output = intl.formatMessage(dateMessage, values);\n\n    // if the time stamp is within +/- the relative threshold for the current time,\n    // print the default time format\n    const timeDiff = timestamp - Date.now();\n    if (Math.abs(timeDiff) <= relativeThreshold) {\n        if (intl.formatRelativeTime) {\n            // react-intl v3\n            output = intl.formatRelativeTime(timeDiff);\n        } else {\n            // react-intl v2\n            output = intl.formatRelative(timestamp);\n        }\n    }\n\n    return shouldUppercase ? output.toLocaleUpperCase(intl.locale) : output;\n};\n\nexport { ReadableTime as ReadableTimeComponent };\nexport default injectIntl(ReadableTime);\n"],"file":"ReadableTime.js"}