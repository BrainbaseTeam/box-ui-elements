{"version":3,"sources":["../../../src/components/select-field/BaseSelectField.js"],"names":["React","classNames","uniqueId","findIndex","FormattedMessage","injectIntl","scrollIntoView","IconCheck","SelectButton","DatalistItem","PopperComponent","SelectFieldDropdown","PLACEMENT_BOTTOM_END","PLACEMENT_BOTTOM_START","SearchForm","CLEAR","ARROW_DOWN","ARROW_UP","ENTER","ESCAPE","SPACE","TAB","messages","stopDefaultEvent","event","preventDefault","stopPropagation","toggleOption","options","value","index","indexOf","push","splice","defaultOptionRenderer","displayText","BaseSelectField","props","text","optionIndex","element","toLowerCase","includes","setActiveItem","setState","searchText","container","selectFieldContainerRef","current","isInside","target","Node","contains","closeDropdown","shouldScrollIntoView","activeItemIndex","setActiveItemID","id","state","itemEl","document","getElementById","activeItemID","block","selectedItems","onChange","selectedItem","onOptionSelect","isOpen","openDropdown","handleChange","key","blurExceptionClassNames","exceptionClasses","relatedTarget","every","className","classList","shouldShowClearOption","shouldShowSearchInput","itemCount","length","nextIndex","prevIndex","isClearOption","handleClearClick","selectOption","lowerCaseKey","option","searchInputRef","focus","addEventListener","handleDocumentClick","removeEventListener","multiple","selectMultiOption","selectSingleOption","filter","isSubstring","defaultValue","selectedValues","hasDefaultValue","item","getFilteredOptions","newSelectedValues","slice","defaultOptionIndex","handleOptionSelect","placeholder","title","selectedItemCount","selectedOptions","map","join","intl","getSearchInput","updateSearchText","formatMessage","searchPlaceholder","buttonElProps","buttonProps","isDisabled","error","buttonText","renderButtonText","selectFieldID","onClick","handleButtonClick","onKeyDown","handleButtonKeyDown","role","optionRenderer","separatorIndices","filteredOptions","noResults","selectOptions","isSelected","itemProps","onMouseEnter","isActive","forEach","separatorIndex","createRef","isEscapedWithReference","isRightAligned","isScrollable","dropdownPlacement","dropdownModifiers","preventOverflow","escapeWithReference","handleBlur","handleKeyDown","renderSelectButton","renderSearchInput","renderSelectOptions","Component","BaseSelectFieldBase"],"mappings":"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","sourcesContent":["// @flow\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport uniqueId from 'lodash/uniqueId';\nimport findIndex from 'lodash/findIndex';\nimport { FormattedMessage, injectIntl } from 'react-intl';\n\nimport { scrollIntoView } from '../../utils/dom';\nimport IconCheck from '../../icons/general/IconCheck';\nimport SelectButton from '../select-button';\nimport DatalistItem from '../datalist-item';\nimport PopperComponent from '../popper';\nimport SelectFieldDropdown from './SelectFieldDropdown';\nimport type { SelectOptionValueProp, SelectOptionProp } from './props';\nimport { PLACEMENT_BOTTOM_END, PLACEMENT_BOTTOM_START } from '../popper/constants';\nimport SearchForm from '../search-form/SearchForm';\nimport CLEAR from './constants';\nimport { ARROW_DOWN, ARROW_UP, ENTER, ESCAPE, SPACE, TAB } from '../../common/keyboard-events';\n\nimport messages from './messages';\n\nimport './SelectField.scss';\n\nfunction stopDefaultEvent(event) {\n    event.preventDefault();\n    event.stopPropagation();\n}\n\nfunction toggleOption(options, value) {\n    const index = options.indexOf(value);\n\n    if (index === -1) {\n        options.push(value);\n    } else {\n        options.splice(index, 1);\n    }\n}\n\ntype Props = {\n    /** List of classnames of the relatedTarget that should prevent handleBlur from firing */\n    blurExceptionClassNames?: Array<string>,\n    /** Props to add to the button element */\n    buttonProps?: Object,\n    /** CSS class for the select container */\n    className?: string,\n    /** The fallback option value when other options are all unselected. Default option cannot be selected at the same time as other options. `selectedValues` must not be empty when this option is used. */\n    defaultValue?: SelectOptionValueProp,\n    /** An optional error to show within a tooltip. */\n    error?: React.Node,\n    /* Intl object */\n    intl: Object,\n    /** The select button is disabled if true */\n    isDisabled?: boolean,\n    /** Whether to allow the dropdown to overflow its boundaries and remain attached to its reference */\n    isEscapedWithReference?: boolean,\n    /** Whether to align the dropdown to the right */\n    isRightAligned: boolean,\n    /** The select field overlay (dropdown) will have a scrollbar and max-height if true * */\n    isScrollable?: boolean,\n    multiple: boolean,\n    /** Function will be called with an array of all selected options after user selects a new option */\n    onChange: Function,\n    /** Function will be called with the user selected option (even on deselect or when the option was previously selected) */\n    onOptionSelect?: Function,\n    /** Function that allows custom rendering of select field options. When not provided the component will only render the option's displayText by default */\n    optionRenderer: (option: SelectOptionProp) => React.Node,\n    /** List of options (displayText, value) */\n    options: Array<SelectOptionProp>,\n    /** The select button text shown when no options are selected. */\n    placeholder?: string | React.Element<any>,\n    /** The currently selected option values (can be empty) */\n    selectedValues: Array<SelectOptionValueProp>,\n    /** Array of ordered indices indicating where to insert separators (ex. index 2 means insert a separator after option 2) */\n    separatorIndices: Array<number>,\n    /** Boolean to determine whether or not to show the clear option */\n    shouldShowClearOption?: boolean,\n    /** Boolean to determine whether or not to show the search field */\n    shouldShowSearchInput?: boolean,\n    /** The select button text (by default, component will use comma separated list of all selected option displayText) */\n    title?: string | React.Element<any>,\n};\n\ntype State = {\n    activeItemID: ?string,\n    activeItemIndex: number,\n    isOpen: boolean,\n    searchText: string,\n    shouldScrollIntoView: boolean,\n};\n\nfunction defaultOptionRenderer({ displayText }: SelectOptionProp) {\n    return (\n        <span className=\"bdl-SelectField-optionText\" title={displayText}>\n            {displayText}\n        </span>\n    );\n}\n\nclass BaseSelectField extends React.Component<Props, State> {\n    static defaultProps = {\n        buttonProps: {},\n        isDisabled: false,\n        isRightAligned: false,\n        isScrollable: false,\n        multiple: false,\n        optionRenderer: defaultOptionRenderer,\n        options: [],\n        selectedValues: [],\n        separatorIndices: [],\n        shouldShowClearOption: false,\n        shouldShowSearchInput: false,\n    };\n\n    constructor(props: Props) {\n        super(props);\n\n        this.selectFieldID = uniqueId('selectfield');\n\n        this.selectFieldContainerRef = React.createRef();\n\n        this.state = {\n            activeItemID: null,\n            activeItemIndex: -1,\n            isOpen: false,\n            searchText: '',\n            shouldScrollIntoView: false,\n        };\n    }\n\n    componentWillUnmount() {\n        if (this.state.isOpen) {\n            // Clean-up global click handlers\n            document.removeEventListener('click', this.handleDocumentClick);\n        }\n    }\n\n    updateSearchText = (text: string) => {\n        const { options } = this.props;\n        const optionIndex = findIndex(options, element =>\n            element.displayText.toLowerCase().includes(text.toLowerCase()),\n        );\n\n        if (optionIndex >= 0) {\n            this.setActiveItem(optionIndex);\n        }\n\n        this.setState({\n            searchText: text,\n        });\n    };\n\n    handleDocumentClick = (event: MouseEvent) => {\n        const container = this.selectFieldContainerRef.current;\n        const isInside =\n            (container && event.target instanceof Node && container.contains(event.target)) ||\n            container === event.target;\n\n        if (!isInside) {\n            this.closeDropdown();\n        }\n    };\n\n    setActiveItem = (index: number, shouldScrollIntoView?: boolean = true) => {\n        this.setState({ activeItemIndex: index, shouldScrollIntoView });\n        if (index === -1) {\n            this.setActiveItemID(null);\n        }\n    };\n\n    setActiveItemID = (id: ?string) => {\n        const { shouldScrollIntoView } = this.state;\n        const itemEl = id ? document.getElementById(id) : null;\n\n        this.setState({ activeItemID: id, shouldScrollIntoView: false }, () => {\n            if (shouldScrollIntoView) {\n                scrollIntoView(itemEl, { block: 'nearest' });\n            }\n        });\n    };\n\n    selectFieldID: string;\n\n    selectFieldContainerRef: { current: null | HTMLDivElement };\n\n    searchInputRef: HTMLInputElement;\n\n    handleChange = (selectedItems: Array<SelectOptionProp>) => {\n        const { onChange } = this.props;\n\n        if (onChange) {\n            onChange(selectedItems);\n        }\n    };\n\n    handleOptionSelect = (selectedItem: SelectOptionProp) => {\n        const { onOptionSelect } = this.props;\n\n        if (onOptionSelect) {\n            onOptionSelect(selectedItem);\n        }\n    };\n\n    handleButtonClick = () => {\n        if (this.state.isOpen) {\n            this.closeDropdown();\n        } else {\n            this.openDropdown();\n        }\n    };\n\n    handleClearClick = () => {\n        this.handleChange([]);\n    };\n\n    handleButtonKeyDown = (event: SyntheticKeyboardEvent<>) => {\n        const { activeItemIndex } = this.state;\n\n        // If user is interacting with the select dropdown, don't close on space/enter (i.e. prevent click event)\n        if ((event.key === SPACE || event.key === ENTER) && activeItemIndex !== -1) {\n            event.preventDefault();\n        }\n    };\n\n    handleBlur = (event?: SyntheticFocusEvent<>) => {\n        const { isOpen } = this.state;\n        const { blurExceptionClassNames = [] } = this.props;\n\n        const exceptionClasses = ['search-input', 'select-button', ...blurExceptionClassNames];\n\n        if (\n            isOpen &&\n            event &&\n            event.relatedTarget &&\n            exceptionClasses.every(\n                className => event && !(event.relatedTarget: window.HTMLInputElement).classList.contains(className),\n            )\n        ) {\n            this.closeDropdown();\n        }\n    };\n\n    handleKeyDown = (event: SyntheticKeyboardEvent<HTMLDivElement>) => {\n        const { key } = event;\n        const { options, shouldShowClearOption, shouldShowSearchInput } = this.props;\n        const { activeItemIndex, isOpen } = this.state;\n        const itemCount = options.length;\n        switch (key) {\n            case ARROW_DOWN:\n                stopDefaultEvent(event);\n                if (isOpen) {\n                    const nextIndex = activeItemIndex === itemCount - 1 ? -1 : activeItemIndex + 1;\n                    this.setActiveItem(nextIndex);\n                } else {\n                    this.openDropdown();\n                }\n                break;\n            case ARROW_UP:\n                stopDefaultEvent(event);\n                if (isOpen) {\n                    const prevIndex = activeItemIndex === -1 ? itemCount - 1 : activeItemIndex - 1;\n                    this.setActiveItem(prevIndex);\n                } else {\n                    this.openDropdown();\n                }\n                break;\n            case ENTER:\n            case SPACE:\n                if (shouldShowSearchInput) {\n                    // Allow space key presses in the search string when search field is active\n                    if (key === SPACE) {\n                        break;\n                    }\n\n                    // Enter presses should be ignored when no item is active\n                    if (key === ENTER && activeItemIndex === -1) {\n                        stopDefaultEvent(event);\n                        break;\n                    }\n                }\n\n                if (activeItemIndex !== -1 && isOpen) {\n                    stopDefaultEvent(event);\n                    const isClearOption = shouldShowClearOption && activeItemIndex === 0;\n                    if (isClearOption) {\n                        this.handleClearClick();\n                    } else {\n                        this.selectOption(activeItemIndex);\n                    }\n                    // Enter always closes dropdown (even for multiselect)\n                    if (key === ENTER) {\n                        this.closeDropdown();\n                    }\n                }\n                break;\n            case ESCAPE:\n                if (isOpen) {\n                    stopDefaultEvent(event);\n                    this.closeDropdown();\n                }\n                break;\n            case TAB:\n                if (isOpen) {\n                    this.closeDropdown();\n                }\n                break;\n            default: {\n                if (!shouldShowSearchInput) {\n                    stopDefaultEvent(event);\n                    const lowerCaseKey = key.toLowerCase();\n                    const optionIndex = findIndex(\n                        options,\n                        option => option.displayText.toLowerCase().indexOf(lowerCaseKey) === 0,\n                    );\n\n                    if (optionIndex >= 0) {\n                        this.setActiveItem(optionIndex);\n                    }\n                }\n            }\n        }\n    };\n\n    openDropdown = () => {\n        const { shouldShowSearchInput } = this.props;\n        if (!this.state.isOpen) {\n            this.setState(\n                { isOpen: true },\n                () => shouldShowSearchInput && this.searchInputRef && this.searchInputRef.focus(),\n            );\n            document.addEventListener('click', this.handleDocumentClick);\n        }\n    };\n\n    closeDropdown = () => {\n        if (this.state.isOpen) {\n            this.setState({\n                activeItemID: null,\n                activeItemIndex: -1,\n                isOpen: false,\n                searchText: '',\n            });\n            document.removeEventListener('click', this.handleDocumentClick);\n        }\n    };\n\n    selectOption = (index: number) => {\n        const { multiple } = this.props;\n\n        if (multiple) {\n            this.selectMultiOption(index);\n        } else {\n            this.selectSingleOption(index);\n            this.closeDropdown(); // Close dropdown for single select fields\n        }\n    };\n\n    getFilteredOptions = (): Array<SelectOptionProp> => {\n        const { options } = this.props;\n        const { searchText } = this.state;\n\n        return options.filter(option => {\n            const isSubstring = option.displayText.toLowerCase().includes(searchText.toLowerCase());\n            const isClearOption = option.value === CLEAR;\n\n            return searchText ? isSubstring && !isClearOption : true;\n        });\n    };\n\n    selectSingleOption(index: number) {\n        const { selectedValues } = this.props;\n        const item = this.getFilteredOptions()[index];\n        // If item not previously selected, fire change handler\n        if (!selectedValues.includes(item.value)) {\n            this.handleChange([item]);\n        }\n        this.handleOptionSelect(item);\n    }\n\n    selectMultiOption = (index: number) => {\n        const { defaultValue, options, selectedValues } = this.props;\n        const hasDefaultValue = defaultValue != null; // Checks if not undefined or null\n        const item = this.getFilteredOptions()[index];\n\n        // If we are already using the default option, just return without firing onChange\n        if (hasDefaultValue && defaultValue === item.value) {\n            this.selectSingleOption(index);\n            return;\n        }\n\n        // Copy the array so we can freely modify it\n        const newSelectedValues = selectedValues.slice(0);\n        toggleOption(newSelectedValues, item.value);\n\n        // Apply constraints if a defaultValue is specified\n        if (hasDefaultValue) {\n            const defaultOptionIndex = findIndex(options, option => option.value === defaultValue);\n\n            if (defaultOptionIndex !== -1) {\n                if (newSelectedValues.length === 0) {\n                    // If nothing is selected, we should select the default option\n                    this.selectSingleOption(defaultOptionIndex);\n                    return;\n                }\n                if (newSelectedValues.length > 1 && newSelectedValues.includes(defaultValue)) {\n                    // Remove the default option from the selected values when more than one thing is selected\n                    newSelectedValues.splice(defaultOptionIndex, 1);\n                }\n            }\n        }\n\n        // Fire onchange event with selected items\n        this.handleChange(options.filter(option => newSelectedValues.includes(option.value)));\n\n        this.handleOptionSelect(item);\n    };\n\n    renderButtonText = () => {\n        const { options, placeholder, selectedValues, title } = this.props;\n        const selectedItemCount = selectedValues.length;\n\n        // When there are no options selected, render placeholder\n        if (selectedItemCount === 0 && placeholder) {\n            return placeholder;\n        }\n\n        // User-specified title when options are selected\n        if (title) {\n            return title;\n        }\n\n        // Auto-generate button title based on selected options\n        const selectedOptions = options.filter(option => selectedValues.includes(option.value));\n        return selectedOptions.map(option => option.displayText).join(', ');\n    };\n\n    renderSearchInput = () => {\n        const { intl } = this.props;\n        const { searchText } = this.state;\n        const getSearchInput = element => {\n            this.searchInputRef = element;\n        };\n\n        return (\n            <SearchForm\n                className=\"select-field-search-container\"\n                getSearchInput={getSearchInput}\n                onChange={this.updateSearchText}\n                placeholder={intl.formatMessage(messages.searchPlaceholder)}\n                value={searchText}\n            />\n        );\n    };\n\n    renderSelectButton = () => {\n        const { activeItemID, isOpen } = this.state;\n        const { buttonProps: buttonElProps, isDisabled, className, error } = this.props;\n        const buttonText = this.renderButtonText();\n        const buttonProps = {\n            ...buttonElProps,\n            'aria-activedescendant': activeItemID,\n            'aria-autocomplete': 'list',\n            'aria-expanded': isOpen,\n            'aria-owns': this.selectFieldID,\n            className,\n            isDisabled,\n            onClick: this.handleButtonClick,\n            onKeyDown: this.handleButtonKeyDown,\n            // @NOTE: Technically, only text inputs should be combo-boxes but ARIA specs do not cover custom select dropdowns\n            role: 'listbox',\n            title: buttonText,\n        };\n\n        return (\n            // Need to store the select button reference so we can calculate the button width\n            // in order to set it as the min width of the dropdown list\n            <SelectButton {...buttonProps} error={error}>\n                {buttonText}\n            </SelectButton>\n        );\n    };\n\n    renderSelectOptions = () => {\n        const { optionRenderer, selectedValues, separatorIndices, shouldShowClearOption } = this.props;\n        const { activeItemIndex } = this.state;\n\n        const filteredOptions = this.getFilteredOptions();\n\n        if (filteredOptions.length === 0) {\n            return (\n                <DatalistItem className=\"select-option is-disabled\">\n                    <FormattedMessage {...messages.noResults} />\n                </DatalistItem>\n            );\n        }\n\n        const selectOptions = filteredOptions.map<React.Element<typeof DatalistItem | 'li'>>((item, index) => {\n            const { value } = item;\n\n            const isSelected = selectedValues.includes(value);\n\n            const isClearOption = shouldShowClearOption && value === CLEAR;\n\n            const itemProps: Object = {\n                className: classNames('select-option', { 'is-clear-option': isClearOption }),\n                key: index,\n                /* preventDefault on click to prevent wrapping label from re-triggering the select button */\n                onClick: event => {\n                    event.preventDefault();\n                    if (isClearOption) {\n                        this.handleClearClick();\n                    } else {\n                        this.selectOption(index);\n                    }\n                },\n                onMouseEnter: () => {\n                    this.setActiveItem(index, false);\n                },\n                setActiveItemID: this.setActiveItemID,\n            };\n\n            if (index === activeItemIndex) {\n                itemProps.isActive = true;\n            }\n\n            itemProps.isSelected = isSelected;\n\n            // The below actually does have a key, but eslint can't catch that\n            /* eslint-disable react/jsx-key */\n            return (\n                <DatalistItem {...itemProps}>\n                    <div className=\"select-option-check-icon\">\n                        {isSelected ? <IconCheck height={16} width={16} /> : null}\n                    </div>\n                    {optionRenderer(item)}\n                </DatalistItem>\n            );\n            /* eslint-enable react/jsx-key */\n        });\n\n        separatorIndices.forEach((separatorIndex, index) => {\n            selectOptions.splice(separatorIndex + index, 0, <li key={`separator${separatorIndex}`} role=\"separator\" />);\n        });\n\n        return selectOptions;\n    };\n\n    render() {\n        const {\n            className,\n            multiple,\n            isEscapedWithReference,\n            isRightAligned,\n            isScrollable,\n            selectedValues,\n            shouldShowSearchInput,\n        } = this.props;\n        const { isOpen } = this.state;\n\n        // @TODO: Need invariants on specific conditions.\n        // 1) # of options should be non-zero\n        // 2) selectedValues, if defined, should all exist in options\n        // 3) defaultValue, if defined, should exist in options\n        // 4) defaultValue, if defined, should mean selectedValues is never empty\n        // 5) defaultValue, if defined, cannot be selected in addition to other options (must be exclusive)\n\n        const dropdownPlacement = isRightAligned ? PLACEMENT_BOTTOM_END : PLACEMENT_BOTTOM_START;\n        // popper.js modifier to allow dropdown to overflow its boundaries and remain attached to its reference\n        const dropdownModifiers = isEscapedWithReference ? { preventOverflow: { escapeWithReference: true } } : {};\n\n        return (\n            // eslint-disable-next-line jsx-a11y/no-static-element-interactions\n            <div\n                className={classNames(className, 'bdl-SelectField', 'select-container')}\n                onBlur={this.handleBlur}\n                onKeyDown={this.handleKeyDown}\n                ref={this.selectFieldContainerRef}\n            >\n                <PopperComponent placement={dropdownPlacement} isOpen={isOpen} modifiers={dropdownModifiers}>\n                    {this.renderSelectButton()}\n                    <SelectFieldDropdown\n                        isScrollable={isScrollable}\n                        multiple={multiple}\n                        selectedValues={selectedValues}\n                        selectFieldID={this.selectFieldID}\n                    >\n                        {shouldShowSearchInput && this.renderSearchInput()}\n                        {this.renderSelectOptions()}\n                    </SelectFieldDropdown>\n                </PopperComponent>\n            </div>\n        );\n    }\n}\n\nexport { BaseSelectField as BaseSelectFieldBase };\nexport default injectIntl(BaseSelectField);\n"],"file":"BaseSelectField.js"}