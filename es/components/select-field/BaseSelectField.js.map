{"version":3,"sources":["../../../src/components/select-field/BaseSelectField.js"],"names":["React","classNames","uniqueId","scrollIntoView","IconCheck","SelectButton","DatalistItem","OVERLAY_WRAPPER_CLASS","stopDefaultEvent","event","preventDefault","stopPropagation","toggleOption","options","value","index","indexOf","push","splice","OVERLAY_SCROLLABLE_CLASS","BaseSelectField","props","shouldScrollIntoView","setState","activeItemIndex","setActiveItemID","id","state","itemEl","document","getElementById","activeItemID","block","selectedItems","onChange","selectedItem","onOptionSelect","isOpen","closeDropdown","openDropdown","key","itemCount","length","nextIndex","setActiveItem","prevIndex","selectOption","multiple","selectMultiOption","selectSingleOption","defaultValue","selectedValues","hasDefaultValue","item","newSelectedValues","slice","defaultOptionIndex","findIndex","option","includes","handleChange","filter","handleOptionSelect","placeholder","title","selectedItemCount","selectedOptions","map","displayText","join","buttonElProps","buttonProps","isDisabled","className","error","buttonText","renderButtonText","selectFieldID","onClick","handleButtonClick","onKeyDown","handleButtonKeyDown","role","optionRenderer","separatorIndices","selectOptions","isSelected","itemProps","onMouseEnter","isActive","forEach","separatorIndex","isScrollable","listboxProps","handleBlur","handleKeyDown","renderSelectButton","renderSelectOptions","Component"],"mappings":"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","sourcesContent":["// @flow\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport uniqueId from 'lodash/uniqueId';\n\nimport { scrollIntoView } from '../../utils/dom';\nimport IconCheck from '../../icons/general/IconCheck';\nimport SelectButton from '../select-button';\nimport DatalistItem from '../datalist-item';\nimport type { SelectOptionValueProp, SelectOptionProp } from './props';\nimport { OVERLAY_WRAPPER_CLASS } from '../../constants';\n\nimport './SelectField.scss';\n\nfunction stopDefaultEvent(event) {\n    event.preventDefault();\n    event.stopPropagation();\n}\n\nfunction toggleOption(options, value) {\n    const index = options.indexOf(value);\n\n    if (index === -1) {\n        options.push(value);\n    } else {\n        options.splice(index, 1);\n    }\n}\n\ntype Props = {\n    /** Props to add to the button element */\n    buttonProps?: Object,\n    /** CSS class for the select container */\n    className?: string,\n    /** The fallback option value when other options are all unselected. Default option cannot be selected at the same time as other options. `selectedValues` must not be empty when this option is used. */\n    defaultValue?: SelectOptionValueProp,\n    /** An optional error to show within a tooltip. */\n    error?: React.Node,\n    /** The select button is disabled if true */\n    isDisabled?: boolean,\n    /** The select field overlay (dropdown) will have a scrollbar and max-height if true * */\n    isScrollable?: boolean,\n    multiple: boolean,\n    /** Function will be called with an array of all selected options after user selects a new option */\n    onChange: Function,\n    /** Function will be called with the user selected option (even on deselect or when the option was previously selected) */\n    onOptionSelect?: Function,\n    /** Function that allows custom rendering of select field options. When not provided the component will only render the option's displayText by default */\n    optionRenderer?: (option: SelectOptionProp) => React.Node,\n    /** List of options (displayText, value) */\n    options: Array<SelectOptionProp>,\n    /** The select button text shown when no options are selected. */\n    placeholder?: string | React.Element<any>,\n    /** The currently selected option values (can be empty) */\n    selectedValues: Array<SelectOptionValueProp>,\n    /** Array of ordered indices indicating where to insert separators (ex. index 2 means insert a separator after option 2) */\n    separatorIndices: Array<number>,\n    /** The select button text (by default, component will use comma separated list of all selected option displayText) */\n    title?: string | React.Element<any>,\n};\n\ntype State = {\n    activeItemID: ?string,\n    activeItemIndex: number,\n    isOpen: boolean,\n    shouldScrollIntoView: boolean,\n};\n\nexport const OVERLAY_SCROLLABLE_CLASS = 'bdl-SelectField-overlay--scrollable';\n\nclass BaseSelectField extends React.Component<Props, State> {\n    static defaultProps = {\n        buttonProps: {},\n        isDisabled: false,\n        isScrollable: false,\n        multiple: false,\n        options: [],\n        selectedValues: [],\n        separatorIndices: [],\n    };\n\n    constructor(props: Props) {\n        super(props);\n\n        this.selectFieldID = uniqueId('selectfield');\n\n        this.state = {\n            activeItemID: null,\n            activeItemIndex: -1,\n            isOpen: false,\n            shouldScrollIntoView: false,\n        };\n    }\n\n    setActiveItem = (index: number, shouldScrollIntoView?: boolean = true) => {\n        this.setState({ activeItemIndex: index, shouldScrollIntoView });\n        if (index === -1) {\n            this.setActiveItemID(null);\n        }\n    };\n\n    setActiveItemID = (id: ?string) => {\n        const { shouldScrollIntoView } = this.state;\n        const itemEl = id ? document.getElementById(id) : null;\n\n        this.setState({ activeItemID: id, shouldScrollIntoView: false }, () => {\n            if (shouldScrollIntoView) {\n                scrollIntoView(itemEl, { block: 'nearest' });\n            }\n        });\n    };\n\n    selectFieldID: string;\n\n    handleChange = (selectedItems: Array<SelectOptionProp>) => {\n        const { onChange } = this.props;\n\n        if (onChange) {\n            onChange(selectedItems);\n        }\n    };\n\n    handleOptionSelect = (selectedItem: SelectOptionProp) => {\n        const { onOptionSelect } = this.props;\n\n        if (onOptionSelect) {\n            onOptionSelect(selectedItem);\n        }\n    };\n\n    handleButtonClick = () => {\n        if (this.state.isOpen) {\n            this.closeDropdown();\n        } else {\n            this.openDropdown();\n        }\n    };\n\n    handleButtonKeyDown = (event: SyntheticKeyboardEvent<>) => {\n        const { activeItemIndex } = this.state;\n\n        // If user is interacting with the select dropdown, don't close on space/enter (i.e. prevent click event)\n        if ((event.key === ' ' || event.key === 'Enter') && activeItemIndex !== -1) {\n            event.preventDefault();\n        }\n    };\n\n    handleBlur = () => {\n        const { isOpen } = this.state;\n        if (isOpen) {\n            this.closeDropdown();\n        }\n    };\n\n    handleKeyDown = (event: SyntheticKeyboardEvent<HTMLDivElement>) => {\n        const { options } = this.props;\n        const { activeItemIndex, isOpen } = this.state;\n        const itemCount = options.length;\n\n        switch (event.key) {\n            case 'ArrowDown':\n                stopDefaultEvent(event);\n                if (isOpen) {\n                    const nextIndex = activeItemIndex === itemCount - 1 ? -1 : activeItemIndex + 1;\n                    this.setActiveItem(nextIndex);\n                } else {\n                    this.openDropdown();\n                }\n                break;\n            case 'ArrowUp':\n                stopDefaultEvent(event);\n                if (isOpen) {\n                    const prevIndex = activeItemIndex === -1 ? itemCount - 1 : activeItemIndex - 1;\n                    this.setActiveItem(prevIndex);\n                } else {\n                    this.openDropdown();\n                }\n                break;\n            case 'Enter':\n            case ' ':\n                if (activeItemIndex !== -1 && isOpen) {\n                    stopDefaultEvent(event);\n                    this.selectOption(activeItemIndex);\n                    // Enter always closes dropdown (even for multiselect)\n                    if (event.key === 'Enter') {\n                        this.closeDropdown();\n                    }\n                }\n                break;\n            case 'Escape':\n                if (isOpen) {\n                    stopDefaultEvent(event);\n                    this.closeDropdown();\n                }\n                break;\n            // no default\n        }\n    };\n\n    openDropdown = () => {\n        if (!this.state.isOpen) {\n            this.setState({ isOpen: true });\n        }\n    };\n\n    closeDropdown = () => {\n        if (this.state.isOpen) {\n            this.setState({\n                activeItemID: null,\n                activeItemIndex: -1,\n                isOpen: false,\n            });\n        }\n    };\n\n    selectOption = (index: number) => {\n        const { multiple } = this.props;\n\n        if (multiple) {\n            this.selectMultiOption(index);\n        } else {\n            this.selectSingleOption(index);\n            this.closeDropdown(); // Close dropdown for single select fields\n        }\n    };\n\n    selectSingleOption(index: number) {\n        const { options, selectedValues } = this.props;\n        const item = options[index];\n        // If item not previously selected, fire change handler\n        if (!selectedValues.includes(item.value)) {\n            this.handleChange([item]);\n        }\n        this.handleOptionSelect(item);\n    }\n\n    selectMultiOption = (index: number) => {\n        const { defaultValue, options, selectedValues } = this.props;\n        const hasDefaultValue = defaultValue != null; // Checks if not undefined or null\n        const item = options[index];\n\n        // If we are already using the default option, just return without firing onChange\n        if (hasDefaultValue && defaultValue === item.value) {\n            this.selectSingleOption(index);\n            return;\n        }\n\n        // Copy the array so we can freely modify it\n        const newSelectedValues = selectedValues.slice(0);\n        toggleOption(newSelectedValues, item.value);\n\n        // Apply constraints if a defaultValue is specified\n        if (hasDefaultValue) {\n            const defaultOptionIndex = options.findIndex(option => option.value === defaultValue);\n\n            if (defaultOptionIndex !== -1) {\n                if (newSelectedValues.length === 0) {\n                    // If nothing is selected, we should select the default option\n                    this.selectSingleOption(defaultOptionIndex);\n                    return;\n                }\n                if (newSelectedValues.length > 1 && newSelectedValues.includes(defaultValue)) {\n                    // Remove the default option from the selected values when more than one thing is selected\n                    newSelectedValues.splice(defaultOptionIndex, 1);\n                }\n            }\n        }\n\n        // Fire onchange event with selected items\n        this.handleChange(options.filter(option => newSelectedValues.includes(option.value)));\n\n        this.handleOptionSelect(item);\n    };\n\n    renderButtonText = () => {\n        const { options, placeholder, selectedValues, title } = this.props;\n        const selectedItemCount = selectedValues.length;\n\n        // When there are no options selected, render placeholder\n        if (selectedItemCount === 0 && placeholder) {\n            return placeholder;\n        }\n\n        // User-specified title when options are selected\n        if (title) {\n            return title;\n        }\n\n        // Auto-generate button title based on selected options\n        const selectedOptions = options.filter(option => selectedValues.includes(option.value));\n        return selectedOptions.map(option => option.displayText).join(', ');\n    };\n\n    renderSelectButton = () => {\n        const { activeItemID, isOpen } = this.state;\n        const { buttonProps: buttonElProps, isDisabled, className, error } = this.props;\n        const buttonText = this.renderButtonText();\n        const buttonProps = {\n            ...buttonElProps,\n            'aria-activedescendant': activeItemID,\n            'aria-autocomplete': 'list',\n            'aria-expanded': isOpen,\n            'aria-owns': this.selectFieldID,\n            className,\n            isDisabled,\n            onClick: this.handleButtonClick,\n            onKeyDown: this.handleButtonKeyDown,\n            // @NOTE: Technically, only text inputs should be combo-boxes but ARIA specs do not cover custom select dropdowns\n            role: 'combobox',\n            title: buttonText,\n        };\n\n        return (\n            <SelectButton {...buttonProps} error={error}>\n                {buttonText}\n            </SelectButton>\n        );\n    };\n\n    renderSelectOptions = () => {\n        const { optionRenderer, options, selectedValues, separatorIndices } = this.props;\n        const { activeItemIndex } = this.state;\n\n        const selectOptions = options.map<React.Element<typeof DatalistItem | 'li'>>((item, index) => {\n            const { displayText, value } = item;\n\n            const isSelected = selectedValues.includes(value);\n\n            const itemProps: Object = {\n                className: 'select-option',\n                key: index,\n                /* preventDefault on click to prevent wrapping label from re-triggering the select button */\n                onClick: event => {\n                    event.preventDefault();\n\n                    this.selectOption(index);\n                },\n                onMouseEnter: () => {\n                    this.setActiveItem(index, false);\n                },\n                setActiveItemID: this.setActiveItemID,\n            };\n\n            if (index === activeItemIndex) {\n                itemProps.isActive = true;\n            }\n\n            // The below actually does have a key, but eslint can't catch that\n            /* eslint-disable react/jsx-key */\n            return (\n                <DatalistItem {...itemProps}>\n                    <div className=\"select-option-check-icon\">\n                        {isSelected ? <IconCheck height={16} width={16} /> : null}\n                    </div>\n                    {optionRenderer ? optionRenderer(item) : displayText}\n                </DatalistItem>\n            );\n            /* eslint-enable react/jsx-key */\n        });\n\n        separatorIndices.forEach((separatorIndex, index) => {\n            selectOptions.splice(separatorIndex + index, 0, <li key={`separator${separatorIndex}`} role=\"separator\" />);\n        });\n\n        return selectOptions;\n    };\n\n    render() {\n        const { className, multiple, isScrollable } = this.props;\n        const { isOpen } = this.state;\n\n        // @TODO: Need invariants on specific conditions.\n        // 1) # of options should be non-zero\n        // 2) selectedValues, if defined, should all exist in options\n        // 3) defaultValue, if defined, should exist in options\n        // 4) defaultValue, if defined, should mean selectedValues is never empty\n        // 5) defaultValue, if defined, cannot be selected in addition to other options (must be exclusive)\n\n        const listboxProps = {};\n        if (multiple) {\n            listboxProps['aria-multiselectable'] = true;\n        }\n\n        return (\n            // eslint-disable-next-line jsx-a11y/no-static-element-interactions\n            <div\n                className={classNames(className, 'select-container')}\n                onBlur={this.handleBlur}\n                onKeyDown={this.handleKeyDown}\n            >\n                <div className=\"select-field\">\n                    {this.renderSelectButton()}\n                    <div\n                        className={classNames(OVERLAY_WRAPPER_CLASS, {\n                            'is-visible': isOpen,\n                        })}\n                    >\n                        <ul\n                            className={classNames('overlay', {\n                                [OVERLAY_SCROLLABLE_CLASS]: isScrollable,\n                            })}\n                            id={this.selectFieldID}\n                            role=\"listbox\"\n                            // preventDefault on mousedown so blur doesn't happen before click\n                            onMouseDown={event => event.preventDefault()}\n                            {...listboxProps}\n                        >\n                            {this.renderSelectOptions()}\n                        </ul>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default BaseSelectField;\n"],"file":"BaseSelectField.js"}