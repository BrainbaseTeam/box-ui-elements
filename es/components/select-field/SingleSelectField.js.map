{"version":3,"sources":["../../../src/components/select-field/SingleSelectField.js"],"names":["React","omit","injectIntl","BaseSelectField","CLEAR","messages","SingleSelectField","selectedOptions","props","onChange","fieldType","length","value","intl","isDisabled","selectedValue","placeholder","shouldShowClearOption","options","rest","selectFieldProps","isFieldSelected","selectedValues","optionsWithClearOption","displayText","formatMessage","clearAll","handleChange","Component","SingleSelectFieldBase"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,IAAP,MAAiB,aAAjB;AACA,SAASC,UAAT,QAA2B,YAA3B;AAEA,OAAOC,eAAP,MAA4B,mBAA5B;AAEA,OAAOC,KAAP,MAAkB,aAAlB;AACA,OAAOC,QAAP,MAAqB,YAArB;;IAuBMC,iB;;;;;;;;;;;;;;;;;;mEACa,UAACC,eAAD,EAA8C;AAAA,wBACzB,MAAKC,KADoB;AAAA,UACjDC,QADiD,eACjDA,QADiD;AAAA,UACvCC,SADuC,eACvCA,SADuC,EAGzD;;AACA,UAAID,QAAQ,IAAIF,eAAe,CAACI,MAAhB,KAA2B,CAA3C,EAA8C;AAC1CF,QAAAA,QAAQ,CAACF,eAAe,CAAC,CAAD,CAAhB,EAAqBG,SAArB,CAAR;AACH,OAFD,MAEO,IAAIH,eAAe,CAACI,MAAhB,KAA2B,CAA/B,EAAkC;AACrCF,QAAAA,QAAQ,CAAC;AAAEG,UAAAA,KAAK,EAAE;AAAT,SAAD,CAAR;AACH;AACJ,K;;;;;;;6BAEQ;AAAA,yBAC6F,KAAKJ,KADlG;AAAA,UACGK,IADH,gBACGA,IADH;AAAA,UACSC,UADT,gBACSA,UADT;AAAA,UACqBC,aADrB,gBACqBA,aADrB;AAAA,UACoCC,WADpC,gBACoCA,WADpC;AAAA,UACiDC,qBADjD,gBACiDA,qBADjD;AAAA,UACwEC,OADxE,gBACwEA,OADxE;AAAA,UACoFC,IADpF,uIAGL;AACA;AACA;AAEA;;;AACA,UAAMC,gBAAgB,GAAGnB,IAAI,CAACkB,IAAD,EAAO,CAAC,cAAD,EAAiB,UAAjB,EAA6B,UAA7B,CAAP,CAA7B,CARK,CAUL;;AACA,UAAME,eAAe,GAAGN,aAAa,KAAK,IAA1C;AACAK,MAAAA,gBAAgB,CAACE,cAAjB,GAAkC,CAACD,eAAD,GAAmB,EAAnB,GAAwB,CAACN,aAAD,CAA1D;AAEA,UAAMQ,sBAAsB,GAAGN,qBAAqB,IAE1C;AACIL,QAAAA,KAAK,EAAER,KADX;AAEIoB,QAAAA,WAAW,EAAEX,IAAI,CAACY,aAAL,CAAmBpB,QAAQ,CAACqB,QAA5B;AAFjB,OAF0C,4BAMvCR,OANuC,KAQ9CA,OARN;AAUA,aACI,oBAAC,eAAD;AACI,QAAA,SAAS,EAAE,CAACG,eAAD,IAAoBL,WAApB,GAAkC,aAAlC,GAAkD,EADjE;AAEI,QAAA,UAAU,EAAEF,UAFhB;AAGI,QAAA,QAAQ,EAAE,KAAKa,YAHnB;AAII,QAAA,WAAW,EAAEX,WAJjB;AAKI,QAAA,OAAO,EAAEO,sBALb;AAMI,QAAA,qBAAqB,EAAEN;AAN3B,SAOQG,gBAPR,EADJ;AAWH;;;;EA/C2BpB,KAAK,CAAC4B,S;;AAkDtC,SAAStB,iBAAiB,IAAIuB,qBAA9B;AACA,eAAe3B,UAAU,CAACI,iBAAD,CAAzB","sourcesContent":["// @flow\nimport * as React from 'react';\nimport omit from 'lodash/omit';\nimport { injectIntl } from 'react-intl';\n\nimport BaseSelectField from './BaseSelectField';\nimport type { SelectOptionValueProp, SelectOptionProp } from './props';\nimport CLEAR from './constants';\nimport messages from './messages';\n\ntype Props = {\n    /** The type of the field */\n    fieldType?: string,\n    /* Intl object */\n    intl: Object,\n    /** The select field is disabled if true */\n    isDisabled?: boolean,\n    /** The select field overlay (dropdown) will have a scrollbar and max-height if true * */\n    isScrollable?: boolean,\n    /** The currently selected option value */\n    onChange: Function,\n    /** List of options (displayText, value) */\n    options: Array<SelectOptionProp>,\n    /** The placeholder text for the field  */\n    placeholder?: string | React.Node,\n    /** Function will be called with the selected option after user selects a new option */\n    selectedValue?: SelectOptionValueProp,\n    /** Will show Clear All option */\n    shouldShowClearOption?: boolean,\n};\n\nclass SingleSelectField extends React.Component<Props> {\n    handleChange = (selectedOptions: Array<SelectOptionProp>) => {\n        const { onChange, fieldType } = this.props;\n\n        // There should only ever be 1 selected item\n        if (onChange && selectedOptions.length === 1) {\n            onChange(selectedOptions[0], fieldType);\n        } else if (selectedOptions.length === 0) {\n            onChange({ value: null });\n        }\n    };\n\n    render() {\n        const { intl, isDisabled, selectedValue, placeholder, shouldShowClearOption, options, ...rest } = this.props;\n\n        // @TODO: Invariant testing\n        // 1) selectedValue is required to be contained in the options\n        // 2) # of options should be non-zero\n\n        // Make sure to omit passed props that could be interpreted incorrectly by the base component\n        const selectFieldProps = omit(rest, ['defaultValue', 'multiple', 'onChange']);\n\n        // If selectedValue is passed in, map it to the multi selected equivalent\n        const isFieldSelected = selectedValue !== null;\n        selectFieldProps.selectedValues = !isFieldSelected ? [] : [selectedValue];\n\n        const optionsWithClearOption = shouldShowClearOption\n            ? [\n                  {\n                      value: CLEAR,\n                      displayText: intl.formatMessage(messages.clearAll),\n                  },\n                  ...options,\n              ]\n            : options;\n\n        return (\n            <BaseSelectField\n                className={!isFieldSelected && placeholder ? 'placeholder' : ''}\n                isDisabled={isDisabled}\n                onChange={this.handleChange}\n                placeholder={placeholder}\n                options={optionsWithClearOption}\n                shouldShowClearOption={shouldShowClearOption}\n                {...selectFieldProps}\n            />\n        );\n    }\n}\n\nexport { SingleSelectField as SingleSelectFieldBase };\nexport default injectIntl(SingleSelectField);\n"],"file":"SingleSelectField.js"}