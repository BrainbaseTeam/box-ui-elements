{"version":3,"sources":["../../../src/components/select-field/SingleSelectField.js"],"names":["React","omit","BaseSelectField","SingleSelectField","selectedOptions","props","onChange","fieldType","length","isDisabled","selectedValue","placeholder","rest","selectFieldProps","isFieldSelected","selectedValues","handleChange","Component"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,IAAP,MAAiB,aAAjB;AAEA,OAAOC,eAAP,MAA4B,mBAA5B;;IAkBMC,iB;;;;;;;;;;;;;;;;mEACa,UAACC,eAAD,EAA8C;AAAA,wBACzB,MAAKC,KADoB;AAAA,UACjDC,QADiD,eACjDA,QADiD;AAAA,UACvCC,SADuC,eACvCA,SADuC,EAGzD;;AACA,UAAID,QAAQ,IAAIF,eAAe,CAACI,MAAhB,KAA2B,CAA3C,EAA8C;AAC1CF,QAAAA,QAAQ,CAACF,eAAe,CAAC,CAAD,CAAhB,EAAqBG,SAArB,CAAR;AACH;AACJ,K;;;;;;;6BAEQ;AAAA,yBACuD,KAAKF,KAD5D;AAAA,UACGI,UADH,gBACGA,UADH;AAAA,UACeC,aADf,gBACeA,aADf;AAAA,UAC8BC,WAD9B,gBAC8BA,WAD9B;AAAA,UAC8CC,IAD9C,2FAGL;AACA;AACA;AAEA;;;AACA,UAAMC,gBAAgB,GAAGZ,IAAI,CAACW,IAAD,EAAO,CAAC,cAAD,EAAiB,UAAjB,EAA6B,UAA7B,CAAP,CAA7B,CARK,CAUL;;AACA,UAAME,eAAe,GAAGJ,aAAa,KAAK,IAA1C;AACAG,MAAAA,gBAAgB,CAACE,cAAjB,GAAkC,CAACD,eAAD,GAAmB,EAAnB,GAAwB,CAACJ,aAAD,CAA1D;AAEA,0BACI,oBAAC,eAAD;AACI,QAAA,SAAS,EAAE,CAACI,eAAD,IAAoBH,WAApB,GAAkC,aAAlC,GAAkD,EADjE;AAEI,QAAA,UAAU,EAAEF,UAFhB;AAGI,QAAA,QAAQ,EAAE,KAAKO,YAHnB;AAII,QAAA,WAAW,EAAEL;AAJjB,SAKQE,gBALR,EADJ;AASH;;;;EAjC2Bb,KAAK,CAACiB,S;;AAoCtC,eAAed,iBAAf","sourcesContent":["// @flow\nimport * as React from 'react';\nimport omit from 'lodash/omit';\n\nimport BaseSelectField from './BaseSelectField';\nimport type { SelectOptionValueProp, SelectOptionProp } from './props';\n\ntype Props = {\n    /** The type of the field */\n    fieldType?: string,\n    /** The select field is disabled if true */\n    isDisabled?: boolean,\n    /** The select field overlay (dropdown) will have a scrollbar and max-height if true * */\n    isScrollable?: boolean,\n    /** The currently selected option value */\n    onChange: Function,\n    /** The placeholder text for the field  */\n    placeholder?: string | React.Node,\n    /** Function will be called with the selected option after user selects a new option */\n    selectedValue?: SelectOptionValueProp,\n};\n\nclass SingleSelectField extends React.Component<Props> {\n    handleChange = (selectedOptions: Array<SelectOptionProp>) => {\n        const { onChange, fieldType } = this.props;\n\n        // There should only ever be 1 selected item\n        if (onChange && selectedOptions.length === 1) {\n            onChange(selectedOptions[0], fieldType);\n        }\n    };\n\n    render() {\n        const { isDisabled, selectedValue, placeholder, ...rest } = this.props;\n\n        // @TODO: Invariant testing\n        // 1) selectedValue is required to be contained in the options\n        // 2) # of options should be non-zero\n\n        // Make sure to omit passed props that could be interpreted incorrectly by the base component\n        const selectFieldProps = omit(rest, ['defaultValue', 'multiple', 'onChange']);\n\n        // If selectedValue is passed in, map it to the multi selected equivalent\n        const isFieldSelected = selectedValue !== null;\n        selectFieldProps.selectedValues = !isFieldSelected ? [] : [selectedValue];\n\n        return (\n            <BaseSelectField\n                className={!isFieldSelected && placeholder ? 'placeholder' : ''}\n                isDisabled={isDisabled}\n                onChange={this.handleChange}\n                placeholder={placeholder}\n                {...selectFieldProps}\n            />\n        );\n    }\n}\n\nexport default SingleSelectField;\n"],"file":"SingleSelectField.js"}