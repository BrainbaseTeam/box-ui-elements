{"version":3,"sources":["../../../src/components/avatar/Avatar.tsx"],"names":["React","classNames","Badgeable","AvatarImage","AvatarInitials","UnknownUserAvatar","GlobeBadge16","SIZES","small","large","Avatar","avatarUrl","className","name","id","isExternal","shouldShowExternal","size","useState","hasImageErrored","setHasImageErrored","prevAvatarUrl","setPrevAvatarUrl","classes","avatar","undefined"],"mappings":";;;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,OAAOC,SAAP,MAAsB,cAAtB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,OAAOC,iBAAP,MAA8B,qBAA9B;AACA,OAAOC,YAAP,MAAyB,8BAAzB;AAEA,OAAO,eAAP;AAEA,IAAMC,KAAK,GAAG;AAAEC,EAAAA,KAAK,EAAE,IAAT;AAAeC,EAAAA,KAAK,EAAE;AAAtB,CAAd;;AA2BA,SAASC,MAAT,OAAoH;AAAA;;AAAA,MAAlGC,SAAkG,QAAlGA,SAAkG;AAAA,MAAvFC,SAAuF,QAAvFA,SAAuF;AAAA,MAA5EC,IAA4E,QAA5EA,IAA4E;AAAA,MAAtEC,EAAsE,QAAtEA,EAAsE;AAAA,MAAlEC,UAAkE,QAAlEA,UAAkE;AAAA,mCAAtDC,kBAAsD;AAAA,MAAtDA,kBAAsD,sCAAjC,KAAiC;AAAA,uBAA1BC,IAA0B;AAAA,MAA1BA,IAA0B,0BAAnB,EAAmB;;AAAA,wBAClEjB,KAAK,CAACkB,QAAN,CAAwB,KAAxB,CADkE;AAAA;AAAA,MACzGC,eADyG;AAAA,MACxFC,kBADwF;;AAAA,yBAEtEpB,KAAK,CAACkB,QAAN,CAAyC,IAAzC,CAFsE;AAAA;AAAA,MAEzGG,aAFyG;AAAA,MAE1FC,gBAF0F;;AAIhH,MAAMC,OAAO,GAAGtB,UAAU,CAAC,CACvB,QADuB,EAEvBW,SAFuB,wDAGTK,IAHS,GAGAA,IAAI,IAAIV,KAAK,CAACU,IAAD,CAHb,0BAGqB,oBAHrB,EAG2CD,kBAAkB,IAAID,UAHjE,UAAD,CAA1B,CAJgH,CAUhH;;AACA,MAAIJ,SAAS,KAAKU,aAAlB,EAAiC;AAC7BD,IAAAA,kBAAkB,CAAC,KAAD,CAAlB;AACAE,IAAAA,gBAAgB,CAACX,SAAD,CAAhB;AACH;;AAED,MAAIa,MAAJ;;AACA,MAAIb,SAAS,IAAI,CAACQ,eAAlB,EAAmC;AAC/BK,IAAAA,MAAM,GACF,oBAAC,WAAD;AACI,MAAA,OAAO,EAAE,mBAAM;AACXJ,QAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACH,OAHL;AAII,MAAA,GAAG,EAAET;AAJT,MADJ;AAQH,GATD,MASO,IAAIE,IAAJ,EAAU;AACbW,IAAAA,MAAM,GAAG,oBAAC,cAAD;AAAgB,MAAA,EAAE,EAAEV,EAApB;AAAwB,MAAA,IAAI,EAAED;AAA9B,MAAT;AACH,GAFM,MAEA;AACHW,IAAAA,MAAM,GAAG,oBAAC,iBAAD;AAAmB,MAAA,SAAS,EAAC;AAA7B,MAAT;AACH;;AAED,SACI,oBAAC,SAAD;AACI,IAAA,SAAS,EAAED,OADf;AAEI,IAAA,WAAW,EACPP,kBAAkB,IAAID,UAAtB,GAAmC,oBAAC,YAAD;AAAc,MAAA,SAAS,EAAC;AAAxB,MAAnC,GAA2FU;AAHnG,KAMI,kCAAOD,MAAP,CANJ,CADJ;AAUH;;AAED,eAAed,MAAf","sourcesContent":["import * as React from 'react';\nimport classNames from 'classnames';\nimport Badgeable from '../badgeable';\nimport AvatarImage from './AvatarImage';\nimport AvatarInitials from './AvatarInitials';\nimport UnknownUserAvatar from './UnknownUserAvatar';\nimport GlobeBadge16 from '../../icon/fill/GlobeBadge16';\n\nimport './Avatar.scss';\n\nconst SIZES = { small: true, large: true };\n\nexport interface AvatarProps {\n    /**\n     * Url to avatar image.  If passed in, component will render the avatar image instead of the initials\n     *\n     * Required if \"name\" is not specified.\n     */\n    avatarUrl?: string | null;\n    /** classname to add to the container element. */\n    className?: string;\n    /** Users id */\n    id?: string | number | null;\n    /** Whether this avatar should be labeled as external in the current context */\n    isExternal?: boolean;\n    /**\n     * Users full name.\n     *\n     * Required if \"avatarUrl\" is not specified.\n     */\n    name?: string | null;\n    /** Show the external avatar marker if the avatar is marked as for an external user */\n    shouldShowExternal?: boolean;\n    /* avatar size (enum) */\n    size?: keyof typeof SIZES | '';\n}\n\nfunction Avatar({ avatarUrl, className, name, id, isExternal, shouldShowExternal = false, size = '' }: AvatarProps) {\n    const [hasImageErrored, setHasImageErrored] = React.useState<boolean>(false);\n    const [prevAvatarUrl, setPrevAvatarUrl] = React.useState<AvatarProps['avatarUrl']>(null);\n\n    const classes = classNames([\n        'avatar',\n        className,\n        { [`avatar--${size}`]: size && SIZES[size], 'avatar--isExternal': shouldShowExternal && isExternal },\n    ]);\n\n    // Reset hasImageErrored state when avatarUrl changes\n    if (avatarUrl !== prevAvatarUrl) {\n        setHasImageErrored(false);\n        setPrevAvatarUrl(avatarUrl);\n    }\n\n    let avatar;\n    if (avatarUrl && !hasImageErrored) {\n        avatar = (\n            <AvatarImage\n                onError={() => {\n                    setHasImageErrored(true);\n                }}\n                url={avatarUrl}\n            />\n        );\n    } else if (name) {\n        avatar = <AvatarInitials id={id} name={name} />;\n    } else {\n        avatar = <UnknownUserAvatar className=\"avatar-icon\" />;\n    }\n\n    return (\n        <Badgeable\n            className={classes}\n            bottomRight={\n                shouldShowExternal && isExternal ? <GlobeBadge16 className=\"bdl-Avatar-externalBadge\" /> : undefined\n            }\n        >\n            <span>{avatar}</span>\n        </Badgeable>\n    );\n}\n\nexport default Avatar;\n"],"file":"Avatar.js"}