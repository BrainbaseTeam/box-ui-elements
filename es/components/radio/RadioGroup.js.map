{"version":3,"sources":["../../../src/components/radio/RadioGroup.js"],"names":["React","RadioButton","RadioGroup","props","event","target","onChange","HTMLInputElement","setState","value","state","children","className","name","stateValue","onChangeHandler","Children","map","radio","rest","Component"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAEA,OAAOC,WAAP,MAAwB,eAAxB;;IAcMC,U;;;;;AAKF,sBAAYC,KAAZ,EAA0B;AAAA;;AAAA;;AACtB,8BAAMA,KAAN;;AADsB,sEAUR,UAACC,KAAD,EAA6B;AAAA,UACnCC,MADmC,GACxBD,KADwB,CACnCC,MADmC;AAAA,UAEnCC,QAFmC,GAEtB,MAAKH,KAFiB,CAEnCG,QAFmC;;AAI3C,UAAID,MAAM,YAAYE,gBAAtB,EAAwC;AACpC,cAAKC,QAAL,CAAc;AACVC,UAAAA,KAAK,EAAEJ,MAAM,CAACI;AADJ,SAAd;AAGH;;AAED,UAAIH,QAAJ,EAAc;AACVA,QAAAA,QAAQ,CAACF,KAAD,CAAR;AACH;AACJ,KAvByB;;AAEtB,UAAKM,KAAL,GAAa;AACTD,MAAAA,KAAK,EAAEN,KAAK,CAACM;AADJ,KAAb;AAFsB;AAKzB,G,CAED;AACA;;;;;6BAiBS;AAAA,wBACiC,KAAKN,KADtC;AAAA,UACGQ,QADH,eACGA,QADH;AAAA,UACaC,SADb,eACaA,SADb;AAAA,UACwBC,IADxB,eACwBA,IADxB;AAAA,UAEUC,UAFV,GAEyB,KAAKJ,KAF9B,CAEGD,KAFH;AAIL,0BACI;AAAK,QAAA,SAAS,wBAAiBG,SAAjB,CAAd;AAA4C,QAAA,QAAQ,EAAE,KAAKG;AAA3D,SACKf,KAAK,CAACgB,QAAN,CAAeC,GAAf,CAAmBN,QAAnB,EAA6B,UAAAO,KAAK,EAAI;AAAA,2BACRA,KAAK,CAACf,KADE;AAAA,YAC3BM,KAD2B,gBAC3BA,KAD2B;AAAA,YACjBU,IADiB;;AAGnC,4BAAO,oBAAC,WAAD;AAAa,UAAA,UAAU,EAAEV,KAAK,KAAKK,UAAnC;AAA+C,UAAA,IAAI,EAAED,IAArD;AAA2D,UAAA,KAAK,EAAEJ;AAAlE,WAA6EU,IAA7E,EAAP;AACH,OAJA,CADL,CADJ;AASH;;;;EA3CoBnB,KAAK,CAACoB,S;;gBAAzBlB,U,kBACoB;AAClBU,EAAAA,SAAS,EAAE;AADO,C;;AA8C1B,eAAeV,UAAf","sourcesContent":["// @flow\nimport * as React from 'react';\n\nimport RadioButton from './RadioButton';\n\ntype Props = {\n    children: React.Node,\n    className: string,\n    name?: string,\n    onChange?: Function,\n    value?: string,\n};\n\ntype State = {\n    value?: string,\n};\n\nclass RadioGroup extends React.Component<Props, State> {\n    static defaultProps = {\n        className: '',\n    };\n\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            value: props.value,\n        };\n    }\n\n    // @TODO: think about adding componentDidUpdate or gDSFP\n    // to update the internal state value based on new props value\n\n    onChangeHandler = (event: SyntheticEvent<>) => {\n        const { target } = event;\n        const { onChange } = this.props;\n\n        if (target instanceof HTMLInputElement) {\n            this.setState({\n                value: target.value,\n            });\n        }\n\n        if (onChange) {\n            onChange(event);\n        }\n    };\n\n    render() {\n        const { children, className, name } = this.props;\n        const { value: stateValue } = this.state;\n\n        return (\n            <div className={`radio-group ${className}`} onChange={this.onChangeHandler}>\n                {React.Children.map(children, radio => {\n                    const { value, ...rest } = radio.props;\n\n                    return <RadioButton isSelected={value === stateValue} name={name} value={value} {...rest} />;\n                })}\n            </div>\n        );\n    }\n}\n\nexport type RadioGroupProps = Props;\nexport default RadioGroup;\n"],"file":"RadioGroup.js"}