{"version":3,"sources":["../../../src/components/radio/RadioGroup.tsx"],"names":["React","RadioGroup","props","event","target","onChange","HTMLInputElement","setState","value","state","children","className","name","stateValue","onChangeHandler","Children","map","radio","cloneElement","isSelected","Component"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;;IAcMC,U;;;;;AAKF,sBAAYC,KAAZ,EAAoC;AAAA;;AAAA;;AAChC,oFAAMA,KAAN;;AADgC,sEASlB,UAACC,KAAD,EAA8C;AAAA,UACpDC,MADoD,GACzCD,KADyC,CACpDC,MADoD;AAAA,UAEpDC,QAFoD,GAEvC,MAAKH,KAFkC,CAEpDG,QAFoD;;AAI5D,UAAID,MAAM,YAAYE,gBAAtB,EAAwC;AACpC,cAAKC,QAAL,CAAc;AACVC,UAAAA,KAAK,EAAEJ,MAAM,CAACI;AADJ,SAAd;AAGH;;AAED,UAAIH,QAAJ,EAAc;AACVA,QAAAA,QAAQ,CAACF,KAAD,CAAR;AACH;AACJ,KAtBmC;;AAEhC,UAAKM,KAAL,GAAa;AACTD,MAAAA,KAAK,EAAEN,KAAK,CAACM;AADJ,KAAb;AAFgC;AAKnC,G,CAED;AACA;;;;;6BAgBS;AAAA,wBACiC,KAAKN,KADtC;AAAA,UACGQ,QADH,eACGA,QADH;AAAA,UACaC,SADb,eACaA,SADb;AAAA,UACwBC,IADxB,eACwBA,IADxB;AAAA,UAEUC,UAFV,GAEyB,KAAKJ,KAF9B,CAEGD,KAFH;AAIL,aACI;AAAK,QAAA,SAAS,wBAAiBG,SAAjB,CAAd;AAA4C,QAAA,QAAQ,EAAE,KAAKG;AAA3D,SACKd,KAAK,CAACe,QAAN,CAAeC,GAAf,CAAmBN,QAAnB,EAA6B,UAACO,KAAD,EAA+B;AAAA,YACjDT,KADiD,GACvCS,KAAK,CAACf,KADiC,CACjDM,KADiD;AAGzD,eAAOR,KAAK,CAACkB,YAAN,CAAmBD,KAAnB,EAA0B;AAC7BL,UAAAA,IAAI,EAAJA,IAD6B;AAE7BO,UAAAA,UAAU,EAAEX,KAAK,KAAKK;AAFO,SAA1B,CAAP;AAIH,OAPA,CADL,CADJ;AAYH;;;;EA7CoBb,KAAK,CAACoB,S;;gBAAzBnB,U,kBACoB;AAClBU,EAAAA,SAAS,EAAE;AADO,C;;AA+C1B,eAAeV,UAAf","sourcesContent":["import * as React from 'react';\n\nexport interface RadioGroupProps {\n    children: Array<React.ReactElement> | React.ReactElement;\n    className: string;\n    name?: string;\n    onChange?: Function;\n    value?: string;\n}\n\nexport interface RadioGroupState {\n    value?: string;\n}\n\nclass RadioGroup extends React.Component<RadioGroupProps, RadioGroupState> {\n    static defaultProps = {\n        className: '',\n    };\n\n    constructor(props: RadioGroupProps) {\n        super(props);\n        this.state = {\n            value: props.value,\n        };\n    }\n\n    // @TODO: think about adding componentDidUpdate or gDSFP\n    // to update the internal state value based on new props value\n    onChangeHandler = (event: React.SyntheticEvent<HTMLElement>) => {\n        const { target } = event;\n        const { onChange } = this.props;\n\n        if (target instanceof HTMLInputElement) {\n            this.setState({\n                value: target.value,\n            });\n        }\n\n        if (onChange) {\n            onChange(event);\n        }\n    };\n\n    render() {\n        const { children, className, name } = this.props;\n        const { value: stateValue } = this.state;\n\n        return (\n            <div className={`radio-group ${className}`} onChange={this.onChangeHandler}>\n                {React.Children.map(children, (radio: React.ReactElement) => {\n                    const { value } = radio.props;\n\n                    return React.cloneElement(radio, {\n                        name,\n                        isSelected: value === stateValue,\n                    });\n                })}\n            </div>\n        );\n    }\n}\n\nexport default RadioGroup;\n"],"file":"RadioGroup.js"}