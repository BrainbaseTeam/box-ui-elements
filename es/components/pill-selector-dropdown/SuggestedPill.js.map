{"version":3,"sources":["../../../src/components/pill-selector-dropdown/SuggestedPill.js"],"names":["React","PlainButton","Tooltip","KEYS","SuggestedPill","email","id","name","onAdd","addSuggestedPill","event","preventDefault","text","type","value","handleKeyPress","key","enter"],"mappings":"AACA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAOC,WAAP,MAAwB,iBAAxB;AACA,OAAOC,OAAP,MAAoB,YAApB;AACA,SAASC,IAAT,QAAqB,iBAArB;AAIA,OAAO,0BAAP;;AASA,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,OAAuC;AAAA,MAApCC,KAAoC,QAApCA,KAAoC;AAAA,MAA7BC,EAA6B,QAA7BA,EAA6B;AAAA,MAAzBC,IAAyB,QAAzBA,IAAyB;AAAA,MAAnBC,KAAmB,QAAnBA,KAAmB;;AACzD,MAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACC,KAAD,EAA8C;AACnEA,IAAAA,KAAK,CAACC,cAAN,GADmE,CAGnE;;AACAH,IAAAA,KAAK,CAAC;AACFH,MAAAA,KAAK,EAALA,KADE;AAEFC,MAAAA,EAAE,EAAFA,EAFE;AAGFC,MAAAA,IAAI,EAAJA,IAHE;AAIFK,MAAAA,IAAI,EAAEL,IAJJ;AAKFM,MAAAA,IAAI,EAAE,MALJ;AAMFC,MAAAA,KAAK,EAAET;AANL,KAAD,CAAL;AAQH,GAZD;;AAcA,MAAMU,cAAc,GAAG,SAAjBA,cAAiB,CAACL,KAAD,EAAsD;AACzE,QAAIA,KAAK,CAACM,GAAN,KAAcb,IAAI,CAACc,KAAvB,EAA8B;AAC1BR,MAAAA,gBAAgB,CAACC,KAAD,CAAhB;AACH;AACJ,GAJD;;AAMA,SACI,oBAAC,OAAD;AAAS,IAAA,QAAQ,EAAC,eAAlB;AAAkC,IAAA,IAAI,EAAEL;AAAxC,KACI,oBAAC,WAAD;AACI,IAAA,SAAS,EAAC,iCADd;AAEI,IAAA,OAAO,EAAEI,gBAFb;AAGI,IAAA,SAAS,EAAEM,cAHf;AAII,IAAA,IAAI,EAAC;AAJT,KAMI;AAAM,IAAA,SAAS,EAAC;AAAhB,KAA0DR,IAA1D,CANJ,CADJ,CADJ;AAYH,CAjCD;;AAmCA,eAAeH,aAAf","sourcesContent":["// @flow\nimport React from 'react';\n\nimport PlainButton from '../plain-button';\nimport Tooltip from '../tooltip';\nimport { KEYS } from '../../constants';\n\nimport { type SuggestedPill as SuggestedPillType } from './flowTypes';\n\nimport './SuggestedPillsRow.scss';\n\ntype Props = {\n    email: string,\n    id: number,\n    name: string,\n    onAdd: SuggestedPillType => void,\n};\n\nconst SuggestedPill = ({ email, id, name, onAdd }: Props) => {\n    const addSuggestedPill = (event: SyntheticEvent<HTMLButtonElement>) => {\n        event.preventDefault();\n\n        // TODO: refactor this so inline conversions aren't required at every usage\n        onAdd({\n            email,\n            id,\n            name,\n            text: name,\n            type: 'user',\n            value: email,\n        });\n    };\n\n    const handleKeyPress = (event: SyntheticKeyboardEvent<HTMLButtonElement>) => {\n        if (event.key === KEYS.enter) {\n            addSuggestedPill(event);\n        }\n    };\n\n    return (\n        <Tooltip position=\"bottom-center\" text={email}>\n            <PlainButton\n                className=\"suggested-pill-invisible-button\"\n                onClick={addSuggestedPill}\n                onKeyDown={handleKeyPress}\n                type=\"button\"\n            >\n                <span className=\"bdl-Pill-text pill-text suggested-pill\">{name}</span>\n            </PlainButton>\n        </Tooltip>\n    );\n};\n\nexport default SuggestedPill;\n"],"file":"SuggestedPill.js"}