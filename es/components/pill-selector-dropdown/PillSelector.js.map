{"version":3,"sources":["../../../src/components/pill-selector-dropdown/PillSelector.js"],"names":["React","classNames","uniqueId","List","Tooltip","KEYS","RoundPill","Pill","SuggestedPillsRow","stopDefaultEvent","event","preventDefault","stopPropagation","PillSelector","isFocused","selectedIndex","selectedOptions","props","size","length","key","map","option","inputEl","focus","setState","inputValue","value","numPills","getNumSelected","state","backspace","index","resetSelectedIndex","onRemove","selectedOption","get","arrowLeft","Math","max","hiddenEl","arrowRight","allowInvalidPills","className","disabled","error","getPillClassName","getPillImageUrl","inputProps","onInput","onSuggestedPillAdd","placeholder","showAvatars","showRoundedPills","suggestedPillsData","suggestedPillsFilter","suggestedPillsTitle","validator","rest","suggestedPillsEnabled","hasError","classes","ariaAttrs","errorMessageID","handleBlur","handleClick","handleFocus","handleKeyDown","undefined","bind","displayText","text","id","hasWarning","isExternalUser","hiddenRef","input","getPillsByKey","Component"],"mappings":"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","sourcesContent":["// @flow\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport uniqueId from 'lodash/uniqueId';\nimport { List } from 'immutable';\n\nimport Tooltip from '../tooltip';\nimport { KEYS } from '../../constants';\n\nimport RoundPill from './RoundPill';\nimport Pill from './Pill';\nimport SuggestedPillsRow from './SuggestedPillsRow';\nimport type { RoundOption, Option, OptionValue, SuggestedPillsFilter } from './flowTypes';\n\nfunction stopDefaultEvent(event) {\n    event.preventDefault();\n    event.stopPropagation();\n}\n\ntype Props = {\n    allowInvalidPills: boolean,\n    className?: string,\n    disabled?: boolean,\n    error?: React.Node,\n    /** Called on pill render to get a specific class name to use for a particular option. Note: Only has effect when showRoundedPills is true. */\n    getPillClassName?: (option: Option) => string,\n    /** Function to retrieve the image URL associated with a pill */\n    getPillImageUrl?: (data: { id: string | number, [key: string]: any }) => string,\n    inputProps: Object,\n    onInput: Function,\n    onRemove: Function,\n    onSuggestedPillAdd?: Function,\n    placeholder: string,\n    selectedOptions: Array<Object> | List<Object>,\n    /** Whether to show avatars in pills (if rounded style is enabled) */\n    showAvatars?: boolean,\n    /** Whether to use rounded style for pills */\n    showRoundedPills?: boolean,\n    suggestedPillsData?: Array<Object>,\n    suggestedPillsFilter?: SuggestedPillsFilter,\n    suggestedPillsTitle?: string,\n    validator: (option: Option | OptionValue) => boolean,\n};\n\ntype State = {\n    isFocused: boolean,\n    selectedIndex: number,\n};\n\nclass PillSelector extends React.Component<Props, State> {\n    static defaultProps = {\n        allowInvalidPills: false,\n        disabled: false,\n        error: '',\n        inputProps: {},\n        placeholder: '',\n        selectedOptions: [],\n        validator: () => true,\n    };\n\n    state = {\n        isFocused: false,\n        selectedIndex: -1,\n    };\n\n    getNumSelected = (): number => {\n        const { selectedOptions } = this.props;\n\n        return typeof selectedOptions.size === 'number' ? selectedOptions.size : selectedOptions.length;\n    };\n\n    getPillsByKey = (key: string): Array<any> => {\n        const { selectedOptions } = this.props;\n\n        return selectedOptions.map(option => option[key]);\n    };\n\n    inputEl: HTMLInputElement;\n\n    handleClick = () => {\n        this.inputEl.focus();\n    };\n\n    handleFocus = () => {\n        this.setState({ isFocused: true });\n    };\n\n    handleBlur = () => {\n        this.setState({ isFocused: false });\n    };\n\n    hiddenEl: HTMLSpanElement;\n\n    handleKeyDown = (event: SyntheticKeyboardEvent<>) => {\n        const inputValue = this.inputEl.value;\n        const numPills = this.getNumSelected();\n        const { selectedIndex } = this.state;\n\n        switch (event.key) {\n            case KEYS.backspace: {\n                let index = -1;\n                if (selectedIndex >= 0) {\n                    // remove selected pill\n                    index = selectedIndex;\n                    this.resetSelectedIndex();\n                    this.inputEl.focus();\n                } else if (inputValue === '') {\n                    // remove last pill\n                    index = numPills - 1;\n                }\n                if (index >= 0) {\n                    const { onRemove, selectedOptions } = this.props;\n                    const selectedOption =\n                        // $FlowFixMe\n                        typeof selectedOptions.get === 'function' ? selectedOptions.get(index) : selectedOptions[index];\n                    onRemove(selectedOption, index);\n                    stopDefaultEvent(event);\n                }\n                break;\n            }\n            case KEYS.arrowLeft:\n                if (selectedIndex >= 0) {\n                    // select previous pill\n                    this.setState({\n                        selectedIndex: Math.max(selectedIndex - 1, 0),\n                    });\n                    stopDefaultEvent(event);\n                } else if (inputValue === '' && numPills > 0) {\n                    // select last pill\n                    this.hiddenEl.focus();\n                    this.setState({ selectedIndex: numPills - 1 });\n                    stopDefaultEvent(event);\n                }\n                break;\n            case KEYS.arrowRight: {\n                if (selectedIndex >= 0) {\n                    const index = selectedIndex + 1;\n                    if (index >= numPills) {\n                        // deselect last pill\n                        this.resetSelectedIndex();\n                        this.inputEl.focus();\n                    } else {\n                        // select next pill\n                        this.setState({ selectedIndex: index });\n                    }\n                    stopDefaultEvent(event);\n                }\n                break;\n            }\n            // no default\n        }\n    };\n\n    errorMessageID = uniqueId('errorMessage');\n\n    hiddenRef = (hiddenEl: ?HTMLSpanElement) => {\n        if (hiddenEl) {\n            this.hiddenEl = hiddenEl;\n        }\n    };\n\n    resetSelectedIndex = () => {\n        if (this.state.selectedIndex !== -1) {\n            this.setState({ selectedIndex: -1 });\n        }\n    };\n\n    render() {\n        const { isFocused, selectedIndex } = this.state;\n        const {\n            allowInvalidPills,\n            className,\n            disabled,\n            error,\n            getPillClassName,\n            getPillImageUrl,\n            inputProps,\n            onInput,\n            onRemove,\n            onSuggestedPillAdd,\n            placeholder,\n            selectedOptions,\n            showAvatars,\n            showRoundedPills,\n            suggestedPillsData,\n            suggestedPillsFilter,\n            suggestedPillsTitle,\n            validator,\n            ...rest\n        } = this.props;\n        const suggestedPillsEnabled = suggestedPillsData && suggestedPillsData.length > 0;\n        const hasError = !!error;\n        const classes = classNames('bdl-PillSelector', 'pill-selector-input-wrapper', {\n            'is-disabled': disabled,\n            'bdl-is-disabled': disabled,\n            'is-focused': isFocused,\n            'show-error': hasError,\n            'pill-selector-suggestions-enabled': suggestedPillsEnabled,\n            'bdl-PillSelector--suggestionsEnabled': suggestedPillsEnabled,\n        });\n        const ariaAttrs = {\n            'aria-invalid': hasError,\n            'aria-errormessage': this.errorMessageID,\n            'aria-describedby': this.errorMessageID,\n        };\n\n        return (\n            <Tooltip isShown={hasError} text={error || ''} position=\"middle-right\" theme=\"error\">\n                {/* eslint-disable-next-line jsx-a11y/no-static-element-interactions */}\n                <span\n                    className={classes}\n                    onBlur={this.handleBlur}\n                    onClick={this.handleClick}\n                    onFocus={this.handleFocus}\n                    onKeyDown={this.handleKeyDown}\n                >\n                    {showRoundedPills\n                        ? selectedOptions.map((option: RoundOption, index: number) => {\n                              return (\n                                  <RoundPill\n                                      className={getPillClassName ? getPillClassName(option) : undefined}\n                                      getPillImageUrl={getPillImageUrl}\n                                      isValid={allowInvalidPills ? validator(option) : true}\n                                      isDisabled={disabled}\n                                      isSelected={index === selectedIndex}\n                                      key={option.value}\n                                      onRemove={onRemove.bind(this, option, index)}\n                                      // $FlowFixMe option.text is for backwards compatibility\n                                      text={option.displayText || option.text}\n                                      showAvatar\n                                      id={option.id}\n                                      hasWarning={option.hasWarning}\n                                      isExternal={option.isExternalUser}\n                                  />\n                              );\n                          })\n                        : selectedOptions.map((option: Option, index: number) => {\n                              // TODO: This and associated types will be removed once all views are updates with round pills.\n                              return (\n                                  <Pill\n                                      isValid={allowInvalidPills ? validator(option) : true}\n                                      isDisabled={disabled}\n                                      isSelected={index === selectedIndex}\n                                      key={option.value}\n                                      onRemove={onRemove.bind(this, option, index)}\n                                      // $FlowFixMe option.text is for backwards compatibility\n                                      text={option.displayText || option.text}\n                                  />\n                              );\n                          })}\n\n                    {/* hidden element for focus/key events during pill selection */}\n                    <span\n                        aria-hidden=\"true\"\n                        className=\"accessibility-hidden\"\n                        onBlur={this.resetSelectedIndex}\n                        ref={this.hiddenRef}\n                        tabIndex={-1}\n                        data-testid=\"pill-selection-helper\"\n                    />\n                    <textarea\n                        {...ariaAttrs}\n                        {...rest}\n                        {...inputProps}\n                        autoComplete=\"off\"\n                        className={classNames('bdl-PillSelector-input', 'pill-selector-input', className, {\n                            'bdl-PillSelector-input--showAvatars': showAvatars,\n                        })}\n                        disabled={disabled}\n                        onInput={onInput}\n                        placeholder={this.getNumSelected() === 0 ? placeholder : ''}\n                        ref={input => {\n                            this.inputEl = input;\n                        }}\n                    />\n                    <SuggestedPillsRow\n                        onSuggestedPillAdd={onSuggestedPillAdd}\n                        selectedPillsValues={this.getPillsByKey('value')}\n                        suggestedPillsFilter={suggestedPillsFilter}\n                        suggestedPillsData={suggestedPillsData}\n                        title={suggestedPillsTitle}\n                    />\n                    <span id={this.errorMessageID} className=\"accessibility-hidden\" role=\"alert\">\n                        {error}\n                    </span>\n                </span>\n            </Tooltip>\n        );\n    }\n}\n\nexport default PillSelector;\n"],"file":"PillSelector.js"}