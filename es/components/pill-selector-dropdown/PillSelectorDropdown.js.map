{"version":3,"sources":["../../../src/components/pill-selector-dropdown/PillSelectorDropdown.js"],"names":["React","classNames","List","noop","parseCSV","Label","SelectorDropdown","PillSelector","PillSelectorDropdown","inputValue","isInCompositionMode","props","allowInvalidPills","parseItems","validator","pills","filter","pill","normalizedPills","map","displayText","text","value","allowCustomPills","onPillCreate","onSelect","selectedOptions","shouldClearUnmatchedInput","validateForError","parsePills","length","resetInputValue","event","onBlur","state","addPillsFromInput","target","setState","onInput","preventDefault","clipboardData","getData","index","selectorOptions","selectedOption","get","handleInput","children","className","disabled","dividerIndex","dropdownScrollBoundarySelector","error","getPillClassName","getPillImageUrl","inputProps","label","onRemove","onSuggestedPillAdd","overlayTitle","placeholder","showAvatars","showRoundedPills","suggestedPillsData","suggestedPillsFilter","suggestedPillsTitle","shouldSetActiveItemOnOpen","selectorDropdownElement","handleEnter","handleSelect","handleCompositionEnd","handleCompositionStart","handleBlur","handlePaste","Component"],"mappings":"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","sourcesContent":["// @flow\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport { List } from 'immutable';\nimport noop from 'lodash/noop';\n\nimport parseCSV from '../../utils/parseCSV';\nimport Label from '../label';\nimport SelectorDropdown from '../selector-dropdown';\n\nimport PillSelector from './PillSelector';\nimport type { contactType as Contact } from '../../features/unified-share-modal/flowTypes';\nimport type { SelectOptionProp } from '../select-field/props';\nimport type { Option, OptionValue, SelectedOptions, SuggestedPillsFilter } from './flowTypes';\n\nimport './PillSelectorDropdown.scss';\n\ntype Props = {\n    /** If true, user can add pills not included in selector options */\n    allowCustomPills: boolean,\n    /** If true, pills with errors are parsed as pills also */\n    allowInvalidPills: boolean,\n    /** `DatalistItem` components for dropdown options to select */\n    children: React.Node,\n    /** CSS class for the component */\n    className?: string,\n    /** If true, the input control is disabled so no more input can be made */\n    disabled: boolean,\n    /** Index at which to insert a divider */\n    dividerIndex?: number,\n    /** A CSS selector matching the element to use as a boundary when auto-scrolling dropdown elements into view. When not provided, boundary will be determined by scrollIntoView utility function */\n    dropdownScrollBoundarySelector?: string,\n    /** Error message */\n    error?: React.Node,\n    /** Called on pill render to get a specific class name to use for a particular option. Note: Only has effect when showRoundedPills is true. */\n    getPillClassName?: (option: Option) => string,\n    /** Function to retrieve the image URL associated with a pill */\n    getPillImageUrl?: (data: { id: string, [key: string]: any }) => string | Promise<?string>,\n    /** Passed in by `SelectorDropdown` for accessibility */\n    inputProps: Object,\n    /** Input label */\n    label: React.Node,\n    /** Called when pill selector input is blurred */\n    onBlur: (event: SyntheticInputEvent<HTMLInputElement>) => void,\n    /** Should update selectorOptions based on the given input value */\n    onInput: Function,\n    /** Called when creating pills */\n    onPillCreate: (pills: Array<SelectOptionProp | Contact>) => void,\n    /** Should update selectedOptions given the option and index to remove */\n    onRemove: Function,\n    /** Should update selectedOptions given an array of pills and the event */\n    onSelect: Function,\n    /** Function adds a collaborator from suggested collabs to form */\n    onSuggestedPillAdd?: Function,\n    /** Optional title of the overlay */\n    overlayTitle?: string,\n    /** function to parse user input into an array of items to be validated and then added to pill selector. If this function is not passed, a default CSV parser is used. */\n    parseItems?: Function,\n    /** A placeholder to show in the input when there are no pills */\n    placeholder: string,\n    /** Array or Immutable list with data for the selected options shown as pills */\n    selectedOptions: SelectedOptions,\n    /** Array or Immutable list with data for the dropdown options to select */\n    selectorOptions: Array<Object> | List<Object>,\n    /** Determines whether or not input text is cleared automatically when it does not result in new pills being added */\n    shouldClearUnmatchedInput?: boolean,\n    /** Determines whether or not the first item is highlighted automatically when the dropdown opens */\n    shouldSetActiveItemOnOpen?: boolean,\n    /** show avatars (uses showRoundedPills) */\n    showAvatars?: boolean,\n    /** Use rounded style for pills */\n    showRoundedPills?: boolean,\n    /** Array of suggested collaborators */\n    suggestedPillsData?: Array<Object>,\n    /** String decribes the datapoint to filter by so that items in the form are not shown in suggestions. */\n    suggestedPillsFilter?: SuggestedPillsFilter,\n    /** String describes the suggested pills */\n    suggestedPillsTitle?: string,\n    /** Validate the given input value, and update `error` prop if necessary */\n    validateForError?: Function,\n    /** Called to check if pill item data is valid. The `item` is passed in. */\n    validator: (option: Option | OptionValue) => boolean,\n};\n\ntype State = {\n    inputValue: string,\n    isInCompositionMode: boolean,\n};\n\nclass PillSelectorDropdown extends React.Component<Props, State> {\n    static defaultProps = {\n        allowCustomPills: false,\n        allowInvalidPills: false,\n        disabled: false,\n        error: '',\n        inputProps: {},\n        label: '',\n        onBlur: noop,\n        onPillCreate: noop,\n        placeholder: '',\n        selectedOptions: [],\n        selectorOptions: [],\n        shouldClearUnmatchedInput: false,\n        shouldSetActiveItemOnOpen: false,\n        validator: () => true,\n    };\n\n    state = { inputValue: '', isInCompositionMode: false };\n\n    parsePills = (inputValue: string) => {\n        const { allowInvalidPills, parseItems, validator } = this.props;\n        let pills = parseItems ? parseItems(inputValue) : parseCSV(inputValue);\n\n        if (!pills) {\n            return [];\n        }\n\n        if (!allowInvalidPills) {\n            pills = pills.filter(pill => validator(pill));\n        }\n\n        const normalizedPills = pills.map(pill =>\n            typeof pill === 'string'\n                ? {\n                      displayText: pill,\n                      text: pill, // deprecated, left for backwards compatibility\n                      value: pill,\n                  }\n                : pill,\n        );\n        return normalizedPills;\n    };\n\n    addPillsFromInput = (inputValue: string) => {\n        const {\n            allowCustomPills,\n            onPillCreate,\n            onSelect,\n            selectedOptions,\n            shouldClearUnmatchedInput,\n            validateForError,\n        } = this.props;\n\n        // Do nothing if custom pills are not allowed\n        if (!allowCustomPills) {\n            return;\n        }\n\n        // Parse pills from input\n        const pills = this.parsePills(inputValue);\n\n        // \"Select\" the pills\n        if (pills.length > 0) {\n            onSelect(pills);\n            onPillCreate(pills);\n\n            this.resetInputValue();\n        } else {\n            if (validateForError && (inputValue !== '' || selectedOptions.length === 0)) {\n                /**\n                 * If no pills were added, but an inputValue exists or\n                 * there are no pills selected, check for errors\n                 */\n                validateForError(inputValue);\n            }\n            if (shouldClearUnmatchedInput) {\n                this.resetInputValue();\n            }\n        }\n    };\n\n    handleBlur = (event: SyntheticInputEvent<HTMLInputElement>) => {\n        const { onBlur } = this.props;\n        const { inputValue } = this.state;\n        this.addPillsFromInput(inputValue);\n        onBlur(event);\n    };\n\n    handleInput = (event: SyntheticInputEvent<HTMLInputElement> | { target: HTMLInputElement | Object }) => {\n        const { target } = event;\n        const { value } = target;\n        this.setState({ inputValue: value });\n        this.props.onInput(value, event);\n    };\n\n    handleEnter = (event: SyntheticEvent<>) => {\n        const { isInCompositionMode, inputValue } = this.state;\n        if (!isInCompositionMode) {\n            event.preventDefault();\n            this.addPillsFromInput(inputValue);\n        }\n    };\n\n    handlePaste = (event: SyntheticClipboardEvent<HTMLInputElement>) => {\n        event.preventDefault();\n\n        const inputValue: string = event.clipboardData.getData('text');\n        this.setState({ inputValue });\n        this.props.onInput(inputValue, event);\n        this.addPillsFromInput(inputValue);\n    };\n\n    handleSelect = (index: number, event: SyntheticEvent<>) => {\n        const { onPillCreate, onSelect, selectorOptions } = this.props;\n        const selectedOption =\n            // $FlowFixMe\n            typeof selectorOptions.get === 'function' ? selectorOptions.get(index) : selectorOptions[index];\n\n        onSelect([selectedOption], event);\n        onPillCreate([selectedOption]);\n\n        this.handleInput({ target: { value: '' } });\n    };\n\n    handleCompositionStart = () => {\n        this.setState({ isInCompositionMode: true });\n    };\n\n    handleCompositionEnd = () => {\n        this.setState({ isInCompositionMode: false });\n    };\n\n    resetInputValue = () => {\n        const { onInput } = this.props;\n\n        this.setState({ inputValue: '' });\n        onInput('');\n    };\n\n    render() {\n        const {\n            allowInvalidPills,\n            children,\n            className,\n            disabled,\n            dividerIndex,\n            dropdownScrollBoundarySelector,\n            error,\n            getPillClassName,\n            getPillImageUrl,\n            inputProps,\n            label,\n            onRemove,\n            onSuggestedPillAdd,\n            overlayTitle,\n            placeholder,\n            selectedOptions,\n            showAvatars,\n            showRoundedPills,\n            suggestedPillsData,\n            suggestedPillsFilter,\n            suggestedPillsTitle,\n            shouldSetActiveItemOnOpen,\n            validator,\n        } = this.props;\n\n        const selectorDropdownElement = (\n            <SelectorDropdown\n                className={classNames('bdl-PillSelectorDropdown', 'pill-selector-wrapper', className)}\n                dividerIndex={dividerIndex}\n                onEnter={this.handleEnter}\n                onSelect={this.handleSelect}\n                overlayTitle={overlayTitle}\n                scrollBoundarySelector={dropdownScrollBoundarySelector}\n                shouldSetActiveItemOnOpen={shouldSetActiveItemOnOpen}\n                selector={\n                    <PillSelector\n                        onChange={noop} // fix console error\n                        onCompositionEnd={this.handleCompositionEnd}\n                        onCompositionStart={this.handleCompositionStart}\n                        {...inputProps}\n                        allowInvalidPills={allowInvalidPills}\n                        disabled={disabled}\n                        error={error}\n                        getPillClassName={getPillClassName}\n                        getPillImageUrl={getPillImageUrl}\n                        onBlur={this.handleBlur}\n                        onInput={this.handleInput}\n                        onPaste={this.handlePaste}\n                        onRemove={onRemove}\n                        onSuggestedPillAdd={onSuggestedPillAdd}\n                        placeholder={placeholder}\n                        selectedOptions={selectedOptions}\n                        showRoundedPills={showRoundedPills}\n                        showAvatars={showAvatars && showRoundedPills}\n                        suggestedPillsData={suggestedPillsData}\n                        suggestedPillsFilter={suggestedPillsFilter}\n                        suggestedPillsTitle={suggestedPillsTitle}\n                        validator={validator}\n                        value={this.state.inputValue}\n                    />\n                }\n            >\n                {children}\n            </SelectorDropdown>\n        );\n\n        return label ? <Label text={label}>{selectorDropdownElement}</Label> : selectorDropdownElement;\n    }\n}\n\nexport default PillSelectorDropdown;\n"],"file":"PillSelectorDropdown.js"}