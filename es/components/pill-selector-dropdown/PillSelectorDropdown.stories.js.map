{"version":3,"sources":["../../../src/components/pill-selector-dropdown/PillSelectorDropdown.stories.js"],"names":["React","State","Store","ContactDatalistItem","PillSelectorDropdown","notes","users","id","name","isExternalUser","generateProps","store","handleInput","value","selectorOptions","forEach","user","toLowerCase","indexOf","push","displayText","set","error","handleSelect","pills","selectedOptions","get","handleRemove","option","index","splice","validator","text","pattern","test","validateForError","count","length","empty","emptyStore","state","map","withPills","storeWithPills","showRoundedPills","showAvatars","customPillStyles","getPillClassName","title","component","parameters"],"mappings":"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","sourcesContent":["// @flow\nimport * as React from 'react';\nimport { State, Store } from '@sambego/storybook-state';\n\nimport ContactDatalistItem from '../contact-datalist-item';\nimport PillSelectorDropdown from './PillSelectorDropdown';\nimport notes from './PillSelectorDropdown.notes.md';\n\nimport './PillSelectorDropdown.stories.scss';\n\nconst users = [\n    { id: 0, name: 'bob@foo.bar' },\n    { id: 1, name: 'sally@foo.bar', isExternalUser: true },\n    { id: 2, name: 'jean@foo.bar' },\n    { id: 3, name: 'longlonglonglonglonglonglonglonglonglonglonglongemail@foo.bar' },\n    { id: 4, name: 'anotherlonglonglonglonglonglonglonglonglonglonglonglongemail@foo.bar' },\n    { id: 5, name: 'aaa@foo.bar' },\n    { id: 6, name: 'bbb@foo.bar' },\n    { id: 7, name: 'ccc@foo.bar' },\n];\n\nfunction generateProps(store) {\n    const handleInput = value => {\n        const selectorOptions = [];\n        if (value !== '') {\n            users.forEach(user => {\n                if (user.name.toLowerCase().indexOf(value.toLowerCase()) !== -1) {\n                    selectorOptions.push({\n                        displayText: user.name,\n                        value: user.id,\n                    });\n                }\n            });\n        }\n        // As user is typing, reset error and update selectorOptions\n        store.set({ selectorOptions, error: '' });\n    };\n\n    const handleSelect = pills => {\n        store.set({\n            selectedOptions: [...store.get('selectedOptions'), ...pills],\n        });\n    };\n\n    const handleRemove = (option, index) => {\n        const selectedOptions = [...store.get('selectedOptions')];\n        selectedOptions.splice(index, 1);\n        store.set({\n            selectedOptions,\n        });\n    };\n\n    const validator = text => {\n        // email input validation\n        const pattern = /^[^\\s<>@,]+@[^\\s<>@,/\\\\]+\\.[^\\s<>@,]+$/i;\n        return pattern.test(((text: any): string));\n    };\n\n    const validateForError = text => {\n        const count = store.get('selectedOptions').length;\n        let error = '';\n\n        if (!text && count === 0) {\n            error = 'Field Required';\n        } else if (text && !validator(text)) {\n            error = 'Invalid Email Address';\n        }\n\n        store.set({ error });\n    };\n\n    return {\n        handleInput,\n        handleRemove,\n        handleSelect,\n        validator,\n        validateForError,\n    };\n}\n\nexport const empty = () => {\n    const emptyStore = new Store({\n        error: '',\n        selectedOptions: [],\n        selectorOptions: [],\n    });\n    const { handleInput, handleRemove, handleSelect, validator, validateForError } = generateProps(emptyStore);\n    return (\n        <State store={emptyStore}>\n            {state => (\n                <PillSelectorDropdown\n                    allowCustomPills\n                    error={state.error}\n                    placeholder=\"Names or email addresses\"\n                    onInput={handleInput}\n                    onRemove={handleRemove}\n                    onSelect={handleSelect}\n                    selectedOptions={state.selectedOptions}\n                    selectorOptions={state.selectorOptions}\n                    validateForError={validateForError}\n                    validator={validator}\n                >\n                    {state.selectorOptions.map(option => (\n                        <ContactDatalistItem key={option.value} name={option.displayText}>\n                            {option.displayText}\n                        </ContactDatalistItem>\n                    ))}\n                </PillSelectorDropdown>\n            )}\n        </State>\n    );\n};\n\nexport const withPills = () => {\n    const storeWithPills = new Store({\n        error: '',\n        selectedOptions: [\n            {\n                displayText: users[2].name,\n                value: users[2].name,\n            },\n            {\n                displayText: users[1].name,\n                value: users[1].name,\n            },\n            {\n                displayText: users[4].name,\n                value: users[4].name,\n            },\n        ],\n        selectorOptions: [],\n    });\n    const { handleInput, handleRemove, handleSelect, validator, validateForError } = generateProps(storeWithPills);\n    return (\n        <State store={storeWithPills}>\n            {state => (\n                <PillSelectorDropdown\n                    allowCustomPills\n                    error={state.error}\n                    placeholder=\"Names or email addresses\"\n                    onInput={handleInput}\n                    onRemove={handleRemove}\n                    onSelect={handleSelect}\n                    selectedOptions={state.selectedOptions}\n                    selectorOptions={state.selectorOptions}\n                    validateForError={validateForError}\n                    validator={validator}\n                >\n                    {state.selectorOptions.map(option => (\n                        <ContactDatalistItem key={option.value} name={option.value}>\n                            {option.displayText}\n                        </ContactDatalistItem>\n                    ))}\n                </PillSelectorDropdown>\n            )}\n        </State>\n    );\n};\n\nexport const showRoundedPills = () => {\n    const storeWithPills = new Store({\n        error: '',\n        selectedOptions: [\n            {\n                displayText: users[2].name,\n                value: users[2].name,\n            },\n            {\n                displayText: users[1].name,\n                value: users[1].name,\n            },\n            {\n                displayText: users[4].name,\n                value: users[4].name,\n            },\n        ],\n        selectorOptions: [],\n    });\n    const { handleInput, handleRemove, handleSelect, validator, validateForError } = generateProps(storeWithPills);\n    return (\n        <State store={storeWithPills}>\n            {state => (\n                <PillSelectorDropdown\n                    allowCustomPills\n                    error={state.error}\n                    placeholder=\"Names or email addresses\"\n                    onInput={handleInput}\n                    onRemove={handleRemove}\n                    onSelect={handleSelect}\n                    selectedOptions={state.selectedOptions}\n                    selectorOptions={state.selectorOptions}\n                    showRoundedPills\n                    validateForError={validateForError}\n                    validator={validator}\n                >\n                    {state.selectorOptions.map(option => (\n                        <ContactDatalistItem key={option.value} name={option.value}>\n                            {option.displayText}\n                        </ContactDatalistItem>\n                    ))}\n                </PillSelectorDropdown>\n            )}\n        </State>\n    );\n};\n\nexport const showAvatars = () => {\n    const storeWithPills = new Store({\n        error: '',\n        selectedOptions: [\n            {\n                text: users[2].name,\n                value: users[2].name,\n                id: users[2].id,\n            },\n            {\n                text: users[1].name,\n                value: users[1].name,\n                id: users[1].id,\n                isExternalUser: users[1].isExternalUser,\n            },\n            {\n                text: users[3].name,\n                value: users[3].name,\n                id: users[3].id,\n            },\n        ],\n        selectorOptions: [],\n    });\n    const { handleInput, handleRemove, handleSelect, validator, validateForError } = generateProps(storeWithPills);\n    return (\n        <State store={storeWithPills}>\n            {state => (\n                <PillSelectorDropdown\n                    allowCustomPills\n                    error={state.error}\n                    placeholder=\"Names or email addresses\"\n                    onInput={handleInput}\n                    onRemove={handleRemove}\n                    onSelect={handleSelect}\n                    selectedOptions={state.selectedOptions}\n                    selectorOptions={state.selectorOptions}\n                    showRoundedPills\n                    showAvatars\n                    validateForError={validateForError}\n                    validator={validator}\n                >\n                    {state.selectorOptions.map(option => (\n                        <ContactDatalistItem key={option.value} name={option.value}>\n                            {option.displayText}\n                        </ContactDatalistItem>\n                    ))}\n                </PillSelectorDropdown>\n            )}\n        </State>\n    );\n};\n\nexport const customPillStyles = () => {\n    /**\n     * NOTE: For consistent styling, use bdl-RoundPill mixin when creating custom pill classes.\n     *\n     * Example:\n     *\n     *    .bdl-RoundPill {\n     *       &.is-custom {\n     *         @include bdl-RoundPill($border-color: $bdl-watermelon-red-50, $selected-border-color: $bdl-watermelon-red-50);\n     *       }\n     *     }\n     *\n     *\n     */\n    const storeWithPills = new Store({\n        error: '',\n        selectedOptions: [\n            {\n                displayText: 'default@example.com',\n                value: '1',\n            },\n            {\n                displayText: 'custom@example.com',\n                value: '2',\n            },\n        ],\n        selectorOptions: [],\n    });\n    const getPillClassName = ({ value }) => {\n        switch (value) {\n            case '2':\n                return 'is-custom';\n            default:\n                return '';\n        }\n    };\n    const { handleInput, handleRemove, handleSelect, validator, validateForError } = generateProps(storeWithPills);\n    return (\n        <State store={storeWithPills}>\n            {state => (\n                <PillSelectorDropdown\n                    allowCustomPills\n                    error={state.error}\n                    getPillClassName={getPillClassName}\n                    placeholder=\"Names or email addresses\"\n                    onInput={handleInput}\n                    onRemove={handleRemove}\n                    onSelect={handleSelect}\n                    selectedOptions={state.selectedOptions}\n                    selectorOptions={state.selectorOptions}\n                    showRoundedPills\n                    validateForError={validateForError}\n                    validator={validator}\n                >\n                    {state.selectorOptions.map(option => (\n                        <ContactDatalistItem key={option.value} name={option.displayText}>\n                            {option.displayText}\n                        </ContactDatalistItem>\n                    ))}\n                </PillSelectorDropdown>\n            )}\n        </State>\n    );\n};\n\nexport default {\n    title: 'Components|PillSelectorDropdown',\n    component: PillSelectorDropdown,\n    parameters: {\n        notes,\n    },\n};\n"],"file":"PillSelectorDropdown.stories.js"}