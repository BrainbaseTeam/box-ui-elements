{"version":3,"sources":["../../../src/components/pill-selector-dropdown/PillSelectorDropdownField.js"],"names":["React","getProp","noop","PillSelectorDropdown","defaultDropdownRenderer","defaultDropdownFilter","defaultInputParser","PillSelectorDropdownField","inputText","event","field","props","name","onBlur","createFakeEventTarget","text","onInput","setState","handleBlur","options","onChange","value","filteredOptions","filter","option","isValidOption","index","slice","splice","inputValue","inputParser","selectedOptions","displayText","trim","target","state","className","dropdownFilter","dropdownRenderer","dropdownScrollBoundarySelector","form","isCustomInputAllowed","isDisabled","label","placeholder","shouldClearUnmatchedInput","validator","errors","touched","isTouched","error","inputProps","handleInput","handleRemove","handleSelect","handleParseItems","PureComponent"],"mappings":"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","sourcesContent":["// @flow\nimport * as React from 'react';\nimport getProp from 'lodash/get';\nimport noop from 'lodash/noop';\nimport type { FieldProps } from 'formik';\n\nimport PillSelectorDropdown from './PillSelectorDropdown';\nimport defaultDropdownRenderer from './defaultDropdownRenderer';\nimport defaultDropdownFilter from './filters/defaultDropdownFilter';\nimport defaultInputParser from './defaultInputParser';\nimport type { Option, OptionValue } from './flowTypes';\n\ntype Props = FieldProps & {\n    /** CSS class for the component. */\n    className?: string,\n    /** Given selected values and input text, returns a list of filtered options. Defaults to defaultDropdownFilter. */\n    dropdownFilter: (options: Array<Option>, selectedValues: Array<Option>, inputText: string) => Array<Option>,\n    /** Given options, renders the dropdown list. Defaults to defaultDropdownRenderer. */\n    dropdownRenderer: (options: Array<Option>) => React.Node,\n    /** A CSS selector matching the element to use as a boundary when auto-scrolling dropdown elements into view. When not provided, boundary will be determined by scrollIntoView utility function */\n    dropdownScrollBoundarySelector?: string,\n    /** Function to parse user input into an array of items. Defaults to CSV parser. */\n    inputParser: (inputValue: string, options: Array<Option>, selectedOptions: Array<Option>) => Array<Option>,\n    /** If true, the user can add pills not included in the dropdown options. Defaults to true. */\n    isCustomInputAllowed: boolean,\n    /** If true, the input control is disabled so no more input can be made. Defaults to false. */\n    isDisabled: boolean,\n    /** Pill selector label. */\n    label: React.Node,\n    /** Function to intercept the user entered input to fetch options in the selector dropdown */\n    onInput: (text: string, event?: SyntheticInputEvent<HTMLInputElement>) => void,\n    /** Array of options shown in the dropdown. */\n    options: Array<Option>,\n    /** Called to check if pill text is valid. The text is passed in. */\n    placeholder: string,\n    /** Determines whether or not copy pasted text is cleared when it does not result in new pills being added */\n    shouldClearUnmatchedInput: boolean,\n    /** A placeholder to show in the input when there are no pills. */\n    validator?: (option: Option | OptionValue) => boolean,\n};\n\ntype State = {\n    inputText: string,\n};\n\nclass PillSelectorDropdownField extends React.PureComponent<Props, State> {\n    static defaultProps = {\n        dropdownFilter: defaultDropdownFilter,\n        dropdownRenderer: defaultDropdownRenderer,\n        inputParser: defaultInputParser,\n        isCustomInputAllowed: true,\n        isDisabled: false,\n        onInput: noop,\n        options: [],\n        shouldClearUnmatchedInput: false,\n    };\n\n    state = { inputText: '' };\n\n    isValidOption({ displayText }: Option) {\n        return !!displayText.trim();\n    }\n\n    createFakeEventTarget(name: string, value?: Array<Option>) {\n        // Returns a dummy EventTarget like object that formik understands how to read\n        return { target: { name, value } };\n    }\n\n    handleBlur = (event?: SyntheticInputEvent<HTMLInputElement>) => {\n        const { field } = this.props;\n        const { name, onBlur } = field;\n        // Sets touched in formik for the pill selector field.\n        // Event may or may not be available at this time.\n        onBlur(event || this.createFakeEventTarget(name));\n    };\n\n    handleInput = (text: string, event?: SyntheticInputEvent<HTMLInputElement>) => {\n        const { onInput } = this.props;\n        this.setState({ inputText: text });\n        onInput(text, event);\n        if (text === '') {\n            this.handleBlur(event);\n        }\n    };\n\n    handleSelect = (options: Array<Option>) => {\n        const { field } = this.props;\n        const { name, onChange, value = [] } = field;\n        const filteredOptions = options.filter(option => this.isValidOption(option));\n        onChange(this.createFakeEventTarget(name, [...value, ...filteredOptions]));\n    };\n\n    handleRemove = (option: Option, index: number) => {\n        const { field } = this.props;\n        const { name, onChange, value = [] } = field;\n        const options = value.slice();\n        options.splice(index, 1);\n        onChange(this.createFakeEventTarget(name, options));\n    };\n\n    handleParseItems = (inputValue: string): ?Array<Option> => {\n        const { field, inputParser, options } = this.props;\n        const { value: selectedOptions = [] } = field;\n        return inputParser(inputValue, options, selectedOptions);\n    };\n\n    render() {\n        const { inputText } = this.state;\n        const {\n            className,\n            dropdownFilter,\n            dropdownRenderer,\n            dropdownScrollBoundarySelector,\n            field,\n            form,\n            isCustomInputAllowed,\n            isDisabled,\n            label,\n            options,\n            placeholder,\n            shouldClearUnmatchedInput,\n            validator,\n        } = this.props;\n        const { name, value = [] }: { name: string, value: Array<Option> } = field;\n        const { errors, touched } = form;\n        const isTouched = getProp(touched, name);\n        const error = isTouched ? getProp(errors, name) : null;\n        const filteredOptions: Array<Option> = dropdownFilter(options, value, inputText);\n        const inputProps = { name }; // so that events generated have event.target.name\n\n        return (\n            <PillSelectorDropdown\n                allowCustomPills={isCustomInputAllowed}\n                allowInvalidPills\n                className={className}\n                disabled={isDisabled}\n                dropdownScrollBoundarySelector={dropdownScrollBoundarySelector}\n                inputProps={inputProps}\n                label={label}\n                error={error}\n                onBlur={this.handleBlur}\n                onInput={this.handleInput}\n                onRemove={this.handleRemove}\n                onSelect={this.handleSelect}\n                parseItems={this.handleParseItems}\n                placeholder={placeholder}\n                selectedOptions={value}\n                selectorOptions={filteredOptions}\n                shouldClearUnmatchedInput={shouldClearUnmatchedInput}\n                shouldSetActiveItemOnOpen\n                validator={validator}\n            >\n                {dropdownRenderer(filteredOptions)}\n            </PillSelectorDropdown>\n        );\n    }\n}\n\nexport default PillSelectorDropdownField;\n"],"file":"PillSelectorDropdownField.js"}