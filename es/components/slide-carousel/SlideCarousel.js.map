{"version":3,"sources":["../../../src/components/slide-carousel/SlideCarousel.js"],"names":["React","uniqueId","SlideCarouselPrimitive","SlideCarousel","props","index","setState","selectedIndex","id","state","initialIndex","children","lastChildIndex","Math","max","Children","count","boundedSelectedIndex","floor","className","contentHeight","title","getBoundedSelectedIndex","setSelectedIndex","Component"],"mappings":";;;;;;;;;;;;;;;;;;;;AACA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,QAAP,MAAqB,iBAArB;AAEA,OAAOC,sBAAP,MAAmC,0BAAnC;AAEA,OAAO,sBAAP;;IAeMC,a;;;;;AAMF,yBAAYC,KAAZ,EAA0B;AAAA;;AAAA;;AACtB,uFAAMA,KAAN;;AADsB,uEA0BP,UAACC,KAAD,EAAmB;AAClC,YAAKC,QAAL,CAAc;AAAEC,QAAAA,aAAa,EAAEF;AAAjB,OAAd;AACH,KA5ByB;;AAGtB,UAAKG,EAAL,GAAUP,QAAQ,CAAC,eAAD,CAAlB;AAEA,UAAKQ,KAAL,GAAa;AACTF,MAAAA,aAAa,EAAEH,KAAK,CAACM,YAAN,IAAsB;AAD5B,KAAb;AALsB;AAQzB;AAED;;;;;;;;;;8CAM0B;AAAA,UACdC,QADc,GACD,KAAKP,KADJ,CACdO,QADc;AAAA,UAEdJ,aAFc,GAEI,KAAKE,KAFT,CAEdF,aAFc;AAItB,UAAMK,cAAc,GAAGC,IAAI,CAACC,GAAL,CAASd,KAAK,CAACe,QAAN,CAAeC,KAAf,CAAqBL,QAArB,IAAiC,CAA1C,EAA6C,CAA7C,CAAvB;AACA,UAAMM,oBAAoB,GAAGJ,IAAI,CAACC,GAAL,CAASP,aAAa,IAAI,CAA1B,EAA6B,CAA7B,CAA7B;AAEA,aAAOU,oBAAoB,GAAGL,cAAvB,GAAwCA,cAAxC,GAAyDC,IAAI,CAACK,KAAL,CAAWD,oBAAX,CAAhE;AACH;;;6BAQQ;AAAA,wBACiD,KAAKb,KADtD;AAAA,UACGO,QADH,eACGA,QADH;AAAA,UACaQ,SADb,eACaA,SADb;AAAA,UACwBC,aADxB,eACwBA,aADxB;AAAA,UACuCC,KADvC,eACuCA,KADvC;AAEL,UAAMd,aAAa,GAAG,KAAKe,uBAAL,EAAtB;AAEA,aACI,oBAAC,sBAAD;AACI,QAAA,SAAS,EAAEH,SADf;AAEI,QAAA,aAAa,EAAEC,aAFnB;AAGI,QAAA,QAAQ,EAAE,KAAKZ,EAHnB;AAII,QAAA,WAAW,EAAE,KAAKe,gBAJtB;AAKI,QAAA,aAAa,EAAEhB,aALnB;AAMI,QAAA,KAAK,EAAEc;AANX,SAQKV,QARL,CADJ;AAYH;;;;EAtDuBX,KAAK,CAACwB,S;;gBAA5BrB,a,kBACoB;AAClBgB,EAAAA,SAAS,EAAE,EADO;AAElBT,EAAAA,YAAY,EAAE;AAFI,C;;AAwD1B,eAAeP,aAAf","sourcesContent":["// @flow\nimport * as React from 'react';\nimport uniqueId from 'lodash/uniqueId';\n\nimport SlideCarouselPrimitive from './SlideCarouselPrimitive';\n\nimport './SlideCarousel.scss';\n\ntype Props = {\n    children?: React.Node,\n    className?: string,\n    /** Used as the value for the content area's style height property */\n    contentHeight?: string,\n    initialIndex: number,\n    title?: string,\n};\n\ntype State = {\n    selectedIndex: number,\n};\n\nclass SlideCarousel extends React.Component<Props, State> {\n    static defaultProps = {\n        className: '',\n        initialIndex: 0,\n    };\n\n    constructor(props: Props) {\n        super(props);\n\n        this.id = uniqueId('slidecarousel');\n\n        this.state = {\n            selectedIndex: props.initialIndex || 0,\n        };\n    }\n\n    /*\n     * If the selected index in the state has somehow gotten set to an\n     * out of bounds value (either because we were passed a bad value,\n     * or the number of children has reduced), compute a new selected\n     * index which is a floored value between 0 <= index < num children\n     */\n    getBoundedSelectedIndex() {\n        const { children } = this.props;\n        const { selectedIndex } = this.state;\n\n        const lastChildIndex = Math.max(React.Children.count(children) - 1, 0);\n        const boundedSelectedIndex = Math.max(selectedIndex || 0, 0);\n\n        return boundedSelectedIndex > lastChildIndex ? lastChildIndex : Math.floor(boundedSelectedIndex);\n    }\n\n    setSelectedIndex = (index: number) => {\n        this.setState({ selectedIndex: index });\n    };\n\n    id: string;\n\n    render() {\n        const { children, className, contentHeight, title } = this.props;\n        const selectedIndex = this.getBoundedSelectedIndex();\n\n        return (\n            <SlideCarouselPrimitive\n                className={className}\n                contentHeight={contentHeight}\n                idPrefix={this.id}\n                onSelection={this.setSelectedIndex}\n                selectedIndex={selectedIndex}\n                title={title}\n            >\n                {children}\n            </SlideCarouselPrimitive>\n        );\n    }\n}\n\nexport default SlideCarousel;\n"],"file":"SlideCarousel.js"}