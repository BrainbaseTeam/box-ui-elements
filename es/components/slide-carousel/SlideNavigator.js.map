{"version":3,"sources":["../../../src/components/slide-carousel/SlideNavigator.js"],"names":["range","React","SlideButton","SlideNavigator","index","buttonElements","length","focus","event","props","numOptions","selectedIndex","nextIndex","key","handleSelection","preventDefault","stopPropagation","focusOnButtonElement","onSelection","getButtonIdFromValue","getPanelIdFromValue","handleKeyDown","map","child","i","buttonEl","Component"],"mappings":";;;;;;;;;;;;;;;;;;;;AACA,OAAOA,KAAP,MAAkB,cAAlB;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AAEA,OAAOC,WAAP,MAAwB,eAAxB;;IAcMC,c;;;;;;;;;;;;;;;;;;qEACe,E;;2EAEM,UAACC,KAAD,EAAmB;AACtC,UAAIA,KAAK,GAAG,CAAR,GAAY,MAAKC,cAAL,CAAoBC,MAAhC,IAA0CF,KAAK,GAAG,CAAtD,EAAyD;AACrD;AACH;;AAED,YAAKC,cAAL,CAAoBD,KAApB,EAA2BG,KAA3B;AACH,K;;oEAEe,UAACC,KAAD,EAAgD;AAAA,wBACtB,MAAKC,KADiB;AAAA,UACpDC,UADoD,eACpDA,UADoD;AAAA,UACxCC,aADwC,eACxCA,aADwC;AAG5D,UAAIC,SAAS,GAAG,IAAhB;;AACA,cAAQJ,KAAK,CAACK,GAAd;AACI,aAAK,YAAL;AACID,UAAAA,SAAS,GAAG,CAACD,aAAa,GAAG,CAAjB,IAAsBD,UAAlC;AACA;;AAEJ,aAAK,WAAL;AACIE,UAAAA,SAAS,GAAG,CAACD,aAAa,GAAG,CAAhB,GAAoBD,UAArB,IAAmCA,UAA/C;AACA;;AAEJ;AACI;AAVR;;AAaA,YAAKI,eAAL,CAAqBF,SAArB;;AACAJ,MAAAA,KAAK,CAACO,cAAN;AACAP,MAAAA,KAAK,CAACQ,eAAN;AACH,K;;sEAEiB,UAACZ,KAAD,EAAmB;AACjC,YAAKa,oBAAL,CAA0Bb,KAA1B;;AACA,YAAKK,KAAL,CAAWS,WAAX,CAAuBd,KAAvB;AACH,K;;;;;;;6BAEQ;AAAA;;AAAA,yBACyF,KAAKK,KAD9F;AAAA,UACGU,oBADH,gBACGA,oBADH;AAAA,UACyBC,mBADzB,gBACyBA,mBADzB;AAAA,UAC8CV,UAD9C,gBAC8CA,UAD9C;AAAA,UAC0DQ,WAD1D,gBAC0DA,WAD1D;AAAA,UACuEP,aADvE,gBACuEA,aADvE;AAGL,aACI;AACI,QAAA,SAAS,EAAC;AACV;AAFJ;AAGI,QAAA,SAAS,EAAE,KAAKU,aAHpB;AAII,QAAA,IAAI,EAAC;AAJT,SAMKrB,KAAK,CAACU,UAAD,CAAL,CAAkBY,GAAlB,CAAsB,UAACC,KAAD,EAAQC,CAAR;AAAA,eACnB,oBAAC,WAAD;AACI,UAAA,GAAG,EAAEA,CADT;AAEI,2BAAeJ,mBAAmB,CAACI,CAAD,CAFtC;AAGI,uCAAoBA,CAApB,CAHJ;AAII,UAAA,SAAS,EAAE,mBAAAC,QAAQ,EAAI;AACnB,YAAA,MAAI,CAACpB,cAAL,CAAoBmB,CAApB,IAAyBC,QAAzB;AACH,WANL;AAOI,UAAA,EAAE,EAAEN,oBAAoB,CAACK,CAAD,CAP5B;AAQI,UAAA,UAAU,EAAEA,CAAC,KAAKb,aARtB;AASI,UAAA,OAAO,EAAE;AAAA,mBAAMO,WAAW,CAACM,CAAD,CAAjB;AAAA,WATb;AAUI,UAAA,QAAQ,EAAEA,CAAC,KAAKb,aAAN,GAAsB,GAAtB,GAA4B;AAV1C,UADmB;AAAA,OAAtB,CANL,CADJ;AAuBH;;;;EAhEwBV,KAAK,CAACyB,S;;AAmEnC,eAAevB,cAAf","sourcesContent":["// @flow\nimport range from 'lodash/range';\nimport * as React from 'react';\n\nimport SlideButton from './SlideButton';\n\ntype Props = {\n    /** Pure function that returns a button id unique to the given value  */\n    getButtonIdFromValue: Function,\n    /** Pure function that returns a panel id unique to the given value  */\n    getPanelIdFromValue: Function,\n    /** Gets called when a slide is selected. Called with the appropriate slide index  */\n    numOptions: number,\n    /** The number of slides. Each is associated to an index, starting from 0 */\n    onSelection: Function,\n    selectedIndex: number,\n};\n\nclass SlideNavigator extends React.Component<Props> {\n    buttonElements = [];\n\n    focusOnButtonElement = (index: number) => {\n        if (index + 1 > this.buttonElements.length || index < 0) {\n            return;\n        }\n\n        this.buttonElements[index].focus();\n    };\n\n    handleKeyDown = (event: SyntheticKeyboardEvent<HTMLElement>) => {\n        const { numOptions, selectedIndex } = this.props;\n\n        let nextIndex = null;\n        switch (event.key) {\n            case 'ArrowRight':\n                nextIndex = (selectedIndex + 1) % numOptions;\n                break;\n\n            case 'ArrowLeft':\n                nextIndex = (selectedIndex - 1 + numOptions) % numOptions;\n                break;\n\n            default:\n                return;\n        }\n\n        this.handleSelection(nextIndex);\n        event.preventDefault();\n        event.stopPropagation();\n    };\n\n    handleSelection = (index: number) => {\n        this.focusOnButtonElement(index);\n        this.props.onSelection(index);\n    };\n\n    render() {\n        const { getButtonIdFromValue, getPanelIdFromValue, numOptions, onSelection, selectedIndex } = this.props;\n\n        return (\n            <nav\n                className=\"slide-navigator\"\n                /* eslint-disable jsx-a11y/no-noninteractive-element-to-interactive-role */\n                onKeyDown={this.handleKeyDown}\n                role=\"tablist\"\n            >\n                {range(numOptions).map((child, i) => (\n                    <SlideButton\n                        key={i}\n                        aria-controls={getPanelIdFromValue(i)}\n                        aria-label={`slide${i}`}\n                        buttonRef={buttonEl => {\n                            this.buttonElements[i] = buttonEl;\n                        }}\n                        id={getButtonIdFromValue(i)}\n                        isSelected={i === selectedIndex}\n                        onClick={() => onSelection(i)}\n                        tabIndex={i === selectedIndex ? '0' : '-1'}\n                    />\n                ))}\n            </nav>\n        );\n    }\n}\n\nexport default SlideNavigator;\n"],"file":"SlideNavigator.js"}