{"version":3,"sources":["../../../src/components/selector-dropdown/SelectorDropdown.js"],"names":["React","classNames","uniqueId","scrollIntoView","ScrollWrapper","OVERLAY_WRAPPER_CLASS","stopDefaultEvent","event","preventDefault","stopPropagation","SelectorDropdown","props","index","setState","activeItemIndex","setActiveItemID","id","scrollBoundarySelector","itemEl","document","getElementById","scrollOptions","block","boundary","querySelector","activeItemID","prevChildren","children","childrenCount","Children","count","prevChildrenCount","childrenKeys","map","child","key","prevChildrenKeys","some","childKey","openDropdown","container","selectorDropdownRef","current","isInside","target","Node","contains","closeDropdown","isAlwaysOpen","onEnter","state","isDropdownOpen","nextIndex","setActiveItem","prevIndex","selectItem","resetActiveItem","shouldOpen","shouldSetActiveItemOnOpen","addEventListener","handleDocumentClick","removeEventListener","onSelect","listboxID","createRef","haveChildrenChanged","dividerIndex","overlayTitle","className","title","selector","shouldScroll","isOpen","inputProps","role","list","toLowerCase","item","itemProps","onClick","onMouseDown","onMouseEnter","isActive","hasDivider","cloneElement","handleFocus","handleKeyDown","handleInput","Component"],"mappings":"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","sourcesContent":["// @flow\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport uniqueId from 'lodash/uniqueId';\n\nimport { scrollIntoView } from '../../utils/dom';\nimport ScrollWrapper from '../scroll-wrapper';\nimport { OVERLAY_WRAPPER_CLASS } from '../../constants';\n\nimport './SelectorDropdown.scss';\n\nfunction stopDefaultEvent(event) {\n    event.preventDefault();\n    event.stopPropagation();\n}\n\ntype Props = {\n    /** Options to render in the dropdown filtered based on the input text */\n    children?: React.Node,\n    /** CSS class for the wrapper div */\n    className?: string,\n    /** Index at which to insert the divider */\n    dividerIndex?: number,\n    /** Options to keep the results always open */\n    isAlwaysOpen?: boolean,\n    /** Function called on keyboard \"Enter\" event only if enter does not trigger selection */\n    onEnter?: (event: SyntheticKeyboardEvent<HTMLDivElement>) => void,\n    /** Function called with the index of the selected option and the event (selected by keyboard or click) */\n    onSelect?: Function,\n    /** Optional title of the overlay */\n    overlayTitle?: string,\n    /** A CSS selector matching the element to use as a boundary when auto-scrolling dropdown elements into view. When not provided, boundary will be determined by scrollIntoView utility function */\n    scrollBoundarySelector?: string,\n    /** Component containing an input text field and takes `inputProps` to spread onto the input element */\n    selector: React.Element<any>,\n    /** Boolean to indicate whether the dropdown should scroll */\n    shouldScroll?: boolean,\n    /** Determines whether or not the first item is highlighted automatically when the dropdown opens */\n    shouldSetActiveItemOnOpen?: boolean,\n    /** Optional title text that will be rendered above the list */\n    title?: React.Node,\n};\n\ntype State = {\n    activeItemID: string | null,\n    activeItemIndex: number,\n    shouldOpen: boolean,\n};\n\nclass SelectorDropdown extends React.Component<Props, State> {\n    constructor(props: Props) {\n        super(props);\n\n        this.listboxID = uniqueId('listbox');\n\n        this.state = {\n            activeItemID: null,\n            activeItemIndex: -1,\n            shouldOpen: false,\n        };\n\n        this.selectorDropdownRef = React.createRef();\n    }\n\n    componentDidUpdate({ shouldSetActiveItemOnOpen, children }: Props) {\n        if (this.haveChildrenChanged(children)) {\n            // For UX purposes filtering the items is equivalent\n            // to re-opening the dropdown. In such cases we highlight\n            // the first item when configured to do so\n            if (shouldSetActiveItemOnOpen) {\n                this.setActiveItem(0);\n            } else {\n                this.resetActiveItem();\n            }\n        }\n    }\n\n    componentWillUnmount() {\n        // just in case event listener was added during openDropdown() but the component\n        // gets unmounted without closeDropdown()\n        document.removeEventListener('click', this.handleDocumentClick, true);\n    }\n\n    setActiveItem = (index: number) => {\n        this.setState({ activeItemIndex: index });\n        if (index === -1) {\n            this.setActiveItemID(null);\n        }\n    };\n\n    setActiveItemID = (id: string | null) => {\n        const { scrollBoundarySelector } = this.props;\n        const itemEl = id ? document.getElementById(id) : null;\n\n        const scrollOptions: Object = {\n            block: 'nearest',\n        };\n\n        // Allow null in case we want to clear the default\n        // boundary from scrollIntoView\n        if (typeof scrollBoundarySelector !== 'undefined') {\n            scrollOptions.boundary = document.querySelector(scrollBoundarySelector);\n        }\n\n        this.setState({ activeItemID: id }, () => {\n            scrollIntoView(itemEl, scrollOptions);\n        });\n    };\n\n    listboxID: string;\n\n    selectorDropdownRef: { current: null | HTMLDivElement };\n\n    haveChildrenChanged = (prevChildren?: React.Node) => {\n        const { children } = this.props;\n        const childrenCount = React.Children.count(children);\n        const prevChildrenCount = React.Children.count(prevChildren);\n\n        if (childrenCount !== prevChildrenCount) {\n            return true;\n        }\n\n        if (childrenCount === 0) {\n            return false;\n        }\n\n        const childrenKeys = React.Children.map(children, child => child.key);\n        const prevChildrenKeys = React.Children.map(prevChildren, child => child.key);\n        return childrenKeys.some((childKey, index) => childKey !== prevChildrenKeys[index]);\n    };\n\n    resetActiveItem = () => {\n        this.setState({\n            activeItemID: null,\n            activeItemIndex: -1,\n        });\n    };\n\n    handleFocus = () => {\n        this.openDropdown();\n    };\n\n    handleDocumentClick = (event: MouseEvent) => {\n        const container = this.selectorDropdownRef.current;\n        const isInside =\n            (container && event.target instanceof Node && container.contains(event.target)) ||\n            container === event.target;\n\n        if (!isInside) {\n            this.closeDropdown();\n        }\n    };\n\n    handleInput = () => {\n        this.openDropdown();\n    };\n\n    handleKeyDown = (event: SyntheticKeyboardEvent<HTMLDivElement>) => {\n        const { children, isAlwaysOpen, onEnter } = this.props;\n        const { activeItemIndex } = this.state;\n        const childrenCount = React.Children.count(children);\n\n        switch (event.key) {\n            case 'ArrowDown':\n                if (this.isDropdownOpen()) {\n                    if (childrenCount) {\n                        stopDefaultEvent(event);\n                    }\n                    const nextIndex = activeItemIndex === childrenCount - 1 ? -1 : activeItemIndex + 1;\n                    this.setActiveItem(nextIndex);\n                } else {\n                    this.openDropdown();\n                }\n                break;\n            case 'ArrowUp':\n                if (this.isDropdownOpen()) {\n                    if (childrenCount) {\n                        stopDefaultEvent(event);\n                    }\n                    const prevIndex = activeItemIndex === -1 ? childrenCount - 1 : activeItemIndex - 1;\n                    this.setActiveItem(prevIndex);\n                } else {\n                    this.openDropdown();\n                }\n                break;\n            case 'Enter':\n                if (activeItemIndex !== -1 && this.isDropdownOpen()) {\n                    stopDefaultEvent(event);\n                    this.selectItem(activeItemIndex, event);\n                } else if (onEnter) {\n                    onEnter(event);\n                }\n                break;\n            case 'Tab':\n                if (this.isDropdownOpen()) {\n                    this.closeDropdown();\n                    this.resetActiveItem();\n                }\n                break;\n            case 'Escape':\n                if (!isAlwaysOpen && this.isDropdownOpen()) {\n                    stopDefaultEvent(event);\n                    this.closeDropdown();\n                    this.resetActiveItem();\n                }\n                break;\n            // no default\n        }\n    };\n\n    isDropdownOpen = () => {\n        const { children, isAlwaysOpen } = this.props;\n        const { shouldOpen } = this.state;\n        const childrenCount = React.Children.count(children);\n        return childrenCount > 0 && (!!isAlwaysOpen || shouldOpen);\n    };\n\n    openDropdown = () => {\n        if (!this.state.shouldOpen) {\n            const { shouldSetActiveItemOnOpen } = this.props;\n\n            if (shouldSetActiveItemOnOpen) {\n                this.setActiveItem(0);\n            }\n            this.setState({ shouldOpen: true });\n            document.addEventListener('click', this.handleDocumentClick, true);\n        }\n    };\n\n    closeDropdown = () => {\n        this.setState({ shouldOpen: false });\n        document.removeEventListener('click', this.handleDocumentClick, true);\n    };\n\n    selectItem = (index: number, event: SyntheticEvent<>) => {\n        const { onSelect } = this.props;\n        if (onSelect) {\n            onSelect(index, event);\n        }\n        this.closeDropdown();\n    };\n\n    render() {\n        const { listboxID, selectItem, setActiveItem, setActiveItemID, closeDropdown } = this;\n        const { dividerIndex, overlayTitle, children, className, title, selector, shouldScroll } = this.props;\n        const { activeItemID, activeItemIndex } = this.state;\n        const isOpen = this.isDropdownOpen();\n        const inputProps: Object = {\n            'aria-activedescendant': activeItemID,\n            'aria-autocomplete': 'list',\n            'aria-expanded': isOpen,\n            role: 'combobox',\n        };\n        if (isOpen) {\n            inputProps['aria-owns'] = listboxID;\n        }\n\n        const list = (\n            <ul\n                className={classNames('overlay', overlayTitle ? overlayTitle.toLowerCase() : '')}\n                id={listboxID}\n                role=\"listbox\"\n            >\n                {overlayTitle && <h5 className=\"SelectorDropdown-title\">{overlayTitle}</h5>}\n                {React.Children.map(children, (item, index) => {\n                    const itemProps: Object = {\n                        onClick: event => {\n                            selectItem(index, event);\n                        },\n                        /* preventDefault on mousedown so blur doesn't happen before click */\n                        onMouseDown: event => {\n                            event.preventDefault();\n                        },\n                        onMouseEnter: () => {\n                            setActiveItem(index);\n                        },\n                        closeDropdown: () => {\n                            closeDropdown();\n                        },\n                        setActiveItemID,\n                    };\n\n                    if (index === activeItemIndex) {\n                        itemProps.isActive = true;\n                    }\n\n                    const hasDivider = index === dividerIndex;\n\n                    return (\n                        <>\n                            {hasDivider && <hr className=\"SelectorDropdown-divider\" />}\n                            {React.cloneElement(item, itemProps)}\n                        </>\n                    );\n                })}\n            </ul>\n        );\n\n        // change onKeyPress/onPaste back to onInput when React fixes this IE11 bug: https://github.com/facebook/react/issues/7280\n\n        // We're simulating the blur event with the tab key listener and the\n        // click listener as a proxy because IE will trigger a blur when\n        // using the scrollbar in the dropdown which indavertently closes the dropdown.\n        return (\n            // eslint-disable-next-line jsx-a11y/no-static-element-interactions\n            <div\n                className={classNames('SelectorDropdown', className)}\n                onFocus={this.handleFocus}\n                onKeyDown={this.handleKeyDown}\n                onKeyPress={this.handleInput}\n                onPaste={this.handleInput}\n                ref={this.selectorDropdownRef}\n            >\n                {React.cloneElement(selector, { inputProps })}\n                {isOpen && (\n                    <div className={`${OVERLAY_WRAPPER_CLASS} is-visible`}>\n                        {title}\n                        {shouldScroll ? <ScrollWrapper>{list}</ScrollWrapper> : list}\n                    </div>\n                )}\n            </div>\n        );\n    }\n}\n\nexport default SelectorDropdown;\n"],"file":"SelectorDropdown.js"}