{"version":3,"sources":["../../../src/components/time-input/TimeInputUtils.ts"],"names":["VALID_TIME_REGEX","AM_REGEX","PM_REGEX","NUMBER_REGEX","TWELVE_HOURS","SIXTY_MINUTES","DEFAULT_PARSED_TIME","hours","minutes","VALID_NUMBER_COUNT","isValidTime","input","test","parseTimeFromString","isRequired","SyntaxError","timeArray","match","length","hasAMNotation","hasPMNotation","numericMinutes","parseInt","numericHours"],"mappings":";;;;;;;;AAAA,IAAMA,gBAAgB,GAAG,6GAAzB;AACA,IAAMC,QAAQ,GAAG,0DAAjB;AACA,IAAMC,QAAQ,GAAG,oDAAjB;AACA,IAAMC,YAAY,GAAG,aAArB;AACA,IAAMC,YAAY,GAAG,EAArB;AACA,IAAMC,aAAa,GAAG,EAAtB;AACA,IAAMC,mBAAmB,GAAG;AAAEC,EAAAA,KAAK,EAAE,CAAT;AAAYC,EAAAA,OAAO,EAAE;AAArB,CAA5B;AACA,IAAMC,kBAAkB,GAAG,CAA3B;AAEA;;;;;;AAKA,OAAO,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAACC,KAAD,EAA6B;AACpD,SAAO,CAAC,CAACA,KAAF,IAAWX,gBAAgB,CAACY,IAAjB,CAAsBD,KAAtB,CAAlB;AACH,CAFM;AAIP;;;;;;;AAMA,OAAO,IAAME,mBAAmB,GAAG,SAAtBA,mBAAsB,CAACF,KAAD,EAAiBG,UAAjB,EAA8E;AAC7G;AACA,MAAI,CAACH,KAAD,IAAU,CAACG,UAAf,EAA2B,OAAOR,mBAAP,CAFkF,CAI7G;;AACA,MAAI,CAACK,KAAD,IAAU,CAACD,WAAW,CAACC,KAAD,CAA1B,EAAmC;AAC/B,UAAM,IAAII,WAAJ,EAAN;AACH,GAP4G,CAS7G;;;AACA,MAAMC,SAAS,GAAGL,KAAK,CAACM,KAAN,CAAYd,YAAZ,CAAlB;AACA,MAAI,CAACa,SAAD,IAAc,CAACA,SAAS,CAACE,MAA7B,EAAqC,OAAOZ,mBAAP;;AACrC,MAAIU,SAAS,CAACE,MAAV,GAAmBT,kBAAvB,EAA2C;AACvC,UAAM,IAAIM,WAAJ,EAAN;AACH,GAd4G,CAgB7G;AACA;AACA;AACA;AACA;;;AACA,MAAMI,aAAa,GAAGlB,QAAQ,CAACW,IAAT,CAAcD,KAAd,CAAtB;AACA,MAAMS,aAAa,GAAGlB,QAAQ,CAACU,IAAT,CAAcD,KAAd,CAAtB;;AAtB6G,kCAuBtFK,SAvBsF;AAAA,MAuBxGT,KAvBwG;AAAA,MAuBjGC,OAvBiG;;AAwB7G,MAAID,KAAK,IAAIC,OAAT,IAAoBD,KAAK,CAACW,MAAN,KAAiB,CAArC,IAA0CV,OAAO,CAACU,MAAR,KAAmB,CAAjE,EAAoE;AAChEV,IAAAA,OAAO,GAAGD,KAAK,CAAC,CAAD,CAAL,GAAWC,OAArB;AACAD,IAAAA,KAAK,GAAGA,KAAK,CAAC,CAAD,CAAb;AACH,GA3B4G,CA6B7G;;;AACA,MAAMc,cAAc,GAAGb,OAAO,GAAGc,QAAQ,CAACd,OAAD,EAAU,EAAV,CAAX,GAA2B,CAAzD,CA9B6G,CAgC7G;AACA;;AACA,MAAIe,YAAY,GAAGD,QAAQ,CAACf,KAAD,EAAQ,EAAR,CAA3B;;AACA,MAAIY,aAAa,IAAII,YAAY,KAAKnB,YAAtC,EAAoD;AAChDmB,IAAAA,YAAY,GAAG,CAAf;AACH,GAFD,MAEO,IAAIH,aAAa,IAAIG,YAAY,GAAGnB,YAApC,EAAkD;AACrDmB,IAAAA,YAAY,IAAInB,YAAhB;AACH,GAvC4G,CAyC7G;;;AACA,MAAImB,YAAY,GAAGnB,YAAY,GAAG,CAA9B,IAAmCiB,cAAc,IAAIhB,aAAzD,EAAwE;AACpE,UAAM,IAAIU,WAAJ,EAAN;AACH;;AAED,SAAO;AACHR,IAAAA,KAAK,EAAEgB,YADJ;AAEHf,IAAAA,OAAO,EAAEa;AAFN,GAAP;AAIH,CAlDM","sourcesContent":["const VALID_TIME_REGEX = /[\\u4e0a\\u4e0b\\uc624]?[\\u5348\\ud6c4\\uc804]?[0-9]{1,2}.?.?.?[0-9]{0,2}\\s?[AaPp\\u03C0\\u03BC]?\\.?\\s?[Mm\\u03BC]?/;\nconst AM_REGEX = /[Aa\\u4e0a\\u03C0\\uc624]\\.?\\s?[Mm\\u5348\\ud6c4\\u03BC\\uc804]/;\nconst PM_REGEX = /[Pp\\u4e0b\\uc624\\u03BC]\\.?\\s?[Mm\\u5348\\ud6c4\\u03BC]/;\nconst NUMBER_REGEX = /[0-9]{1,2}/g;\nconst TWELVE_HOURS = 12;\nconst SIXTY_MINUTES = 60;\nconst DEFAULT_PARSED_TIME = { hours: 0, minutes: 0 };\nconst VALID_NUMBER_COUNT = 2;\n\n/**\n * Check that the input string is in a valid time format\n * @param input - input string to test\n * @returns\n */\nexport const isValidTime = (input?: string): boolean => {\n    return !!input && VALID_TIME_REGEX.test(input);\n};\n\n/**\n * Parse an input string and convert it into an object containing numerical hours and minutes.\n * @param input - input string to be converted\n * @param isRequired - whether the input is required\n * @returns\n */\nexport const parseTimeFromString = (input?: string, isRequired?: boolean): { hours: number; minutes: number } => {\n    // Return the default time (midnight) if the input is empty, but not required\n    if (!input && !isRequired) return DEFAULT_PARSED_TIME;\n\n    // Throw an error if the input is empty and required, or if the input fails the initial regex\n    if (!input || !isValidTime(input)) {\n        throw new SyntaxError();\n    }\n\n    // Throw an error if the input contains more than four numbers\n    const timeArray = input.match(NUMBER_REGEX);\n    if (!timeArray || !timeArray.length) return DEFAULT_PARSED_TIME;\n    if (timeArray.length > VALID_NUMBER_COUNT) {\n        throw new SyntaxError();\n    }\n\n    // If there are three numbers total, the regex match will split them\n    // unevenly, loading two numbers for the hours value and one for the\n    // minutes value. For instance, \"305\" would be split into [\"30\", \"5\"].\n    // This should be [\"3\", \"05\"] instead, so we will move the second\n    // number in the hours value to the beginning of the minutes value.\n    const hasAMNotation = AM_REGEX.test(input);\n    const hasPMNotation = PM_REGEX.test(input);\n    let [hours, minutes] = timeArray;\n    if (hours && minutes && hours.length === 2 && minutes.length === 1) {\n        minutes = hours[1] + minutes;\n        hours = hours[0];\n    }\n\n    // Convert the minutes value into an integer\n    const numericMinutes = minutes ? parseInt(minutes, 10) : 0;\n\n    // Set the hours to \"0\" if the input translates to midnight\n    // Convert the hours to 24-hour format if this is a PM time\n    let numericHours = parseInt(hours, 10);\n    if (hasAMNotation && numericHours === TWELVE_HOURS) {\n        numericHours = 0;\n    } else if (hasPMNotation && numericHours < TWELVE_HOURS) {\n        numericHours += TWELVE_HOURS;\n    }\n\n    // Throw an error if the hours or minutes are out of range\n    if (numericHours > TWELVE_HOURS * 2 || numericMinutes >= SIXTY_MINUTES) {\n        throw new SyntaxError();\n    }\n\n    return {\n        hours: numericHours,\n        minutes: numericMinutes,\n    };\n};\n"],"file":"TimeInputUtils.js"}