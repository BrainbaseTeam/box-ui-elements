{"version":3,"sources":["../../../src/components/time-input/TimeInput.tsx"],"names":["React","classnames","debounce","defineMessages","injectIntl","FormattedMessage","TooltipPosition","parseTimeFromString","TextInput","ClockBadge16","DEFAULT_FORMAT_DEBOUNCE","messages","invalidTimeError","emptyTimeError","TimeInput","className","errorTooltipPosition","MIDDLE_RIGHT","hideLabel","initialDate","innerRef","intl","isRequired","label","onBlur","onChange","onError","useState","formatTime","displayTime","setDisplayTime","undefined","error","setError","formatDisplayTime","latestValue","parsedHours","hours","parsedMinutes","minutes","date","Date","setHours","setMinutes","newDisplayTime","e","errorMessage","updatedError","debouncedFormatDisplayTime","useCallback","handleChange","event","updatedValue","target","value","handleBlur","TimeInputComponent"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport classnames from 'classnames';\nimport debounce from 'lodash/debounce';\nimport { defineMessages, injectIntl, FormattedMessage, WrappedComponentProps } from 'react-intl';\nimport { TooltipPosition } from '../tooltip';\nimport { parseTimeFromString } from './TimeInputUtils';\n// @ts-ignore flow import\nimport TextInput from '../text-input';\nimport ClockBadge16 from '../../icon/line/ClockBadge16';\n// @ts-ignore flow import\nimport { DEFAULT_FORMAT_DEBOUNCE } from '../../constants';\n\nimport './TimeInput.scss';\n\nconst messages = defineMessages({\n    invalidTimeError: {\n        defaultMessage: 'Invalid time format. Enter a time in the format HH:MM A.',\n        description: 'Error message for invalid time formats. \"HH:MM A\" should be localized.',\n        id: 'boxui.timeInput.invalidTimeError',\n    },\n    emptyTimeError: {\n        defaultMessage: 'Required field. Enter a time in the format HH:MM A.',\n        description: 'Error message for empty time formats. \"HH:MM A\" should be localized.',\n        id: 'boxui.timeInput.emptyTimeError',\n    },\n});\n\ntype TimeInputEventHandler = ({\n    displayTime,\n    hours,\n    minutes,\n}: {\n    displayTime: string;\n    hours: number;\n    minutes: number;\n}) => void;\nexport interface TimeInputProps extends WrappedComponentProps {\n    /** className - CSS class for the component */\n    className?: string;\n    /** errorTooltipPosition - Position for the error tooltip */\n    errorTooltipPosition?: TooltipPosition;\n    /** hideLabel - Whether the label should be hidden */\n    hideLabel?: boolean;\n    /** label - Label for the time input */\n    label?: React.ReactNode;\n    /** initialDate - Date object for initializing the time input */\n    initialDate?: Date;\n    /** innerRef - Ref for the time input */\n    innerRef?: React.Ref<HTMLInputElement>;\n    /** isRequired - Whether the time input is required */\n    isRequired?: boolean;\n    /**\n     * onBlur - Function to call when the user blurs out of the time input\n     * The parsed display time, along with the hours and minutes in 24-hour format, will be passed to the handler.\n     */\n    onBlur?: TimeInputEventHandler;\n    /**\n     * onChange - Function to call when the user changes the value of the time input\n     * The parsed display time, along with the hours and minutes in 24-hour format, will be passed to the handler.\n     */\n    onChange?: TimeInputEventHandler;\n    onError?: (error: React.ReactNode) => void;\n}\n\nconst TimeInput = ({\n    className,\n    errorTooltipPosition = TooltipPosition.MIDDLE_RIGHT,\n    hideLabel = true,\n    initialDate,\n    innerRef,\n    intl,\n    isRequired = true,\n    label,\n    onBlur,\n    onChange,\n    onError,\n}: TimeInputProps) => {\n    const [displayTime, setDisplayTime] = React.useState<string>(initialDate ? intl.formatTime(initialDate) : '');\n    const [error, setError] = React.useState<React.ReactElement | undefined>(undefined);\n\n    /**\n     * Handle blur events.\n     * Parse and reformat the current display time (as entered by the user).\n     * @param latestValue - string\n     * @returns\n     */\n    const formatDisplayTime = (latestValue: string = displayTime) => {\n        try {\n            const { hours: parsedHours, minutes: parsedMinutes } = parseTimeFromString(latestValue, isRequired);\n            const date = new Date();\n            date.setHours(parsedHours);\n            date.setMinutes(parsedMinutes);\n            const newDisplayTime = intl.formatTime(date);\n            setDisplayTime(newDisplayTime);\n            if (onBlur) onBlur({ displayTime: newDisplayTime, hours: parsedHours, minutes: parsedMinutes });\n            if (onChange) onChange({ displayTime: newDisplayTime, hours: parsedHours, minutes: parsedMinutes });\n        } catch (e) {\n            const errorMessage = latestValue ? messages.invalidTimeError : messages.emptyTimeError;\n            const updatedError = <FormattedMessage {...errorMessage} />;\n            setError(updatedError);\n            if (onError) onError(updatedError);\n        }\n    };\n\n    /**\n     * Debounce formatDisplayTime() for use in handleChange().\n     * useCallback() memoizes the debounced function, so that the debounced function\n     * is not recreated on every re-render triggered by handleChange().\n     */\n    const debouncedFormatDisplayTime = React.useCallback(\n        debounce((latestValue: string) => formatDisplayTime(latestValue), DEFAULT_FORMAT_DEBOUNCE),\n        [],\n    );\n\n    /**\n     * Handle change events.\n     * Clear errors, update the value of the display time to match what the user typed,\n     * and call the debounced version of formatDisplayTime().\n     * @param event - ChangeEvent\n     */\n    const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        const {\n            target: { value: updatedValue },\n        } = event;\n        setDisplayTime(updatedValue);\n        if (error) setError(undefined);\n        debouncedFormatDisplayTime(updatedValue);\n    };\n\n    /**\n     * Handle blur events.\n     */\n    const handleBlur = () => {\n        formatDisplayTime(displayTime);\n    };\n\n    return (\n        <TextInput\n            className={classnames('bdl-TimeInput', className)}\n            error={error}\n            hideLabel={hideLabel}\n            icon={<ClockBadge16 className=\"bdl-TimeInput-icon\" />}\n            inputRef={innerRef}\n            isRequired={isRequired}\n            label={label}\n            onBlur={handleBlur}\n            onChange={handleChange}\n            position={errorTooltipPosition}\n            type=\"text\"\n            value={displayTime}\n        />\n    );\n};\n\nexport { TimeInput as TimeInputComponent };\nexport default injectIntl(TimeInput);\n"],"file":"TimeInput.js"}