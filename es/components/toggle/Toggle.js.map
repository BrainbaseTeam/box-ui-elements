{"version":3,"sources":["../../../src/components/toggle/Toggle.js"],"names":["React","classNames","Toggle","className","description","isDisabled","isOn","isToggleRightAligned","label","name","onBlur","onChange","rest","classes","toggleElements","reverse"],"mappings":";;;;;;AACA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AAEA,OAAO,eAAP;;AAuBA,IAAMC,MAAM,GAAG,SAATA,MAAS,OAWF;AAAA,4BAVTC,SAUS;AAAA,MAVTA,SAUS,+BAVG,EAUH;AAAA,MATTC,WASS,QATTA,WASS;AAAA,MARTC,UAQS,QARTA,UAQS;AAAA,MAPTC,IAOS,QAPTA,IAOS;AAAA,mCANTC,oBAMS;AAAA,MANTA,oBAMS,sCANc,KAMd;AAAA,MALTC,KAKS,QALTA,KAKS;AAAA,MAJTC,IAIS,QAJTA,IAIS;AAAA,MAHTC,MAGS,QAHTA,MAGS;AAAA,MAFTC,QAES,QAFTA,QAES;AAAA,MADNC,IACM;;AACT,MAAMC,OAAO,GAAGZ,UAAU,CAAC,kBAAD,EAAqBE,SAArB,EAAgC;AACtD,+BAA2BI;AAD2B,GAAhC,CAA1B;AAGA,MAAIO,cAAc,GAAG,cACjB;AAAK,IAAA,GAAG,EAAC,sBAAT;AAAgC,IAAA,SAAS,EAAC;AAA1C,IADiB,eAEjB;AAAK,IAAA,GAAG,EAAC,qBAAT;AAA+B,IAAA,SAAS,EAAC;AAAzC,KACKN,KADL,CAFiB,CAArB;;AAOA,MAAID,oBAAJ,EAA0B;AACtBO,IAAAA,cAAc,GAAGA,cAAc,CAACC,OAAf,EAAjB;AACH;;AAED,sBACI;AAAK,IAAA,SAAS,EAAEF;AAAhB,kBAEI;AAAO,IAAA,SAAS,EAAC;AAAjB,kBACI;AACI,IAAA,OAAO,EAAEP,IADb;AAEI,IAAA,SAAS,EAAC,qBAFd;AAGI,IAAA,QAAQ,EAAED,UAHd;AAII,IAAA,IAAI,EAAEI,IAJV;AAKI,IAAA,MAAM,EAAEC,MALZ;AAMI,IAAA,QAAQ,EAAEC,QANd;AAOI,IAAA,IAAI,EAAC;AAPT,KAQQC,IARR,EADJ,EAWKE,cAXL,CAFJ,EAeKV,WAAW,gBAAG;AAAK,IAAA,SAAS,EAAC;AAAf,KAA4CA,WAA5C,CAAH,GAAoE,IAfpF,CADJ;AAmBH,CA7CD;;AAgDA,eAAeF,MAAf","sourcesContent":["// @flow\nimport * as React from 'react';\nimport classNames from 'classnames';\n\nimport './Toggle.scss';\n\ntype Props = {\n    className?: string,\n    /** Description of the input */\n    description?: React.Node,\n    isDisabled?: boolean, // @TODO: eventually call this `disabled`\n    /** Toggle state */\n    isOn?: boolean, // @TODO: eventually call this `checked`\n    /** If set to true, the toggle will be aligned to the right */\n    isToggleRightAligned?: boolean,\n    /** Label displayed for the input */\n    label: React.Node,\n    /** Name of the input */\n    name?: string,\n    /** blur callback function called with event as the argument */\n    onBlur?: (e: SyntheticInputEvent<HTMLInputElement>) => any,\n    /** change callback function called with event as the argument */\n    onChange?: (e: SyntheticInputEvent<HTMLInputElement>) => any,\n    /** optional value for the toggles checkbox */\n    value?: any,\n};\n\nconst Toggle = ({\n    className = '',\n    description,\n    isDisabled,\n    isOn,\n    isToggleRightAligned = false,\n    label,\n    name,\n    onBlur,\n    onChange,\n    ...rest\n}: Props) => {\n    const classes = classNames('toggle-container', className, {\n        'is-toggle-right-aligned': isToggleRightAligned,\n    });\n    let toggleElements = [\n        <div key=\"toggle-simple-switch\" className=\"toggle-simple-switch\" />,\n        <div key=\"toggle-simple-label\" className=\"toggle-simple-label\">\n            {label}\n        </div>,\n    ];\n\n    if (isToggleRightAligned) {\n        toggleElements = toggleElements.reverse();\n    }\n\n    return (\n        <div className={classes}>\n            {/* eslint-disable-next-line jsx-a11y/label-has-for */}\n            <label className=\"toggle-simple\">\n                <input\n                    checked={isOn}\n                    className=\"toggle-simple-input\"\n                    disabled={isDisabled}\n                    name={name}\n                    onBlur={onBlur}\n                    onChange={onChange}\n                    type=\"checkbox\"\n                    {...rest}\n                />\n                {toggleElements}\n            </label>\n            {description ? <div className=\"toggle-simple-description\">{description}</div> : null}\n        </div>\n    );\n};\n\nexport type ToggleProps = Props;\nexport default Toggle;\n"],"file":"Toggle.js"}