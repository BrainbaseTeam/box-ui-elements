{"version":3,"sources":["../../../src/components/toggle/Toggle.js"],"names":["React","classNames","Toggle","forwardRef","ref","className","description","isDisabled","isOn","isToggleRightAligned","label","name","onBlur","onChange","rest","classes","toggleElements","reverse","displayName"],"mappings":";;;;;;AACA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AAEA,OAAO,eAAP;AAuBA,IAAMC,MAAM,GAAGF,KAAK,CAACG,UAAN,CACX,gBAaIC,GAbJ,EAcK;AAAA,4BAZGC,SAYH;AAAA,MAZGA,SAYH,+BAZe,EAYf;AAAA,MAXGC,WAWH,QAXGA,WAWH;AAAA,MAVGC,UAUH,QAVGA,UAUH;AAAA,MATGC,IASH,QATGA,IASH;AAAA,mCARGC,oBAQH;AAAA,MARGA,oBAQH,sCAR0B,KAQ1B;AAAA,MAPGC,KAOH,QAPGA,KAOH;AAAA,MANGC,IAMH,QANGA,IAMH;AAAA,MALGC,MAKH,QALGA,MAKH;AAAA,MAJGC,QAIH,QAJGA,QAIH;AAAA,MAHMC,IAGN;;AACD,MAAMC,OAAO,GAAGd,UAAU,CAAC,kBAAD,EAAqBI,SAArB,EAAgC;AACtD,+BAA2BI;AAD2B,GAAhC,CAA1B;AAGA,MAAIO,cAAc,GAAG,CACjB;AAAK,IAAA,GAAG,EAAC,sBAAT;AAAgC,IAAA,SAAS,EAAC;AAA1C,IADiB,EAEjB;AAAK,IAAA,GAAG,EAAC,qBAAT;AAA+B,IAAA,SAAS,EAAC;AAAzC,KACKN,KADL,CAFiB,CAArB;;AAOA,MAAID,oBAAJ,EAA0B;AACtBO,IAAAA,cAAc,GAAGA,cAAc,CAACC,OAAf,EAAjB;AACH;;AAED,SACI;AAAK,IAAA,SAAS,EAAEF;AAAhB,KAEI;AAAO,IAAA,SAAS,EAAC;AAAjB,KACI;AACI,IAAA,OAAO,EAAEP,IADb;AAEI,IAAA,SAAS,EAAC,qBAFd;AAGI,IAAA,QAAQ,EAAED,UAHd;AAII,IAAA,GAAG,EAAEH,GAJT;AAKI,IAAA,IAAI,EAAEO,IALV;AAMI,IAAA,MAAM,EAAEC,MANZ;AAOI,IAAA,QAAQ,EAAEC,QAPd;AAQI,IAAA,IAAI,EAAC;AART,KASQC,IATR,EADJ,EAYKE,cAZL,CAFJ,EAgBKV,WAAW,GAAG;AAAK,IAAA,SAAS,EAAC;AAAf,KAA4CA,WAA5C,CAAH,GAAoE,IAhBpF,CADJ;AAoBH,CAlDU,CAAf;AAoDAJ,MAAM,CAACgB,WAAP,GAAqB,QAArB;AAGA,eAAehB,MAAf","sourcesContent":["// @flow\nimport * as React from 'react';\nimport classNames from 'classnames';\n\nimport './Toggle.scss';\n\ntype Props = {\n    className?: string,\n    /** Description of the input */\n    description?: React.Node,\n    isDisabled?: boolean, // @TODO: eventually call this `disabled`\n    /** Toggle state */\n    isOn?: boolean, // @TODO: eventually call this `checked`\n    /** If set to true, the toggle will be aligned to the right */\n    isToggleRightAligned?: boolean,\n    /** Label displayed for the input */\n    label: React.Node,\n    /** Name of the input */\n    name?: string,\n    /** blur callback function called with event as the argument */\n    onBlur?: (e: SyntheticInputEvent<HTMLInputElement>) => any,\n    /** change callback function called with event as the argument */\n    onChange?: (e: SyntheticInputEvent<HTMLInputElement>) => any,\n    /** optional value for the toggles checkbox */\n    value?: any,\n};\n\nconst Toggle = React.forwardRef<Props, HTMLInputElement>(\n    (\n        {\n            className = '',\n            description,\n            isDisabled,\n            isOn,\n            isToggleRightAligned = false,\n            label,\n            name,\n            onBlur,\n            onChange,\n            ...rest\n        }: Props,\n        ref,\n    ) => {\n        const classes = classNames('toggle-container', className, {\n            'is-toggle-right-aligned': isToggleRightAligned,\n        });\n        let toggleElements = [\n            <div key=\"toggle-simple-switch\" className=\"toggle-simple-switch\" />,\n            <div key=\"toggle-simple-label\" className=\"toggle-simple-label\">\n                {label}\n            </div>,\n        ];\n\n        if (isToggleRightAligned) {\n            toggleElements = toggleElements.reverse();\n        }\n\n        return (\n            <div className={classes}>\n                {/* eslint-disable-next-line jsx-a11y/label-has-for */}\n                <label className=\"toggle-simple\">\n                    <input\n                        checked={isOn}\n                        className=\"toggle-simple-input\"\n                        disabled={isDisabled}\n                        ref={ref}\n                        name={name}\n                        onBlur={onBlur}\n                        onChange={onChange}\n                        type=\"checkbox\"\n                        {...rest}\n                    />\n                    {toggleElements}\n                </label>\n                {description ? <div className=\"toggle-simple-description\">{description}</div> : null}\n            </div>\n        );\n    },\n);\nToggle.displayName = 'Toggle';\n\nexport type ToggleProps = Props;\nexport default Toggle;\n"],"file":"Toggle.js"}