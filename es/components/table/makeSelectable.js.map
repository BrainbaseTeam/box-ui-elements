{"version":3,"sources":["../../../src/components/table/makeSelectable.js"],"names":["PropTypes","React","Component","Set","ImmutablePropTypes","classNames","FormattedMessage","Hotkeys","HotkeyRecord","messages","shiftSelect","SEARCH_TIMER_DURATION","makeSelectable","BaseTable","originalDisplayName","displayName","name","props","focusedIndex","undefined","selectedItems","newFocusedIndex","onSelect","previousIndex","state","setState","isSet","toJS","enableHotkeys","hotkeyType","hotkeys","key","description","downDescription","handler","event","data","preventDefault","Math","min","length","type","upDescription","max","shiftXDescription","selectToggle","selectAllDescription","shiftDownDescription","handleShiftKeyDown","shiftUpDescription","deselectAllDescription","rowIndex","getProcessedProps","has","delete","add","anchorIndex","selectedRows","reduce","rows","item","i","push","newSelectedRows","newSelectedItems","map","size","index","metaKey","ctrlKey","shiftKey","selectRange","selectOne","blurTimerID","setTimeout","clearFocus","clearTimeout","boundary","searchStrings","target","hasAttribute","nodeName","which","searchTimeout","searchString","findIndex","string","trim","toLowerCase","indexOf","document","addEventListener","handleKeyboardSearch","prevProps","prevState","onFocus","removeEventListener","className","focusedItem","getHotkeyConfigs","handleRowClick","handleRowFocus","handleTableBlur","handleTableFocus","array","isRequired","func","oneOfType","set","bool"],"mappings":"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","sourcesContent":["import PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { Set } from 'immutable';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport classNames from 'classnames';\nimport { FormattedMessage } from 'react-intl';\n\nimport { Hotkeys, HotkeyRecord } from '../hotkeys';\nimport messages from './messages';\n\nimport shiftSelect from './shiftSelect';\n\nconst SEARCH_TIMER_DURATION = 1000;\n\nfunction makeSelectable(BaseTable) {\n    const originalDisplayName = BaseTable.displayName || BaseTable.name || 'Table';\n\n    return class SelectableTable extends Component {\n        static displayName = `Selectable(${originalDisplayName})`;\n\n        static propTypes = {\n            className: PropTypes.string,\n            /** Array of unique IDs of the items in the table. Each item should be a string or number, in the order they appear in the table. */\n            data: PropTypes.array.isRequired,\n            /** Called when focus changes. `(focusedIndex: number) => void` */\n            onFocus: PropTypes.func,\n            /** Called when selection changes. `(selectedItems: Array<string> | Array<number> | Set<string> | Set<number>) => void` */\n            onSelect: PropTypes.func.isRequired,\n            /**\n             * Array of strings for keyboard search corresponding to the data prop. If not provided, keyboard search won't work.\n             * Example: data = ['f_123', 'f_456'], and corresponding searchStrings = ['file.png', 'another file.pdf']\n             */\n            searchStrings: PropTypes.array,\n            /**\n             * Array of IDs that are currently selected, in any order.\n             * If you pass a native JS array, then your onSelect function will be called with a native JS array;\n             * likewise, if you pass an ImmutableJS Set, then your onSelect function will be called\n             * with an ImmutableJS Set.\n             */\n            selectedItems: PropTypes.oneOfType([PropTypes.array, ImmutablePropTypes.set]),\n            enableHotkeys: PropTypes.bool,\n            /** Translated type for hotkeys. If not provided, then the hotkeys will not appear in the help modal. */\n            hotkeyType: PropTypes.string,\n        };\n\n        static defaultProps = {\n            selectedItems: new Set(),\n        };\n\n        constructor(props) {\n            super(props);\n\n            this.anchorIndex = 0;\n\n            this.searchString = '';\n            this.searchTimeout = null;\n\n            // we have to store the previously focused index because a focus event\n            // will be fired before the click event; thus, in the click handler,\n            // the focusedItem will already be the new item\n            this.previousIndex = 0;\n\n            this.blurTimerID = null;\n        }\n\n        state = {\n            focusedIndex: undefined,\n        };\n\n        componentDidMount() {\n            document.addEventListener('keypress', this.handleKeyboardSearch);\n        }\n\n        componentDidUpdate(prevProps, prevState) {\n            if (prevState.focusedIndex !== this.state.focusedIndex && this.props.onFocus) {\n                this.props.onFocus(this.state.focusedIndex);\n            }\n        }\n\n        componentWillUnmount() {\n            document.removeEventListener('keypress', this.handleKeyboardSearch);\n            clearTimeout(this.blurTimerID);\n        }\n\n        onSelect = (selectedItems, newFocusedIndex) => {\n            const { onSelect } = this.props;\n\n            this.previousIndex = this.state.focusedIndex || 0;\n\n            this.setState({\n                focusedIndex: newFocusedIndex,\n            });\n\n            if (onSelect) {\n                // If selectedItems were given as an Immutable Set, they should also be returned as one,\n                // and vice versa if they were given as a native JS array\n                onSelect(Set.isSet(this.props.selectedItems) ? selectedItems : selectedItems.toJS());\n            }\n        };\n\n        getHotkeyConfigs = () => {\n            const { enableHotkeys, hotkeyType } = this.props;\n\n            if (!enableHotkeys && !this.hotkeys) {\n                this.hotkeys = [];\n            }\n\n            if (!this.hotkeys) {\n                this.hotkeys = [\n                    new HotkeyRecord({\n                        key: 'down',\n                        description: <FormattedMessage {...messages.downDescription} />,\n                        handler: event => {\n                            const { data } = this.props;\n                            const { focusedIndex } = this.state;\n\n                            event.preventDefault();\n\n                            const newFocusedIndex =\n                                focusedIndex !== undefined ? Math.min(focusedIndex + 1, data.length - 1) : 0;\n                            this.setState({ focusedIndex: newFocusedIndex });\n                        },\n                        type: hotkeyType,\n                    }),\n                    new HotkeyRecord({\n                        key: 'up',\n                        description: <FormattedMessage {...messages.upDescription} />,\n                        handler: event => {\n                            const { focusedIndex = 0 } = this.state;\n\n                            event.preventDefault();\n\n                            const newFocusedIndex = Math.max(focusedIndex - 1, 0);\n                            this.setState({ focusedIndex: newFocusedIndex });\n                        },\n                        type: hotkeyType,\n                    }),\n                    new HotkeyRecord({\n                        key: 'shift+x',\n                        description: <FormattedMessage {...messages.shiftXDescription} />,\n                        handler: () => {\n                            const { focusedIndex } = this.state;\n\n                            if (focusedIndex === undefined) {\n                                return;\n                            }\n\n                            this.selectToggle(focusedIndex);\n                        },\n                        type: hotkeyType,\n                    }),\n                    new HotkeyRecord({\n                        key: ['meta+a', 'ctrl+a'],\n                        description: <FormattedMessage {...messages.selectAllDescription} />,\n                        handler: event => {\n                            const { data } = this.props;\n\n                            event.preventDefault();\n\n                            this.onSelect(new Set(data), this.state.focusedIndex);\n                        },\n                        type: hotkeyType,\n                    }),\n                    new HotkeyRecord({\n                        key: 'shift+down',\n                        description: <FormattedMessage {...messages.shiftDownDescription} />,\n                        handler: () => {\n                            const { data } = this.props;\n                            const { focusedIndex } = this.state;\n\n                            if (focusedIndex === undefined) {\n                                return;\n                            }\n\n                            const newFocusedIndex = Math.min(focusedIndex + 1, data.length - 1);\n                            this.handleShiftKeyDown(newFocusedIndex, data.length - 1);\n                        },\n                        type: hotkeyType,\n                    }),\n                    new HotkeyRecord({\n                        key: 'shift+up',\n                        description: <FormattedMessage {...messages.shiftUpDescription} />,\n                        handler: () => {\n                            const { focusedIndex } = this.state;\n\n                            if (focusedIndex === undefined) {\n                                return;\n                            }\n\n                            const newFocusedIndex = Math.max(focusedIndex - 1, 0);\n                            this.handleShiftKeyDown(newFocusedIndex, 0);\n                        },\n                        type: hotkeyType,\n                    }),\n                    new HotkeyRecord({\n                        key: 'esc',\n                        description: <FormattedMessage {...messages.deselectAllDescription} />,\n                        handler: () => {\n                            this.onSelect(new Set(), this.state.focusedIndex);\n                        },\n                        type: hotkeyType,\n                    }),\n                ];\n            }\n\n            return this.hotkeys;\n        };\n\n        getProcessedProps = () => {\n            const { selectedItems } = this.props;\n            return {\n                ...this.props,\n                selectedItems: Set.isSet(selectedItems) ? selectedItems : new Set(selectedItems),\n            };\n        };\n\n        hotkeys = null;\n\n        selectToggle = rowIndex => {\n            const { data, selectedItems } = this.getProcessedProps();\n\n            if (selectedItems.has(data[rowIndex])) {\n                this.onSelect(selectedItems.delete(data[rowIndex]), rowIndex);\n            } else {\n                this.onSelect(selectedItems.add(data[rowIndex]), rowIndex);\n            }\n\n            this.anchorIndex = rowIndex;\n        };\n\n        selectRange = rowIndex => {\n            const { data, selectedItems } = this.getProcessedProps();\n\n            // Don't change selection if we're shift-clicking the same row\n            if (rowIndex === this.previousIndex) {\n                return;\n            }\n\n            // Converts set of items to set of indices to do some slicing magic\n            const selectedRows = new Set(\n                data.reduce((rows, item, i) => {\n                    if (selectedItems.has(item)) {\n                        rows.push(i);\n                    }\n                    return rows;\n                }, []),\n            );\n\n            const newSelectedRows = shiftSelect(selectedRows, this.previousIndex, rowIndex, this.anchorIndex);\n\n            // Converts set back to set of items\n            const newSelectedItems = newSelectedRows.map(i => data[i]);\n\n            this.onSelect(newSelectedItems, rowIndex);\n        };\n\n        selectOne = rowIndex => {\n            const { data, selectedItems } = this.getProcessedProps();\n\n            // Don't change selection if we're clicking on a row that we've already selected\n            // This allows us to use the native onDoubleClick handler because we're referencing the\n            // same DOM node on double-click.\n            if (selectedItems.has(data[rowIndex]) && selectedItems.size === 1) {\n                return;\n            }\n\n            this.onSelect(new Set([data[rowIndex]]), rowIndex);\n            this.anchorIndex = rowIndex;\n        };\n\n        clearFocus = () => {\n            this.setState({\n                focusedIndex: undefined,\n            });\n        };\n\n        handleRowClick = (event, index) => {\n            if (event.metaKey || event.ctrlKey) {\n                this.selectToggle(index);\n            } else if (event.shiftKey) {\n                this.selectRange(index);\n            } else {\n                this.selectOne(index);\n            }\n        };\n\n        handleRowFocus = (event, index) => {\n            const { selectedItems } = this.getProcessedProps();\n            this.onSelect(selectedItems, index);\n        };\n\n        handleTableBlur = () => {\n            const { focusedIndex } = this.state;\n            if (focusedIndex !== undefined) {\n                // table may get focus back right away in the same tick, in which case we shouldn't clear focus\n                this.blurTimerID = setTimeout(this.clearFocus);\n            }\n        };\n\n        handleTableFocus = () => {\n            clearTimeout(this.blurTimerID);\n        };\n\n        handleShiftKeyDown = (newFocusedIndex, boundary) => {\n            const { data, selectedItems } = this.getProcessedProps();\n            const { focusedIndex } = this.state;\n\n            // if we're at a boundary of the table and the row is selected, no-op\n            if (focusedIndex === boundary && selectedItems.has(data[focusedIndex])) {\n                return;\n            }\n\n            // if target is not selected, select it\n            if (!selectedItems.has(data[newFocusedIndex])) {\n                this.onSelect(selectedItems.add(data[newFocusedIndex]), newFocusedIndex);\n                return;\n            }\n\n            // if both source and target are selected, deselect source\n            if (selectedItems.has(data[newFocusedIndex]) && selectedItems.has(data[focusedIndex])) {\n                this.onSelect(selectedItems.delete(data[focusedIndex]), newFocusedIndex);\n                return;\n            }\n\n            // if target is selected and source is not, select source\n            this.onSelect(selectedItems.add(data[focusedIndex]), newFocusedIndex);\n        };\n\n        handleKeyboardSearch = event => {\n            const { searchStrings } = this.props;\n\n            if (!searchStrings) {\n                return;\n            }\n\n            if (\n                event.target.hasAttribute('contenteditable') ||\n                event.target.nodeName === 'INPUT' ||\n                event.target.nodeName === 'TEXTAREA'\n            ) {\n                return;\n            }\n\n            // character keys have a value for event.which\n            if (event.which === 0) {\n                return;\n            }\n\n            if (this.searchTimeout) {\n                clearTimeout(this.searchTimeout);\n            }\n\n            this.searchString += event.key;\n            this.searchTimeout = setTimeout(() => {\n                this.searchString = '';\n            }, SEARCH_TIMER_DURATION);\n\n            const index = searchStrings.findIndex(\n                string =>\n                    string\n                        .trim()\n                        .toLowerCase()\n                        .indexOf(this.searchString) === 0,\n            );\n\n            if (index !== -1) {\n                this.setState({ focusedIndex: index });\n            }\n        };\n\n        render() {\n            const { className, data } = this.props;\n            const { focusedIndex } = this.state;\n            const focusedItem = data[focusedIndex];\n\n            return (\n                <Hotkeys configs={this.getHotkeyConfigs()}>\n                    <BaseTable\n                        {...this.props}\n                        className={classNames(className, 'is-selectable')}\n                        focusedIndex={focusedIndex}\n                        focusedItem={focusedItem}\n                        onRowClick={this.handleRowClick}\n                        onRowFocus={this.handleRowFocus}\n                        onTableBlur={this.handleTableBlur}\n                        onTableFocus={this.handleTableFocus}\n                    />\n                </Hotkeys>\n            );\n        }\n    };\n}\n\nexport default makeSelectable;\n"],"file":"makeSelectable.js"}