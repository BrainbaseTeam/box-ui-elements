{"version":3,"sources":["../../../src/components/category-selector/CategorySelector.tsx"],"names":["React","Measure","forEach","CategorySelectorComponent","CategorySelector","categories","categoryProps","className","currentCategory","onSelect","linksRef","useRef","moreRef","useState","length","maxLinks","setMaxLinks","defaultLinkWidths","linkWidths","setLinkWidths","moreWidth","setMoreWidth","outerWidth","element","style","getComputedStyle","offsetWidth","parseFloat","marginLeft","marginRight","checkLinks","useCallback","contentRect","width","client","current","containerWidth","elements","querySelectorAll","linksWidth","linksToRemove","counter","elementWidth","category","dataset","max","Object","keys","linksToAdd","value","targetWidth","useLayoutEffect","useEffect","clientWidth","measureRef"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport Measure from 'react-measure';\nimport forEach from 'lodash/forEach';\n\nimport CategorySelectorComponent from './CategorySelectorComponent';\n\nimport './CategorySelector.scss';\n\nexport interface Category {\n    displayText: string;\n    value: string;\n}\n\nexport interface CategorySelectorProps {\n    /** Array of categories that will display in the selector, each category is an object with a string value and a string displayText */\n    categories: Category[];\n    /** Optional props that can be passed to each category in category selector component */\n    categoryProps?: Record<string, unknown>;\n    /** Optional className that can be passed to category selector component */\n    className?: string;\n    /** Optional value of initial selected category */\n    currentCategory?: string;\n    /** Parent component can use this on select handler to update state for selected category */\n    onSelect: (value: string) => void;\n}\n\nconst CategorySelector = ({\n    categories,\n    categoryProps = {},\n    className = '',\n    currentCategory = '',\n    onSelect,\n}: CategorySelectorProps) => {\n    const linksRef = React.useRef<HTMLDivElement>(null);\n    const moreRef = React.useRef<HTMLDivElement>(null);\n\n    const [maxLinks, setMaxLinks] = React.useState(categories.length);\n    const defaultLinkWidths: { [index: string]: number } = {};\n    const [linkWidths, setLinkWidths] = React.useState(defaultLinkWidths);\n    const [moreWidth, setMoreWidth] = React.useState(0);\n\n    const outerWidth = (element: HTMLElement) => {\n        const style = getComputedStyle(element);\n        return element.offsetWidth + parseFloat(style.marginLeft) + parseFloat(style.marginRight) + 1;\n    };\n\n    const checkLinks = React.useCallback(\n        contentRect => {\n            const { width } = contentRect.client;\n\n            if (!linksRef.current) return;\n\n            // Pull in some common widths we'll need\n            const containerWidth = width - moreWidth;\n\n            // Get all the links\n            const elements = linksRef.current.querySelectorAll<HTMLSpanElement>('[data-category]');\n\n            // First, calculate the total width of all links in the main section\n            let linksWidth = 0;\n            forEach(elements, (element: HTMLSpanElement) => {\n                linksWidth += outerWidth(element);\n            });\n\n            if (linksWidth > containerWidth) {\n                // The links exceed the container's width. Figure out how many need to be removed\n                const linksToRemove: { [index: string]: number } = {};\n                let counter = 1;\n\n                while (linksWidth > containerWidth && counter < elements.length) {\n                    const element: HTMLSpanElement = elements[elements.length - counter];\n\n                    const elementWidth = outerWidth(element);\n                    linksWidth -= elementWidth;\n                    const category: string = element.dataset.category ?? '';\n                    // Save the width of the link being removed for use later\n                    linksToRemove[category] = elementWidth;\n                    counter += 1;\n                }\n\n                // Ensure the maxLinks does not become negative\n                const max =\n                    maxLinks - Object.keys(linksToRemove).length < 0 ? 0 : maxLinks - Object.keys(linksToRemove).length;\n\n                // Update the state\n                setMaxLinks(max);\n                setLinkWidths({\n                    ...linkWidths,\n                    ...linksToRemove,\n                });\n            } else {\n                // There is more room, see if any links can be brought back in\n                let linksToAdd = 0;\n\n                while (maxLinks + linksToAdd < categories.length && linksWidth < containerWidth) {\n                    const category: string = categories[maxLinks + linksToAdd].value;\n                    const elementWidth = linkWidths[category];\n\n                    // If there is only one link in the More menu, calculate against the total container width,\n                    // otherwise calculate against the container less the width of the more button\n                    const targetWidth = maxLinks + linksToAdd + 1 >= categories.length ? width : containerWidth;\n\n                    // If the addition of a link is too large, stop checking\n                    if (linksWidth + elementWidth >= targetWidth) {\n                        break;\n                    }\n                    linksToAdd += 1;\n                    linksWidth += elementWidth; // always add\n                }\n\n                if (linksToAdd > 0) {\n                    // Update the state\n                    setMaxLinks(maxLinks + linksToAdd);\n                }\n            }\n        },\n        [categories, linkWidths, linksRef, maxLinks, moreWidth],\n    );\n\n    React.useLayoutEffect(() => {\n        if (!moreRef.current) return;\n\n        setMoreWidth(outerWidth(moreRef.current));\n\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [moreRef.current, currentCategory]);\n\n    // This effect must be defined after the checkLinks function\n    // If the currently selected category changes or the more link width changes, be sure to check for any links to hide or show\n    React.useEffect(() => {\n        if (!linksRef.current) return;\n\n        const { clientWidth } = linksRef.current;\n\n        checkLinks({ client: { width: clientWidth } });\n\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [moreRef.current, moreWidth, currentCategory]);\n\n    return (\n        <Measure client innerRef={linksRef} onResize={checkLinks}>\n            {({ measureRef }) => (\n                <CategorySelectorComponent\n                    measureRef={measureRef}\n                    moreRef={moreRef}\n                    className={className}\n                    categories={categories}\n                    maxLinks={maxLinks}\n                    currentCategory={currentCategory}\n                    onSelect={onSelect}\n                    categoryProps={categoryProps}\n                />\n            )}\n        </Measure>\n    );\n};\n\nexport default CategorySelector;\n"],"file":"CategorySelector.js"}