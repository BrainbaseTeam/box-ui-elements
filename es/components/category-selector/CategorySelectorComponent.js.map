{"version":3,"sources":["../../../src/components/category-selector/CategorySelectorComponent.tsx"],"names":["React","FormattedMessage","classnames","PlainButton","DropdownMenu","MenuToggle","Menu","SelectMenuItem","messages","CategorySelectorComponent","measureRef","moreRef","className","categories","maxLinks","currentCategory","categoryProps","onSelect","linkCategories","slice","overflowCategories","selectedOverflow","find","value","renderCategory","displayText","event","key","map","hide","length","more"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport classnames from 'classnames';\nimport PlainButton from '../plain-button/PlainButton';\n// @ts-ignore flow import\nimport DropdownMenu, { MenuToggle } from '../dropdown-menu';\nimport { Menu, SelectMenuItem } from '../menu';\nimport messages from './messages';\n\nimport './CategorySelector.scss';\n\nimport { Category } from './CategorySelector';\n\ninterface CategorySelectorComponentProps {\n    categories: Category[];\n    categoryProps: Record<string, unknown>;\n    className: string;\n    currentCategory: string;\n    maxLinks: number;\n    measureRef: (ref: Element | null) => void;\n    moreRef: React.RefObject<HTMLDivElement>;\n    onSelect: (value: string) => void;\n}\n\nconst CategorySelectorComponent = ({\n    measureRef,\n    moreRef,\n    className,\n    categories,\n    maxLinks,\n    currentCategory,\n    categoryProps,\n    onSelect,\n}: CategorySelectorComponentProps) => {\n    const linkCategories = categories.slice(0, maxLinks);\n    const overflowCategories = categories.slice(maxLinks);\n\n    const selectedOverflow = overflowCategories.find(({ value }) => currentCategory === value);\n\n    const renderCategory = ({ value, displayText }: Category) => (\n        <span\n            key={value}\n            className={classnames('bdl-CategorySelector-pill', {\n                'is-selected': value === currentCategory,\n            })}\n            data-category={value}\n            data-resin-target=\"selectcategory\"\n            data-resin-template_category={displayText}\n            data-testid={`template-category-${value}`}\n            onClick={() => onSelect(value)}\n            onKeyPress={(event: React.KeyboardEvent<HTMLSpanElement>) => {\n                if (event.key === 'Enter' || event.key === ' ') onSelect(value);\n            }}\n            role=\"button\"\n            tabIndex={0}\n            {...categoryProps}\n        >\n            {displayText}\n        </span>\n    );\n\n    return (\n        <div ref={measureRef} className={classnames(className, 'bdl-CategorySelector')}>\n            <div className=\"bdl-CategorySelector-links\">{linkCategories.map(renderCategory)}</div>\n            <div\n                ref={moreRef}\n                className={classnames('bdl-CategorySelector-more', {\n                    hide: maxLinks >= categories.length,\n                })}\n            >\n                <DropdownMenu className=\"dropdownWrapper\" isRightAligned>\n                    <PlainButton\n                        className={classnames('bdl-CategorySelector-more-label', {\n                            'is-selected': selectedOverflow,\n                        })}\n                    >\n                        <MenuToggle>\n                            {selectedOverflow ? selectedOverflow.displayText : <FormattedMessage {...messages.more} />}\n                        </MenuToggle>\n                    </PlainButton>\n                    <Menu>\n                        {overflowCategories.map(({ value, displayText }: Category) => (\n                            <SelectMenuItem\n                                key={value}\n                                data-testid={`template-category-more-${value}`}\n                                isSelected={value === currentCategory}\n                                onClick={() => onSelect(value)}\n                            >\n                                {displayText}\n                            </SelectMenuItem>\n                        ))}\n                    </Menu>\n                </DropdownMenu>\n            </div>\n        </div>\n    );\n};\n\nexport default CategorySelectorComponent;\n"],"file":"CategorySelectorComponent.js"}