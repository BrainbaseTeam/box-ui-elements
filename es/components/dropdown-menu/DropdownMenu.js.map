{"version":3,"sources":["../../../src/components/dropdown-menu/DropdownMenu.js"],"names":["React","TetherComponent","uniqueId","KEYS","DropdownMenu","initialFocusIndex","isOpen","setState","menuButtonEl","document","getElementById","menuButtonID","focus","event","state","stopPropagation","preventDefault","closeMenu","openMenuAndSetFocusIndex","key","space","enter","arrowDown","arrowUp","escape","isKeyboardEvent","onMenuClose","props","focusButton","menuEl","menuID","target","Node","contains","prevProps","prevState","addEventListener","handleDocumentClick","onMenuOpen","removeEventListener","bodyElement","children","isRightAligned","constrainToScrollParent","constrainToWindow","className","elements","Children","toArray","length","Error","menuButton","menu","menuButtonProps","id","onClick","handleButtonClick","onKeyDown","handleButtonKeyDown","menuProps","onClose","handleMenuClose","attachment","targetAttachment","constraints","push","to","bodyEl","HTMLElement","body","cloneElement","Component"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AACA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,eAAP,MAA4B,cAA5B;AACA,OAAOC,QAAP,MAAqB,iBAArB;AAEA,SAASC,IAAT,QAAqB,iBAArB;AACA,OAAO,qBAAP;;IAwBMC,Y;;;;;;;;;;;;;;;;6DAOOF,QAAQ,CAAC,MAAD,C;;mEAEFA,QAAQ,CAAC,YAAD,C;;4DAEf;AACJG,MAAAA,iBAAiB,EAAE,IADf;AAEJC,MAAAA,MAAM,EAAE;AAFJ,K;;+EAkCmB,UAACD,iBAAD,EAAgC;AACvD,YAAKE,QAAL,CAAc;AACVF,QAAAA,iBAAiB,EAAjBA,iBADU;AAEVC,QAAAA,MAAM,EAAE;AAFE,OAAd;AAIH,K;;gEAEW,YAAM;AACd,YAAKC,QAAL,CAAc;AACVD,QAAAA,MAAM,EAAE;AADE,OAAd;AAGH,K;;kEAEa,YAAM;AAChB;AACA,UAAME,YAAY,GAAGC,QAAQ,CAACC,cAAT,CAAwB,MAAKC,YAA7B,CAArB;;AACA,UAAIH,YAAJ,EAAkB;AACdA,QAAAA,YAAY,CAACI,KAAb;AACH;AACJ,K;;wEAEmB,UAACC,KAAD,EAA6B;AAAA,UACrCP,MADqC,GAC1B,MAAKQ,KADqB,CACrCR,MADqC;AAG7CO,MAAAA,KAAK,CAACE,eAAN;AACAF,MAAAA,KAAK,CAACG,cAAN;;AAEA,UAAIV,MAAJ,EAAY;AACR,cAAKW,SAAL;AACH,OAFD,MAEO;AACH,cAAKC,wBAAL,CAA8B,IAA9B;AACH;AACJ,K;;0EAEqB,UAACL,KAAD,EAAqC;AAAA,UAC/CP,MAD+C,GACpC,MAAKQ,KAD+B,CAC/CR,MAD+C;;AAGvD,cAAQO,KAAK,CAACM,GAAd;AACI,aAAKhB,IAAI,CAACiB,KAAV;AACA,aAAKjB,IAAI,CAACkB,KAAV;AACA,aAAKlB,IAAI,CAACmB,SAAV;AACIT,UAAAA,KAAK,CAACE,eAAN;AACAF,UAAAA,KAAK,CAACG,cAAN;;AAEA,gBAAKE,wBAAL,CAA8B,CAA9B;;AACA;;AAEJ,aAAKf,IAAI,CAACoB,OAAV;AACIV,UAAAA,KAAK,CAACE,eAAN;AACAF,UAAAA,KAAK,CAACG,cAAN;;AAEA,gBAAKE,wBAAL,CAA8B,CAAC,CAA/B;;AACA;;AAEJ,aAAKf,IAAI,CAACqB,MAAV;AACI,cAAIlB,MAAJ,EAAY;AACRO,YAAAA,KAAK,CAACE,eAAN;AACH;;AAEDF,UAAAA,KAAK,CAACG,cAAN;;AACA,gBAAKC,SAAL;;AACA;;AAEJ;AACI;AA3BR;AA6BH,K;;sEAEiB,UAACQ,eAAD,EAA2BZ,KAA3B,EAAuD;AAAA,UAC7Da,WAD6D,GAC7C,MAAKC,KADwC,CAC7DD,WAD6D;;AAGrE,YAAKT,SAAL;;AACA,YAAKW,WAAL;;AAEA,UAAIF,WAAJ,EAAiB;AACbA,QAAAA,WAAW,CAACb,KAAD,CAAX;AACH;AACJ,K;;0EAEqB,UAACA,KAAD,EAAuB;AACzC,UAAMgB,MAAM,GAAGpB,QAAQ,CAACC,cAAT,CAAwB,MAAKoB,MAA7B,CAAf;AACA,UAAMtB,YAAY,GAAGC,QAAQ,CAACC,cAAT,CAAwB,MAAKC,YAA7B,CAArB,CAFyC,CAIzC;;AACA,UACIkB,MAAM,IACNrB,YADA,IAEAK,KAAK,CAACkB,MAAN,YAAwBC,IAFxB,IAGA,CAACH,MAAM,CAACI,QAAP,CAAgBpB,KAAK,CAACkB,MAAtB,CAHD,IAIA,CAACvB,YAAY,CAACyB,QAAb,CAAsBpB,KAAK,CAACkB,MAA5B,CALL,EAME;AACE,cAAKd,SAAL;AACH;AACJ,K;;;;;;;uCA1HkBiB,S,EAAkBC,S,EAAkB;AACnD,UAAI,CAACA,SAAS,CAAC7B,MAAX,IAAqB,KAAKQ,KAAL,CAAWR,MAApC,EAA4C;AACxC;AACAG,QAAAA,QAAQ,CAAC2B,gBAAT,CAA0B,OAA1B,EAAmC,KAAKC,mBAAxC,EAA6D,IAA7D;AACA5B,QAAAA,QAAQ,CAAC2B,gBAAT,CAA0B,aAA1B,EAAyC,KAAKC,mBAA9C,EAAmE,IAAnE;AAHwC,YAKhCC,UALgC,GAKjB,KAAKX,KALY,CAKhCW,UALgC;;AAMxC,YAAIA,UAAJ,EAAgB;AACZA,UAAAA,UAAU;AACb;AACJ,OATD,MASO,IAAIH,SAAS,CAAC7B,MAAV,IAAoB,CAAC,KAAKQ,KAAL,CAAWR,MAApC,EAA4C;AAC/C;AACAG,QAAAA,QAAQ,CAAC8B,mBAAT,CAA6B,aAA7B,EAA4C,KAAKF,mBAAjD,EAAsE,IAAtE;AACA5B,QAAAA,QAAQ,CAAC8B,mBAAT,CAA6B,OAA7B,EAAsC,KAAKF,mBAA3C,EAAgE,IAAhE;AACH;AACJ;;;2CAEsB;AACnB,UAAI,KAAKvB,KAAL,CAAWR,MAAf,EAAuB;AACnB;AACAG,QAAAA,QAAQ,CAAC8B,mBAAT,CAA6B,aAA7B,EAA4C,KAAKF,mBAAjD,EAAsE,IAAtE;AACA5B,QAAAA,QAAQ,CAAC8B,mBAAT,CAA6B,OAA7B,EAAsC,KAAKF,mBAA3C,EAAgE,IAAhE;AACH;AACJ;;;6BAqGQ;AAAA,wBAQD,KAAKV,KARJ;AAAA,UAEDa,WAFC,eAEDA,WAFC;AAAA,UAGDC,QAHC,eAGDA,QAHC;AAAA,UAIDC,cAJC,eAIDA,cAJC;AAAA,UAKDC,uBALC,eAKDA,uBALC;AAAA,UAMDC,iBANC,eAMDA,iBANC;AAAA,UAODC,SAPC,eAODA,SAPC;AAAA,wBASiC,KAAK/B,KATtC;AAAA,UASGR,MATH,eASGA,MATH;AAAA,UASWD,iBATX,eASWA,iBATX;AAWL,UAAMyC,QAAQ,GAAG9C,KAAK,CAAC+C,QAAN,CAAeC,OAAf,CAAuBP,QAAvB,CAAjB;;AAEA,UAAIK,QAAQ,CAACG,MAAT,KAAoB,CAAxB,EAA2B;AACvB,cAAM,IAAIC,KAAJ,CAAU,8EAAV,CAAN;AACH;;AAED,UAAMC,UAAU,GAAGL,QAAQ,CAAC,CAAD,CAA3B;AACA,UAAMM,IAAI,GAAGN,QAAQ,CAAC,CAAD,CAArB;AAEA,UAAMO,eAAuB,GAAG;AAC5BC,QAAAA,EAAE,EAAE,KAAK3C,YADmB;AAE5BQ,QAAAA,GAAG,EAAE,KAAKR,YAFkB;AAG5B4C,QAAAA,OAAO,EAAE,KAAKC,iBAHc;AAGK;AACjCC,QAAAA,SAAS,EAAE,KAAKC,mBAJY;AAIS;AACrC,yBAAiB,MALW;AAM5B,yBAAiBpD,MAAM,GAAG,MAAH,GAAY;AANP,OAAhC,CApBK,CA6BL;;AACA,UAAIA,MAAJ,EAAY;AACR+C,QAAAA,eAAe,CAAC,eAAD,CAAf,GAAmC,KAAKvB,MAAxC;AACH;;AAED,UAAM6B,SAAS,GAAG;AACdL,QAAAA,EAAE,EAAE,KAAKxB,MADK;AAEdX,QAAAA,GAAG,EAAE,KAAKW,MAFI;AAGdzB,QAAAA,iBAAiB,EAAjBA,iBAHc;AAIduD,QAAAA,OAAO,EAAE,KAAKC,eAJA;AAKd,2BAAmB,KAAKlD;AALV,OAAlB;AAQA,UAAImD,UAAU,GAAG,UAAjB;AACA,UAAIC,gBAAgB,GAAG,aAAvB;;AAEA,UAAIrB,cAAJ,EAAoB;AAChBoB,QAAAA,UAAU,GAAG,WAAb;AACAC,QAAAA,gBAAgB,GAAG,cAAnB;AACH;;AAED,UAAMC,WAAW,GAAG,EAApB;;AAEA,UAAIrB,uBAAJ,EAA6B;AACzBqB,QAAAA,WAAW,CAACC,IAAZ,CAAiB;AACbC,UAAAA,EAAE,EAAE,cADS;AAEbJ,UAAAA,UAAU,EAAE;AAFC,SAAjB;AAIH;;AAED,UAAIlB,iBAAJ,EAAuB;AACnBoB,QAAAA,WAAW,CAACC,IAAZ,CAAiB;AACbC,UAAAA,EAAE,EAAE,QADS;AAEbJ,UAAAA,UAAU,EAAE;AAFC,SAAjB;AAIH;;AAED,UAAMK,MAAM,GAAG3B,WAAW,YAAY4B,WAAvB,GAAqC5B,WAArC,GAAmD/B,QAAQ,CAAC4D,IAA3E;AAEA,0BACI,oBAAC,eAAD;AACI,QAAA,UAAU,EAAEP,UADhB;AAEI,QAAA,WAAW,EAAEK,MAFjB;AAGI,QAAA,SAAS,EAAEtB,SAHf;AAII,QAAA,WAAW,EAAC,eAJhB;AAKI,QAAA,WAAW,EAAEmB,WALjB;AAMI,QAAA,OAAO,EAAE1D,MANb;AAOI,QAAA,gBAAgB,EAAEyD;AAPtB,sBASK/D,KAAK,CAACsE,YAAN,CAAmBnB,UAAnB,EAA+BE,eAA/B,CATL,EAUK/C,MAAM,gBAAGN,KAAK,CAACsE,YAAN,CAAmBlB,IAAnB,EAAyBO,SAAzB,CAAH,GAAyC,IAVpD,CADJ;AAcH;;;;EA9NsB3D,KAAK,CAACuE,S;;gBAA3BnE,Y,kBACoB;AAClBuC,EAAAA,uBAAuB,EAAE,KADP;AAElBC,EAAAA,iBAAiB,EAAE,KAFD;AAGlBF,EAAAA,cAAc,EAAE;AAHE,C;;AAgO1B,eAAetC,YAAf","sourcesContent":["// @flow\nimport * as React from 'react';\nimport TetherComponent from 'react-tether';\nimport uniqueId from 'lodash/uniqueId';\n\nimport { KEYS } from '../../constants';\nimport './DropdownMenu.scss';\n\ntype Props = {\n    bodyElement?: HTMLElement,\n    children: React.Node,\n    /** Forces menu to render within the scroll parent */\n    className?: string,\n    /** Forces menu to render within the visible window */\n    constrainToScrollParent: boolean,\n    /** Right aligns menu to button */\n    constrainToWindow: boolean,\n    /** Function called when menu is opened */\n    isRightAligned: boolean,\n    /** Handler for dropdown menu close events */\n    onMenuClose?: (event: SyntheticEvent<>) => void,\n    /** Handler for dropdown menu open events */\n    onMenuOpen?: () => void,\n};\n\ntype State = {\n    initialFocusIndex: ?number,\n    isOpen: boolean,\n};\n\nclass DropdownMenu extends React.Component<Props, State> {\n    static defaultProps = {\n        constrainToScrollParent: false,\n        constrainToWindow: false,\n        isRightAligned: false,\n    };\n\n    menuID = uniqueId('menu');\n\n    menuButtonID = uniqueId('menubutton');\n\n    state = {\n        initialFocusIndex: null,\n        isOpen: false,\n    };\n\n    componentDidUpdate(prevProps: Props, prevState: State) {\n        if (!prevState.isOpen && this.state.isOpen) {\n            // When menu is being opened\n            document.addEventListener('click', this.handleDocumentClick, true);\n            document.addEventListener('contextmenu', this.handleDocumentClick, true);\n\n            const { onMenuOpen } = this.props;\n            if (onMenuOpen) {\n                onMenuOpen();\n            }\n        } else if (prevState.isOpen && !this.state.isOpen) {\n            // When menu is being closed\n            document.removeEventListener('contextmenu', this.handleDocumentClick, true);\n            document.removeEventListener('click', this.handleDocumentClick, true);\n        }\n    }\n\n    componentWillUnmount() {\n        if (this.state.isOpen) {\n            // Clean-up global click handlers\n            document.removeEventListener('contextmenu', this.handleDocumentClick, true);\n            document.removeEventListener('click', this.handleDocumentClick, true);\n        }\n    }\n\n    menuID: string;\n\n    menuButtonID: string;\n\n    openMenuAndSetFocusIndex = (initialFocusIndex: ?number) => {\n        this.setState({\n            initialFocusIndex,\n            isOpen: true,\n        });\n    };\n\n    closeMenu = () => {\n        this.setState({\n            isOpen: false,\n        });\n    };\n\n    focusButton = () => {\n        // @NOTE: This breaks encapsulation a bit, but the only other way is passing ref functions to unknown children components\n        const menuButtonEl = document.getElementById(this.menuButtonID);\n        if (menuButtonEl) {\n            menuButtonEl.focus();\n        }\n    };\n\n    handleButtonClick = (event: SyntheticEvent<>) => {\n        const { isOpen } = this.state;\n\n        event.stopPropagation();\n        event.preventDefault();\n\n        if (isOpen) {\n            this.closeMenu();\n        } else {\n            this.openMenuAndSetFocusIndex(null);\n        }\n    };\n\n    handleButtonKeyDown = (event: SyntheticKeyboardEvent<>) => {\n        const { isOpen } = this.state;\n\n        switch (event.key) {\n            case KEYS.space:\n            case KEYS.enter:\n            case KEYS.arrowDown:\n                event.stopPropagation();\n                event.preventDefault();\n\n                this.openMenuAndSetFocusIndex(0);\n                break;\n\n            case KEYS.arrowUp:\n                event.stopPropagation();\n                event.preventDefault();\n\n                this.openMenuAndSetFocusIndex(-1);\n                break;\n\n            case KEYS.escape:\n                if (isOpen) {\n                    event.stopPropagation();\n                }\n\n                event.preventDefault();\n                this.closeMenu();\n                break;\n\n            default:\n                break;\n        }\n    };\n\n    handleMenuClose = (isKeyboardEvent: boolean, event: SyntheticEvent<>) => {\n        const { onMenuClose } = this.props;\n\n        this.closeMenu();\n        this.focusButton();\n\n        if (onMenuClose) {\n            onMenuClose(event);\n        }\n    };\n\n    handleDocumentClick = (event: MouseEvent) => {\n        const menuEl = document.getElementById(this.menuID);\n        const menuButtonEl = document.getElementById(this.menuButtonID);\n\n        // Some DOM magic to get global click handlers to close menu when not interacting with menu or associated button\n        if (\n            menuEl &&\n            menuButtonEl &&\n            event.target instanceof Node &&\n            !menuEl.contains(event.target) &&\n            !menuButtonEl.contains(event.target)\n        ) {\n            this.closeMenu();\n        }\n    };\n\n    render() {\n        const {\n            bodyElement,\n            children,\n            isRightAligned,\n            constrainToScrollParent,\n            constrainToWindow,\n            className,\n        } = this.props;\n        const { isOpen, initialFocusIndex } = this.state;\n\n        const elements = React.Children.toArray(children);\n\n        if (elements.length !== 2) {\n            throw new Error('DropdownMenu must have exactly two children: A button component and a <Menu>');\n        }\n\n        const menuButton = elements[0];\n        const menu = elements[1];\n\n        const menuButtonProps: Object = {\n            id: this.menuButtonID,\n            key: this.menuButtonID,\n            onClick: this.handleButtonClick, // NOTE: Overrides button's handler\n            onKeyDown: this.handleButtonKeyDown, // NOTE: Overrides button's handler\n            'aria-haspopup': 'true',\n            'aria-expanded': isOpen ? 'true' : 'false',\n        };\n\n        // Add this only when its open, otherwise the menuID element isn't rendered\n        if (isOpen) {\n            menuButtonProps['aria-controls'] = this.menuID;\n        }\n\n        const menuProps = {\n            id: this.menuID,\n            key: this.menuID,\n            initialFocusIndex,\n            onClose: this.handleMenuClose,\n            'aria-labelledby': this.menuButtonID,\n        };\n\n        let attachment = 'top left';\n        let targetAttachment = 'bottom left';\n\n        if (isRightAligned) {\n            attachment = 'top right';\n            targetAttachment = 'bottom right';\n        }\n\n        const constraints = [];\n\n        if (constrainToScrollParent) {\n            constraints.push({\n                to: 'scrollParent',\n                attachment: 'together',\n            });\n        }\n\n        if (constrainToWindow) {\n            constraints.push({\n                to: 'window',\n                attachment: 'together',\n            });\n        }\n\n        const bodyEl = bodyElement instanceof HTMLElement ? bodyElement : document.body;\n\n        return (\n            <TetherComponent\n                attachment={attachment}\n                bodyElement={bodyEl}\n                className={className}\n                classPrefix=\"dropdown-menu\"\n                constraints={constraints}\n                enabled={isOpen}\n                targetAttachment={targetAttachment}\n            >\n                {React.cloneElement(menuButton, menuButtonProps)}\n                {isOpen ? React.cloneElement(menu, menuProps) : null}\n            </TetherComponent>\n        );\n    }\n}\n\nexport default DropdownMenu;\n"],"file":"DropdownMenu.js"}