{"version":3,"sources":["../../../src/components/i18n/Composition.js"],"names":["React","JSTYPE_BOOLEAN","JSTYPE_NUMBER","JSTYPE_OBJECT","JSTYPE_STRING","MessageAccumulator","require","default","Node","Composition","element","isComposed","ma","keyIndex","Array","isArray","forEach","subelement","recompose","type","addParam","push","Children","props","children","child","pop","addText","String","index","getMinimalString","result","node","i","length","mapToReactElements","el","extra","cloneElement","key","nextKey","value","string","compose","translation","create","nodeArray","use","concat","getPrefix","root","toArray","slice","getSuffix","fromArray"],"mappings":"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","sourcesContent":["/*\n * Utility class for the FormattedCompMessage component.\n */\nimport React from 'react';\nimport { JSTYPE_BOOLEAN, JSTYPE_NUMBER, JSTYPE_OBJECT, JSTYPE_STRING } from './constants';\n\nconst MessageAccumulator = require('message-accumulator').default; // ES5 CommonJS module\nconst Node = require('ilib-tree-node').default; // ES5 CommonJS module\n\n/**\n * @class Compose a tree of React elements into a single string.\n *\n * @param {React.Element} element the element to compose\n */\nclass Composition {\n    constructor(element) {\n        this.element = element;\n        this.isComposed = false;\n\n        this.ma = new MessageAccumulator();\n        this.keyIndex = 0;\n    }\n\n    recompose(element) {\n        switch (typeof element) {\n            case JSTYPE_OBJECT:\n                if (Array.isArray(element)) {\n                    element.forEach(subelement => this.recompose(subelement));\n                } else if (element) {\n                    if (element.type === 'Param') {\n                        this.ma.addParam(element);\n                    } else {\n                        this.ma.push(element);\n                        React.Children.forEach(element.props.children, child => this.recompose(child));\n                        this.ma.pop();\n                    }\n                }\n                break;\n\n            case JSTYPE_NUMBER:\n            case JSTYPE_BOOLEAN:\n                this.ma.addText(String(element));\n                break;\n\n            case JSTYPE_STRING:\n                this.ma.addText(element);\n                break;\n\n            default:\n                break;\n        }\n    }\n\n    /**\n     * Compose a tree of react elements to a string that can be translated.\n     *\n     * @return {string} a string representing the tree of react elements\n     */\n    compose() {\n        this.index = 0;\n        if (!this.isComposed) {\n            this.recompose(this.element);\n        }\n        this.isComposed = true;\n        return this.ma.getMinimalString();\n    }\n\n    /**\n     * @private\n     */\n    nextKey() {\n        const result = `key${this.keyIndex}`;\n        this.keyIndex += 1;\n        return result;\n    }\n\n    /**\n     * @private\n     */\n    mapToReactElements(node) {\n        if (!node) return '';\n\n        let children = [];\n        for (let i = 0; i < node.children.length; i += 1) {\n            children.push(this.mapToReactElements(node.children[i]));\n        }\n\n        const el = node.extra;\n        if (children.length === 0 && el && el.props) {\n            children = el.props.children;\n        }\n\n        if (children && children.length === 1 && typeof children[0] === 'string') {\n            children = children[0];\n        }\n\n        if (el) {\n            return children && children.length\n                ? React.cloneElement(el, { key: el.key || this.nextKey() }, children)\n                : React.cloneElement(el, { key: el.key || this.nextKey() });\n        }\n        if (children.length) {\n            return children.length > 1 ? children : children[0];\n        }\n\n        return node.value || '';\n    }\n\n    /**\n     * Convert a composed string back into an array of React elements. The elements are clones of\n     * the same ones that this composition was created with, so that they have the same type and\n     * props and such as the originals. The elements may be re-ordered from the original, however,\n     * if the grammar of the target language requires moving around text, HTML tags, or\n     * subcomponents.\n     *\n     * @param {string} string the string to decompose into a tree of React elements.\n     * @return {React.Element} a react element\n     */\n    decompose(string) {\n        if (!this.isComposed) {\n            // need to create the mapping first from names to react elements\n            this.compose();\n        }\n        const translation = MessageAccumulator.create(string, this.ma);\n        const nodeArray = [\n            new Node({\n                type: 'root',\n                use: 'start',\n            }),\n        ]\n            .concat(this.ma.getPrefix())\n            .concat(translation.root.toArray().slice(1, -1))\n            .concat(this.ma.getSuffix())\n            .concat([\n                new Node({\n                    type: 'root',\n                    use: 'end',\n                }),\n            ]);\n        // convert to a tree again\n        return this.mapToReactElements(Node.fromArray(nodeArray));\n    }\n}\n\nexport default Composition;\n"],"file":"Composition.js"}