{"version":3,"sources":["../../../src/components/accessible-svg/AccessibleSVG.tsx"],"names":["React","omit","uniqueId","AccessibleSVG","props","children","title","rest","titleID","id","svgProps","focusable","role","Component"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,IAAP,MAAiB,aAAjB;AACA,OAAOC,QAAP,MAAqB,iBAArB;;IAwBMC,a;;;;;;;;;;;;;;;;;;yDACWD,QAAQ,CAAC,MAAD,C;;;;;;;6BAEZ;AAAA,wBACgC,KAAKE,KADrC;AAAA,UACGC,QADH,eACGA,QADH;AAAA,UACaC,KADb,eACaA,KADb;AAAA,UACuBC,IADvB;;AAEL,UAAMC,OAAO,aAAM,KAAKC,EAAX,WAAb,CAFK,CAIL;;AACA,UAAMC,QAA2D,GAAGT,IAAI,CAACM,IAAD,EAAO,CAAC,MAAD,EAAS,iBAAT,CAAP,CAAxE,CALK,CAOL;;AACAG,MAAAA,QAAQ,CAACC,SAAT,GAAqB,OAArB;;AAEA,UAAIL,KAAJ,EAAW;AACPI,QAAAA,QAAQ,CAAC,iBAAD,CAAR,GAA8BF,OAA9B;AACAE,QAAAA,QAAQ,CAACE,IAAT,GAAgB,KAAhB;AACH,OAHD,MAGO;AACHF,QAAAA,QAAQ,CAACE,IAAT,GAAgB,cAAhB;AACH;;AAED,aACI,2BAASF,QAAT,EACKJ,KAAK,GAAG;AAAO,QAAA,EAAE,EAAEE;AAAX,SAAqBF,KAArB,CAAH,GAAyC,IADnD,EAEKD,QAFL,CADJ;AAMH;;;;EA1BuBL,KAAK,CAACa,S;;AA6BlC,eAAeV,aAAf","sourcesContent":["import * as React from 'react';\nimport omit from 'lodash/omit';\nimport uniqueId from 'lodash/uniqueId';\n\nexport interface SVGProps {\n    /** Class for the svg */\n    className?: string;\n    /** Height for the svg */\n    height?: number;\n    /** Accessibility role for the svg */\n    role?: string;\n    /** A text-only string describing the icon if it's not purely decorative for accessibility */\n    title?: React.ReactNode;\n    /** View box for the svg */\n    viewBox?: string;\n    /** Width for the svg */\n    width?: number;\n}\n\nexport interface AccessibleSVGProps {\n    /** SVG dom elements for the component */\n    children: React.ReactElement | Array<React.ReactElement>;\n    /** A text-only string describing the icon if it's not purely decorative for accessibility */\n    title?: React.ReactNode;\n}\n\nclass AccessibleSVG extends React.Component<AccessibleSVGProps & SVGProps> {\n    id: string = uniqueId('icon');\n\n    render() {\n        const { children, title, ...rest } = this.props;\n        const titleID = `${this.id}-title`;\n\n        // Make sure parent doesn't accidentally override these values\n        const svgProps: Record<string, string | number | React.ReactNode> = omit(rest, ['role', 'aria-labelledby']);\n\n        // Accessibility fix for IE11, which treats all SVGs as focusable by default\n        svgProps.focusable = 'false';\n\n        if (title) {\n            svgProps['aria-labelledby'] = titleID;\n            svgProps.role = 'img';\n        } else {\n            svgProps.role = 'presentation';\n        }\n\n        return (\n            <svg {...svgProps}>\n                {title ? <title id={titleID}>{title}</title> : null}\n                {children}\n            </svg>\n        );\n    }\n}\n\nexport default AccessibleSVG;\n"],"file":"AccessibleSVG.js"}