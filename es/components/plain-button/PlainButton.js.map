{"version":3,"sources":["../../../src/components/plain-button/PlainButton.tsx"],"names":["React","noop","ButtonType","PlainButton","children","className","getDOMRef","isDisabled","type","SUBMIT","rest","buttonProps","onClick","event","preventDefault","stopPropagation"],"mappings":";;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,IAAP,MAAiB,aAAjB;AAEA,SAASC,UAAT,QAA2B,WAA3B;;AAiBA,IAAMC,WAAW,GAAG,SAAdA,WAAc,OAOI;AAAA,MANpBC,QAMoB,QANpBA,QAMoB;AAAA,4BALpBC,SAKoB;AAAA,MALpBA,SAKoB,+BALR,EAKQ;AAAA,4BAJpBC,SAIoB;AAAA,MAJpBA,SAIoB,+BAJRL,IAIQ;AAAA,6BAHpBM,UAGoB;AAAA,MAHpBA,UAGoB,gCAHP,KAGO;AAAA,uBAFpBC,IAEoB;AAAA,MAFpBA,IAEoB,0BAFbN,UAAU,CAACO,MAEE;AAAA,MADjBC,IACiB;;AACpB,MAAMC,WAAoG,GAAG,EAA7G;;AACA,MAAIJ,UAAJ,EAAgB;AACZI,IAAAA,WAAW,CAAC,eAAD,CAAX,GAA+B,IAA/B;;AACAA,IAAAA,WAAW,CAACC,OAAZ,GAAsB,UAACC,KAAD,EAAoD;AACtEA,MAAAA,KAAK,CAACC,cAAN;AACAD,MAAAA,KAAK,CAACE,eAAN;AACH,KAHD;AAIH;;AAED,SACI;AACA;AAAQ,MAAA,SAAS,sBAAeV,SAAf,CAAjB;AAA6C,MAAA,GAAG,EAAEC,SAAlD;AAA6D,MAAA,IAAI,EAAEE;AAAnE,OAA6EE,IAA7E,EAAuFC,WAAvF,GACKP,QADL;AAFJ;AAMH,CAvBD;;AAyBA,eAAeD,WAAf","sourcesContent":["import * as React from 'react';\nimport noop from 'lodash/noop';\n\nimport { ButtonType } from '../button';\n\nexport interface PlainButtonProps extends React.HTMLAttributes<HTMLButtonElement> {\n    /** Contents of the plain button */\n    children?: React.ReactNode;\n    /** Custom class name for the plain button */\n    className?: string;\n    /** Function to get the DOM reference to the html button */\n    getDOMRef?: React.LegacyRef<HTMLButtonElement>;\n    /** Whether this button should be functionally disabled but still react on hover/focus for tooltips */\n    isDisabled?: boolean;\n    /** onClick handler for the button */\n    onClick?: (event: React.SyntheticEvent<HTMLButtonElement>) => void;\n    /** Type of the button - submit, button, reset */\n    type?: ButtonType;\n}\n\nconst PlainButton = ({\n    children,\n    className = '',\n    getDOMRef = noop,\n    isDisabled = false,\n    type = ButtonType.SUBMIT,\n    ...rest\n}: PlainButtonProps) => {\n    const buttonProps: { [key: string]: boolean | ((event: React.SyntheticEvent<HTMLButtonElement>) => void) } = {};\n    if (isDisabled) {\n        buttonProps['aria-disabled'] = true;\n        buttonProps.onClick = (event: React.SyntheticEvent<HTMLButtonElement>) => {\n            event.preventDefault();\n            event.stopPropagation();\n        };\n    }\n\n    return (\n        // eslint-disable-next-line react/button-has-type\n        <button className={`btn-plain ${className}`} ref={getDOMRef} type={type} {...rest} {...buttonProps}>\n            {children}\n        </button>\n    );\n};\n\nexport default PlainButton;\n"],"file":"PlainButton.js"}