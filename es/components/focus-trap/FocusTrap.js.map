{"version":3,"sources":["../../../src/components/focus-trap/FocusTrap.js"],"names":["React","tabbable","classNames","FocusTrap","el","tabbableEls","length","focus","trapEl","event","handleOverlayKeyDown","props","document","activeElement","key","focusFirstElement","stopPropagation","preventDefault","shouldDefaultFocus","setTimeout","previousFocusEl","children","className","getRef","shouldOutlineFocus","rest","ref","handleElKeyDown","focusLastElement","handleTrapElKeyDown","Component"],"mappings":"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","sourcesContent":["// @flow\nimport * as React from 'react';\nimport tabbable from 'tabbable';\nimport classNames from 'classnames';\n\ntype Props = {\n    children: React.Node,\n    className?: string,\n    /** Function to get the ref to the focus trap wrapper element */\n    getRef?: Function,\n    /** Function to handle keyboard input passed in from parent component. e.g. close overlay on Escape */\n    handleOverlayKeyDown?: Function,\n    shouldDefaultFocus?: boolean,\n    shouldOutlineFocus?: boolean,\n};\n\nclass FocusTrap extends React.Component<Props> {\n    componentDidMount() {\n        if (this.props.shouldDefaultFocus) {\n            setTimeout(() => {\n                this.previousFocusEl = document.activeElement;\n                this.focusFirstElement();\n            }, 0);\n        } else {\n            setTimeout(() => {\n                if (this.el) {\n                    this.el.focus();\n                }\n            }, 0);\n        }\n    }\n\n    componentWillUnmount() {\n        setTimeout(() => {\n            if (this.previousFocusEl) {\n                this.previousFocusEl.focus();\n            }\n        }, 0);\n    }\n\n    el: ?HTMLDivElement;\n\n    previousFocusEl: ?HTMLElement;\n\n    trapEl: ?HTMLElement;\n\n    /**\n     * Focus the first tabbable element\n     */\n    focusFirstElement = () => {\n        if (!this.el) {\n            return;\n        }\n\n        const tabbableEls = tabbable(this.el);\n\n        // There are three trap-related elements, including first element.\n        // If there are 3 or fewer tabbable elements, that means there are no\n        // tabbable children, so focus on the trap element instead.\n        if (tabbableEls.length > 3) {\n            tabbableEls[1].focus();\n        } else if (this.trapEl) {\n            this.trapEl.focus();\n        }\n    };\n\n    /**\n     * Focus the last tabbable element\n     */\n    focusLastElement = () => {\n        if (!this.el) {\n            return;\n        }\n\n        const tabbableEls = tabbable(this.el);\n\n        // There are three trap-related elements, including the last two elements.\n        // If there are 3 or fewer tabbable elements, that means there are no\n        // tabbable children, so focus on the trap element instead.\n        if (tabbableEls.length > 3) {\n            tabbableEls[tabbableEls.length - 3].focus();\n        } else if (this.trapEl) {\n            this.trapEl.focus();\n        }\n    };\n\n    handleElKeyDown = (event: SyntheticKeyboardEvent<HTMLElement>) => {\n        const { handleOverlayKeyDown } = this.props;\n        if (this.el === document.activeElement && event.key === 'Tab') {\n            this.focusFirstElement();\n            event.stopPropagation();\n            event.preventDefault();\n        }\n\n        if (handleOverlayKeyDown) {\n            handleOverlayKeyDown(event);\n        }\n    };\n\n    handleTrapElKeyDown = (event: SyntheticKeyboardEvent<HTMLElement>) => {\n        if (event.key !== 'Tab') {\n            return;\n        }\n        event.stopPropagation();\n        event.preventDefault();\n    };\n\n    render() {\n        const {\n            children,\n            className,\n            getRef,\n            handleOverlayKeyDown,\n            shouldDefaultFocus,\n            shouldOutlineFocus,\n            ...rest\n        } = this.props;\n        return (\n            // eslint-disable-next-line jsx-a11y/no-static-element-interactions\n            <div\n                ref={ref => {\n                    this.el = ref;\n                    if (getRef) {\n                        getRef(ref);\n                    }\n                }}\n                className={classNames(className, {\n                    'should-outline-focus': shouldOutlineFocus,\n                })}\n                onKeyDown={this.handleElKeyDown}\n                {...rest}\n            >\n                {/* eslint-disable-next-line jsx-a11y/no-noninteractive-tabindex */}\n                <i aria-hidden onFocus={this.focusLastElement} tabIndex=\"0\" />\n                {children}\n                {/* eslint-disable-next-line jsx-a11y/no-noninteractive-tabindex */}\n                <i aria-hidden onFocus={this.focusFirstElement} tabIndex=\"0\" />\n                {/* in case children doesn't contain any focusable elements, focus on trap */}\n                <i\n                    ref={ref => {\n                        this.trapEl = ref;\n                    }}\n                    aria-hidden\n                    onKeyDown={this.handleTrapElKeyDown}\n                    // eslint-disable-next-line jsx-a11y/no-noninteractive-tabindex\n                    tabIndex=\"0\"\n                />\n            </div>\n        );\n    }\n}\n\nexport default FocusTrap;\n"],"file":"FocusTrap.js"}