{"version":3,"sources":["../../../src/components/notification/Notification.js"],"names":["React","defineMessages","injectIntl","classNames","IconAlertCircle","IconBell","IconClose","IconInfoThin","IconSync","DURATION_SHORT","DURATION_LONG","TYPE_DEFAULT","TYPE_INFO","TYPE_WARN","TYPE_ERROR","OVERFLOW_WRAP","DURATION_TIMES","ICON_RENDERER","messages","clearNotificationButtonText","Notification","event","onClose","props","timeout","clearTimeout","duration","setTimeout","children","contents","getChildren","intl","type","overflow","formatMessage","classes","cloneElement","color","height","width","Component"],"mappings":"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","sourcesContent":["// @flow\nimport * as React from 'react';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport classNames from 'classnames';\n\nimport IconAlertCircle from '../../icons/general/IconAlertCircle';\nimport IconBell from '../../icons/general/IconBell';\nimport IconClose from '../../icons/general/IconClose';\nimport IconInfoThin from '../../icons/general/IconInfoThin';\nimport IconSync from '../../icons/general/IconSync';\n\nimport './Notification.scss';\n\n// @NOTE: We can't import these constants from ./constant.js because `react-docgen`\n// can't handle imported variables appear in propTypes\n// see https://github.com/reactjs/react-docgen/issues/33\nconst DURATION_SHORT = 'short';\nconst DURATION_LONG = 'long';\nconst TYPE_DEFAULT = 'default';\nconst TYPE_INFO = 'info';\nconst TYPE_WARN = 'warn';\nconst TYPE_ERROR = 'error';\nconst OVERFLOW_WRAP = 'wrap';\n\nconst DURATION_TIMES = {\n    [DURATION_SHORT]: 5000,\n    [DURATION_LONG]: 10000,\n};\n\nconst ICON_RENDERER: { [string]: Function } = {\n    [TYPE_DEFAULT]: () => <IconBell />,\n    [TYPE_ERROR]: () => <IconAlertCircle />,\n    [TYPE_INFO]: () => <IconSync />,\n    [TYPE_WARN]: () => <IconInfoThin />,\n};\n\nconst messages = defineMessages({\n    clearNotificationButtonText: {\n        defaultMessage: 'Clear Notification',\n        description: 'Button to clear notification',\n        id: 'boxui.notification.clearNotification',\n    },\n});\n\ntype Props = {\n    /**\n     * The contents of the `Notification`.\n     * - Notification text must be wrapped in a `<span />` tag.\n     * - Notification buttons must be the `<Button />` component.\n     */\n    children: React.Node,\n    /** Function that gets executed when close button is clicked or when duration expires. */\n    duration?: 'short' | 'long',\n    /** `duration`: When set, dictates how long the notification will exist before calling `onClose`.\n     *  If unset, the notification will not automatically call `onClose`.\n     * - `short`: 5s\n     * - `long`: 10s */\n    intl: Object,\n    onClose?: Function,\n    /**\n     * Determines notification colors\n     * - `default`: black\n     * - `info`: green\n     * - `warn`: yellow\n     * - `error`: red\n     */\n    overflow?: 'wrap' | 'ellipsis',\n    type: 'default' | 'info' | 'warn' | 'error',\n};\n\nclass Notification extends React.Component<Props> {\n    static defaultProps = {\n        overflow: OVERFLOW_WRAP,\n        type: TYPE_DEFAULT,\n    };\n\n    componentDidMount() {\n        const { duration, onClose } = this.props;\n        this.timeout = duration && onClose ? setTimeout(onClose, DURATION_TIMES[duration]) : null;\n    }\n\n    onClose = event => {\n        const { onClose } = this.props;\n        if (this.timeout) {\n            clearTimeout(this.timeout);\n        }\n        if (onClose) {\n            onClose(event);\n        }\n    };\n\n    getChildren() {\n        const { children } = this.props;\n        return typeof children === 'string' ? <span>{children}</span> : children;\n    }\n\n    timeout: TimeoutID | null;\n\n    render() {\n        const contents = this.getChildren();\n        const { intl, type, overflow } = this.props;\n        const { formatMessage } = intl;\n        const classes = classNames('notification', type, overflow);\n\n        return (\n            <div className={classes}>\n                {React.cloneElement(ICON_RENDERER[type](), {\n                    color: '#fff',\n                    height: 20,\n                    width: 20,\n                })}\n                {contents}\n                <button\n                    aria-label={formatMessage(messages.clearNotificationButtonText)}\n                    className=\"close-btn\"\n                    onClick={this.onClose}\n                    type=\"button\"\n                >\n                    <IconClose color=\"#FFF\" height={18} width={18} />\n                </button>\n            </div>\n        );\n    }\n}\n\nexport default injectIntl(Notification);\n"],"file":"Notification.js"}