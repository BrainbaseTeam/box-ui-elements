{"version":3,"sources":["../../../src/components/modal/Modal.js"],"names":["React","classNames","tabbable","omit","FocusTrap","LoadingIndicator","Portal","ModalDialog","Modal","event","props","isOpen","onRequestClose","key","stopPropagation","onBackdropClick","setTimeout","focusElementSelector","focusElementSelectorTrimmed","trim","focusElement","focusFirstUsefulElement","dialog","tabbableEls","length","focus","elementSelector","el","querySelector","Error","onModalOpen","prevProps","isLoading","className","shouldNotUsePortal","style","rest","bodyOverrideStyle","modalProps","WrapperComponent","onKeyDown","backdrop","modalEl","Component"],"mappings":"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","sourcesContent":["// @flow\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport tabbable from 'tabbable';\nimport omit from 'lodash/omit';\n\nimport FocusTrap from '../focus-trap';\nimport LoadingIndicator from '../loading-indicator';\nimport Portal from '../portal';\nimport ModalDialog from './ModalDialog';\n\nimport './Modal.scss';\n\ntype Props = {\n    children: React.Node,\n    /** Additional CSS classname of the `.modal` element */\n    className?: string,\n    focusElementSelector?: string,\n    isLoading?: boolean,\n    isOpen?: boolean,\n    onBackdropClick?: Function,\n    /** `(event) => {}`. `event` can be of type `SyntheticKeyboardEvent|SyntheticMouseEvent`. */\n    onRequestClose?: Function,\n    /** modal usually use Portal as Portal stays if parent is removed, but it cannot retain DOM tree's resin props */\n    shouldNotUsePortal?: boolean,\n    style: {\n        backdrop?: Object,\n        dialog?: Object,\n    },\n    title?: React.Node,\n};\n\nclass Modal extends React.Component<Props> {\n    static defaultProps = {\n        style: {\n            backdrop: {},\n            dialog: {},\n        },\n    };\n\n    componentDidMount() {\n        const { isOpen } = this.props;\n\n        if (isOpen) {\n            this.onModalOpen();\n        }\n    }\n\n    componentDidUpdate(prevProps: Props) {\n        const { isLoading, isOpen } = this.props;\n\n        // Set focus if modal is transitioning from closed -> open and/or loading -> not loading\n        if ((!prevProps.isOpen || prevProps.isLoading) && isOpen && !isLoading) {\n            this.onModalOpen();\n        }\n    }\n\n    /**\n     * Call props.onRequestClose when escape is pressed\n     * @param {SyntheticKeyboardEvent} event\n     */\n    onKeyDown = (event: SyntheticKeyboardEvent<>) => {\n        const { isOpen, onRequestClose } = this.props;\n        if (isOpen && onRequestClose && event.key === 'Escape') {\n            event.stopPropagation();\n            onRequestClose(event);\n        }\n    };\n\n    /**\n     * Call props.onRequestClose when backdrop is clicked\n     * @param {SyntheticMouseEvent} event\n     */\n    onBackdropClick = (event: SyntheticMouseEvent<HTMLDivElement>) => {\n        const { onRequestClose, onBackdropClick } = this.props;\n\n        if (onBackdropClick) {\n            onBackdropClick(event);\n        } else if (onRequestClose) {\n            onRequestClose(event);\n        }\n    };\n\n    /**\n     * Focuses on the correct element in the popup when it opens\n     */\n    onModalOpen = () => {\n        setTimeout(() => {\n            const { focusElementSelector } = this.props;\n            const focusElementSelectorTrimmed = focusElementSelector && focusElementSelector.trim();\n            if (focusElementSelectorTrimmed) {\n                this.focusElement(focusElementSelectorTrimmed);\n            } else {\n                this.focusFirstUsefulElement();\n            }\n        }, 0);\n    };\n\n    dialog: ?HTMLElement;\n\n    /**\n     * Focus the first useful element in the modal (i.e. not the close button, unless it's the only thing)\n     */\n    focusFirstUsefulElement = () => {\n        if (!this.dialog) {\n            return;\n        }\n        const tabbableEls = tabbable(this.dialog);\n        if (tabbableEls.length > 1) {\n            tabbableEls[1].focus();\n        } else if (tabbableEls.length > 0) {\n            tabbableEls[0].focus();\n        }\n    };\n\n    /**\n     * Focus the element that matches the selector in the modal\n     * @throws {Error} When the elementSelector does not match any element\n     */\n    focusElement = (elementSelector: string) => {\n        if (!this.dialog) {\n            return;\n        }\n        const el = this.dialog.querySelector(elementSelector);\n        if (el) {\n            el.focus();\n        } else {\n            throw new Error(`Could not find element matching selector ${elementSelector} to focus on.`);\n        }\n    };\n\n    render() {\n        const { className, isLoading, isOpen, onRequestClose, shouldNotUsePortal, style, ...rest } = this.props;\n\n        if (!isOpen) {\n            return null;\n        }\n\n        const bodyOverrideStyle = `\n            body {\n                overflow:hidden;\n            }\n        `;\n\n        // used `omit` here to prevent certain key/value pairs from going into the spread on `ModalDialog`\n        const modalProps = omit(rest, ['onBackdropClick', 'focusElementSelector']);\n\n        const WrapperComponent = shouldNotUsePortal ? 'div' : Portal;\n        // Render a style tag to prevent body from scrolling as long as the Modal is open\n        return (\n            <WrapperComponent className={classNames('modal', className)} onKeyDown={this.onKeyDown} tabIndex=\"-1\">\n                {/* eslint-disable-next-line jsx-a11y/no-static-element-interactions, jsx-a11y/click-events-have-key-events */}\n                <div className=\"modal-backdrop\" onClick={this.onBackdropClick} style={style.backdrop} />\n                <FocusTrap className=\"modal-dialog-container\">\n                    {isLoading ? (\n                        <LoadingIndicator size=\"large\" />\n                    ) : (\n                        <ModalDialog\n                            modalRef={modalEl => {\n                                // This callback gets passed through as a regular prop since\n                                // ModalDialog is wrapped in a HOC\n                                this.dialog = modalEl;\n                            }}\n                            onRequestClose={onRequestClose}\n                            style={style.dialog}\n                            {...modalProps}\n                        />\n                    )}\n                </FocusTrap>\n                <style type=\"text/css\">{bodyOverrideStyle}</style>\n            </WrapperComponent>\n        );\n    }\n}\n\nexport default Modal;\n"],"file":"Modal.js"}