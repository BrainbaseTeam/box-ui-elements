{"version":3,"sources":["../../../../src/components/modal/stories/Modal.stories.js"],"names":["React","IntlProvider","State","Store","Button","ModalActions","PrimaryButton","Modal","notes","basic","componentStore","isModalOpen","openModal","set","closeModal","state","withCustomBackdropClickHandler","confirmBackdropClose","window","confirm","title","component","parameters"],"mappings":"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","sourcesContent":["// @flow\nimport * as React from 'react';\nimport { IntlProvider } from 'react-intl';\nimport { State, Store } from '@sambego/storybook-state';\n\nimport Button from '../../button/Button';\nimport ModalActions from '../ModalActions';\nimport PrimaryButton from '../../primary-button/PrimaryButton';\n\nimport Modal from '../Modal';\nimport notes from './Modal.stories.md';\n\nexport const basic = () => {\n    const componentStore = new Store({\n        isModalOpen: false,\n    });\n\n    const openModal = () =>\n        componentStore.set({\n            isModalOpen: true,\n        });\n\n    const closeModal = () => componentStore.set({ isModalOpen: false });\n\n    return (\n        <State store={componentStore}>\n            {state => (\n                <IntlProvider locale=\"en\">\n                    <div>\n                        <Modal\n                            title=\"Box: Sharing is simple\"\n                            onRequestClose={closeModal}\n                            isOpen={state.isModalOpen}\n                            focusElementSelector=\"input\"\n                        >\n                            <p>\n                                Elements can be auto-focused by implementing transition logic in componentDidUpdate.\n                                Focus is trapped inside the modal while it is open, so pressing tab will cycle through\n                                the elements inside.\n                            </p>\n                            <p>\n                                <input type=\"text\" />\n                            </p>\n                            <p>\n                                Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vestibulum congue, lacus ut\n                                scelerisque porttitor, libero diam luctus ante, non porta lectus dolor eu lectus.\n                                Suspendisse sagittis ut orci eget placerat.\n                            </p>\n                            <ModalActions>\n                                <Button onClick={closeModal}>Cancel</Button>\n                                <PrimaryButton onClick={closeModal}>Okay</PrimaryButton>\n                            </ModalActions>\n                        </Modal>\n                        <PrimaryButton onClick={openModal}>Launch standard modal</PrimaryButton>\n                    </div>\n                </IntlProvider>\n            )}\n        </State>\n    );\n};\n\nexport const withCustomBackdropClickHandler = () => {\n    const componentStore = new Store({\n        isModalOpen: false,\n    });\n\n    const openModal = () =>\n        componentStore.set({\n            isModalOpen: true,\n        });\n    const closeModal = () => componentStore.set({ isModalOpen: false });\n\n    const confirmBackdropClose = () => {\n        // We can call the defined `closeModal` message after any custom processing,\n        // or do a no-op if we wish to disable backdrop close functionality\n        // eslint-disable-next-line no-alert\n        if (window.confirm('There are unsaved changes. Are you sure you want to close?')) {\n            closeModal();\n        }\n    };\n\n    return (\n        <State store={componentStore}>\n            {state => (\n                <IntlProvider locale=\"en\">\n                    <div>\n                        <Modal\n                            title=\"Box: Sharing is simple\"\n                            onRequestClose={closeModal}\n                            isOpen={state.isModalOpen}\n                            focusElementSelector=\"input\"\n                            onBackdropClick={confirmBackdropClose}\n                        >\n                            <p>\n                                Elements can be auto-focused by implementing transition logic in componentDidUpdate.\n                                Focus is trapped inside the modal while it is open, so pressing tab will cycle through\n                                the elements inside.\n                            </p>\n                            <p>\n                                <input type=\"text\" />\n                            </p>\n                            <p>\n                                Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vestibulum congue, lacus ut\n                                scelerisque porttitor, libero diam luctus ante, non porta lectus dolor eu lectus.\n                                Suspendisse sagittis ut orci eget placerat.\n                            </p>\n                            <ModalActions>\n                                <Button onClick={closeModal}>Cancel</Button>\n                                <PrimaryButton onClick={closeModal}>Okay</PrimaryButton>\n                            </ModalActions>\n                        </Modal>\n                        <PrimaryButton onClick={openModal}>Launch standard modal</PrimaryButton>\n                    </div>\n                </IntlProvider>\n            )}\n        </State>\n    );\n};\n\nexport default {\n    title: 'Components|Modal',\n    component: Modal,\n    parameters: {\n        notes,\n    },\n};\n"],"file":"Modal.stories.js"}