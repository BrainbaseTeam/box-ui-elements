{"version":3,"sources":["../../../src/components/modal/ModalDialog.js"],"names":["React","classNames","omit","uniqueId","defineMessages","injectIntl","IconClose","ALERT_TYPE","DIALOG_TYPE","messages","closeModalText","ModalDialog","event","onRequestClose","props","closeButtonProps","intl","formatMessage","onCloseButtonClick","children","type","elements","Children","toArray","length","Error","modalID","className","modalRef","title","rest","isAlertType","divProps","role","renderCloseButton","renderContent","Component","ModalDialogBase"],"mappings":"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","sourcesContent":["// @flow\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport omit from 'lodash/omit';\nimport uniqueId from 'lodash/uniqueId';\nimport { defineMessages, injectIntl } from 'react-intl';\n\nimport IconClose from '../../icons/general/IconClose';\n\nconst ALERT_TYPE = 'alert';\nconst DIALOG_TYPE = 'dialog';\n\nconst messages = defineMessages({\n    closeModalText: {\n        defaultMessage: 'Close Modal',\n        description: 'Button to close modal',\n        id: 'boxui.modalDialog.closeModalText',\n    },\n});\n\ntype Props = {\n    children: React.Node,\n    className?: string,\n    closeButtonProps: Object,\n    intl: Object,\n    modalRef?: Function,\n    onRequestClose?: Function,\n    title?: React.Node,\n    type?: 'alert' | 'dialog',\n};\n\nclass ModalDialog extends React.Component<Props> {\n    static defaultProps = {\n        type: DIALOG_TYPE,\n        closeButtonProps: {},\n    };\n\n    /**\n     * Handles clicking on the close button\n     * @param {SyntheticMouseEvent} event\n     * @return {void}\n     */\n    onCloseButtonClick = (event: SyntheticMouseEvent<HTMLButtonElement>) => {\n        const { onRequestClose } = this.props;\n        if (onRequestClose) {\n            onRequestClose(event);\n        }\n    };\n\n    modalID: string = uniqueId('modal');\n\n    /**\n     * Renders a button if onRequestClose is passed in\n     * @return {ReactElement|null} - Returns the button, or null if the button shouldn't be rendered\n     */\n    renderCloseButton() {\n        const { closeButtonProps, onRequestClose, intl } = this.props;\n        const { formatMessage } = intl;\n        if (!onRequestClose) {\n            return null;\n        }\n\n        return (\n            // eslint-disable-next-line react/button-has-type\n            <button\n                {...closeButtonProps}\n                aria-label={formatMessage(messages.closeModalText)}\n                className=\"modal-close-button\"\n                onClick={this.onCloseButtonClick}\n            >\n                <IconClose color=\"#909090\" height={18} width={18} />\n            </button>\n        );\n    }\n\n    renderContent() {\n        const { children, type } = this.props;\n\n        if (type !== ALERT_TYPE) {\n            return <div className=\"modal-content\">{children}</div>;\n        }\n\n        const elements = React.Children.toArray(children);\n        if (elements.length !== 2) {\n            throw new Error('Alert modal must have exactly two children: A message and <ModalActions>');\n        }\n\n        return (\n            <div className=\"modal-content\">\n                <p id={`${this.modalID}-desc`}>{elements[0]}</p>\n                {elements[1]}\n            </div>\n        );\n    }\n\n    render() {\n        const {\n            className,\n            modalRef,\n            title,\n            type,\n            ...rest // Useful for resin tagging, and other misc tags such as a11y\n        } = this.props;\n        const isAlertType = type === ALERT_TYPE;\n        const divProps = omit(rest, ['children', 'closeButtonProps', 'onRequestClose', 'intl']);\n\n        divProps.role = isAlertType ? 'alertdialog' : 'dialog';\n        divProps['aria-labelledby'] = `${this.modalID}-label`;\n        if (isAlertType) {\n            divProps['aria-describedby'] = `${this.modalID}-desc`;\n        }\n\n        return (\n            <div ref={modalRef} className={classNames('modal-dialog', className)} {...divProps}>\n                <div className=\"modal-header\">\n                    <h2 className=\"modal-title\" id={`${this.modalID}-label`}>\n                        {title}\n                    </h2>\n                </div>\n                {this.renderCloseButton()}\n                {this.renderContent()}\n            </div>\n        );\n    }\n}\n\nexport { ModalDialog as ModalDialogBase };\nexport default injectIntl(ModalDialog);\n"],"file":"ModalDialog.js"}