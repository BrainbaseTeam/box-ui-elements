{"version":3,"sources":["../../../src/components/text-input-with-copy-button/TextInputWithCopyButton.js"],"names":["React","classNames","omit","FormattedMessage","messages","TextInput","Button","DEFAULT_SUCCESS_STATE_DURATION","defaultCopyText","copy","defaultCopiedText","copied","TextInputWithCopyButton","props","document","execCommand","setState","copySuccess","buttonText","buttonDefaultText","performAutofocus","copySelectedText","animateCopyButton","event","copyInputRef","onFocus","onCopySuccess","select","scrollLeft","isCopyCommandSupported","disabled","handleCopyButtonClick","buttonProps","state","queryCommandSupported","hasFocused","autofocus","value","triggerCopyOnLoad","clearCopySuccessTimeout","successStateDuration","buttonSuccessText","copySuccessTimeout","setTimeout","restoreCopyButton","clearTimeout","className","rest","inputProps","inputRef","ref","wrapperClasses","copyEvent","onCopy","handleCopyEvent","handleFocus","renderCopyButton","PureComponent","hideOptionalLabel","readOnly","type"],"mappings":"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","sourcesContent":["// @flow\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport omit from 'lodash/omit';\nimport { FormattedMessage } from 'react-intl';\n\nimport messages from '../../common/messages';\nimport TextInput from '../text-input';\nimport Button from '../button';\n\nimport './TextInputWithCopyButton.scss';\n\nconst DEFAULT_SUCCESS_STATE_DURATION = 3000;\n\nconst defaultCopyText = <FormattedMessage {...messages.copy} />;\nconst defaultCopiedText = <FormattedMessage {...messages.copied} />;\n\ntype Props = {\n    /** Set the focus to input when component loads */\n    autofocus?: boolean,\n    /** Default copy button text */\n    buttonDefaultText: string | React.Node,\n    /** Copy button text when copy is successful */\n    buttonProps?: Object,\n    buttonSuccessText?: string | React.Node,\n    className: string,\n    disabled?: boolean,\n    /** Label displayed for the text input */\n    // TODO: Make label required\n    label?: React.Node,\n    /** onFocus handler for the input el */\n    onCopySuccess?: Function,\n    /** Function called when link is copied by keyboard or button */\n    onFocus?: Function,\n    /** Duration (milliseconds) in which to show the copy success state */\n    successStateDuration: number,\n    /** trigger the copy animation when the component loads (used to simulate a click on copy button) */\n    triggerCopyOnLoad?: boolean,\n    /** html input types (email, url, text, number), defaults to 'text' */\n    type: string,\n    /** Value of the text input */\n    value: React.Node,\n};\n\ntype State = {\n    buttonText: string | React.Node,\n    copySuccess: boolean,\n    hasFocused: boolean,\n};\n\nclass TextInputWithCopyButton extends React.PureComponent<Props, State> {\n    static defaultProps = {\n        buttonDefaultText: defaultCopyText,\n        buttonProps: {},\n        buttonSuccessText: defaultCopiedText,\n        className: '',\n        hideOptionalLabel: true,\n        readOnly: true,\n        successStateDuration: DEFAULT_SUCCESS_STATE_DURATION,\n        type: 'text',\n    };\n\n    constructor(props: Props) {\n        super(props);\n\n        this.isCopyCommandSupported = document.queryCommandSupported('copy');\n\n        this.state = {\n            copySuccess: false,\n            buttonText: props.buttonDefaultText,\n            hasFocused: false,\n        };\n    }\n\n    componentDidMount() {\n        const { autofocus, value } = this.props;\n\n        if (autofocus && value) {\n            this.performAutofocus();\n        }\n    }\n\n    componentDidUpdate() {\n        const { autofocus, value, triggerCopyOnLoad } = this.props;\n        const { copySuccess, hasFocused } = this.state;\n\n        // if we've set focus before, and should auto focus on update, make sure to\n        // focus after component update\n        if (autofocus && value) {\n            this.performAutofocus();\n        }\n\n        if (triggerCopyOnLoad && !copySuccess && !hasFocused) {\n            this.animateCopyButton();\n        }\n    }\n\n    componentWillUnmount() {\n        this.clearCopySuccessTimeout();\n    }\n\n    copyInputRef: ?HTMLInputElement;\n\n    copySuccessTimeout: ?TimeoutID;\n\n    isCopyCommandSupported: boolean;\n\n    animateCopyButton() {\n        const { successStateDuration, buttonSuccessText } = this.props;\n        this.clearCopySuccessTimeout();\n\n        this.setState(\n            {\n                copySuccess: true,\n                buttonText: buttonSuccessText,\n                hasFocused: true,\n            },\n            () => {\n                this.copySuccessTimeout = setTimeout(() => {\n                    this.restoreCopyButton();\n                }, successStateDuration);\n            },\n        );\n    }\n\n    clearCopySuccessTimeout() {\n        if (!this.copySuccessTimeout) {\n            return;\n        }\n        clearTimeout(this.copySuccessTimeout);\n        this.copySuccessTimeout = null;\n    }\n\n    copySelectedText = () => document.execCommand('copy');\n\n    restoreCopyButton = () => {\n        this.setState({\n            copySuccess: false,\n            buttonText: this.props.buttonDefaultText,\n        });\n    };\n\n    handleCopyButtonClick = () => {\n        this.performAutofocus();\n        this.copySelectedText();\n        this.animateCopyButton();\n    };\n\n    handleFocus = (event: SyntheticEvent<>) => {\n        if (this.copyInputRef) {\n            this.performAutofocus();\n        }\n\n        if (this.props.onFocus) {\n            this.props.onFocus(event);\n        }\n    };\n\n    handleCopyEvent = (event: SyntheticEvent<>) => {\n        this.animateCopyButton();\n\n        const { onCopySuccess } = this.props;\n        if (onCopySuccess) {\n            onCopySuccess(event);\n        }\n    };\n\n    performAutofocus = () => {\n        const { copyInputRef } = this;\n        if (copyInputRef) {\n            copyInputRef.select();\n            copyInputRef.scrollLeft = 0;\n        }\n    };\n\n    renderCopyButton = () =>\n        this.isCopyCommandSupported ? (\n            <Button\n                isDisabled={this.props.disabled}\n                onClick={this.handleCopyButtonClick}\n                type=\"button\"\n                {...this.props.buttonProps}\n            >\n                {this.state.buttonText}\n            </Button>\n        ) : null;\n\n    render() {\n        const { className, ...rest } = this.props;\n        const { copySuccess } = this.state;\n        const { isCopyCommandSupported } = this;\n\n        const inputProps = omit(rest, [\n            'autofocus',\n            'buttonDefaultText',\n            'buttonSuccessText',\n            'buttonProps',\n            'onCopySuccess',\n            'successStateDuration',\n            'triggerCopyOnLoad',\n        ]);\n\n        if (isCopyCommandSupported) {\n            inputProps.inputRef = ref => {\n                this.copyInputRef = ref;\n            };\n        }\n\n        const wrapperClasses = classNames(className, {\n            'copy-success': copySuccess,\n            'text-input-with-copy-button-container': isCopyCommandSupported,\n        });\n\n        const copyEvent = isCopyCommandSupported ? { onCopy: this.handleCopyEvent } : {};\n\n        return (\n            <div className={wrapperClasses} {...copyEvent}>\n                <TextInput {...inputProps} onFocus={this.handleFocus} />\n                {this.renderCopyButton()}\n            </div>\n        );\n    }\n}\n\nexport default TextInputWithCopyButton;\n"],"file":"TextInputWithCopyButton.js"}