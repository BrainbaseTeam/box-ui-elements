{"version":3,"sources":["../../../src/components/menu/SubmenuItem.tsx"],"names":["React","classNames","omit","debounce","Arrow16","SUBMENU_LEFT_ALIGNED_CLASS","SUBMENU_BOTTOM_ALIGNED_CLASS","SubmenuItem","isSubmenuOpen","submenuFocusIndex","submenuTriggerEl","submenuEl","props","rightBoundaryElement","bottomBoundaryElement","submenuElBounding","getBoundingClientRect","submenuTriggerElBounding","rightBoundaryElementBounding","right","window","innerWidth","bottomBoundaryElementBounding","bottom","innerHeight","isLeftAligned","width","isBottomAligned","top","height","event","isDisabled","onClick","stopPropagation","preventDefault","key","openSubmenuAndFocus","setState","isKeyboardEvent","closeSubmenu","focus","cancel","onOpen","children","className","rest","state","elements","Children","toArray","submenuTriggerContent","submenu","length","Error","chevron","menuItemProps","undefined","handleMenuItemClick","onMouseLeave","onMouseEnter","openSubmenu","onKeyDown","handleKeyDown","ref","role","tabIndex","submenuProps","getMenuAlignmentClasses","initialFocusIndex","isHidden","isSubmenu","onClose","closeSubmenuAndFocusTrigger","setRef","cloneElement","Component"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport classNames from 'classnames';\nimport omit from 'lodash/omit';\nimport debounce from 'lodash/debounce';\n\nimport './SubmenuItem.scss';\nimport Arrow16 from '../../icon/fill/Arrow16';\n\nconst SUBMENU_LEFT_ALIGNED_CLASS = 'is-left-aligned';\nconst SUBMENU_BOTTOM_ALIGNED_CLASS = 'is-bottom-aligned';\n\nexport interface SubmenuItemProps {\n    /** 'aria-disabled' - ARIA attribute describing whether the submenu item is disabled */\n    'aria-disabled'?: boolean | 'true' | 'false';\n    /** 'aria-disabled' - ARIA attribute describing whether the submenu item is expanded */\n    'aria-expanded'?: boolean | 'true' | 'false';\n    /** 'aria-disabled' - ARIA attribute describing whether the submenu item has a popup */\n    'aria-haspopup'?: boolean | 'true' | 'false';\n    /** bottomBoundaryElement - an HTMLElement defining the bottom boundary for the submenu item */\n    bottomBoundaryElement?: HTMLElement;\n    /** children - submenu item content */\n    children?: Array<React.ReactChild> | React.ReactChild;\n    /** className - CSS class name for the submenu item */\n    className?: string;\n    /** isDisabled - whether the submenu item is disabled */\n    isDisabled?: boolean;\n    /** onClick - function called when the submenu item is clicked */\n    onClick?: (event: React.MouseEvent<HTMLLIElement, MouseEvent>) => void;\n    /** onClick - function called when a key is pressed within the submenu item */\n    onKeyDown?: (event: React.KeyboardEvent<HTMLLIElement>) => void;\n    /** onClick - function called when the mouse enters the submenu item */\n    onMouseEnter?: (event: React.MouseEvent<HTMLLIElement, MouseEvent>) => void;\n    /** onClick - function called when the mouse leaves the submenu item */\n    onMouseLeave?: (event: React.MouseEvent<HTMLLIElement, MouseEvent>) => void;\n    /** onOpen - function called when the submenu opens */\n    onOpen?: () => void;\n    /** ref - reference to the menu element in the DOM */\n    ref?: string | ((instance: HTMLLIElement | null) => void) | React.RefObject<HTMLLIElement> | null | undefined;\n    /** rightBoundaryElement - an HTMLElement defining the right boundary for the submenu item */\n    rightBoundaryElement?: HTMLElement;\n    /** role - ARIA role for the submenu item */\n    role?: string;\n    /** tabIndex - indicator of whether the submenu item is focusable */\n    tabIndex?: number;\n}\n\ninterface SubmenuItemState {\n    /** isSubmenuOpen - whether the submenu is open */\n    isSubmenuOpen: boolean;\n    /** isSubmenuOpen - index of the focused submenu item */\n    submenuFocusIndex: number | null | undefined;\n}\n\n/**\n * A menu-item component which triggers open a submenu\n *\n * @NOTE: Nested submenus are NOT currently supported, switching\n * focus with arrow keys in the subsubmenu is not working properly.\n */\nclass SubmenuItem extends React.Component<SubmenuItemProps, SubmenuItemState> {\n    state = {\n        isSubmenuOpen: false,\n        submenuFocusIndex: null,\n    };\n\n    getMenuAlignmentClasses = (): Record<string, boolean> => {\n        if (!this.submenuTriggerEl || !this.submenuEl) {\n            return {};\n        }\n\n        const { rightBoundaryElement, bottomBoundaryElement } = this.props;\n        const submenuElBounding = this.submenuEl.getBoundingClientRect();\n        const submenuTriggerElBounding = this.submenuTriggerEl.getBoundingClientRect();\n        const rightBoundaryElementBounding = rightBoundaryElement\n            ? rightBoundaryElement.getBoundingClientRect()\n            : { right: window.innerWidth };\n        const bottomBoundaryElementBounding = bottomBoundaryElement\n            ? bottomBoundaryElement.getBoundingClientRect()\n            : { bottom: window.innerHeight };\n\n        const isLeftAligned =\n            submenuTriggerElBounding.right + submenuElBounding.width > rightBoundaryElementBounding.right;\n        const isBottomAligned =\n            submenuTriggerElBounding.top + submenuElBounding.height > bottomBoundaryElementBounding.bottom;\n\n        return {\n            [SUBMENU_LEFT_ALIGNED_CLASS]: isLeftAligned,\n            [SUBMENU_BOTTOM_ALIGNED_CLASS]: isBottomAligned,\n        };\n    };\n\n    handleMenuItemClick = (event: React.MouseEvent<HTMLLIElement, MouseEvent>) => {\n        const { isDisabled, onClick } = this.props;\n\n        // If aria-disabled is passed as a prop, we should ignore clicks on this menu item\n        if (isDisabled) {\n            event.stopPropagation();\n            event.preventDefault();\n\n            return;\n        }\n\n        if (onClick) {\n            onClick(event);\n        }\n    };\n\n    submenuTriggerEl: HTMLElement | null | undefined;\n\n    submenuEl: HTMLElement | null | undefined;\n\n    handleKeyDown = (event: React.KeyboardEvent<HTMLLIElement>) => {\n        switch (event.key) {\n            case ' ':\n            case 'Enter':\n            case 'ArrowRight':\n                event.stopPropagation();\n                event.preventDefault();\n                this.openSubmenuAndFocus();\n                break;\n            default:\n                break;\n        }\n    };\n\n    closeSubmenu = debounce(() => {\n        this.setState({\n            isSubmenuOpen: false,\n        });\n    }, 50);\n\n    closeSubmenuAndFocusTrigger = (isKeyboardEvent: boolean | null | undefined) => {\n        this.closeSubmenu();\n        if (this.submenuTriggerEl && isKeyboardEvent) {\n            this.submenuTriggerEl.focus();\n        }\n    };\n\n    openSubmenu = () => {\n        this.closeSubmenu.cancel();\n        const { onOpen } = this.props;\n        if (onOpen) {\n            onOpen();\n        }\n        this.setState({\n            isSubmenuOpen: true,\n            submenuFocusIndex: null,\n        });\n    };\n\n    openSubmenuAndFocus = () => {\n        const { onOpen } = this.props;\n        if (onOpen) {\n            onOpen();\n        }\n\n        this.setState({\n            isSubmenuOpen: true,\n            submenuFocusIndex: 0,\n        });\n    };\n\n    render() {\n        const { children, className, isDisabled, ...rest } = this.props;\n        const { isSubmenuOpen, submenuFocusIndex } = this.state;\n\n        const elements = React.Children.toArray(children);\n        const submenuTriggerContent = elements[0];\n        const submenu = elements[1] as React.ReactElement;\n        if (elements.length !== 2 || !submenuTriggerContent || !submenu) {\n            throw new Error('SubmenuItem must have exactly two children, a trigger component and a <Menu>');\n        }\n\n        const chevron = <Arrow16 className=\"menu-item-arrow\" width={12} height={12} />;\n\n        const menuItemProps: SubmenuItemProps = {\n            ...omit(rest, ['bottomBoundaryElement', 'onClick', 'onOpen', 'rightBoundaryElement', 'role', 'tabIndex']),\n            'aria-disabled': isDisabled ? 'true' : undefined,\n            'aria-expanded': isSubmenuOpen ? 'true' : 'false',\n            'aria-haspopup': 'true',\n\n            className: classNames('menu-item', 'submenu-target', className),\n            onClick: this.handleMenuItemClick,\n            onMouseLeave: this.closeSubmenu,\n            onMouseEnter: this.openSubmenu,\n            onKeyDown: this.handleKeyDown,\n            ref: (ref: HTMLLIElement | null) => {\n                this.submenuTriggerEl = ref;\n            },\n            role: 'menuitem',\n            tabIndex: -1,\n        };\n\n        const submenuProps = {\n            className: classNames(submenu.props.className, 'submenu', this.getMenuAlignmentClasses()),\n            initialFocusIndex: submenuFocusIndex,\n            // Hide the menu instead of unmounting it. Otherwise onMouseLeave won't work.\n            isHidden: !isSubmenuOpen,\n            isSubmenu: true,\n            onClose: this.closeSubmenuAndFocusTrigger,\n            setRef: (ref: HTMLLIElement) => {\n                this.submenuEl = ref;\n            },\n        };\n\n        return (\n            <li {...menuItemProps}>\n                {submenuTriggerContent}\n                {chevron}\n                {React.cloneElement(submenu, submenuProps)}\n            </li>\n        );\n    }\n}\n\nexport default SubmenuItem;\n"],"file":"SubmenuItem.js"}