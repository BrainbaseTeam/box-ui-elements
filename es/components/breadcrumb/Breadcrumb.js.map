{"version":3,"sources":["../../../src/components/breadcrumb/Breadcrumb.js"],"names":["React","injectIntl","MenuLinkItem","EllipsisCrumb","Crumb","messages","constructChildren","children","threshold","dotDotDotItems","slice","length","menuCrumbsItems","reverse","map","crumb","index","renderBreadcrumbs","newChildren","hasEllipsis","Children","item","i","isLastCrumb","undefined","Breadcrumb","className","intl","formatMessage","breadcrumbLabel","toArray","BreadcrumbCore"],"mappings":";;;;;;;;AACA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,UAAT,QAA2B,YAA3B;AAGA,SAASC,YAAT,QAA6B,SAA7B;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAOC,QAAP,MAAqB,YAArB;AAEA,OAAO,mBAAP;;AAEA,IAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,CAACC,QAAD,EAAWC,SAAX,EAAyB;AAC/C,MAAMC,cAAc,GAAGF,QAAQ,CAACG,KAAT,CAAe,CAAf,EAAkBH,QAAQ,CAACI,MAAT,GAAkB,CAAlB,GAAsBH,SAAxC,CAAvB;AACA,MAAMI,eAAe,GACjB,oBAAC,aAAD,QACKH,cAAc,CAACI,OAAf,GAAyBC,GAAzB,CAA6B,UAACC,KAAD,EAAQC,KAAR;AAAA,WAC1B,oBAAC,YAAD;AAAc,MAAA,GAAG,EAAEA;AAAnB,OAA2BD,KAA3B,CAD0B;AAAA,GAA7B,CADL,CADJ;AAOA,sCAAWR,QAAQ,CAACG,KAAT,CAAe,CAAf,EAAkB,CAAlB,CAAX,IAAiCE,eAAjC,sBAAqDL,QAAQ,CAACG,KAAT,CAAe,IAAIF,SAAnB,CAArD;AACH,CAVD;;AAYA,IAAMS,iBAAiB,GAAG,SAApBA,iBAAoB,CAACV,QAAD,EAAWC,SAAX,EAAyB;AAC/C,MAAIU,WAAW,GAAGX,QAAlB;AAD+C,MAEzCI,MAFyC,GAE9BJ,QAF8B,CAEzCI,MAFyC;AAG/C,MAAIQ,WAAW,GAAG,KAAlB;;AAEA,MAAIR,MAAM,GAAGH,SAAb,EAAwB;AACpBU,IAAAA,WAAW,GAAGZ,iBAAiB,CAACC,QAAD,EAAWC,SAAX,CAA/B;AACAG,IAAAA,MAAM,GAAGO,WAAW,CAACP,MAArB;AACAQ,IAAAA,WAAW,GAAG,IAAd;AACH;;AAED,SAAOnB,KAAK,CAACoB,QAAN,CAAeN,GAAf,CAAmBI,WAAnB,EAAgC,UAACG,IAAD,EAAOC,CAAP,EAAa;AAChD,QAAMC,WAAW,GAAGZ,MAAM,KAAK,CAAX,IAAgBW,CAAC,KAAKX,MAAM,GAAG,CAAnD;AACA,WACI,oBAAC,KAAD;AAAO,MAAA,SAAS,EAAEQ,WAAW,IAAIG,CAAC,KAAK,CAArB,GAAyB,WAAzB,GAAuCE,SAAzD;AAAoE,MAAA,WAAW,EAAED;AAAjF,OACKF,IADL,CADJ;AAKH,GAPM,CAAP;AAQH,CAnBD;;AA8BA,IAAMI,UAAU,GAAG,SAAbA,UAAa;AAAA,4BAAGC,SAAH;AAAA,MAAGA,SAAH,+BAAe,EAAf;AAAA,MAAmBC,IAAnB,QAAmBA,IAAnB;AAAA,4BAAyBnB,SAAzB;AAAA,MAAyBA,SAAzB,+BAAqC,CAArC;AAAA,MAAwCD,QAAxC,QAAwCA,QAAxC;AAAA,SACf;AAAK,kBAAYoB,IAAI,CAACC,aAAL,CAAmBvB,QAAQ,CAACwB,eAA5B,CAAjB;AAA+D,IAAA,SAAS,wBAAiBH,SAAjB;AAAxE,KACI,gCAAKT,iBAAiB,CAACjB,KAAK,CAACoB,QAAN,CAAeU,OAAf,CAAuBvB,QAAvB,CAAD,EAAmCC,SAAnC,CAAtB,CADJ,CADe;AAAA,CAAnB;;AAMA,SAASiB,UAAU,IAAIM,cAAvB;AACA,eAAe9B,UAAU,CAACwB,UAAD,CAAzB","sourcesContent":["// @flow\nimport * as React from 'react';\nimport { injectIntl } from 'react-intl';\nimport type { InjectIntlProvidedProps } from 'react-intl';\n\nimport { MenuLinkItem } from '../menu';\nimport EllipsisCrumb from './EllipsisCrumb';\nimport Crumb from './Crumb';\nimport messages from './messages';\n\nimport './Breadcrumb.scss';\n\nconst constructChildren = (children, threshold) => {\n    const dotDotDotItems = children.slice(1, children.length + 1 - threshold);\n    const menuCrumbsItems = (\n        <EllipsisCrumb>\n            {dotDotDotItems.reverse().map((crumb, index) => (\n                <MenuLinkItem key={index}>{crumb}</MenuLinkItem>\n            ))}\n        </EllipsisCrumb>\n    );\n    return [...children.slice(0, 1), menuCrumbsItems, ...children.slice(1 - threshold)];\n};\n\nconst renderBreadcrumbs = (children, threshold) => {\n    let newChildren = children;\n    let { length } = children;\n    let hasEllipsis = false;\n\n    if (length > threshold) {\n        newChildren = constructChildren(children, threshold);\n        length = newChildren.length;\n        hasEllipsis = true;\n    }\n\n    return React.Children.map(newChildren, (item, i) => {\n        const isLastCrumb = length === 0 || i === length - 1;\n        return (\n            <Crumb className={hasEllipsis && i === 1 ? 'no-shrink' : undefined} isLastCrumb={isLastCrumb}>\n                {item}\n            </Crumb>\n        );\n    });\n};\n\ntype Props = {\n    /** Class name for Breadcrumb */\n    children: React.Node,\n    /** Breadcrumb contents */\n    className?: string,\n    /** Number of crumbs to show before they collapse into an ellipsis */\n    threshold?: number,\n} & InjectIntlProvidedProps;\n\nconst Breadcrumb = ({ className = '', intl, threshold = 4, children }: Props) => (\n    <nav aria-label={intl.formatMessage(messages.breadcrumbLabel)} className={`breadcrumbs ${className}`}>\n        <ol>{renderBreadcrumbs(React.Children.toArray(children), threshold)}</ol>\n    </nav>\n);\n\nexport { Breadcrumb as BreadcrumbCore };\nexport default injectIntl(Breadcrumb);\n"],"file":"Breadcrumb.js"}