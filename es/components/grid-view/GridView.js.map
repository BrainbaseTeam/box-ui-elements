{"version":3,"sources":["../../../src/components/grid-view/GridView.js"],"names":["React","CellMeasurer","CellMeasurerCache","Table","Column","getProp","GridViewSlot","GridView","defaultHeight","defaultWidth","fixedWidth","dataKey","parent","rowIndex","props","columnCount","currentCollection","slotRenderer","count","contents","startingIndex","maxSlotIndex","Math","min","slotIndex","id","selected","push","toFixed","cache","index","prevColumnCount","prevWidth","width","clearAll","forceUpdate","height","rowCount","ceil","rowGetter","rowHeight","cellRenderer","Component"],"mappings":"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","sourcesContent":["// @flow\nimport * as React from 'react';\nimport { CellMeasurer, CellMeasurerCache } from 'react-virtualized/dist/es/CellMeasurer';\nimport Table, { Column } from 'react-virtualized/dist/es/Table';\nimport getProp from 'lodash/get';\nimport GridViewSlot from './GridViewSlot';\nimport type { Collection } from '../../common/types/core';\n\nimport 'react-virtualized/styles.css';\nimport './GridView.scss';\n\ntype TableCellRendererParams = {\n    cellData: ?any,\n    columnData: ?any,\n    dataKey: string,\n    parent: Object,\n    rowData: any,\n    rowIndex: number,\n};\n\ntype Props = {\n    columnCount: number,\n    currentCollection: Collection,\n    height: number,\n    slotRenderer: (slotIndex: number) => ?React.Element<any>,\n    width: number,\n};\n\ntype RowGetterParams = {\n    index: number,\n};\n\nclass GridView extends React.Component<Props> {\n    cache = new CellMeasurerCache({\n        defaultHeight: 300,\n        defaultWidth: 400,\n        fixedWidth: true,\n    });\n\n    componentDidUpdate({ columnCount: prevColumnCount, width: prevWidth }: Props) {\n        const { columnCount, width } = this.props;\n\n        // The React Virtualized Table must be notified whenever the heights of rows\n        // could potentially change. If omitted, rows are sized\n        // incorrectly resulting in gaps or content overlap.\n        if (columnCount !== prevColumnCount || width !== prevWidth) {\n            this.cache.clearAll();\n            this.forceUpdate();\n        }\n    }\n\n    cellRenderer = ({ dataKey, parent, rowIndex }: TableCellRendererParams) => {\n        const { columnCount, currentCollection, slotRenderer } = this.props;\n        const count = getProp(currentCollection, 'items.length', 0);\n        const contents = [];\n\n        const startingIndex = rowIndex * columnCount;\n        const maxSlotIndex = Math.min(startingIndex + columnCount, count);\n\n        for (let slotIndex = startingIndex; slotIndex < maxSlotIndex; slotIndex += 1) {\n            const { id, selected } = getProp(currentCollection, `items[${slotIndex}]`);\n\n            // using item's id as key is important for renrendering.  React Virtualized Table rerenders\n            // on every 1px scroll, so using improper key would lead to image flickering in each\n            // card of the grid view when scrolling.\n            contents.push(\n                <GridViewSlot\n                    key={id}\n                    selected={selected}\n                    slotIndex={slotIndex}\n                    slotRenderer={slotRenderer}\n                    slotWidth={`${(100 / columnCount).toFixed(4)}%`}\n                />,\n            );\n        }\n\n        return (\n            <CellMeasurer key={dataKey} cache={this.cache} columnIndex={0} parent={parent} rowIndex={rowIndex}>\n                <div className=\"bdl-GridView-row\">{contents}</div>\n            </CellMeasurer>\n        );\n    };\n\n    rowGetter = ({ index }: RowGetterParams) => {\n        return index;\n    };\n\n    render() {\n        const { columnCount, currentCollection, height, width } = this.props;\n        const count = getProp(currentCollection, 'items.length', 0);\n        const rowCount = Math.ceil(count / columnCount);\n\n        return (\n            <Table\n                className=\"bdl-GridView\"\n                disableHeader\n                height={height}\n                rowCount={rowCount}\n                rowGetter={this.rowGetter}\n                rowHeight={this.cache.rowHeight}\n                width={width}\n                gridClassName=\"bdl-GridView-body\"\n                rowClassName=\"bdl-GridView-tableRow\"\n                scrollToIndex={0}\n                sortDirection=\"ASC\"\n            >\n                <Column cellRenderer={this.cellRenderer} dataKey=\"\" flexGrow={1} width={400} />\n            </Table>\n        );\n    }\n}\n\nexport default GridView;\n"],"file":"GridView.js"}