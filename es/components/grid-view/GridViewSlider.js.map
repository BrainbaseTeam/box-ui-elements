{"version":3,"sources":["../../../src/components/grid-view/GridViewSlider.js"],"names":["React","injectIntl","IconPlusThin","IconMinusThin","PlainButton","messages","bdlGray50","GridViewSlider","columnCount","gridMaxColumns","gridMinColumns","intl","maxColumnCount","onChange","RANGE_STEP","RANGE_MIN","RANGE_MAX","sliderValue","Math","max","formatMessage","gridViewDecreaseColumnSize","event","currentTarget","valueAsNumber","min","gridViewIncreaseColumnSize"],"mappings":"AACA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,UAAT,QAA2B,YAA3B;AAEA,OAAOC,YAAP,MAAyB,kCAAzB;AACA,OAAOC,aAAP,MAA0B,mCAA1B;AACA,OAAOC,WAAP,MAAwB,6BAAxB;AACA,OAAOC,QAAP,MAAqB,gCAArB;AACA,SAASC,SAAT,QAA0B,wBAA1B;AACA,OAAO,uBAAP;;AAUA,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,OAA4F;AAAA,MAAzFC,WAAyF,QAAzFA,WAAyF;AAAA,MAA5EC,cAA4E,QAA5EA,cAA4E;AAAA,MAA5DC,cAA4D,QAA5DA,cAA4D;AAAA,MAA5CC,IAA4C,QAA5CA,IAA4C;AAAA,MAAtCC,cAAsC,QAAtCA,cAAsC;AAAA,MAAtBC,SAAsB,QAAtBA,QAAsB;AAC/G,MAAMC,UAAU,GAAG,CAAnB,CAD+G,CAG/G;AACA;;AACA,MAAMC,SAAS,GAAGN,cAAc,GAAGG,cAAjB,GAAkC,CAApD;AACA,MAAMI,SAAS,GAAGP,cAAc,GAAGC,cAAjB,GAAkC,CAApD;AACA,MAAMO,WAAW,GAAGD,SAAS,GAAGR,WAAZ,GAA0B,CAA9C;AAEA,SACIE,cAAc,GAAGE,cAAjB,IACI;AAAK,IAAA,SAAS,EAAC;AAAf,KACI,oBAAC,WAAD;AACI,IAAA,SAAS,EAAC,2BADd;AAEI,IAAA,OAAO,EAAE,mBAAM;AACXC,MAAAA,SAAQ,CAACK,IAAI,CAACC,GAAL,CAASJ,SAAT,EAAoBE,WAAW,GAAGH,UAAlC,CAAD,CAAR;AACH,KAJL;AAKI,IAAA,IAAI,EAAC,QALT;AAMI,kBAAYH,IAAI,CAACS,aAAL,CAAmBf,QAAQ,CAACgB,0BAA5B;AANhB,KAQI,oBAAC,aAAD;AAAe,IAAA,KAAK,EAAEf,SAAtB;AAAiC,IAAA,KAAK,EAAE,EAAxC;AAA4C,IAAA,MAAM,EAAE;AAApD,IARJ,CADJ,EAWI;AACI,IAAA,SAAS,EAAC,0BADd;AAEI,IAAA,GAAG,EAAEU,SAFT;AAGI,IAAA,GAAG,EAAED,SAHT;AAII,IAAA,QAAQ,EAAE,kBAAAO,KAAK,EAAI;AACfT,MAAAA,SAAQ,CAACS,KAAK,CAACC,aAAN,CAAoBC,aAArB,CAAR;AACH,KANL;AAOI,IAAA,IAAI,EAAEV,UAPV;AAQI,IAAA,IAAI,EAAC,OART;AASI,IAAA,KAAK,EAAEG;AATX,IAXJ,EAsBI,oBAAC,WAAD;AACI,IAAA,SAAS,EAAC,2BADd;AAEI,IAAA,OAAO,EAAE,mBAAM;AACXJ,MAAAA,SAAQ,CAACK,IAAI,CAACO,GAAL,CAAST,SAAT,EAAoBC,WAAW,GAAGH,UAAlC,CAAD,CAAR;AACH,KAJL;AAKI,IAAA,IAAI,EAAC,QALT;AAMI,kBAAYH,IAAI,CAACS,aAAL,CAAmBf,QAAQ,CAACqB,0BAA5B;AANhB,KAQI,oBAAC,YAAD;AAAc,IAAA,KAAK,EAAEpB,SAArB;AAAgC,IAAA,KAAK,EAAE,EAAvC;AAA2C,IAAA,MAAM,EAAE;AAAnD,IARJ,CAtBJ,CAFR;AAqCH,CA9CD;;AAgDA,eAAeL,UAAU,CAACM,cAAD,CAAzB","sourcesContent":["// @flow\nimport * as React from 'react';\nimport { injectIntl } from 'react-intl';\nimport type { InjectIntlProvidedProps } from 'react-intl';\nimport IconPlusThin from '../../icons/general/IconPlusThin';\nimport IconMinusThin from '../../icons/general/IconMinusThin';\nimport PlainButton from '../plain-button/PlainButton';\nimport messages from '../../elements/common/messages';\nimport { bdlGray50 } from '../../styles/variables';\nimport './GridViewSlider.scss';\n\ntype Props = {\n    columnCount: number,\n    gridMaxColumns: number,\n    gridMinColumns: number,\n    maxColumnCount: number,\n    onChange: (newSliderValue: number) => void,\n} & InjectIntlProvidedProps;\n\nconst GridViewSlider = ({ columnCount, gridMaxColumns, gridMinColumns, intl, maxColumnCount, onChange }: Props) => {\n    const RANGE_STEP = 1;\n\n    // This math is necessary since the highest value of the slider should result in\n    // the lowest number of columns\n    const RANGE_MIN = gridMaxColumns - maxColumnCount + 1;\n    const RANGE_MAX = gridMaxColumns - gridMinColumns + 1;\n    const sliderValue = RANGE_MAX - columnCount + 1;\n\n    return (\n        gridMinColumns < maxColumnCount && (\n            <div className=\"bdl-GridViewSlider\">\n                <PlainButton\n                    className=\"bdl-GridViewSlider-button\"\n                    onClick={() => {\n                        onChange(Math.max(RANGE_MIN, sliderValue - RANGE_STEP));\n                    }}\n                    type=\"button\"\n                    aria-label={intl.formatMessage(messages.gridViewDecreaseColumnSize)}\n                >\n                    <IconMinusThin color={bdlGray50} width={14} height={14} />\n                </PlainButton>\n                <input\n                    className=\"bdl-GridViewSlider-range\"\n                    max={RANGE_MAX}\n                    min={RANGE_MIN}\n                    onChange={event => {\n                        onChange(event.currentTarget.valueAsNumber);\n                    }}\n                    step={RANGE_STEP}\n                    type=\"range\"\n                    value={sliderValue}\n                />\n                <PlainButton\n                    className=\"bdl-GridViewSlider-button\"\n                    onClick={() => {\n                        onChange(Math.min(RANGE_MAX, sliderValue + RANGE_STEP));\n                    }}\n                    type=\"button\"\n                    aria-label={intl.formatMessage(messages.gridViewIncreaseColumnSize)}\n                >\n                    <IconPlusThin color={bdlGray50} width={14} height={14} />\n                </PlainButton>\n            </div>\n        )\n    );\n};\n\nexport default injectIntl(GridViewSlider);\n"],"file":"GridViewSlider.js"}