{"version":3,"sources":["../../../../src/components/form-elements/text-input/TextInput.js"],"names":["React","TextInputCore","messages","FormInput","TextInput","props","currentTarget","value","state","error","setState","checkValidity","valid","undefined","setErrorFromValidityState","isRequired","validation","input","trim","length","setCustomValidity","code","validity","prevProps","validityState","badInput","customError","patternMismatch","tooLong","tooShort","typeMismatch","valueMissing","minLength","maxLength","type","typeMismatchEmail","typeMismatchUrl","autoFocus","className","isDisabled","label","name","onFocus","pattern","placeholder","isReadOnly","isLoading","labelTooltip","hideLabel","onValidityStateUpdateHandler","message","onChange","Component"],"mappings":"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","sourcesContent":["// @flow\nimport * as React from 'react';\n\nimport TextInputCore from '../../text-input';\n\nimport * as messages from '../input-messages';\nimport FormInput from '../form/FormInput';\n\ntype Props = {\n    /** Whether to automatically focus the input */\n    autoFocus?: boolean,\n    /** Add a class to the component */\n    className?: string,\n    hideLabel?: boolean,\n    isDisabled?: boolean,\n    isLoading?: boolean,\n    isReadOnly?: boolean,\n    /** Is input required */\n    isRequired?: boolean,\n    /** Label displayed for the text input */\n    label: React.Node,\n    labelTooltip?: React.Node,\n    maxLength?: number,\n    minLength?: number,\n    /** Name of the text input */\n    name: string,\n    /** Called when the text input is focused */\n    onFocus?: Function,\n    /** html5 regex pattern for validation */\n    pattern?: string,\n    /** Placeholder for the text input */\n    placeholder?: string,\n    /** html input types (email, url, text, number), defaults to 'text' */\n    type?: string,\n    /** Function that should either return an error string when inValid and an empty string when valid. It can also return a Promise that resolves to an error string or empty string for server validations. */\n    validation?: Function,\n    /** Value of the text input */\n    value: string,\n};\n\ntype State = {\n    error: Object | null,\n    value: string,\n};\n\nclass TextInput extends React.Component<Props, State> {\n    static defaultProps = {\n        autoFocus: false,\n        value: '',\n        type: 'text',\n        isReadOnly: false,\n        isLoading: false,\n    };\n\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            error: null,\n            value: props.value,\n        };\n    }\n\n    componentDidUpdate(prevProps: Props) {\n        // If a new value is passed by prop, set it\n        if (prevProps.value !== this.props.value) {\n            this.setState({\n                value: this.props.value,\n            });\n        }\n    }\n\n    onChange = ({ currentTarget }: SyntheticEvent<HTMLInputElement>) => {\n        const { value } = currentTarget;\n        if (this.state.error) {\n            this.setState(\n                {\n                    value,\n                },\n                this.checkValidity,\n            );\n        } else {\n            this.setState({\n                value,\n            });\n        }\n    };\n\n    onValidityStateUpdateHandler = (error: Object) => {\n        if (error.valid !== undefined) {\n            this.setErrorFromValidityState(error);\n        } else {\n            this.setState({\n                error,\n            });\n        }\n    };\n\n    setErrorFromValidityState(validityState: ValidityState) {\n        const {\n            badInput,\n            customError,\n            patternMismatch,\n            tooLong,\n            tooShort,\n            typeMismatch,\n            valid,\n            valueMissing,\n        } = validityState;\n\n        const { isRequired, minLength, maxLength, type, validation } = this.props;\n\n        const { value } = this.state;\n\n        let error;\n\n        if (valid) {\n            error = null;\n        } else if (badInput) {\n            error = messages.badInput();\n        } else if (patternMismatch) {\n            error = messages.patternMismatch();\n        } else if (tooShort && typeof minLength !== 'undefined') {\n            error = messages.tooShort(minLength);\n        } else if (tooLong && typeof maxLength !== 'undefined') {\n            error = messages.tooLong(maxLength);\n        } else if (typeMismatch && type === 'email') {\n            error = messages.typeMismatchEmail();\n        } else if (typeMismatch && type === 'url') {\n            error = messages.typeMismatchUrl();\n        } else if (valueMissing) {\n            error = messages.valueMissing();\n        } else if (customError && (isRequired || value.trim().length) && validation) {\n            error = validation(value);\n        }\n\n        this.setState({\n            error,\n        });\n    }\n\n    input: ?HTMLInputElement;\n\n    // Updates component value and validity state\n    checkValidity = () => {\n        const { isRequired, validation } = this.props;\n        const { input } = this;\n        if (!input) {\n            return;\n        }\n\n        if (validation && (isRequired || input.value.trim().length)) {\n            const error = validation(input.value);\n            this.setState({\n                error,\n                value: input.value,\n            });\n\n            if (error) {\n                input.setCustomValidity(error.code);\n            } else {\n                input.setCustomValidity('');\n            }\n        } else {\n            this.setErrorFromValidityState(input.validity);\n        }\n    };\n\n    render() {\n        const {\n            autoFocus,\n            className = '',\n            isDisabled,\n            isRequired,\n            label,\n            maxLength,\n            minLength,\n            name,\n            onFocus,\n            pattern,\n            placeholder,\n            type,\n            isReadOnly,\n            isLoading,\n            labelTooltip,\n            hideLabel,\n        } = this.props;\n\n        const { error, value } = this.state;\n\n        return (\n            <div className={className}>\n                <FormInput name={name} onValidityStateUpdate={this.onValidityStateUpdateHandler}>\n                    <TextInputCore\n                        disabled={isDisabled}\n                        label={label}\n                        isRequired={isRequired}\n                        error={error ? error.message : null}\n                        autoFocus={autoFocus}\n                        maxLength={maxLength}\n                        minLength={minLength}\n                        name={name}\n                        onBlur={this.checkValidity}\n                        onFocus={onFocus}\n                        onChange={this.onChange}\n                        pattern={pattern}\n                        placeholder={placeholder}\n                        inputRef={input => {\n                            this.input = input;\n                        }}\n                        type={type}\n                        value={value}\n                        readOnly={isReadOnly}\n                        isLoading={isLoading}\n                        labelTooltip={labelTooltip}\n                        hideLabel={hideLabel}\n                    />\n                </FormInput>\n            </div>\n        );\n    }\n}\n\nexport default TextInput;\n"],"file":"TextInput.js"}