{"version":3,"sources":["../../../../src/components/form-elements/draft-js-mention-selector/utils.js"],"names":["EditorState","Modifier","defaultMentionTriggers","defaultMentionTriggersString","reduce","prev","current","defaultMentionPattern","RegExp","getActiveMentionForEditorState","editorState","mentionPattern","contentState","getCurrentContent","selectionState","getSelection","startKey","getStartKey","activeBlock","getBlockForKey","cursorPosition","getStartOffset","result","findEntityRanges","character","getEntity","start","end","activeRangeText","getText","substr","mentionMatch","match","blockID","mentionString","mentionTrigger","index","addMention","activeMention","mention","id","name","preInsertionSelectionState","merge","anchorOffset","focusOffset","textToInsert","contentStateWithEntity","createEntity","entityKey","getLastCreatedEntityKey","contentStateWithLink","replaceText","spaceOffset","length","selectionStateForAddingSpace","contentStateWithLinkAndExtraSpace","insertText","editorStateWithLink","push","getFormattedCommentText","blockMap","getBlockMap","resultStringArr","hasMention","forEach","block","text","blockMapStringArr","getEntityAt","entity","stringToAdd","getData","substring","join"],"mappings":"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","sourcesContent":["// @flow\nimport { EditorState, Modifier } from 'draft-js';\n\nexport type Mention = {\n    blockID: string,\n    end: number,\n    mentionString: string,\n    mentionTrigger: string,\n    start: number,\n};\n\nconst defaultMentionTriggers = ['@', '＠', '﹫'];\nconst defaultMentionTriggersString = defaultMentionTriggers.reduce((prev, current) => `${prev}\\\\${current}`, '');\nconst defaultMentionPattern = new RegExp(`([${defaultMentionTriggersString}])([^${defaultMentionTriggersString}]*)$`);\n\n/**\n * Extracts the active mention from the editor state\n */\nfunction getActiveMentionForEditorState(\n    editorState: EditorState,\n    mentionPattern: RegExp = defaultMentionPattern,\n): Mention | null {\n    const contentState = editorState.getCurrentContent();\n    const selectionState = editorState.getSelection();\n\n    const startKey = selectionState.getStartKey();\n    const activeBlock = contentState.getBlockForKey(startKey);\n\n    const cursorPosition = selectionState.getStartOffset();\n\n    let result = null;\n\n    // Break the active block into entity ranges.\n    activeBlock.findEntityRanges(\n        character => character.getEntity() === null,\n        (start, end) => {\n            // Find the active range (is the cursor inside this range?)\n            if (start <= cursorPosition && cursorPosition <= end) {\n                // Determine if the active range contains a mention.\n                const activeRangeText = activeBlock.getText().substr(start, cursorPosition - start);\n                const mentionMatch = activeRangeText.match(mentionPattern);\n\n                if (mentionMatch) {\n                    result = {\n                        blockID: startKey,\n                        mentionString: mentionMatch[2],\n                        mentionTrigger: mentionMatch[1],\n                        start: start + mentionMatch.index,\n                        end: cursorPosition,\n                    };\n                }\n            }\n\n            return null;\n        },\n    );\n\n    return result;\n}\n\n/**\n * Inserts a selected mention into the editor\n */\nfunction addMention(editorState: EditorState, activeMention: Mention | null, mention: Object): EditorState {\n    const { start, end } = activeMention || {};\n\n    const { id, name } = mention;\n\n    const contentState = editorState.getCurrentContent();\n    const selectionState = editorState.getSelection();\n\n    const preInsertionSelectionState = selectionState.merge({\n        anchorOffset: start,\n        focusOffset: end,\n    });\n\n    const textToInsert = `@${name}`;\n\n    const contentStateWithEntity = contentState.createEntity('MENTION', 'IMMUTABLE', { id });\n\n    const entityKey = contentStateWithEntity.getLastCreatedEntityKey();\n\n    const contentStateWithLink = Modifier.replaceText(\n        contentState,\n        preInsertionSelectionState,\n        textToInsert,\n        null,\n        entityKey,\n    );\n\n    const spaceOffset = preInsertionSelectionState.getStartOffset() + textToInsert.length;\n    const selectionStateForAddingSpace = preInsertionSelectionState.merge({\n        anchorOffset: spaceOffset,\n        focusOffset: spaceOffset,\n    });\n\n    const contentStateWithLinkAndExtraSpace = Modifier.insertText(\n        contentStateWithLink,\n        selectionStateForAddingSpace,\n        ' ',\n    );\n\n    const editorStateWithLink = EditorState.push(editorState, contentStateWithLinkAndExtraSpace, 'change-block-type');\n\n    return editorStateWithLink;\n}\n\n/**\n * Formats the editor's text such that it will be accepted by the server.\n */\nfunction getFormattedCommentText(editorState: EditorState): { hasMention: boolean, text: string } {\n    const contentState = editorState.getCurrentContent();\n    const blockMap = contentState.getBlockMap();\n\n    const resultStringArr = [];\n\n    // The API needs to explicitly know if a message contains a mention.\n    let hasMention = false;\n\n    // For all ContentBlocks in the ContentState:\n    blockMap.forEach(block => {\n        const text = block.getText();\n        const blockMapStringArr = [];\n\n        // Break down the ContentBlock into ranges\n        block.findEntityRanges(\n            () => true,\n            (start, end) => {\n                const entityKey = block.getEntityAt(start);\n                // If the range is an Entity, format its text eg \"@[1:Username]\"\n                // Otherwise append its text to the block result as-is\n                if (entityKey) {\n                    const entity = contentState.getEntity(entityKey);\n                    const stringToAdd = `@[${entity.getData().id}:${text.substring(start + 1, end)}]`;\n                    blockMapStringArr.push(stringToAdd);\n                    hasMention = true;\n                } else {\n                    blockMapStringArr.push(text.substring(start, end));\n                }\n            },\n        );\n        resultStringArr.push(blockMapStringArr.join(''));\n    });\n\n    // Concatenate the array of block strings with newlines\n    // (Each block represents a paragraph)\n    return { text: resultStringArr.join('\\n'), hasMention };\n}\n\nexport {\n    addMention,\n    defaultMentionTriggers,\n    defaultMentionPattern,\n    getActiveMentionForEditorState,\n    getFormattedCommentText,\n};\n"],"file":"utils.js"}