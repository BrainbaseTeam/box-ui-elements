{"version":3,"sources":["../../../../src/components/form-elements/draft-js-mention-selector/DraftJSMentionSelectorCore.js"],"names":["React","FormattedMessage","classNames","EditorState","Modifier","DatalistItem","DraftJSEditor","SelectorDropdown","messages","DefaultSelectorRow","item","rest","name","email","DefaultStartMentionMessage","startMention","MentionStartState","message","DraftJSMentionSelector","props","onMention","activeMention","state","mentionString","index","contacts","addMention","setState","isFocused","handleMention","event","onBlur","onFocus","nextEditorState","onChange","getActiveMentionForEditorState","length","mentionTriggers","reduce","prev","current","mentionPattern","RegExp","prevProps","prevContacts","currentContacts","editorState","contentState","getCurrentContent","selectionState","getSelection","startKey","getStartKey","activeBlock","getBlockForKey","cursorPosition","getStartOffset","result","findEntityRanges","character","getEntity","start","end","activeRangeText","getText","substr","mentionMatch","match","blockID","mentionTrigger","mention","id","preInsertionSelectionState","merge","anchorOffset","focusOffset","textToInsert","contentStateWithEntity","createEntity","entityKey","getLastCreatedEntityKey","contentStateWithLink","replaceText","spaceOffset","selectionStateForAddingSpace","contentStateWithLinkAndExtraSpace","insertText","editorStateWithLink","push","handleChange","className","error","hideLabel","isDisabled","isRequired","label","onReturn","placeholder","selectorRow","startMentionMessage","classes","showMentionStartState","handleContactSelected","handleBlur","handleFocus","shouldDisplayMentionLookup","map","contact","cloneElement","key","Component"],"mappings":"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","sourcesContent":["// @flow\nimport * as React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport classNames from 'classnames';\nimport { EditorState, Modifier } from 'draft-js';\n\nimport DatalistItem from '../../datalist-item';\nimport DraftJSEditor from '../../draft-js-editor';\nimport SelectorDropdown from '../../selector-dropdown';\n\nimport messages from './messages';\n\nimport './MentionSelector.scss';\n\ntype DefaultSelectorRowProps = {\n    item?: {\n        email?: string,\n        name?: string,\n    },\n};\n\nconst DefaultSelectorRow = ({ item = {}, ...rest }: DefaultSelectorRowProps) => (\n    <DatalistItem {...rest}>\n        {item.name} <span className=\"dropdown-secondary-text\">{item.email}</span>\n    </DatalistItem>\n);\n\nconst DefaultStartMentionMessage = () => <FormattedMessage {...messages.startMention} />;\n\ntype MentionStartStateProps = {\n    message?: React.Node,\n};\n\nconst MentionStartState = ({ message }: MentionStartStateProps) => <div className=\"mention-start-state\">{message}</div>;\n\ntype Props = {\n    className?: string,\n    contacts: SelectorItems,\n    editorState: EditorState,\n    error?: ?Object,\n    hideLabel?: boolean,\n    isDisabled?: boolean,\n    isRequired?: boolean,\n    label: React.Node,\n    mentionTriggers: Array<string>,\n    onBlur?: Function,\n    onChange?: Function,\n    onFocus?: Function,\n    onMention?: Function,\n    onReturn?: Function,\n    placeholder?: string,\n    selectorRow: React.Element<any>,\n    startMentionMessage?: React.Node,\n};\n\ntype State = {\n    activeMention: Object | null,\n    isFocused: boolean,\n    mentionPattern: RegExp,\n};\n\nclass DraftJSMentionSelector extends React.Component<Props, State> {\n    static defaultProps = {\n        className: '',\n        contacts: [],\n        isDisabled: false,\n        isRequired: false,\n        mentionTriggers: ['@', '＠', '﹫'],\n        selectorRow: <DefaultSelectorRow />,\n        startMentionMessage: <DefaultStartMentionMessage />,\n    };\n\n    constructor(props: Props) {\n        super(props);\n        const mentionTriggers = props.mentionTriggers.reduce((prev, current) => `${prev}\\\\${current}`, '');\n\n        this.state = {\n            activeMention: null,\n            isFocused: false,\n            mentionPattern: new RegExp(`([${mentionTriggers}])([^${mentionTriggers}]*)$`),\n        };\n    }\n\n    /**\n     * Lifecycle method that gets called immediately after an update\n     * @param {object} lastProps Props the component is receiving\n     * @returns {void}\n     */\n    componentDidUpdate(prevProps: Props) {\n        const { contacts: prevContacts } = prevProps;\n        const { contacts: currentContacts } = this.props;\n        const { activeMention } = this.state;\n\n        if (activeMention !== null && !currentContacts.length && prevContacts !== currentContacts) {\n            // if empty set of contacts get passed in, set active mention to null\n            this.setState({\n                activeMention: null,\n            });\n        }\n    }\n\n    /**\n     * Extracts the active mention from the editor state\n     *\n     * @param {EditorState} editorState\n     * @returns {object}\n     */\n    getActiveMentionForEditorState(editorState: EditorState) {\n        const { mentionPattern } = this.state;\n\n        const contentState = editorState.getCurrentContent();\n        const selectionState = editorState.getSelection();\n\n        const startKey = selectionState.getStartKey();\n        const activeBlock = contentState.getBlockForKey(startKey);\n\n        const cursorPosition = selectionState.getStartOffset();\n\n        let result = null;\n\n        // Break the active block into entity ranges.\n        activeBlock.findEntityRanges(\n            character => character.getEntity() === null,\n            (start, end) => {\n                // Find the active range (is the cursor inside this range?)\n                if (start <= cursorPosition && cursorPosition <= end) {\n                    // Determine if the active range contains a mention.\n                    const activeRangeText = activeBlock.getText().substr(start, cursorPosition - start);\n                    const mentionMatch = activeRangeText.match(mentionPattern);\n\n                    if (mentionMatch) {\n                        result = {\n                            blockID: startKey,\n                            mentionString: mentionMatch[2],\n                            mentionTrigger: mentionMatch[1],\n                            start: start + mentionMatch.index,\n                            end: cursorPosition,\n                        };\n                    }\n                }\n\n                return null;\n            },\n        );\n\n        return result;\n    }\n\n    /**\n     * Called on each keypress when a mention is being composed\n     * @returns {void}\n     */\n    handleMention = () => {\n        const { onMention } = this.props;\n        const { activeMention } = this.state;\n\n        if (onMention) {\n            onMention(activeMention ? activeMention.mentionString : '');\n        }\n    };\n\n    /**\n     * Method that gets called when a mention contact is selected\n     * @param {number} index The selected index\n     * @returns {void}\n     */\n    handleContactSelected = (index: number) => {\n        const { contacts } = this.props;\n        this.addMention(contacts[index]);\n        this.setState(\n            {\n                activeMention: null,\n                isFocused: true,\n            },\n            () => {\n                this.handleMention();\n            },\n        );\n    };\n\n    handleBlur = (event: SyntheticEvent<>) => {\n        const { onBlur } = this.props;\n\n        this.setState({\n            isFocused: false,\n        });\n\n        if (onBlur) {\n            onBlur(event);\n        }\n    };\n\n    handleFocus = (event: SyntheticEvent<>) => {\n        const { onFocus } = this.props;\n\n        this.setState({\n            isFocused: true,\n        });\n\n        if (onFocus) {\n            onFocus(event);\n        }\n    };\n\n    /**\n     * Event handler called when DraftJSEditor emits onChange\n     * Checks current text to see if any mentions were made\n     * @param {EditorState} editorState The new editor state\n     * @returns {void}\n     */\n    handleChange = (nextEditorState: EditorState) => {\n        const { onChange } = this.props;\n\n        const activeMention = this.getActiveMentionForEditorState(nextEditorState);\n\n        this.setState(\n            {\n                activeMention,\n            },\n            () => {\n                if (onChange) {\n                    onChange(nextEditorState);\n                }\n\n                if (activeMention && activeMention.mentionString) {\n                    this.handleMention();\n                }\n            },\n        );\n    };\n\n    /**\n     * Inserts a selected mention into the editor\n     * @param {object} mention The selected mention to insert\n     */\n    addMention(mention: Object) {\n        const { activeMention } = this.state;\n        const { editorState } = this.props;\n        const { start, end } = activeMention || {};\n\n        const { id, name } = mention;\n\n        const contentState = editorState.getCurrentContent();\n        const selectionState = editorState.getSelection();\n\n        const preInsertionSelectionState = selectionState.merge({\n            anchorOffset: start,\n            focusOffset: end,\n        });\n\n        const textToInsert = `@${name}`;\n\n        const contentStateWithEntity = contentState.createEntity('MENTION', 'IMMUTABLE', { id });\n\n        const entityKey = contentStateWithEntity.getLastCreatedEntityKey();\n\n        const contentStateWithLink = Modifier.replaceText(\n            contentState,\n            preInsertionSelectionState,\n            textToInsert,\n            null,\n            entityKey,\n        );\n\n        const spaceOffset = preInsertionSelectionState.getStartOffset() + textToInsert.length;\n        const selectionStateForAddingSpace = preInsertionSelectionState.merge({\n            anchorOffset: spaceOffset,\n            focusOffset: spaceOffset,\n        });\n\n        const contentStateWithLinkAndExtraSpace = Modifier.insertText(\n            contentStateWithLink,\n            selectionStateForAddingSpace,\n            ' ',\n        );\n\n        const editorStateWithLink = EditorState.push(\n            editorState,\n            contentStateWithLinkAndExtraSpace,\n            'change-block-type',\n        );\n\n        this.setState(\n            {\n                activeMention: null,\n            },\n            () => {\n                this.handleChange(editorStateWithLink);\n            },\n        );\n    }\n\n    /**\n     * @returns {boolean}\n     */\n    shouldDisplayMentionLookup = () => {\n        const { contacts } = this.props;\n        const { activeMention } = this.state;\n\n        return !!(activeMention && activeMention.mentionString && contacts.length);\n    };\n\n    render() {\n        const {\n            className,\n            contacts,\n            editorState,\n            error,\n            hideLabel,\n            isDisabled,\n            isRequired,\n            label,\n            onReturn,\n            placeholder,\n            selectorRow,\n            startMentionMessage,\n            onMention,\n        } = this.props;\n        const { activeMention, isFocused } = this.state;\n\n        const classes = classNames('mention-selector-wrapper', className);\n\n        const showMentionStartState = !!(onMention && activeMention && !activeMention.mentionString && isFocused);\n\n        return (\n            <div className={classes}>\n                <SelectorDropdown\n                    onSelect={this.handleContactSelected}\n                    selector={\n                        <DraftJSEditor\n                            editorState={editorState}\n                            error={error}\n                            hideLabel={hideLabel}\n                            isDisabled={isDisabled}\n                            isFocused={isFocused}\n                            isRequired={isRequired}\n                            label={label}\n                            onBlur={this.handleBlur}\n                            onFocus={this.handleFocus}\n                            onChange={this.handleChange}\n                            onReturn={onReturn}\n                            placeholder={placeholder}\n                        />\n                    }\n                >\n                    {this.shouldDisplayMentionLookup()\n                        ? contacts.map(contact =>\n                              React.cloneElement(selectorRow, {\n                                  ...selectorRow.props,\n                                  ...contact,\n                                  key: contact.id,\n                              }),\n                          )\n                        : []}\n                </SelectorDropdown>\n                {showMentionStartState ? <MentionStartState message={startMentionMessage} /> : null}\n            </div>\n        );\n    }\n}\n\nexport default DraftJSMentionSelector;\n"],"file":"DraftJSMentionSelectorCore.js"}