{"version":3,"sources":["../../../../src/components/form-elements/form/Form.js"],"names":["PropTypes","React","Component","serialize","getFormValidityState","form","slice","call","elements","reduce","validityObj","inputEl","name","validity","valid","validityState","customError","customErrorCode","validationMessage","Form","props","currentTarget","onChange","formData","hash","empty","event","target","preventDefault","isValid","checkValidity","onInvalidSubmit","onValidSubmit","registeredInputs","state","formValidityState","Object","keys","forEach","key","setValidityStateHandler","Error","nextState","setState","registerInput","bind","unregisterInput","prevFormValidityState","children","onSubmit","node","func","isRequired","object","shape"],"mappings":"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","sourcesContent":["import PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport serialize from 'form-serialize';\n\nfunction getFormValidityState(form) {\n    // Turn the form.elements HTMLCollection into Array before reducing\n    return [].slice.call(form.elements).reduce((validityObj, inputEl) => {\n        // Only serialize inputs that have a name defined\n        if (inputEl.name && !inputEl.validity.valid) {\n            const validityState = inputEl.validity;\n\n            if (inputEl.validity.customError) {\n                // If the input is displaying a custom error,\n                // we expose the errorCode stored in the validationMessage\n                validityState.customErrorCode = inputEl.validationMessage;\n            }\n\n            validityObj[inputEl.name] = {\n                validityState,\n            };\n            return validityObj;\n        }\n        return validityObj;\n    }, {});\n}\n\nclass Form extends Component {\n    static propTypes = {\n        children: PropTypes.node,\n        /** Called when an input in the form changes */\n        onChange: PropTypes.func,\n        /** Called when a valid submit is made */\n        onValidSubmit: PropTypes.func.isRequired,\n        /** Called when an invalid submit is made */\n        onInvalidSubmit: PropTypes.func,\n        /** An object mapping input names to error messages */\n        formValidityState: PropTypes.object, // eslint-disable-line react/no-unused-prop-types\n    };\n\n    static childContextTypes = {\n        form: PropTypes.shape({\n            registerInput: PropTypes.func.isRequired,\n            unregisterInput: PropTypes.func.isRequired,\n        }).isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            registeredInputs: {},\n        };\n    }\n\n    getChildContext() {\n        return {\n            form: {\n                registerInput: this.registerInput.bind(this),\n                unregisterInput: this.unregisterInput.bind(this),\n            },\n        };\n    }\n\n    componentDidUpdate({ formValidityState: prevFormValidityState }) {\n        const { formValidityState } = this.props;\n        const { registeredInputs } = this.state;\n\n        if (formValidityState !== prevFormValidityState) {\n            Object.keys(formValidityState).forEach(key => {\n                if (registeredInputs[key]) {\n                    registeredInputs[key](formValidityState[key]);\n                }\n            });\n        }\n    }\n\n    onChange = ({ currentTarget }) => {\n        if (this.props.onChange) {\n            const formData = serialize(currentTarget, {\n                hash: true,\n                empty: true,\n            });\n            this.props.onChange(formData);\n        }\n    };\n\n    onSubmit = event => {\n        const form = event.target;\n        event.preventDefault();\n        const isValid = form.checkValidity();\n        const { onInvalidSubmit, onValidSubmit } = this.props;\n        const { registeredInputs } = this.state;\n\n        if (isValid) {\n            const formData = serialize(form, { hash: true, empty: true });\n            onValidSubmit(formData);\n        } else {\n            const formValidityState = getFormValidityState(form);\n\n            // Push form validity state to inputs so errors are shown on submit\n            Object.keys(formValidityState).forEach(\n                key => registeredInputs[key] && registeredInputs[key](formValidityState[key].validityState),\n            );\n\n            if (onInvalidSubmit) {\n                onInvalidSubmit(formValidityState);\n            }\n        }\n    };\n\n    registerInput = (name, setValidityStateHandler) => {\n        const { registeredInputs } = this.state;\n\n        if (registeredInputs[name]) {\n            throw new Error(`Input '${name}' is already registered.`);\n        }\n\n        const nextState = this.state;\n        nextState.registeredInputs[name] = setValidityStateHandler;\n        this.setState(nextState);\n    };\n\n    unregisterInput = name => {\n        const nextState = this.state;\n        delete nextState.registeredInputs[name];\n        this.setState(nextState);\n    };\n\n    render() {\n        const { children } = this.props;\n        return (\n            <form noValidate onChange={this.onChange} onSubmit={this.onSubmit}>\n                {children}\n            </form>\n        );\n    }\n}\n\nexport default Form;\n"],"file":"Form.js"}