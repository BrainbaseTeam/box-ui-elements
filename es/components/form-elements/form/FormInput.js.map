{"version":3,"sources":["../../../../src/components/form-elements/form/FormInput.js"],"names":["PropTypes","React","Component","FormInput","props","name","onValidityStateUpdate","context","form","registerInput","unregisterInput","children","node","isRequired","func","string","shape"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,SAAP,MAAsB,YAAtB;AACA,OAAOC,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;IAEMC,S;;;;;;;;;;;;;wCAgBkB;AAAA,wBACwB,KAAKC,KAD7B;AAAA,UACRC,IADQ,eACRA,IADQ;AAAA,UACFC,qBADE,eACFA,qBADE;;AAGhB,UAAI,KAAKC,OAAL,CAAaC,IAAjB,EAAuB;AACnB,aAAKD,OAAL,CAAaC,IAAb,CAAkBC,aAAlB,CAAgCJ,IAAhC,EAAsCC,qBAAtC;AACH;AACJ;;;2CAEsB;AACnB,UAAI,KAAKC,OAAL,CAAaC,IAAjB,EAAuB;AACnB,aAAKD,OAAL,CAAaC,IAAb,CAAkBE,eAAlB,CAAkC,KAAKN,KAAL,CAAWC,IAA7C;AACH;AACJ;;;6BAEQ;AACL,aAAO,iCAAM,KAAKD,KAAL,CAAWO,QAAjB,CAAP;AACH;;;;EAhCmBT,S;;gBAAlBC,S,eACiB;AACfQ,EAAAA,QAAQ,EAAEX,SAAS,CAACY,IAAV,CAAeC,UADV;;AAEf;AACAP,EAAAA,qBAAqB,EAAEN,SAAS,CAACc,IAAV,CAAeD,UAHvB;;AAIf;AACAR,EAAAA,IAAI,EAAEL,SAAS,CAACe,MAAV,CAAiBF;AALR,C;;gBADjBV,S,kBASoB;AAClBK,EAAAA,IAAI,EAAER,SAAS,CAACgB,KAAV,CAAgB;AAClBP,IAAAA,aAAa,EAAET,SAAS,CAACc,IAAV,CAAeD,UADZ;AAElBH,IAAAA,eAAe,EAAEV,SAAS,CAACc,IAAV,CAAeD;AAFd,GAAhB;AADY,C;;AA0B1B,eAAeV,SAAf","sourcesContent":["import PropTypes from 'prop-types';\nimport React, { Component } from 'react';\n\nclass FormInput extends Component {\n    static propTypes = {\n        children: PropTypes.node.isRequired,\n        /** callback called when Form pushed down a new validityState, useful for displaying server validation errors */\n        onValidityStateUpdate: PropTypes.func.isRequired,\n        /** Input name */\n        name: PropTypes.string.isRequired,\n    };\n\n    static contextTypes = {\n        form: PropTypes.shape({\n            registerInput: PropTypes.func.isRequired,\n            unregisterInput: PropTypes.func.isRequired,\n        }),\n    };\n\n    componentDidMount() {\n        const { name, onValidityStateUpdate } = this.props;\n\n        if (this.context.form) {\n            this.context.form.registerInput(name, onValidityStateUpdate);\n        }\n    }\n\n    componentWillUnmount() {\n        if (this.context.form) {\n            this.context.form.unregisterInput(this.props.name);\n        }\n    }\n\n    render() {\n        return <div>{this.props.children}</div>;\n    }\n}\n\nexport default FormInput;\n"],"file":"FormInput.js"}