{"version":3,"sources":["../../../../src/components/form-elements/text-area/TextArea.js"],"names":["React","TextAreaCore","messages","FormInput","TextArea","props","currentTarget","value","state","error","setState","checkValidity","valid","undefined","setErrorFromValidityState","isRequired","validation","textarea","trim","length","setCustomValidity","code","validity","prevValue","validityState","badInput","customError","tooLong","valueMissing","maxLength","autoFocus","className","isDisabled","isReadOnly","isResizable","label","name","placeholder","onValidityStateUpdateHandler","message","onChange","Component"],"mappings":";;;;;;;;;;;;;;;;;;;;AACA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAEA,OAAOC,YAAP,MAAyB,iBAAzB;AAEA,OAAO,KAAKC,QAAZ,MAA0B,mBAA1B;AACA,OAAOC,SAAP,MAAsB,mBAAtB;;IA6BMC,Q;;;;;AAOF,oBAAYC,KAAZ,EAA0B;AAAA;;AAAA;;AACtB,kFAAMA,KAAN;;AADsB,+DAiBf,gBAA4D;AAAA,UAAzDC,aAAyD,QAAzDA,aAAyD;AAAA,UAC3DC,KAD2D,GACjDD,aADiD,CAC3DC,KAD2D;;AAEnE,UAAI,MAAKC,KAAL,CAAWC,KAAf,EAAsB;AAClB,cAAKC,QAAL,CACI;AACIH,UAAAA,KAAK,EAALA;AADJ,SADJ,EAII,MAAKI,aAJT;AAMH,OAPD,MAOO;AACH,cAAKD,QAAL,CAAc;AACVH,UAAAA,KAAK,EAALA;AADU,SAAd;AAGH;AACJ,KA/ByB;;AAAA,mFAiCK,UAACE,KAAD,EAAmB;AAC9C,UAAIA,KAAK,CAACG,KAAN,KAAgBC,SAApB,EAA+B;AAC3B,cAAKC,yBAAL,CAA+BL,KAA/B;AACH,OAFD,MAEO;AACH,cAAKC,QAAL,CAAc;AACVD,UAAAA,KAAK,EAALA;AADU,SAAd;AAGH;AACJ,KAzCyB;;AAAA,oEAwEV,YAAM;AAAA,wBACiB,MAAKJ,KADtB;AAAA,UACVU,UADU,eACVA,UADU;AAAA,UACEC,UADF,eACEA,UADF;;AAAA;AAAA,UAEVC,QAFU,yBAEVA,QAFU;;AAIlB,UAAI,CAACA,QAAL,EAAe;AACX;AACH;;AAED,UAAID,UAAU,KAAKD,UAAU,IAAIE,QAAQ,CAACV,KAAT,CAAeW,IAAf,GAAsBC,MAAzC,CAAd,EAAgE;AAC5D,YAAMV,KAAK,GAAGO,UAAU,CAACC,QAAQ,CAACV,KAAV,CAAxB;;AACA,cAAKG,QAAL,CAAc;AACVD,UAAAA,KAAK,EAALA,KADU;AAEVF,UAAAA,KAAK,EAAEU,QAAQ,CAACV;AAFN,SAAd;;AAKA,YAAIE,KAAJ,EAAW;AACPQ,UAAAA,QAAQ,CAACG,iBAAT,CAA2BX,KAAK,CAACY,IAAjC;AACH,SAFD,MAEO;AACHJ,UAAAA,QAAQ,CAACG,iBAAT,CAA2B,EAA3B;AACH;AACJ,OAZD,MAYO;AACH,cAAKN,yBAAL,CAA+BG,QAAQ,CAACK,QAAxC;AACH;AACJ,KA/FyB;;AAEtB,UAAKd,KAAL,GAAa;AACTC,MAAAA,KAAK,EAAE,IADE;AAETF,MAAAA,KAAK,EAAEF,KAAK,CAACE;AAFJ,KAAb;AAFsB;AAMzB;;;;8CAE+C;AAAA,UAApBgB,SAAoB,SAA3BhB,KAA2B;;AAC5C;AACA,UAAIgB,SAAS,KAAK,KAAKlB,KAAL,CAAWE,KAA7B,EAAoC;AAChC,aAAKG,QAAL,CAAc;AACVH,UAAAA,KAAK,EAAE,KAAKF,KAAL,CAAWE;AADR,SAAd;AAGH;AACJ;;;8CA4ByBiB,a,EAA8B;AAAA,UAC5CC,QAD4C,GACYD,aADZ,CAC5CC,QAD4C;AAAA,UAClCC,WADkC,GACYF,aADZ,CAClCE,WADkC;AAAA,UACrBC,OADqB,GACYH,aADZ,CACrBG,OADqB;AAAA,UACZf,KADY,GACYY,aADZ,CACZZ,KADY;AAAA,UACLgB,YADK,GACYJ,aADZ,CACLI,YADK;AAAA,yBAGN,KAAKvB,KAHC;AAAA,UAG5CU,UAH4C,gBAG5CA,UAH4C;AAAA,UAGhCc,SAHgC,gBAGhCA,SAHgC;AAAA,UAGrBb,UAHqB,gBAGrBA,UAHqB;AAAA,UAK5CT,KAL4C,GAKlC,KAAKC,KAL6B,CAK5CD,KAL4C;AAOpD,UAAIE,KAAJ;;AAEA,UAAIG,KAAJ,EAAW;AACPH,QAAAA,KAAK,GAAG,IAAR;AACH,OAFD,MAEO,IAAIgB,QAAJ,EAAc;AACjBhB,QAAAA,KAAK,GAAGP,QAAQ,CAACuB,QAAT,EAAR;AACH,OAFM,MAEA,IAAIE,OAAO,IAAI,OAAOE,SAAP,KAAqB,WAApC,EAAiD;AACpDpB,QAAAA,KAAK,GAAGP,QAAQ,CAACyB,OAAT,CAAiBE,SAAjB,CAAR;AACH,OAFM,MAEA,IAAID,YAAJ,EAAkB;AACrBnB,QAAAA,KAAK,GAAGP,QAAQ,CAAC0B,YAAT,EAAR;AACH,OAFM,MAEA,IAAIF,WAAW,KAAKX,UAAU,IAAIR,KAAK,CAACW,IAAN,GAAaC,MAAhC,CAAX,IAAsDH,UAA1D,EAAsE;AACzEP,QAAAA,KAAK,GAAGO,UAAU,CAACT,KAAD,CAAlB;AACH;;AAED,WAAKG,QAAL,CAAc;AACVD,QAAAA,KAAK,EAALA;AADU,OAAd;AAGH;;;6BA8BQ;AAAA;;AAAA,yBAWD,KAAKJ,KAXJ;AAAA,UAEDyB,SAFC,gBAEDA,SAFC;AAAA,+CAGDC,SAHC;AAAA,UAGDA,SAHC,sCAGW,EAHX;AAAA,UAIDC,UAJC,gBAIDA,UAJC;AAAA,UAKDC,UALC,gBAKDA,UALC;AAAA,UAMDlB,UANC,gBAMDA,UANC;AAAA,UAODmB,WAPC,gBAODA,WAPC;AAAA,UAQDC,KARC,gBAQDA,KARC;AAAA,UASDC,IATC,gBASDA,IATC;AAAA,UAUDC,WAVC,gBAUDA,WAVC;AAAA,wBAaoB,KAAK7B,KAbzB;AAAA,UAaGC,KAbH,eAaGA,KAbH;AAAA,UAaUF,KAbV,eAaUA,KAbV;AAeL,aACI;AAAK,QAAA,SAAS,EAAEwB;AAAhB,SACI,oBAAC,SAAD;AAAW,QAAA,IAAI,EAAEK,IAAjB;AAAuB,QAAA,qBAAqB,EAAE,KAAKE;AAAnD,SACI,oBAAC,YAAD;AACI,QAAA,SAAS,EAAER,SADf;AAEI,QAAA,QAAQ,EAAEE,UAFd;AAGI,QAAA,KAAK,EAAEvB,KAAK,GAAGA,KAAK,CAAC8B,OAAT,GAAmB,IAHnC;AAII,QAAA,KAAK,EAAEJ,KAJX;AAKI,QAAA,UAAU,EAAEpB,UALhB;AAMI,QAAA,WAAW,EAAEmB,WANjB;AAOI,QAAA,IAAI,EAAEE,IAPV;AAQI,QAAA,MAAM,EAAE,KAAKzB,aARjB;AASI,QAAA,QAAQ,EAAE,KAAK6B,QATnB;AAUI,QAAA,WAAW,EAAEH,WAVjB;AAWI,QAAA,QAAQ,EAAEJ,UAXd;AAYI,QAAA,WAAW,EAAE,qBAAAhB,QAAQ,EAAI;AACrB,UAAA,MAAI,CAACA,QAAL,GAAgBA,QAAhB;AACH,SAdL;AAeI,QAAA,KAAK,EAAEV;AAfX,QADJ,CADJ,CADJ;AAuBH;;;;EA9IkBP,KAAK,CAACyC,S;;gBAAvBrC,Q,kBACoB;AAClB0B,EAAAA,SAAS,EAAE,KADO;AAElBvB,EAAAA,KAAK,EAAE,EAFW;AAGlB0B,EAAAA,UAAU,EAAE;AAHM,C;;AAgJ1B,eAAe7B,QAAf","sourcesContent":["// @flow\nimport * as React from 'react';\n\nimport TextAreaCore from '../../text-area';\n\nimport * as messages from '../input-messages';\nimport FormInput from '../form/FormInput';\n\ntype Props = {\n    autoFocus?: boolean,\n    /** Add a class to the component */\n    className?: string,\n    isDisabled?: boolean,\n    isReadOnly?: boolean,\n    isRequired?: boolean,\n    /** Is text area resizable */\n    isResizable?: boolean,\n    /** Label displayed for the text area */\n    label: React.Node,\n    maxLength?: number,\n    /** Name of the text area */\n    name: string,\n    /** Placeholder for the text area */\n    placeholder?: string,\n    /** Validation function that returns an error string or a promise that resolves to an error string */\n    validation?: Function,\n    /** Default value of the text area */\n    value: string,\n};\n\ntype State = {\n    error: Object | null,\n    value: string,\n};\n\nclass TextArea extends React.Component<Props, State> {\n    static defaultProps = {\n        autoFocus: false,\n        value: '',\n        isReadOnly: false,\n    };\n\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            error: null,\n            value: props.value,\n        };\n    }\n\n    componentDidUpdate({ value: prevValue }: Props) {\n        // If a new value is passed by prop, set it\n        if (prevValue !== this.props.value) {\n            this.setState({\n                value: this.props.value,\n            });\n        }\n    }\n\n    onChange = ({ currentTarget }: SyntheticEvent<HTMLTextAreaElement>) => {\n        const { value } = currentTarget;\n        if (this.state.error) {\n            this.setState(\n                {\n                    value,\n                },\n                this.checkValidity,\n            );\n        } else {\n            this.setState({\n                value,\n            });\n        }\n    };\n\n    onValidityStateUpdateHandler = (error: Object) => {\n        if (error.valid !== undefined) {\n            this.setErrorFromValidityState(error);\n        } else {\n            this.setState({\n                error,\n            });\n        }\n    };\n\n    setErrorFromValidityState(validityState: ValidityState) {\n        const { badInput, customError, tooLong, valid, valueMissing } = validityState;\n\n        const { isRequired, maxLength, validation } = this.props;\n\n        const { value } = this.state;\n\n        let error;\n\n        if (valid) {\n            error = null;\n        } else if (badInput) {\n            error = messages.badInput();\n        } else if (tooLong && typeof maxLength !== 'undefined') {\n            error = messages.tooLong(maxLength);\n        } else if (valueMissing) {\n            error = messages.valueMissing();\n        } else if (customError && (isRequired || value.trim().length) && validation) {\n            error = validation(value);\n        }\n\n        this.setState({\n            error,\n        });\n    }\n\n    textarea: ?HTMLTextAreaElement;\n\n    // Updates component value and validity state\n    checkValidity = () => {\n        const { isRequired, validation } = this.props;\n        const { textarea } = this;\n\n        if (!textarea) {\n            return;\n        }\n\n        if (validation && (isRequired || textarea.value.trim().length)) {\n            const error = validation(textarea.value);\n            this.setState({\n                error,\n                value: textarea.value,\n            });\n\n            if (error) {\n                textarea.setCustomValidity(error.code);\n            } else {\n                textarea.setCustomValidity('');\n            }\n        } else {\n            this.setErrorFromValidityState(textarea.validity);\n        }\n    };\n\n    render() {\n        const {\n            autoFocus,\n            className = '',\n            isDisabled,\n            isReadOnly,\n            isRequired,\n            isResizable,\n            label,\n            name,\n            placeholder,\n        } = this.props;\n\n        const { error, value } = this.state;\n\n        return (\n            <div className={className}>\n                <FormInput name={name} onValidityStateUpdate={this.onValidityStateUpdateHandler}>\n                    <TextAreaCore\n                        autoFocus={autoFocus}\n                        disabled={isDisabled}\n                        error={error ? error.message : null}\n                        label={label}\n                        isRequired={isRequired}\n                        isResizable={isResizable}\n                        name={name}\n                        onBlur={this.checkValidity}\n                        onChange={this.onChange}\n                        placeholder={placeholder}\n                        readOnly={isReadOnly}\n                        textareaRef={textarea => {\n                            this.textarea = textarea;\n                        }}\n                        value={value}\n                    />\n                </FormInput>\n            </div>\n        );\n    }\n}\n\nexport default TextArea;\n"],"file":"TextArea.js"}