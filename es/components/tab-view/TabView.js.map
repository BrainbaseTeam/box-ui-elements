{"version":3,"sources":["../../../src/components/tab-view/TabView.js"],"names":["React","classNames","TabViewPrimitive","TAB_KEY","TAB_PANEL_ROLE","TabView","props","document","activeElement","setState","focusedIndex","defaultSelectedIndex","selectedIndex","state","onTabSelect","index","event","getActiveDocElement","isTabPanelFocused","getAttribute","isTabPanelFocusedWithTabKey","key","showOutline","prevProps","resetActiveTab","children","className","isDynamic","handleKeyUp","handleOnTabFocus","handleOnTabSelect","resetFocusedTab","Component"],"mappings":"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","sourcesContent":["// @flow\nimport * as React from 'react';\nimport classNames from 'classnames';\n\nimport TabViewPrimitive, { TAB_KEY, TAB_PANEL_ROLE } from './TabViewPrimitive';\n\ntype Props = {\n    children: React.Node,\n    className?: string,\n    defaultSelectedIndex: number,\n    isDynamic?: boolean,\n    onTabSelect?: (selectedIndex: number) => void,\n};\n\ntype State = {\n    focusedIndex: number,\n    selectedIndex: number,\n    showOutline: boolean,\n};\n\nclass TabView extends React.Component<Props, State> {\n    static defaultProps = {\n        defaultSelectedIndex: 0,\n        isDynamic: false,\n    };\n\n    constructor(props: Props) {\n        super(props);\n\n        this.state = {\n            focusedIndex: props.defaultSelectedIndex,\n            showOutline: false,\n            selectedIndex: props.defaultSelectedIndex,\n        };\n    }\n\n    componentDidUpdate(prevProps: Props) {\n        const { defaultSelectedIndex } = this.props;\n        if (prevProps.defaultSelectedIndex !== defaultSelectedIndex) {\n            this.resetActiveTab();\n        }\n    }\n\n    getActiveDocElement = () => document.activeElement;\n\n    resetActiveTab = () => {\n        this.setState({\n            focusedIndex: this.props.defaultSelectedIndex,\n            selectedIndex: this.props.defaultSelectedIndex,\n        });\n    };\n\n    resetFocusedTab = () => {\n        this.setState({ focusedIndex: this.state.selectedIndex });\n    };\n\n    handleOnTabSelect = (selectedIndex: number): void =>\n        this.setState({ selectedIndex }, () => {\n            const { onTabSelect } = this.props;\n\n            if (onTabSelect) {\n                onTabSelect(this.state.selectedIndex);\n            }\n        });\n\n    handleOnTabFocus = (index: number) => this.setState({ focusedIndex: index });\n\n    // By default the outline is set to none when tabpanel is focused. This is so that\n    // when clicking into it, it doesn't outline it.\n    // However, for accessibility, when tabbing into and out of the tabpanel, the focus\n    // is pretty important to show the user what is being focused. By adding this class,\n    // we can specify an outline for the focus pseudo state.\n    handleKeyUp = (event: SyntheticKeyboardEvent<>) => {\n        const activeElement = this.getActiveDocElement();\n        const isTabPanelFocused = activeElement && activeElement.getAttribute('role') === TAB_PANEL_ROLE;\n        const isTabPanelFocusedWithTabKey = isTabPanelFocused && event.key === TAB_KEY;\n\n        if (isTabPanelFocusedWithTabKey) {\n            this.setState({ showOutline: true });\n        } else if (!isTabPanelFocused && this.state.showOutline) {\n            this.setState({ showOutline: false });\n        }\n    };\n\n    render() {\n        const { children, className, isDynamic } = this.props;\n        const { focusedIndex, selectedIndex, showOutline } = this.state;\n\n        return (\n            <TabViewPrimitive\n                className={classNames(className, {\n                    'show-outline': showOutline,\n                })}\n                focusedIndex={focusedIndex}\n                isDynamic={isDynamic}\n                onKeyUp={this.handleKeyUp}\n                onTabFocus={this.handleOnTabFocus}\n                onTabSelect={this.handleOnTabSelect}\n                resetActiveTab={this.resetActiveTab}\n                resetFocusedTab={this.resetFocusedTab}\n                selectedIndex={selectedIndex}\n            >\n                {children}\n            </TabViewPrimitive>\n        );\n    }\n}\n\nexport default TabView;\n"],"file":"TabView.js"}