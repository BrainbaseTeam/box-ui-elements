{"version":3,"sources":["../../../src/components/hotkeys/HotkeyHelpModal.js"],"names":["React","Component","PropTypes","FormattedMessage","commonMessages","ModalActions","Button","PlainButton","DropdownMenu","MenuToggle","Menu","MenuItem","HotkeyFriendlyModal","messages","specialCharacters","backspace","down","left","meta","right","up","enter","enterKey","spacebar","spacebarKey","shift","ctrl","ctrlKey","alt","altKey","esc","escKey","HotkeyHelpModal","props","context","hotkeyConfig","hotkeys","Array","isArray","key","map","hotkey","split","reduce","prettyHotkey","combo","i","prettyCombo","length","toUpperCase","j","key1","key2","hotkeySequence","finalHotkey","element","description","prettyPrintHotkey","hotkeyLayer","getActiveHotkeys","types","getActiveTypes","state","currentType","prevIsOpen","isOpen","prevType","setState","hotkeyType","renderHotkey","onRequestClose","hotkeyModalTitle","renderDropdownMenu","renderHotkeyList","cancel","bool","func","isRequired","object"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { FormattedMessage } from 'react-intl';\n\nimport commonMessages from '../../common/messages';\nimport { ModalActions } from '../modal';\nimport Button from '../button';\nimport PlainButton from '../plain-button';\nimport DropdownMenu, { MenuToggle } from '../dropdown-menu';\nimport { Menu, MenuItem } from '../menu';\n\nimport HotkeyFriendlyModal from './HotkeyFriendlyModal'; // eslint-disable-line import/no-cycle\nimport messages from './messages';\n\nimport './HotkeyHelpModal.scss';\n\nconst specialCharacters = {\n    backspace: '\\u232b',\n    down: '\\u2193',\n    left: '\\u2190',\n    meta: '\\u2318',\n    right: '\\u2192',\n    up: '\\u2191',\n    enter: <FormattedMessage {...messages.enterKey} />,\n    spacebar: <FormattedMessage {...messages.spacebarKey} />,\n    shift: '\\u21e7',\n    ctrl: <FormattedMessage {...messages.ctrlKey} />,\n    alt: <FormattedMessage {...messages.altKey} />,\n    esc: <FormattedMessage {...messages.escKey} />,\n};\n\nclass HotkeyHelpModal extends Component {\n    static propTypes = {\n        isOpen: PropTypes.bool,\n        onRequestClose: PropTypes.func.isRequired,\n    };\n\n    static contextTypes = {\n        hotkeyLayer: PropTypes.object,\n    };\n\n    constructor(props, context) {\n        super(props);\n\n        this.hotkeys = context.hotkeyLayer.getActiveHotkeys();\n        this.types = context.hotkeyLayer.getActiveTypes();\n        this.state = {\n            currentType: this.types.length ? this.types[0] : null,\n        };\n    }\n\n    componentDidUpdate({ isOpen: prevIsOpen }, { currentType: prevType }) {\n        const { isOpen } = this.props;\n\n        if (!isOpen) {\n            return;\n        }\n\n        // modal is being opened; refresh hotkeys\n        if (!prevIsOpen && isOpen) {\n            this.hotkeys = this.context.hotkeyLayer.getActiveHotkeys();\n            this.types = this.context.hotkeyLayer.getActiveTypes();\n        }\n\n        if (!prevType) {\n            this.setState({\n                currentType: this.types.length ? this.types[0] : null,\n            });\n        }\n    }\n\n    /**\n     * Converts a \"raw\" hotkey to translated JSX version\n     */\n    prettyPrintHotkey = hotkeyConfig => {\n        const hotkeys = Array.isArray(hotkeyConfig.key) ? hotkeyConfig.key : [hotkeyConfig.key];\n\n        return hotkeys\n            .map(hotkey =>\n                hotkey.split(' ').reduce((prettyHotkey, combo, i) => {\n                    // Convert a \"raw\" combo to a \"pretty\" combo:\n                    // e.g. \"shift+g\" => [ <kbd>Shift</kbd>, '+', <kbd>G</kbd> ]\n                    const prettyCombo = combo\n                        .split('+')\n                        .map(key => {\n                            // Convert special key characters into their respective icons or translated components:\n                            // e.g. \"shift\" => \"Shift\", \"meta\" => \"âŒ˜\"\n                            if (key in specialCharacters) {\n                                return specialCharacters[key];\n                            }\n                            // If it's not a special character, just return the uppercased key:\n                            // e.g. \"g\" => \"G\"\n                            return key.length === 1 ? key.toUpperCase() : key;\n                        })\n                        .map((key, j) => <kbd key={j}>{key}</kbd>);\n                    // If this hotkey is a sequence of keys, return a translated message to combine them:\n                    // e.g. \"Shift+G Shift+A\" => \"Shift+G then Shift+A\"\n                    return i === 0 ? (\n                        prettyCombo\n                    ) : (\n                        <FormattedMessage\n                            values={{\n                                key1: <span>{prettyHotkey}</span>,\n                                key2: <span>{prettyCombo}</span>,\n                            }}\n                            {...messages.hotkeySequence}\n                        />\n                    );\n                }, []),\n            )\n            .reduce(\n                (finalHotkey, hotkey, i) =>\n                    // For shortcuts with multiple hotkeys, separate each hotkey with a \"/\" joiner:\n                    // e.g. \"Cmd+S Ctrl+S\" => \"Cmd+S / Ctrl+S\"\n                    i === 0 ? [hotkey] : [...finalHotkey, ' / ', hotkey],\n                [],\n            )\n            .map((element, i) => <span key={i}>{element}</span>);\n    };\n\n    renderDropdownMenu() {\n        const { currentType } = this.state;\n\n        if (!currentType) {\n            return null;\n        }\n\n        return (\n            <div className=\"hotkey-dropdown\">\n                <DropdownMenu>\n                    <PlainButton className=\"lnk\" type=\"button\">\n                        <MenuToggle>{currentType}</MenuToggle>\n                    </PlainButton>\n                    <Menu>\n                        {this.types.map((hotkeyType, i) => (\n                            <MenuItem key={i} onClick={() => this.setState({ currentType: hotkeyType })}>\n                                {hotkeyType}\n                            </MenuItem>\n                        ))}\n                    </Menu>\n                </DropdownMenu>\n            </div>\n        );\n    }\n\n    renderHotkey = (hotkey, i) => (\n        <li key={i} className=\"hotkey-item\">\n            <div className=\"hotkey-description\">{hotkey.description}</div>\n            <div className=\"hotkey-key\">{this.prettyPrintHotkey(hotkey)}</div>\n        </li>\n    );\n\n    renderHotkeyList() {\n        const { currentType } = this.state;\n\n        if (!currentType) {\n            return null;\n        }\n\n        const hotkeys = this.hotkeys[currentType];\n\n        return <ul className=\"hotkey-list\">{hotkeys.map(this.renderHotkey)}</ul>;\n    }\n\n    render() {\n        const { isOpen, onRequestClose } = this.props;\n        const { currentType } = this.state;\n\n        if (!currentType) {\n            return null;\n        }\n\n        return (\n            <HotkeyFriendlyModal\n                className=\"hotkey-modal\"\n                isOpen={isOpen}\n                onRequestClose={onRequestClose}\n                title={<FormattedMessage {...messages.hotkeyModalTitle} />}\n            >\n                {this.renderDropdownMenu()}\n                {this.renderHotkeyList()}\n                <ModalActions>\n                    <Button onClick={onRequestClose}>\n                        <FormattedMessage {...commonMessages.cancel} />\n                    </Button>\n                </ModalActions>\n            </HotkeyFriendlyModal>\n        );\n    }\n}\n\nexport default HotkeyHelpModal;\n"],"file":"HotkeyHelpModal.js"}