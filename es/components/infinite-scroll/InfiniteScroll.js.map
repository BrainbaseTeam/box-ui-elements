{"version":3,"sources":["../../../src/components/infinite-scroll/InfiniteScroll.js"],"names":["React","throttle","InfiniteScroll","props","createRef","useWindow","window","addEventListener","scrollHandler","resizeHandler","setState","activeListenerNode","scrollContainerNode","state","removeEventListener","isLoading","hasMore","threshold","onLoadMore","sentinel","current","getBoundingClientRect","sentinelTop","top","innerHeight","containerBottom","bottom","onContainerScroll","addEventListeners","prevProps","removeEventListeners","children","Component"],"mappings":"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","sourcesContent":["// @flow\n/**\n * From https://github.com/jaredpalmer/react-simple-infinite-scroll\n * Updated to accept a scroll container React ref as the \"window\"\n */\nimport * as React from 'react';\nimport throttle from 'lodash/throttle';\n\ntype Props = {\n    /** Components to render, should include entities/loading states/end message */\n    children: React.Node,\n    /** Does the resource have more entities */\n    hasMore: boolean,\n    /** Are more entities being loaded */\n    isLoading: boolean,\n    /** Callback to load more entities */\n    onLoadMore: () => void,\n    /** React ref of the scroll container.\n     * Used to listen to scroll events and calculate onLoadMore calls.\n     * Set useWindow to true to use the window as scroll container.\n     */\n    scrollContainerNode?: ?HTMLElement,\n    /** Scroll threshold */\n    threshold: number,\n    /** Throttle rate */\n    throttle: number,\n    /** Set useWindow to true to use the window as scroll container. If set to true, will ignore scrollContainerRef. */\n    useWindow: boolean,\n};\n\ntype State = {\n    activeListenerNode: ?HTMLElement,\n};\n\nclass InfiniteScroll extends React.Component<Props, State> {\n    static defaultProps = {\n        threshold: 100,\n        throttle: 64,\n        useWindow: false,\n    };\n\n    sentinel: { current: null | HTMLDivElement } = React.createRef();\n\n    scrollHandler: () => void;\n\n    resizeHandler: () => void;\n\n    constructor(props: Props) {\n        super(props);\n\n        this.scrollHandler = throttle(this.onContainerScroll, props.throttle);\n        this.resizeHandler = throttle(this.onContainerScroll, props.throttle);\n\n        this.state = {\n            activeListenerNode: null,\n        };\n    }\n\n    componentDidMount() {\n        this.addEventListeners();\n    }\n\n    componentDidUpdate(prevProps: Props) {\n        const { useWindow, scrollContainerNode } = this.props;\n        if (useWindow !== prevProps.useWindow || scrollContainerNode !== prevProps.scrollContainerNode) {\n            this.removeEventListeners();\n            this.addEventListeners();\n        }\n    }\n\n    componentWillUnmount() {\n        this.removeEventListeners();\n    }\n\n    addEventListeners = () => {\n        const { useWindow } = this.props;\n        if (useWindow) {\n            window.addEventListener('scroll', this.scrollHandler);\n            window.addEventListener('resize', this.resizeHandler);\n            this.setState({ activeListenerNode: window });\n        } else {\n            const { scrollContainerNode } = this.props;\n            if (scrollContainerNode == null) return;\n            scrollContainerNode.addEventListener('scroll', this.scrollHandler);\n            scrollContainerNode.addEventListener('resize', this.resizeHandler);\n            this.setState({ activeListenerNode: scrollContainerNode });\n        }\n    };\n\n    removeEventListeners = () => {\n        const { activeListenerNode } = this.state;\n        if (activeListenerNode == null) return;\n        activeListenerNode.removeEventListener('scroll', this.scrollHandler);\n        activeListenerNode.removeEventListener('resize', this.resizeHandler);\n    };\n\n    onContainerScroll = () => {\n        const { isLoading, hasMore, threshold, useWindow, onLoadMore } = this.props;\n\n        if (isLoading || !hasMore) return;\n\n        if (this.sentinel.current == null) return;\n        const { top: sentinelTop } = this.sentinel.current.getBoundingClientRect();\n\n        if (useWindow) {\n            if (sentinelTop - window.innerHeight < threshold) {\n                onLoadMore();\n            }\n        } else {\n            const { scrollContainerNode } = this.props;\n            if (scrollContainerNode == null) return;\n\n            const { bottom: containerBottom } = scrollContainerNode.getBoundingClientRect();\n            if (sentinelTop - containerBottom < threshold) {\n                onLoadMore();\n            }\n        }\n    };\n\n    render() {\n        const sentinel = <div ref={this.sentinel} data-testid=\"sentinel\" />;\n\n        return (\n            <div>\n                {this.props.children}\n                {sentinel}\n            </div>\n        );\n    }\n}\n\nexport default InfiniteScroll;\n"],"file":"InfiniteScroll.js"}