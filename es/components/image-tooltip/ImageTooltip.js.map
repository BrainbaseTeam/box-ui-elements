{"version":3,"sources":["../../../src/components/image-tooltip/ImageTooltip.tsx"],"names":["React","classNames","Tooltip","TooltipTheme","ImageTooltipContent","ImageTooltip","children","className","content","image","title","otherTooltipProps","useState","isImageLoaded","setIsImageLoaded","tooltipContent","Children","only","imageTooltipClasses","CALLOUT"],"mappings":";;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,UAAP,MAAuB,YAAvB,C,CAEA;;AACA,OAAOC,OAAP,IAAgCC,YAAhC,QAAoD,YAApD;AACA,OAAOC,mBAAP,MAAgC,uBAAhC;AAEA,OAAO,qBAAP,C,CAEA;;AAcA,IAAMC,YAAY,GAAG,SAAfA,YAAe,OAA6F;AAAA,MAA1FC,QAA0F,QAA1FA,QAA0F;AAAA,MAAhFC,SAAgF,QAAhFA,SAAgF;AAAA,MAArEC,OAAqE,QAArEA,OAAqE;AAAA,MAA5DC,KAA4D,QAA5DA,KAA4D;AAAA,MAArDC,KAAqD,QAArDA,KAAqD;AAAA,MAA3CC,iBAA2C;;AAC9G;AAD8G,wBAEpEX,KAAK,CAACY,QAAN,CAAe,KAAf,CAFoE;AAAA;AAAA,MAEvGC,aAFuG;AAAA,MAExFC,gBAFwF;;AAI9G,MAAMC,cAAc,GAChB,oBAAC,mBAAD;AAAqB,IAAA,OAAO,EAAEP,OAA9B;AAAuC,IAAA,WAAW,EAAE;AAAA,aAAMM,gBAAgB,CAAC,IAAD,CAAtB;AAAA,KAApD;AAAkF,IAAA,KAAK,EAAEJ;AAAzF,KACKV,KAAK,CAACgB,QAAN,CAAeC,IAAf,CAAoBR,KAApB,CADL,CADJ;AAMA,MAAMS,mBAAmB,GAAGjB,UAAU,CAAC,kBAAD,EAAqB;AACvDM,IAAAA,SAAS,EAATA,SADuD;AAEvD,2BAAuBM;AAFgC,GAArB,CAAtC;AAKA,SACI,oBAAC,OAAD;AACI,IAAA,SAAS,EAAEK,mBADf;AAEI,IAAA,eAAe,MAFnB;AAGI,IAAA,KAAK,EAAEf,YAAY,CAACgB;AAHxB,KAIQR,iBAJR;AAKI,IAAA,IAAI,EAAEI;AALV,MAOKT,QAPL,CADJ;AAWH,CA1BD;;AA4BA,eAAeD,YAAf","sourcesContent":["import * as React from 'react';\nimport classNames from 'classnames';\n\n// @ts-ignore flow import\nimport Tooltip, { TooltipProps, TooltipTheme } from '../tooltip';\nimport ImageTooltipContent from './ImageTooltipContent';\n\nimport './ImageTooltip.scss';\n\n// We manually set \"text\" with our specific visual tooltip content.\ntype OtherTooltipProps = Omit<TooltipProps, 'text'>;\n\nexport type ImageTooltipProps = {\n    /** A React element to put the tooltip on */\n    children: React.ReactChild;\n    /** A string to be used in the tooltip's paragraph content */\n    content: string;\n    /** A React component representing the image used in the visual tooltip */\n    image: React.ReactElement;\n    /** A string to be used in the tooltip's title heading */\n    title: string;\n} & OtherTooltipProps;\n\nconst ImageTooltip = ({ children, className, content, image, title, ...otherTooltipProps }: ImageTooltipProps) => {\n    // State to track if the image has been loaded before displaying the tooltip\n    const [isImageLoaded, setIsImageLoaded] = React.useState(false);\n\n    const tooltipContent = (\n        <ImageTooltipContent content={content} onImageLoad={() => setIsImageLoaded(true)} title={title}>\n            {React.Children.only(image)}\n        </ImageTooltipContent>\n    );\n\n    const imageTooltipClasses = classNames('bdl-ImageTooltip', {\n        className,\n        'bdl-is-image-loaded': isImageLoaded,\n    });\n\n    return (\n        <Tooltip\n            className={imageTooltipClasses}\n            showCloseButton\n            theme={TooltipTheme.CALLOUT}\n            {...otherTooltipProps}\n            text={tooltipContent}\n        >\n            {children}\n        </Tooltip>\n    );\n};\n\nexport default ImageTooltip;\n"],"file":"ImageTooltip.js"}