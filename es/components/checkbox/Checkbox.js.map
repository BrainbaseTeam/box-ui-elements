{"version":3,"sources":["../../../src/components/checkbox/Checkbox.tsx"],"names":["React","uniqueId","classNames","CheckboxTooltip","Checkbox","className","description","fieldLabel","hideLabel","id","isChecked","isDisabled","label","name","onChange","subsection","tooltip","rest","generatedID","useRef","current","inputID","checkboxAndLabel"],"mappings":";;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,QAAP,MAAqB,iBAArB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AAEA,OAAOC,eAAP,MAA4B,mBAA5B;AAEA,OAAO,iBAAP;;AAqCA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,OAcI;AAAA,4BAbjBC,SAaiB;AAAA,MAbjBA,SAaiB,+BAbL,EAaK;AAAA,MAZjBC,WAYiB,QAZjBA,WAYiB;AAAA,MAXjBC,UAWiB,QAXjBA,UAWiB;AAAA,MAVjBC,SAUiB,QAVjBA,SAUiB;AAAA,MATjBC,EASiB,QATjBA,EASiB;AAAA,MARjBC,SAQiB,QARjBA,SAQiB;AAAA,MAPjBC,UAOiB,QAPjBA,UAOiB;AAAA,MANjBC,KAMiB,QANjBA,KAMiB;AAAA,MALjBC,IAKiB,QALjBA,IAKiB;AAAA,MAJjBC,QAIiB,QAJjBA,QAIiB;AAAA,MAHjBC,UAGiB,QAHjBA,UAGiB;AAAA,MAFjBC,OAEiB,QAFjBA,OAEiB;AAAA,MADdC,IACc;;AACjB,MAAMC,WAAW,GAAGlB,KAAK,CAACmB,MAAN,CAAalB,QAAQ,CAAC,UAAD,CAArB,EAAmCmB,OAAvD,CADiB,CAEjB;;AACA,MAAMC,OAAO,GAAGZ,EAAE,IAAIS,WAAtB;AAEA,MAAMI,gBAAgB,GAClB;AAAM,IAAA,SAAS,EAAC;AAAhB,KACI;AACI,IAAA,OAAO,EAAEZ,SADb;AAEI,IAAA,QAAQ,EAAEC,UAFd;AAGI,IAAA,EAAE,EAAEU,OAHR;AAII,IAAA,IAAI,EAAER,IAJV;AAKI,IAAA,QAAQ,EAAEC,QALd;AAMI,IAAA,IAAI,EAAC;AANT,KAOQG,IAPR,EADJ,EAYI;AAAM,IAAA,SAAS,EAAC;AAAhB,IAZJ,EAaI;AAAM,IAAA,SAAS,EAAEf,UAAU,CAAC,kCAAD,EAAqC;AAAE,8BAAwBM;AAA1B,KAArC;AAA3B,KACKI,KAAK,IAAI;AAAO,IAAA,OAAO,EAAES;AAAhB,KAA0BT,KAA1B,CADd,EAEKI,OAAO,IAAI,oBAAC,eAAD;AAAiB,IAAA,OAAO,EAAEA;AAA1B,IAFhB,CAbJ,CADJ;AAqBA,SACI;AAAK,IAAA,SAAS,EAAEd,UAAU,CAAC,oCAAD,EAAuCG,SAAvC,EAAkD;AAAE,qCAA+BM;AAAjC,KAAlD;AAA1B,KACKJ,UAAU,IAAI;AAAK,IAAA,SAAS,EAAC;AAAf,KAAwBA,UAAxB,CADnB,EAEKe,gBAFL,EAGKhB,WAAW,GAAG;AAAK,IAAA,SAAS,EAAC;AAAf,KAAuCA,WAAvC,CAAH,GAA+D,IAH/E,EAIKS,UAAU,GAAG;AAAK,IAAA,SAAS,EAAC;AAAf,KAAsCA,UAAtC,CAAH,GAA6D,IAJ5E,CADJ;AAQH,CAhDD;;AAkDA,eAAeX,QAAf","sourcesContent":["import * as React from 'react';\nimport uniqueId from 'lodash/uniqueId';\nimport classNames from 'classnames';\n\nimport CheckboxTooltip from './CheckboxTooltip';\n\nimport './Checkbox.scss';\n\nexport interface CheckboxProps {\n    /** Class name for the checkbox */\n    className?: string;\n    /** Description for the checkbox */\n    description?: React.ReactNode;\n    /** fieldLabel - label for the field shown on top of the checkbox */\n    fieldLabel?: React.ReactNode;\n    /** hideLabel - whether the checkbox label is hidden or not */\n    hideLabel?: boolean;\n    /** id - Unique `id` for the input */\n    id?: string;\n    /** isChecked - whether the checkbox is checked or not */\n    isChecked?: boolean; // @TODO: eventually call this `checked`\n    /** isDisabled - whether the checkbox is disabled or not */\n    isDisabled?: boolean; // @TODO: eventually call this `disabled`\n    /** Label displayed for the input */\n    label: React.ReactNode;\n    /** Name of the input */\n    name: string;\n    /** onBlur - blur callback function that takes the event as the argument */\n    onBlur?:\n        | ((e: React.SyntheticEvent<HTMLInputElement, Event>) => React.ReactText)\n        | {\n              (e: React.FocusEvent<HTMLInputElement>): void;\n          };\n    /** onChange - change callback function that takes the event as the argument */\n    onChange?: (e: React.SyntheticEvent<HTMLInputElement, Event>) => string | number | boolean | void;\n    /** Subsection below the checkbox */\n    subsection?: React.ReactNode;\n    /** Tooltip text next to the checkbox label */\n    tooltip?: string;\n    /** Value for the checkbox */\n    value?: string | number | string[];\n}\n\nconst Checkbox = ({\n    className = '',\n    description,\n    fieldLabel,\n    hideLabel,\n    id,\n    isChecked,\n    isDisabled,\n    label,\n    name,\n    onChange,\n    subsection,\n    tooltip,\n    ...rest // @TODO: eventually remove `rest` in favor of explicit props\n}: CheckboxProps) => {\n    const generatedID = React.useRef(uniqueId('checkbox')).current;\n    // use passed-in ID from props; otherwise generate one\n    const inputID = id || generatedID;\n\n    const checkboxAndLabel = (\n        <span className=\"checkbox-label\">\n            <input\n                checked={isChecked}\n                disabled={isDisabled}\n                id={inputID}\n                name={name}\n                onChange={onChange}\n                type=\"checkbox\"\n                {...rest}\n            />\n            {/* This span is used for the before/after custom checkbox styles, but mouse clicks will pass through this element\n                    to the underlying <input> */}\n            <span className=\"checkbox-pointer-target\" />\n            <span className={classNames('bdl-Checkbox-labelTooltipWrapper', { 'accessibility-hidden': hideLabel })}>\n                {label && <label htmlFor={inputID}>{label}</label>}\n                {tooltip && <CheckboxTooltip tooltip={tooltip} />}\n            </span>\n        </span>\n    );\n\n    return (\n        <div className={classNames('checkbox-container-box-ui-elements', className, { 'is-disabled bdl-is-disabled': isDisabled })}>\n            {fieldLabel && <div className=\"label\">{fieldLabel}</div>}\n            {checkboxAndLabel}\n            {description ? <div className=\"checkbox-description\">{description}</div> : null}\n            {subsection ? <div className=\"checkbox-subsection\">{subsection}</div> : null}\n        </div>\n    );\n};\n\nexport default Checkbox;\n"],"file":"Checkbox.js"}