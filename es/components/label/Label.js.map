{"version":3,"sources":["../../../src/components/label/Label.tsx"],"names":["React","FormattedMessage","InfoIconWithTooltip","StandardLabel","HiddenLabel","commonMessages","OptionalFormattedMessage","optional","Label","text","tooltip","infoTooltip","infoIconProps","showOptionalText","hideLabel","children","labelContent","push","className"],"mappings":";;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,gBAAT,QAAiC,YAAjC;AAEA,OAAOC,mBAAP,MAAgC,uBAAhC;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,OAAOC,WAAP,MAAwB,eAAxB,C,CACA;;AACA,OAAOC,cAAP,MAA2B,uBAA3B;AAEA,OAAO,cAAP;;AAEA,IAAMC,wBAAwB,GAAG,SAA3BA,wBAA2B;AAAA,SAC7B;AAAM,IAAA,SAAS,EAAC;AAAhB,UACK,oBAAC,gBAAD,EAAsBD,cAAc,CAACE,QAArC,CADL,MAD6B;AAAA,CAAjC;;AAuBA,IAAMC,KAAK,GAAG,SAARA,KAAQ,OAAsG;AAAA,MAAnGC,IAAmG,QAAnGA,IAAmG;AAAA,MAA7FC,OAA6F,QAA7FA,OAA6F;AAAA,MAApFC,WAAoF,QAApFA,WAAoF;AAAA,MAAvEC,aAAuE,QAAvEA,aAAuE;AAAA,MAAxDC,gBAAwD,QAAxDA,gBAAwD;AAAA,MAAtCC,SAAsC,QAAtCA,SAAsC;AAAA,MAA3BC,QAA2B,QAA3BA,QAA2B;AAChH,MAAMC,YAAY,GAAG,CACjB;AAAM,IAAA,GAAG,EAAC;AAAV,KAAuBP,IAAvB,CADiB,EAEjBI,gBAAgB,GAAG,oBAAC,wBAAD;AAA0B,IAAA,GAAG,EAAC;AAA9B,IAAH,GAAwD,IAFvD,CAArB;;AAKA,MAAIF,WAAJ,EAAiB;AACbK,IAAAA,YAAY,CAACC,IAAb,CACI,oBAAC,mBAAD;AACI,MAAA,GAAG,EAAC,aADR;AAEI,MAAA,SAAS;AAAIC,QAAAA,SAAS,EAAE;AAAf,SAAkCN,aAAlC,CAFb;AAGI,MAAA,WAAW,EAAED;AAHjB,MADJ;AAOH;;AAED,MAAIG,SAAJ,EAAe;AACX,WAAO,oBAAC,WAAD;AAAa,MAAA,YAAY,EAAEE;AAA3B,OAA0CD,QAA1C,CAAP;AACH;;AAED,SACI,oBAAC,aAAD;AAAe,IAAA,YAAY,EAAEC,YAA7B;AAA2C,IAAA,OAAO,EAAEN;AAApD,KACKK,QADL,CADJ;AAKH,CAzBD;;AA2BA,eAAeP,KAAf","sourcesContent":["import * as React from 'react';\nimport { FormattedMessage } from 'react-intl';\n\nimport InfoIconWithTooltip from './InfoIconWithTooltip';\nimport StandardLabel from './StandardLabel';\nimport HiddenLabel from './HiddenLabel';\n// @ts-ignore flow import\nimport commonMessages from '../../common/messages';\n\nimport './Label.scss';\n\nconst OptionalFormattedMessage = () => (\n    <span className=\"label-optional bdl-Label-optional\">\n        (<FormattedMessage {...commonMessages.optional} />)\n    </span>\n);\n\nexport interface LabelProps {\n    /** Child for the label */\n    children: React.ReactElement;\n    /** Whether the text of the label should be accessibly hidden */\n    hideLabel?: boolean;\n    /** Optional props for the icon */\n    infoIconProps?: Record<string, any>; // eslint-disable-line @typescript-eslint/no-explicit-any\n    /** Tooltip text for the info icon */\n    infoTooltip?: React.ReactNode;\n    /** Whether to show the `(Optional)` text next to the label for an optional field */\n    showOptionalText?: boolean;\n    /** The label text */\n    text: React.ReactNode;\n    /** Optional tooltip text for the label */\n    tooltip?: React.ReactNode;\n}\n\nconst Label = ({ text, tooltip, infoTooltip, infoIconProps, showOptionalText, hideLabel, children }: LabelProps) => {\n    const labelContent = [\n        <span key=\"labelText\">{text}</span>,\n        showOptionalText ? <OptionalFormattedMessage key=\"optionalMessage\" /> : null,\n    ];\n\n    if (infoTooltip) {\n        labelContent.push(\n            <InfoIconWithTooltip\n                key=\"infoTooltip\"\n                iconProps={{ className: 'tooltip-icon', ...infoIconProps }}\n                tooltipText={infoTooltip}\n            />,\n        );\n    }\n\n    if (hideLabel) {\n        return <HiddenLabel labelContent={labelContent}>{children}</HiddenLabel>;\n    }\n\n    return (\n        <StandardLabel labelContent={labelContent} tooltip={tooltip}>\n            {children}\n        </StandardLabel>\n    );\n};\n\nexport default Label;\n"],"file":"Label.js"}