{"version":3,"sources":["../../../src/components/sidebar-toggle-button/SidebarToggleButton.js"],"names":["React","classNames","injectIntl","IconHide","IconShow","PlainButton","Tooltip","messages","DIRECTION_LEFT","DIRECTION_RIGHT","SidebarToggleButton","className","direction","intl","isOpen","onClick","rest","isCollapsed","intlMessage","sidebarHide","sidebarShow","intlText","formatMessage","classes","tooltipPosition","renderButton"],"mappings":";;;;;;AACA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,SAASC,UAAT,QAA2B,YAA3B;AAGA,OAAOC,QAAP,MAAqB,8BAArB;AACA,OAAOC,QAAP,MAAqB,8BAArB;AACA,OAAOC,WAAP,MAAwB,iBAAxB;AACA,OAAOC,OAAP,MAAoB,YAApB;AAEA,OAAOC,QAAP,MAAqB,gCAArB;AAEA,OAAO,4BAAP;AAEA,IAAMC,cAAc,GAAG,MAAvB;AACA,IAAMC,eAAe,GAAG,OAAxB;;AASA,IAAMC,mBAAmB,GAAG,SAAtBA,mBAAsB,OAOf;AAAA,4BANTC,SAMS;AAAA,MANTA,SAMS,+BANG,EAMH;AAAA,4BALTC,SAKS;AAAA,MALTA,SAKS,+BALGH,eAKH;AAAA,MAJTI,IAIS,QAJTA,IAIS;AAAA,MAHTC,MAGS,QAHTA,MAGS;AAAA,MAFTC,OAES,QAFTA,OAES;AAAA,MADNC,IACM;;AACT,MAAMC,WAAW,GAAG,CAACH,MAAD,GAAU,WAAV,GAAwB,EAA5C;AACA,MAAMI,WAAW,GAAGJ,MAAM,GAAGP,QAAQ,CAACY,WAAZ,GAA0BZ,QAAQ,CAACa,WAA7D;AACA,MAAMC,QAAQ,GAAGR,IAAI,CAACS,aAAL,CAAmBJ,WAAnB,CAAjB;AACA,MAAMK,OAAO,GAAGtB,UAAU,CAACU,SAAD,EAAY,yBAAZ,EAAuC;AAC7D,wBAAoBM;AADyC,GAAvC,CAA1B;AAGA,MAAMO,eAAe,GAAGZ,SAAS,KAAKJ,cAAd,GAA+B,cAA/B,GAAgD,aAAxE;;AAEA,MAAMiB,YAAY,GAAG,SAAfA,YAAe,GAAM;AACvB,QAAIb,SAAS,KAAKJ,cAAlB,EAAkC;AAC9B,aAAOM,MAAM,GAAG,oBAAC,QAAD;AAAU,QAAA,MAAM,EAAE,EAAlB;AAAsB,QAAA,KAAK,EAAE;AAA7B,QAAH,GAAyC,oBAAC,QAAD;AAAU,QAAA,MAAM,EAAE,EAAlB;AAAsB,QAAA,KAAK,EAAE;AAA7B,QAAtD;AACH;;AACD,WAAOA,MAAM,GAAG,oBAAC,QAAD;AAAU,MAAA,MAAM,EAAE,EAAlB;AAAsB,MAAA,KAAK,EAAE;AAA7B,MAAH,GAAyC,oBAAC,QAAD;AAAU,MAAA,MAAM,EAAE,EAAlB;AAAsB,MAAA,KAAK,EAAE;AAA7B,MAAtD;AACH,GALD;;AAOA,SACI,oBAAC,OAAD;AAAS,IAAA,QAAQ,EAAEU,eAAnB;AAAoC,IAAA,IAAI,EAAEH;AAA1C,KACI,oBAAC,WAAD;AAAa,kBAAYA,QAAzB;AAAmC,IAAA,SAAS,EAAEE,OAA9C;AAAuD,IAAA,OAAO,EAAER,OAAhE;AAAyE,IAAA,IAAI,EAAC;AAA9E,KAA2FC,IAA3F,GACKS,YAAY,EADjB,CADJ,CADJ;AAOH,CA9BD;;AAgCA,eAAevB,UAAU,CAACQ,mBAAD,CAAzB","sourcesContent":["// @flow\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport { injectIntl } from 'react-intl';\nimport type { InjectIntlProvidedProps } from 'react-intl';\n\nimport IconHide from '../../icons/general/IconHide';\nimport IconShow from '../../icons/general/IconShow';\nimport PlainButton from '../plain-button';\nimport Tooltip from '../tooltip';\n\nimport messages from '../../elements/common/messages';\n\nimport './SidebarToggleButton.scss';\n\nconst DIRECTION_LEFT = 'left';\nconst DIRECTION_RIGHT = 'right';\n\ntype Props = {\n    className?: string,\n    direction?: string,\n    isOpen: boolean,\n    onClick?: Function,\n} & InjectIntlProvidedProps;\n\nconst SidebarToggleButton = ({\n    className = '',\n    direction = DIRECTION_RIGHT,\n    intl,\n    isOpen,\n    onClick,\n    ...rest\n}: Props) => {\n    const isCollapsed = !isOpen ? 'collapsed' : '';\n    const intlMessage = isOpen ? messages.sidebarHide : messages.sidebarShow;\n    const intlText = intl.formatMessage(intlMessage);\n    const classes = classNames(className, 'bdl-SidebarToggleButton', {\n        'bdl-is-collapsed': isCollapsed,\n    });\n    const tooltipPosition = direction === DIRECTION_LEFT ? 'middle-right' : 'middle-left';\n\n    const renderButton = () => {\n        if (direction === DIRECTION_LEFT) {\n            return isOpen ? <IconShow height={16} width={16} /> : <IconHide height={16} width={16} />;\n        }\n        return isOpen ? <IconHide height={16} width={16} /> : <IconShow height={16} width={16} />;\n    };\n\n    return (\n        <Tooltip position={tooltipPosition} text={intlText}>\n            <PlainButton aria-label={intlText} className={classes} onClick={onClick} type=\"button\" {...rest}>\n                {renderButton()}\n            </PlainButton>\n        </Tooltip>\n    );\n};\n\nexport default injectIntl(SidebarToggleButton);\n"],"file":"SidebarToggleButton.js"}