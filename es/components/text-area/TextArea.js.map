{"version":3,"sources":["../../../src/components/text-area/TextArea.js"],"names":["React","classNames","uniqueId","Label","Tooltip","TextArea","className","error","hideLabel","hideOptionalLabel","isRequired","isResizable","label","textareaRef","rest","hasError","classes","errorMessageID","useRef","current","ariaAttrs","resize","displayName"],"mappings":";;;;;;AACA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,OAAOC,QAAP,MAAqB,iBAArB;AAEA,OAAOC,KAAP,MAAkB,UAAlB;AACA,OAAOC,OAAP,MAAoB,YAApB;AAEA,OAAO,iBAAP;;AAkBA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,OAUJ;AAAA,4BATTC,SASS;AAAA,MATTA,SASS,+BATG,EASH;AAAA,MARTC,KAQS,QARTA,KAQS;AAAA,MAPTC,SAOS,QAPTA,SAOS;AAAA,MANTC,iBAMS,QANTA,iBAMS;AAAA,MALTC,UAKS,QALTA,UAKS;AAAA,MAJTC,WAIS,QAJTA,WAIS;AAAA,MAHTC,KAGS,QAHTA,KAGS;AAAA,MAFTC,WAES,QAFTA,WAES;AAAA,MADNC,IACM;;AACT,MAAMC,QAAQ,GAAG,CAAC,CAACR,KAAnB;AACA,MAAMS,OAAO,GAAGf,UAAU,CAACK,SAAD,EAAY,qBAAZ,EAAmC;AACzD,kBAAcS;AAD2C,GAAnC,CAA1B;AAIA,MAAME,cAAc,GAAGjB,KAAK,CAACkB,MAAN,CAAahB,QAAQ,CAAC,cAAD,CAArB,EAAuCiB,OAA9D;AACA,MAAMC,SAAS,GAAG;AACd,oBAAgBL,QADF;AAEd,qBAAiBL,UAFH;AAGd,yBAAqBO;AAHP,GAAlB;AAMA,sBACI;AAAK,IAAA,SAAS,EAAED;AAAhB,kBACI,oBAAC,KAAD;AAAO,IAAA,SAAS,EAAER,SAAlB;AAA6B,IAAA,gBAAgB,EAAE,CAACC,iBAAD,IAAsB,CAACC,UAAtE;AAAkF,IAAA,IAAI,EAAEE;AAAxF,kBACI,oBAAC,OAAD;AAAS,IAAA,OAAO,EAAEG,QAAlB;AAA4B,IAAA,QAAQ,EAAC,aAArC;AAAmD,IAAA,IAAI,EAAER,KAAK,IAAI,EAAlE;AAAsE,IAAA,KAAK,EAAC;AAA5E,kBACI;AACI,IAAA,GAAG,EAAEM,WADT;AAEI,IAAA,QAAQ,EAAEH,UAFd;AAGI,IAAA,KAAK,EAAE;AAAEW,MAAAA,MAAM,EAAEV,WAAW,GAAG,EAAH,GAAQ;AAA7B;AAHX,KAIQS,SAJR,EAKQN,IALR,EADJ,CADJ,eAUI;AAAM,IAAA,EAAE,EAAEG,cAAV;AAA0B,IAAA,SAAS,EAAC,sBAApC;AAA2D,IAAA,IAAI,EAAC;AAAhE,KACKV,KADL,CAVJ,CADJ,CADJ;AAkBH,CAzCD;;AA2CAF,QAAQ,CAACiB,WAAT,GAAuB,UAAvB;AAGA,eAAejB,QAAf","sourcesContent":["// @flow\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport uniqueId from 'lodash/uniqueId';\n\nimport Label from '../label';\nimport Tooltip from '../tooltip';\n\nimport './TextArea.scss';\n\ntype Props = {\n    className?: string,\n    error?: React.Node,\n    /** Hides the label */\n    hideLabel?: boolean,\n    /** Hides (optional) text from the label */\n    hideOptionalLabel?: boolean,\n    /** Makes the text area value required */\n    isRequired?: boolean,\n    /** Is text area resizable */\n    isResizable?: boolean,\n    /** Label displayed for the text area */\n    label: React.Node,\n    textareaRef?: Function, // @TODO: eventually rename to innerRef for consistancy across all form elements\n};\n\nconst TextArea = ({\n    className = '',\n    error,\n    hideLabel,\n    hideOptionalLabel,\n    isRequired,\n    isResizable,\n    label,\n    textareaRef,\n    ...rest\n}: Props) => {\n    const hasError = !!error;\n    const classes = classNames(className, 'text-area-container', {\n        'show-error': hasError,\n    });\n\n    const errorMessageID = React.useRef(uniqueId('errorMessage')).current;\n    const ariaAttrs = {\n        'aria-invalid': hasError,\n        'aria-required': isRequired,\n        'aria-errormessage': errorMessageID,\n    };\n\n    return (\n        <div className={classes}>\n            <Label hideLabel={hideLabel} showOptionalText={!hideOptionalLabel && !isRequired} text={label}>\n                <Tooltip isShown={hasError} position=\"bottom-left\" text={error || ''} theme=\"error\">\n                    <textarea\n                        ref={textareaRef}\n                        required={isRequired}\n                        style={{ resize: isResizable ? '' : 'none' }}\n                        {...ariaAttrs}\n                        {...rest}\n                    />\n                </Tooltip>\n                <span id={errorMessageID} className=\"accessibility-hidden\" role=\"alert\">\n                    {error}\n                </span>\n            </Label>\n        </div>\n    );\n};\n\nTextArea.displayName = 'TextArea';\n\nexport type TextAreaProps = Props;\nexport default TextArea;\n"],"file":"TextArea.js"}