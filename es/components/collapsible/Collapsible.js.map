{"version":3,"sources":["../../../src/components/collapsible/Collapsible.tsx"],"names":["React","classNames","omit","AnimateHeight","RESIN_TAG_TARGET","IconCaretDown","PlainButton","ButtonType","bdlGray50","Collapsible","props","onOpen","onClose","setState","prevState","isOpen","state","animationDuration","buttonProps","children","className","isBordered","hasStickyHeader","headerActionItems","title","sectionClassName","resinTagTarget","modifiedButtonProps","interactionTarget","buttonClassName","toggleVisibility","BUTTON","PureComponent"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport classNames from 'classnames';\nimport omit from 'lodash/omit';\nimport AnimateHeight from 'react-animate-height';\n\n// @ts-ignore flow import\nimport { RESIN_TAG_TARGET } from '../../common/variables';\nimport IconCaretDown from '../../icons/general/IconCaretDown';\nimport PlainButton from '../plain-button';\nimport { ButtonType } from '../button';\nimport { bdlGray50 } from '../../styles/variables';\n\nimport './Collapsible.scss';\n\nexport interface CollapsibleProps {\n    /** animationDuration - duration of animation in milliseconds */\n    animationDuration?: number;\n    /** buttonProps - other props (e.g. resin target names) to be included in the button */\n    buttonProps?: Record<string, React.ReactNode>;\n    /** children - content to be displayed in the card when it is expanded */\n    children: Array<React.ReactChild> | React.ReactChild;\n    /** className - CSS class for the wrapper div */\n    className?: string;\n    /** hasStickyHeader - determines look of component */\n    hasStickyHeader?: boolean;\n    /** headerActionItems - determines stickiness of the header */\n    headerActionItems?: React.ReactChild;\n    /** headerButton - button in the title of the collapsible card */\n    headerButton?: React.ReactElement;\n    /** isBordered - determines optional header action items */\n    isBordered?: boolean;\n    /** isOpen - initial state of the collapsible card */\n    isOpen: boolean;\n    /** onClose - callback called when collapsible is opened */\n    onClose?: Function;\n    /** onOpen - callback called when collapsible is collapsed */\n    onOpen?: Function;\n    /** title - string or component in the title of the collapsible card */\n    title: string | React.ReactElement;\n}\n\ninterface CollapsibleState {\n    /** isOpen - initial state of the collapsible card */\n    isOpen: boolean;\n}\n\nclass Collapsible extends React.PureComponent<CollapsibleProps, CollapsibleState> {\n    static defaultProps = {\n        buttonProps: {},\n        className: '',\n        isOpen: true,\n        animationDuration: 100,\n    };\n\n    constructor(props: CollapsibleProps) {\n        super(props);\n        this.state = {\n            isOpen: props.isOpen,\n        };\n    }\n\n    toggleVisibility = () => {\n        const { onOpen, onClose } = this.props;\n        this.setState(\n            prevState => ({\n                isOpen: !prevState.isOpen,\n            }),\n            () => {\n                const { isOpen } = this.state;\n                if (isOpen && onOpen) {\n                    onOpen(this);\n                } else if (!isOpen && onClose) {\n                    onClose(this);\n                }\n            },\n        );\n    };\n\n    render() {\n        const { isOpen }: CollapsibleState = this.state;\n        const {\n            animationDuration,\n            buttonProps = {},\n            children,\n            className,\n            isBordered,\n            hasStickyHeader,\n            headerActionItems,\n            title,\n        }: CollapsibleProps = this.props;\n\n        const sectionClassName = classNames(\n            'collapsible-card',\n            {\n                'is-open': isOpen,\n            },\n            {\n                'is-bordered': isBordered,\n            },\n            className,\n        );\n        const resinTagTarget: string = RESIN_TAG_TARGET;\n        const modifiedButtonProps: { [index: string]: string } = omit(buttonProps, [resinTagTarget]);\n        const interactionTarget = buttonProps[resinTagTarget];\n        const buttonClassName = hasStickyHeader\n            ? 'collapsible-card-header has-sticky-header'\n            : 'collapsible-card-header';\n\n        if (interactionTarget) {\n            modifiedButtonProps[resinTagTarget] = `${interactionTarget}${isOpen ? 'collapse' : 'expand'}`;\n        }\n\n        return (\n            <div className={sectionClassName}>\n                <div className={buttonClassName}>\n                    <PlainButton\n                        {...modifiedButtonProps}\n                        className=\"collapsible-card-title\"\n                        onClick={this.toggleVisibility}\n                        type={ButtonType.BUTTON}\n                    >\n                        {title}\n                        <IconCaretDown className=\"collapsible-card-header-caret\" color={bdlGray50} width={8} />\n                    </PlainButton>\n                    {!!headerActionItems && <span className=\"bdl-Collapsible-actionItems\">{headerActionItems}</span>}\n                </div>\n                <AnimateHeight duration={animationDuration} height={isOpen ? 'auto' : 0}>\n                    <div className=\"collapsible-card-content\">{children}</div>\n                </AnimateHeight>\n            </div>\n        );\n    }\n}\n\nexport default Collapsible;\n"],"file":"Collapsible.js"}