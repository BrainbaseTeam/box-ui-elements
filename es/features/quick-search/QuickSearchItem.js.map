{"version":3,"sources":["../../../src/features/quick-search/QuickSearchItem.js"],"names":["PropTypes","React","classNames","ImmutablePropTypes","injectIntl","intlShape","FormattedMessage","convertToMs","isToday","isYesterday","DatalistItem","IconSmallFolder","ItemIcon","Link","messages","QUERY_SEPARATOR","QuickSearchItem","className","closeDropdown","intl","itemData","parentFolderRenderer","shouldNavigateOnItemClick","rest","formatMessage","extension","iconType","id","name","nameWithMarkedQuery","parentName","sharedLink","type","updatedBy","updatedDate","updatedDateInMs","markedQueryMatches","split","forEach","element","index","push","itemIconTitle","bookmark","file","collaboratedFolder","externalFolder","personalFolder","updatedText","updatedTextToday","user","updatedTextYesterday","date","href","targetProps","isBoxNote","target","itemName","e","stopPropagation","parentFolder","itemDataShape","string","isRequired","number","propTypes","func","oneOfType","recordOf","shape","bool"],"mappings":"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","sourcesContent":["import PropTypes from 'prop-types';\nimport React from 'react';\nimport classNames from 'classnames';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport { injectIntl, intlShape, FormattedMessage } from 'react-intl';\n\nimport { convertToMs, isToday, isYesterday } from '../../utils/datetime';\nimport DatalistItem from '../../components/datalist-item';\nimport IconSmallFolder from '../../icons/folder/IconSmallFolder';\nimport ItemIcon from '../../icons/item-icon';\nimport { Link } from '../../components/link';\n\nimport messages from './messages';\n\nimport './QuickSearchItem.scss';\n\nconst QUERY_SEPARATOR = '<mark>';\n\nconst QuickSearchItem = ({\n    className,\n    closeDropdown,\n    intl,\n    itemData,\n    parentFolderRenderer,\n    shouldNavigateOnItemClick,\n    ...rest\n}) => {\n    const { formatMessage } = intl;\n    const {\n        extension,\n        iconType,\n        id,\n        name,\n        nameWithMarkedQuery,\n        parentName,\n        sharedLink,\n        type,\n        updatedBy,\n        updatedDate,\n    } = itemData;\n    const updatedDateInMs = convertToMs(updatedDate);\n    const markedQueryMatches = [];\n    nameWithMarkedQuery.split(QUERY_SEPARATOR).forEach((element, index) =>\n        index % 2 === 0\n            ? markedQueryMatches.push(element)\n            : markedQueryMatches.push(\n                  <mark key={index} className=\"search-term\">\n                      {element}\n                  </mark>,\n              ),\n    );\n\n    let itemIconTitle;\n    switch (type) {\n        case 'web_link':\n            itemIconTitle = <FormattedMessage {...messages.bookmark} />;\n            break;\n        case 'file':\n            itemIconTitle = <FormattedMessage {...messages.file} />;\n            break;\n        case 'folder':\n            if (iconType === 'folder-collab') {\n                itemIconTitle = <FormattedMessage {...messages.collaboratedFolder} />;\n            } else if (iconType === 'folder-external') {\n                itemIconTitle = <FormattedMessage {...messages.externalFolder} />;\n            } else {\n                itemIconTitle = <FormattedMessage {...messages.personalFolder} />;\n            }\n            break;\n        default:\n            itemIconTitle = null;\n    }\n\n    let updatedText;\n    if (isToday(updatedDateInMs)) {\n        updatedText = formatMessage(messages.updatedTextToday, {\n            user: updatedBy,\n        });\n    } else if (isYesterday(updatedDateInMs)) {\n        updatedText = formatMessage(messages.updatedTextYesterday, {\n            user: updatedBy,\n        });\n    } else {\n        updatedText = formatMessage(messages.updatedText, {\n            date: updatedDateInMs,\n            user: updatedBy,\n        });\n    }\n\n    let href;\n    let targetProps = {};\n    const isBoxNote = extension === 'boxnote';\n\n    switch (type) {\n        case 'folder':\n            href = `/folder/${id}`;\n            break;\n        case 'web_link':\n            href = `/web_link/${id}`;\n            targetProps = { target: '_blank' };\n            break;\n        case 'file':\n            // shared link should take precedence over other link types\n            if (sharedLink) {\n                href = sharedLink;\n            } else if (isBoxNote) {\n                href = `/notes/${id}`;\n            } else {\n                href = `/file/${id}`;\n            }\n\n            if (isBoxNote) targetProps = { target: '_blank' };\n            break;\n        default:\n    }\n\n    const itemName =\n        href && shouldNavigateOnItemClick ? (\n            <Link onClick={e => e.stopPropagation()} className=\"item-name\" href={href} title={name} {...targetProps}>\n                {markedQueryMatches}\n            </Link>\n        ) : (\n            <span className=\"item-name\" title={name}>\n                {markedQueryMatches}\n            </span>\n        );\n\n    return (\n        <DatalistItem className={classNames('quick-search-item', className)} {...rest}>\n            <ItemIcon iconType={iconType} title={itemIconTitle} />\n\n            <span className=\"item-info\">\n                {itemName}\n\n                <span className=\"item-subtext\">\n                    {(parentName || parentFolderRenderer) && (\n                        <>\n                            <IconSmallFolder title={<FormattedMessage {...messages.parentFolder} />} />\n\n                            {parentFolderRenderer ? (\n                                parentFolderRenderer(itemData, closeDropdown)\n                            ) : (\n                                <span className=\"parent-folder\">{parentName}</span>\n                            )}\n\n                            <span className=\"separator\">·</span>\n                        </>\n                    )}\n\n                    <span className=\"txt-ellipsis\" title={updatedText}>\n                        {updatedText}\n                    </span>\n                </span>\n            </span>\n        </DatalistItem>\n    );\n};\n\nconst itemDataShape = {\n    extension: PropTypes.string,\n    iconType: PropTypes.string,\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    nameWithMarkedQuery: PropTypes.string.isRequired,\n    parentName: PropTypes.string.isRequired,\n    sharedLink: PropTypes.string,\n    type: PropTypes.string.isRequired,\n    updatedBy: PropTypes.string.isRequired,\n    updatedDate: PropTypes.number.isRequired,\n};\nQuickSearchItem.propTypes = {\n    closeDropdown: PropTypes.func,\n    className: PropTypes.string,\n    intl: intlShape.isRequired,\n    itemData: PropTypes.oneOfType([ImmutablePropTypes.recordOf(itemDataShape), PropTypes.shape(itemDataShape)])\n        .isRequired,\n    parentFolderRenderer: PropTypes.func,\n    shouldNavigateOnItemClick: PropTypes.bool,\n};\n\nexport default injectIntl(QuickSearchItem);\n"],"file":"QuickSearchItem.js"}