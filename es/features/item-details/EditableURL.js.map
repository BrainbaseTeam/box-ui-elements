{"version":3,"sources":["../../../src/features/item-details/EditableURL.js"],"names":["React","FormattedMessage","injectIntl","TextInput","commonMessages","messages","VALUE_MISSING","TYPE_MISMATCH","errorMap","requiredFieldError","invalidURLError","EditableURL","error","value","props","inputEl","validity","valid","valueMissing","setState","onValidURLChange","state","event","currentTarget","prevValue","formatMessage","intl","undefined","ref","url","handleBlur","handleChange","handleFocus","urlPlaceholder","Component","EditableURLBase"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AACA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,gBAAT,EAA2BC,UAA3B,QAA6C,YAA7C;AAEA,OAAOC,SAAP,MAAsB,uCAAtB;AACA,OAAOC,cAAP,MAA2B,uBAA3B;AAEA,OAAOC,QAAP,MAAqB,YAArB;AAEA,IAAMC,aAAa,GAAG,cAAtB;AACA,IAAMC,aAAa,GAAG,cAAtB;AAEA,IAAMC,QAAQ,+CACTF,aADS,EACO,oBAAC,gBAAD,EAAsBF,cAAc,CAACK,kBAArC,CADP,8BAETF,aAFS,EAEO,oBAAC,gBAAD,EAAsBH,cAAc,CAACM,eAArC,CAFP,aAAd;;IAgBMC,W;;;;;;;;;;;;;;;;;;4DACM;AACJC,MAAAA,KAAK,EAAE,EADH;AAEJC,MAAAA,KAAK,EAAE,MAAKC,KAAL,CAAWD;AAFd,K;;iEAcK,YAAY;AACrB,UAAI,CAAC,MAAKE,OAAV,EAAmB;AACf;AACH;;AAHoB,kCAKW,MAAKA,OAAL,CAAaC,QALxB;AAAA,UAKbC,KALa,yBAKbA,KALa;AAAA,UAKNC,YALM,yBAKNA,YALM;;AAMrB,UAAI,CAACD,KAAL,EAAY;AACR,cAAKE,QAAL,CAAc;AACVP,UAAAA,KAAK,EAAEM,YAAY,GAAGZ,aAAH,GAAmBC;AAD5B,SAAd;;AAGA;AACH;;AAED,YAAKO,KAAL,CAAWM,gBAAX,CAA4B,MAAKC,KAAL,CAAWR,KAAvC;AACH,K;;mEAEc,UAACS,KAAD,EAAmD;AAC9D,YAAKH,QAAL,CAAc;AAAEN,QAAAA,KAAK,EAAES,KAAK,CAACC,aAAN,CAAoBV;AAA7B,OAAd;AACH,K;;kEAEa,YAAY;AACtB,YAAKM,QAAL,CAAc;AAAEP,QAAAA,KAAK,EAAE;AAAT,OAAd;AACH,K;;;;;;;6CA/B+C;AAAA,UAApBY,SAAoB,QAA3BX,KAA2B;AAAA,UACpCA,KADoC,GAC1B,KAAKC,KADqB,CACpCD,KADoC;;AAE5C,UAAIW,SAAS,KAAKX,KAAlB,EAAyB;AACrB,aAAKM,QAAL,CAAc;AAAEN,UAAAA,KAAK,EAALA;AAAF,SAAd;AACH;AACJ;;;6BA4BQ;AAAA;;AAAA,UAEOY,aAFP,GAGD,KAAKX,KAHJ,CAEDY,IAFC,CAEOD,aAFP;AAAA,wBAIoB,KAAKJ,KAJzB;AAAA,UAIGT,KAJH,eAIGA,KAJH;AAAA,UAIUC,KAJV,eAIUA,KAJV;AAML,aACI,oBAAC,SAAD;AACI,QAAA,SAAS,EAAC,WADd;AAEI,QAAA,KAAK,EAAED,KAAK,GAAGJ,QAAQ,CAACI,KAAD,CAAX,GAAqBe,SAFrC;AAGI,QAAA,SAAS,MAHb;AAII,QAAA,QAAQ,EAAE,kBAAAC,GAAG,EAAI;AACb,UAAA,MAAI,CAACb,OAAL,GAAea,GAAf;AACH,SANL;AAOI,QAAA,UAAU,MAPd;AAQI,QAAA,KAAK,EAAEH,aAAa,CAACpB,QAAQ,CAACwB,GAAV,CARxB;AASI,QAAA,MAAM,EAAE,KAAKC,UATjB;AAUI,QAAA,QAAQ,EAAE,KAAKC,YAVnB;AAWI,QAAA,OAAO,EAAE,KAAKC,WAXlB;AAYI,QAAA,WAAW,EAAEP,aAAa,CAACpB,QAAQ,CAAC4B,cAAV,CAZ9B;AAaI,QAAA,IAAI,EAAC,KAbT;AAcI,QAAA,KAAK,EAAEpB;AAdX,QADJ;AAkBH;;;;EA/DqBb,KAAK,CAACkC,S;;AAkEhC,SAASvB,WAAW,IAAIwB,eAAxB,EAAyC7B,aAAzC,EAAwDC,aAAxD;AACA,eAAeL,UAAU,CAACS,WAAD,CAAzB","sourcesContent":["// @flow\nimport * as React from 'react';\nimport { FormattedMessage, injectIntl } from 'react-intl';\n\nimport TextInput from '../../components/text-input/TextInput';\nimport commonMessages from '../../common/messages';\n\nimport messages from './messages';\n\nconst VALUE_MISSING = 'valueMissing';\nconst TYPE_MISMATCH = 'typeMismatch';\n\nconst errorMap = {\n    [VALUE_MISSING]: <FormattedMessage {...commonMessages.requiredFieldError} />,\n    [TYPE_MISMATCH]: <FormattedMessage {...commonMessages.invalidURLError} />,\n};\n\ntype Props = {\n    intl: Object,\n    onValidURLChange: Function,\n    value: string,\n};\n\ntype State = {\n    error: '' | $Keys<typeof errorMap>,\n    value: string,\n};\n\nclass EditableURL extends React.Component<Props, State> {\n    state = {\n        error: '',\n        value: this.props.value,\n    };\n\n    componentDidUpdate({ value: prevValue }: Props) {\n        const { value } = this.props;\n        if (prevValue !== value) {\n            this.setState({ value });\n        }\n    }\n\n    inputEl: ?HTMLInputElement;\n\n    handleBlur = (): void => {\n        if (!this.inputEl) {\n            return;\n        }\n\n        const { valid, valueMissing } = this.inputEl.validity;\n        if (!valid) {\n            this.setState({\n                error: valueMissing ? VALUE_MISSING : TYPE_MISMATCH,\n            });\n            return;\n        }\n\n        this.props.onValidURLChange(this.state.value);\n    };\n\n    handleChange = (event: SyntheticEvent<HTMLInputElement>): void => {\n        this.setState({ value: event.currentTarget.value });\n    };\n\n    handleFocus = (): void => {\n        this.setState({ error: '' });\n    };\n\n    render() {\n        const {\n            intl: { formatMessage },\n        } = this.props;\n        const { error, value } = this.state;\n\n        return (\n            <TextInput\n                className=\"url-input\"\n                error={error ? errorMap[error] : undefined}\n                hideLabel\n                inputRef={ref => {\n                    this.inputEl = ref;\n                }}\n                isRequired\n                label={formatMessage(messages.url)}\n                onBlur={this.handleBlur}\n                onChange={this.handleChange}\n                onFocus={this.handleFocus}\n                placeholder={formatMessage(messages.urlPlaceholder)}\n                type=\"url\"\n                value={value}\n            />\n        );\n    }\n}\n\nexport { EditableURL as EditableURLBase, VALUE_MISSING, TYPE_MISMATCH };\nexport default injectIntl(EditableURL);\n"],"file":"EditableURL.js"}