{"version":3,"sources":["../../../src/features/shared-link-modal/EmailSharedLink.js"],"names":["React","Component","PropTypes","classNames","FormattedMessage","injectIntl","PillSelectorDropdown","ContactDatalistItem","TextArea","PrimaryButton","ModalActions","Button","parseEmails","commonMessages","messages","EmailSharedLink","props","contacts","state","pillSelectorInputValue","selectedOptions","filter","email","id","find","value","map","name","type","text","getContacts","trimmedValue","trim","setState","pillSelectorError","pills","option","index","slice","splice","formatMessage","intl","validator","invalidEmailError","pattern","test","event","preventDefault","sendEmail","emailMessage","length","enterAtLeastOneEmailError","emails","target","defaultEmailMessage","emailMessageProps","isExpanded","onExpand","onRequestClose","submitting","selectorOptions","getSelectorOptions","emailSharedLink","onFocus","handlePillSelectorInput","handlePillRemove","handlePillSelect","pillSelectorPlaceholder","validateForError","messageTitle","handleMessageChange","cancel","send","arrayOf","shape","string","oneOfType","number","isrequired","isRequired","object","any","func","bool","EmailSharedLinkBase"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { FormattedMessage, injectIntl } from 'react-intl';\n\nimport PillSelectorDropdown from '../../components/pill-selector-dropdown';\nimport ContactDatalistItem from '../../components/contact-datalist-item';\nimport TextArea from '../../components/text-area';\nimport PrimaryButton from '../../components/primary-button';\nimport { ModalActions } from '../../components/modal';\nimport Button from '../../components/button';\nimport parseEmails from '../../utils/parseEmails';\nimport commonMessages from '../../common/messages';\n\nimport messages from './messages';\n\nimport './EmailSharedLink.scss';\n\nclass EmailSharedLink extends Component {\n    static propTypes = {\n        contacts: PropTypes.arrayOf(\n            PropTypes.shape({\n                email: PropTypes.string,\n                id: PropTypes.oneOfType([PropTypes.number, PropTypes.string]).isrequired,\n                name: PropTypes.string.isRequired,\n                type: PropTypes.string.isRequired,\n            }),\n        ).isRequired,\n        defaultEmailMessage: PropTypes.string,\n        emailMessageProps: PropTypes.object,\n        intl: PropTypes.any,\n        getContacts: PropTypes.func.isRequired,\n        isExpanded: PropTypes.bool,\n        onExpand: PropTypes.func.isRequired,\n        onRequestClose: PropTypes.func.isRequired,\n        sendEmail: PropTypes.func.isRequired,\n        submitting: PropTypes.bool,\n    };\n\n    static defaultProps = {\n        emailMessageProps: {},\n    };\n\n    constructor(props) {\n        super(props);\n\n        const { defaultEmailMessage } = props;\n\n        this.state = {\n            pillSelectorError: '',\n            pillSelectorInputValue: '',\n            emailMessage: defaultEmailMessage || '',\n            selectedOptions: [],\n        };\n    }\n\n    getSelectorOptions = () => {\n        const { contacts } = this.props;\n        const { pillSelectorInputValue, selectedOptions } = this.state;\n\n        if (pillSelectorInputValue !== '') {\n            return contacts\n                .filter(\n                    // filter contacts who have already been selected\n                    ({ email, id }) => !selectedOptions.find(({ value }) => value === email || value === id),\n                )\n                .map(({ email, id, name, type }) => ({\n                    // map to standardized DatalistItem format\n                    // TODO: refactor this so inline conversions aren't required at every usage\n                    email,\n                    id,\n                    text: name,\n                    type,\n                    value: email || id, // if email doesn't exist, contact is a group, use id\n                }));\n        }\n\n        // return empty selector options if input value is empty\n        return [];\n    };\n\n    handlePillSelectorInput = value => {\n        const { getContacts } = this.props;\n\n        const trimmedValue = value.trim();\n\n        getContacts(trimmedValue);\n\n        // As user is typing, reset error\n        this.setState({\n            pillSelectorError: '',\n            pillSelectorInputValue: trimmedValue,\n        });\n    };\n\n    handlePillSelect = pills => {\n        this.setState({\n            selectedOptions: [...this.state.selectedOptions, ...pills],\n        });\n    };\n\n    handlePillRemove = (option, index) => {\n        const selectedOptions = this.state.selectedOptions.slice();\n        selectedOptions.splice(index, 1);\n        this.setState({ selectedOptions });\n    };\n\n    validateForError = text => {\n        const {\n            intl: { formatMessage },\n        } = this.props;\n        let pillSelectorError = '';\n\n        if (text && !this.validator(text)) {\n            pillSelectorError = formatMessage(commonMessages.invalidEmailError);\n        }\n\n        this.setState({ pillSelectorError });\n    };\n\n    validator = text => {\n        // email input validation\n        const pattern = /^[^\\s<>@,]+@[^\\s<>@,/\\\\]+\\.[^\\s<>@,]+$/i;\n        return pattern.test(text);\n    };\n\n    sendEmail = event => {\n        event.preventDefault();\n\n        const {\n            intl: { formatMessage },\n            sendEmail,\n        } = this.props;\n        const { selectedOptions, emailMessage, pillSelectorError } = this.state;\n\n        if (pillSelectorError !== '') {\n            return;\n        }\n\n        if (selectedOptions.length === 0) {\n            // Block submission if no pills are selected\n            this.setState({\n                pillSelectorError: formatMessage(messages.enterAtLeastOneEmailError),\n            });\n            return;\n        }\n\n        sendEmail({\n            emails: selectedOptions.map(({ value }) => value),\n            emailMessage,\n        });\n    };\n\n    handleMessageChange = event => {\n        this.setState({ emailMessage: event.target.value });\n    };\n\n    render() {\n        const { pillSelectorError, selectedOptions, emailMessage } = this.state;\n        const {\n            emailMessageProps,\n            intl: { formatMessage },\n            isExpanded,\n            onExpand,\n            onRequestClose,\n            submitting,\n        } = this.props;\n\n        const selectorOptions = this.getSelectorOptions();\n\n        return (\n            <form\n                onSubmit={this.sendEmail}\n                className={classNames('email-shared-link', {\n                    'is-expanded': isExpanded,\n                })}\n            >\n                <PillSelectorDropdown\n                    allowCustomPills\n                    error={pillSelectorError}\n                    label={<FormattedMessage {...messages.emailSharedLink} />}\n                    inputProps={{ onFocus: onExpand, ...emailMessageProps }}\n                    onInput={this.handlePillSelectorInput}\n                    onRemove={this.handlePillRemove}\n                    onSelect={this.handlePillSelect}\n                    parseItems={parseEmails}\n                    placeholder={formatMessage(commonMessages.pillSelectorPlaceholder)}\n                    selectedOptions={selectedOptions}\n                    selectorOptions={selectorOptions}\n                    validateForError={this.validateForError}\n                    validator={this.validator}\n                >\n                    {selectorOptions.map(({ email, text, value }) => (\n                        <ContactDatalistItem key={value} name={text} subtitle={email} />\n                    ))}\n                </PillSelectorDropdown>\n                <TextArea\n                    isRequired\n                    label={<FormattedMessage {...messages.messageTitle} />}\n                    onChange={this.handleMessageChange}\n                    rows={3}\n                    value={emailMessage}\n                />\n                {isExpanded && (\n                    <ModalActions>\n                        <Button isDisabled={submitting} onClick={onRequestClose} type=\"button\">\n                            <FormattedMessage {...commonMessages.cancel} />\n                        </Button>\n                        <PrimaryButton isDisabled={submitting} isLoading={submitting} type=\"submit\">\n                            <FormattedMessage {...commonMessages.send} />\n                        </PrimaryButton>\n                    </ModalActions>\n                )}\n            </form>\n        );\n    }\n}\n\nexport { EmailSharedLink as EmailSharedLinkBase };\nexport default injectIntl(EmailSharedLink);\n"],"file":"EmailSharedLink.js"}