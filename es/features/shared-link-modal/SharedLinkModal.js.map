{"version":3,"sources":["../../../src/features/shared-link-modal/SharedLinkModal.js"],"names":["React","Component","FormattedMessage","Button","Modal","ModalActions","commonMessages","SharedLink","EmailSharedLink","messages","accessLevelPropType","allowedAccessLevelsPropType","permissionLevelPropType","SharedLinkModal","isEmailSharedLinkExpanded","setState","props","accessLevel","accessMenuButtonProps","allowedAccessLevels","canRemoveLink","changeAccessLevel","changePermissionLevel","copyButtonProps","enterpriseName","expiration","isDownloadAllowed","isEditAllowed","isPreviewAllowed","itemType","onCopySuccess","onSettingsClick","permissionLevel","removeLink","removeLinkButtonProps","sharedLink","submitting","contacts","defaultEmailMessage","emailMessageProps","getContacts","onRequestClose","sendEmail","state","handleEmailSharedLinkExpand","isOpen","itemName","modalProps","undefined","sharedLinkModalTitle","renderSharedLink","renderEmailSharedLink","close"],"mappings":"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","sourcesContent":["/* @flow */\nimport React, { Component } from 'react';\nimport { FormattedMessage } from 'react-intl';\n\nimport Button from '../../components/button';\nimport { Modal, ModalActions } from '../../components/modal';\nimport commonMessages from '../../common/messages';\n\nimport SharedLink from './SharedLink';\nimport EmailSharedLink from './EmailSharedLink';\nimport messages from './messages';\nimport { accessLevelPropType, allowedAccessLevelsPropType, permissionLevelPropType } from './propTypes';\n\ntype Props = {\n    /** Current access level for this item; one of 'peopleWithTheLink' | 'peopleInYourCompany' | 'peopleInThisItem' */\n    accessLevel?: accessLevelPropType,\n    accessMenuButtonProps?: Object,\n    /** The selectable access levels. Should be an object { peopleWithTheLink: true/false, peopleInYourCompany: true/false, peopleInThisItem: true/false } */\n    allowedAccessLevels?: allowedAccessLevelsPropType,\n    /** Determines whether or not user is allowed to remove shared link */\n    canRemoveLink?: boolean,\n    /** Function that changes access level; (newAccessLevel: 'peopleWithTheLink' | 'peopleInYourCompany' | 'peopleInThisItem') => void */\n    changeAccessLevel: Function,\n    /** Function that changes permission level; (newPermissionLevel: 'canView' | 'canEdit') => void. If not provided, then the permission menu won't show up. */\n    changePermissionLevel?: Function,\n    /** An array of contacts for the pill selector dropdown. If not provided, \"Email Shared Link\" section will not appear. */\n    contacts?: Array<{\n        email?: string,\n        id: number | string,\n        name: string,\n        type: string,\n    }>,\n    copyButtonProps?: Object,\n    /** Default \"send shared link\" email message */\n    defaultEmailMessage?: string,\n    emailMessageProps?: Object,\n    enterpriseName?: string,\n    /** Timestamp for shared link expiration date. If not provided, expiration icon will not be shown. */\n    expiration?: number,\n    /** Handler function whenever the user types to fetch contacts. If not provided, \"Email Shared Link\" section will not appear. */\n    getContacts?: Function,\n    isDownloadAllowed?: boolean,\n    isEditAllowed?: boolean,\n    isOpen?: boolean,\n    isPreviewAllowed?: boolean,\n    itemName: string,\n    itemType: 'folder' | 'file' | 'weblink',\n    modalProps?: Object,\n    onCopySuccess?: Function,\n    onRequestClose: Function,\n    /** Handler for clicks on the settings icon. If not provided, the settings icon won't be rendered. */\n    onSettingsClick?: Function,\n    /** Current permission level for this item; one of 'canView' | 'canEdit'. If not provided, then the permission menu won't show up. */\n    permissionLevel?: permissionLevelPropType,\n    /** Function that removes the shared link; () => void */\n    removeLink: Function,\n    removeLinkButtonProps?: Object,\n    /** Function to send the shared link to the entered emails. Calls function with an object in the format { emails: Array<string>, emailMessage: string }.\n     *  If not provided, \"Email Shared Link\" section will not appear. */\n    sendEmail?: Function,\n    /** Share URL of the item */\n    sharedLink: string,\n    /** Whether or not a request is in progress */\n    submitting?: boolean,\n};\n\ntype State = {\n    isEmailSharedLinkExpanded: boolean,\n};\n\nclass SharedLinkModal extends Component<Props, State> {\n    state = {\n        isEmailSharedLinkExpanded: false,\n    };\n\n    handleEmailSharedLinkExpand = () => {\n        this.setState({ isEmailSharedLinkExpanded: true });\n    };\n\n    renderSharedLink() {\n        const {\n            accessLevel,\n            accessMenuButtonProps,\n            allowedAccessLevels,\n            canRemoveLink,\n            changeAccessLevel,\n            changePermissionLevel,\n            copyButtonProps,\n            enterpriseName,\n            expiration,\n            isDownloadAllowed,\n            isEditAllowed,\n            isPreviewAllowed,\n            itemType,\n            onCopySuccess,\n            onSettingsClick,\n            permissionLevel,\n            removeLink,\n            removeLinkButtonProps,\n            sharedLink,\n            submitting,\n        } = this.props;\n        return (\n            <SharedLink\n                accessLevel={accessLevel}\n                accessMenuButtonProps={accessMenuButtonProps}\n                allowedAccessLevels={allowedAccessLevels}\n                canRemoveLink={canRemoveLink}\n                changeAccessLevel={changeAccessLevel}\n                changePermissionLevel={changePermissionLevel}\n                copyButtonProps={copyButtonProps}\n                enterpriseName={enterpriseName}\n                expiration={expiration}\n                isDownloadAllowed={isDownloadAllowed}\n                isEditAllowed={isEditAllowed}\n                isPreviewAllowed={isPreviewAllowed}\n                itemType={itemType}\n                onCopySuccess={onCopySuccess}\n                onSettingsClick={onSettingsClick}\n                permissionLevel={permissionLevel}\n                removeLink={removeLink}\n                removeLinkButtonProps={removeLinkButtonProps}\n                sharedLink={sharedLink}\n                submitting={submitting}\n            />\n        );\n    }\n\n    renderEmailSharedLink() {\n        const {\n            contacts,\n            defaultEmailMessage,\n            emailMessageProps,\n            getContacts,\n            onRequestClose,\n            sendEmail,\n            submitting,\n        } = this.props;\n\n        if (!getContacts || !contacts || !sendEmail) {\n            return null;\n        }\n\n        return (\n            <EmailSharedLink\n                contacts={contacts}\n                defaultEmailMessage={defaultEmailMessage}\n                emailMessageProps={emailMessageProps}\n                getContacts={getContacts}\n                isExpanded={this.state.isEmailSharedLinkExpanded}\n                sendEmail={sendEmail}\n                onRequestClose={onRequestClose}\n                submitting={submitting}\n                onExpand={this.handleEmailSharedLinkExpand}\n            />\n        );\n    }\n\n    render() {\n        const { isOpen, itemName, modalProps, onRequestClose, submitting } = this.props;\n        const { isEmailSharedLinkExpanded } = this.state;\n\n        return (\n            <Modal\n                className=\"shared-link-modal\"\n                focusElementSelector=\".shared-link-container input\"\n                isOpen={isOpen}\n                onRequestClose={submitting ? undefined : onRequestClose}\n                title={\n                    <FormattedMessage\n                        {...messages.sharedLinkModalTitle}\n                        values={{\n                            itemName,\n                        }}\n                    />\n                }\n                {...modalProps}\n            >\n                {this.renderSharedLink()}\n                <hr />\n                {this.renderEmailSharedLink()}\n                {!isEmailSharedLinkExpanded && (\n                    <ModalActions>\n                        <Button isDisabled={submitting} onClick={onRequestClose} type=\"button\">\n                            <FormattedMessage {...commonMessages.close} />\n                        </Button>\n                    </ModalActions>\n                )}\n            </Modal>\n        );\n    }\n}\n\nexport default SharedLinkModal;\n"],"file":"SharedLinkModal.js"}