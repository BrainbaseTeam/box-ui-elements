{"version":3,"sources":["../../../../src/features/query-bar/components/ColumnButton.js"],"names":["React","FormattedMessage","classNames","Flyout","Overlay","Button","MenuToggle","IconMetadataColumns","ColumnButtonOverlay","messages","ColumnButton","props","setState","isColumnMenuOpen","state","columns","reduce","total","column","isShown","template","onColumnChange","numberOfHiddenColumns","getNumberOfHiddenColumns","buttonClasses","columnsButtonText","count","columnsHiddenButtonText","onClose","onOpen","undefined","toggleColumnButton","Component"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AACA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,gBAAT,QAAiC,YAAjC;AACA,OAAOC,UAAP,MAAuB,YAAvB;AAEA,SAASC,MAAT,EAAiBC,OAAjB,QAAgC,4BAAhC;AACA,OAAOC,MAAP,MAAmB,mCAAnB;AACA,OAAOC,UAAP,MAAuB,8CAAvB;AACA,OAAOC,mBAAP,MAAgC,kDAAhC;AACA,OAAOC,mBAAP,MAAgC,uBAAhC;AAKA,OAAOC,QAAP,MAAqB,aAArB;;IAYMC,Y;;;;;AACF,wBAAYC,KAAZ,EAA0B;AAAA;;AAAA;;AACtB,sFAAMA,KAAN;;AADsB,8DAOhB,YAAM;AACZ,YAAKC,QAAL,CAAc;AACVC,QAAAA,gBAAgB,EAAE;AADR,OAAd;AAGH,KAXyB;;AAAA,6DAajB,YAAM;AACX,YAAKD,QAAL,CAAc;AACVC,QAAAA,gBAAgB,EAAE;AADR,OAAd;AAGH,KAjByB;;AAAA,yEAmBL,YAAM;AACvB,YAAKD,QAAL,CAAc;AAAEC,QAAAA,gBAAgB,EAAE,CAAC,MAAKC,KAAL,CAAWD;AAAhC,OAAd;AACH,KArByB;;AAAA,+EAuBC,YAAM;AAAA,UACrBE,OADqB,GACT,MAAKJ,KADI,CACrBI,OADqB;AAG7B,aAAOA,OAAO,GACRA,OAAO,CAACC,MAAR,CAAe,UAACC,KAAD,EAAQC,MAAR,EAAmB;AAC9B,YAAI,CAACA,MAAM,CAACC,OAAZ,EAAqB;AACjB,iBAAOF,KAAK,GAAG,CAAf;AACH;;AACD,eAAOA,KAAP;AACH,OALD,EAKG,CALH,CADQ,GAOR,CAPN;AAQH,KAlCyB;;AAEtB,UAAKH,KAAL,GAAa;AACTD,MAAAA,gBAAgB,EAAE;AADT,KAAb;AAFsB;AAKzB;;;;6BA+BQ;AAAA,wBACyC,KAAKF,KAD9C;AAAA,UACGS,QADH,eACGA,QADH;AAAA,UACaL,OADb,eACaA,OADb;AAAA,UACsBM,cADtB,eACsBA,cADtB;AAAA,UAEGR,gBAFH,GAEwB,KAAKC,KAF7B,CAEGD,gBAFH;AAGL,UAAMS,qBAAqB,GAAG,KAAKC,wBAAL,EAA9B;AAEA,UAAMC,aAAa,GAAGtB,UAAU,CAAC,kBAAD,EAAqBoB,qBAAqB,KAAK,CAA1B,GAA8B,WAA9B,GAA4C,EAAjE,CAAhC;AAEA,UAAIG,iBAAJ;;AACA,UAAIH,qBAAqB,KAAK,CAA9B,EAAiC;AAC7BG,QAAAA,iBAAiB,GAAG,oBAAC,gBAAD,EAAsBhB,QAAQ,CAACgB,iBAA/B,CAApB;AACH,OAFD,MAEO;AACHA,QAAAA,iBAAiB,GACb,oBAAC,gBAAD;AACI,UAAA,MAAM,EAAE;AACJC,YAAAA,KAAK,EAAEJ;AADH;AADZ,WAIQb,QAAQ,CAACkB,uBAJjB,EADJ;AAQH;;AAED,aACI,oBAAC,MAAD;AACI,QAAA,SAAS,EAAC,kCADd;AAEI,QAAA,YAAY,MAFhB;AAGI,QAAA,mBAAmB,MAHvB;AAII,QAAA,OAAO,EAAE,KAAKC,OAJlB;AAKI,QAAA,MAAM,EAAE,KAAKC,MALjB;AAMI,QAAA,QAAQ,EAAC;AANb,SAQI,oBAAC,MAAD;AACI,QAAA,SAAS,EAAEL,aADf;AAEI,QAAA,UAAU,EAAEJ,QAAQ,KAAKU,SAF7B;AAGI,QAAA,OAAO,EAAE,KAAKC,kBAHlB;AAII,QAAA,IAAI,EAAC;AAJT,SAMI,oBAAC,UAAD,QACI,oBAAC,mBAAD,OADJ,EAEI;AAAM,QAAA,SAAS,EAAC;AAAhB,SAAgCN,iBAAhC,CAFJ,CANJ,CARJ,EAoBI,oBAAC,OAAD,QACKZ,gBAAgB,GACb,oBAAC,mBAAD;AAAqB,QAAA,OAAO,EAAEE,OAA9B;AAAuC,QAAA,cAAc,EAAEM;AAAvD,QADa,GAGb,gCAJR,CApBJ,CADJ;AA8BH;;;;EAxFsBrB,KAAK,CAACgC,S;;AA2FjC,eAAetB,YAAf","sourcesContent":["// @flow\nimport * as React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport classNames from 'classnames';\n\nimport { Flyout, Overlay } from '../../../components/flyout';\nimport Button from '../../../components/button/Button';\nimport MenuToggle from '../../../components/dropdown-menu/MenuToggle';\nimport IconMetadataColumns from '../../../icons/metadata-view/IconMetadataColumns';\nimport ColumnButtonOverlay from './ColumnButtonOverlay';\n\nimport type { ColumnType } from '../flowTypes';\nimport type { MetadataTemplate } from '../../../common/types/metadata';\n\nimport messages from '../messages';\n\ntype State = {\n    isColumnMenuOpen: boolean,\n};\n\ntype Props = {\n    columns?: Array<ColumnType>,\n    onColumnChange?: (columnTypes: Array<ColumnType>) => void,\n    template?: MetadataTemplate,\n};\n\nclass ColumnButton extends React.Component<Props, State> {\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            isColumnMenuOpen: false,\n        };\n    }\n\n    onClose = () => {\n        this.setState({\n            isColumnMenuOpen: false,\n        });\n    };\n\n    onOpen = () => {\n        this.setState({\n            isColumnMenuOpen: true,\n        });\n    };\n\n    toggleColumnButton = () => {\n        this.setState({ isColumnMenuOpen: !this.state.isColumnMenuOpen });\n    };\n\n    getNumberOfHiddenColumns = () => {\n        const { columns } = this.props;\n\n        return columns\n            ? columns.reduce((total, column) => {\n                  if (!column.isShown) {\n                      return total + 1;\n                  }\n                  return total;\n              }, 0)\n            : 0;\n    };\n\n    render() {\n        const { template, columns, onColumnChange } = this.props;\n        const { isColumnMenuOpen } = this.state;\n        const numberOfHiddenColumns = this.getNumberOfHiddenColumns();\n\n        const buttonClasses = classNames('query-bar-button', numberOfHiddenColumns !== 0 ? 'is-active' : '');\n\n        let columnsButtonText;\n        if (numberOfHiddenColumns === 0) {\n            columnsButtonText = <FormattedMessage {...messages.columnsButtonText} />;\n        } else {\n            columnsButtonText = (\n                <FormattedMessage\n                    values={{\n                        count: numberOfHiddenColumns,\n                    }}\n                    {...messages.columnsHiddenButtonText}\n                />\n            );\n        }\n\n        return (\n            <Flyout\n                className=\"query-bar-column-dropdown-flyout\"\n                closeOnClick\n                closeOnClickOutside\n                onClose={this.onClose}\n                onOpen={this.onOpen}\n                position=\"bottom-right\"\n            >\n                <Button\n                    className={buttonClasses}\n                    isDisabled={template === undefined}\n                    onClick={this.toggleColumnButton}\n                    type=\"button\"\n                >\n                    <MenuToggle>\n                        <IconMetadataColumns />\n                        <span className=\"button-label\">{columnsButtonText}</span>\n                    </MenuToggle>\n                </Button>\n\n                <Overlay>\n                    {isColumnMenuOpen ? (\n                        <ColumnButtonOverlay columns={columns} onColumnChange={onColumnChange} />\n                    ) : (\n                        <div />\n                    )}\n                </Overlay>\n            </Flyout>\n        );\n    }\n}\n\nexport default ColumnButton;\n"],"file":"ColumnButton.js"}