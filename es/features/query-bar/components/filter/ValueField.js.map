{"version":3,"sources":["../../../../../src/features/query-bar/components/filter/ValueField.js"],"names":["React","FormattedMessage","isNaN","DatePicker","SingleSelectField","MultiSelectField","TextInput","DATE","ENUM","FLOAT","MULTI_SELECT","NUMBER","STRING","VALUE","messages","getDateValue","selectedValues","length","undefined","value","date","Date","valueOf","Error","getStringValue","ValueField","error","onChange","valueOptions","valueType","onInputChange","e","target","day","month","year","selectValuePlaceholderText","map","option"],"mappings":"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","sourcesContent":["// @flow\nimport * as React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport isNaN from 'lodash/isNaN';\n\nimport DatePicker from '../../../../components/date-picker';\nimport SingleSelectField from '../../../../components/select-field/SingleSelectField';\nimport MultiSelectField from '../../../../components/select-field/MultiSelectField';\nimport TextInput from '../../../../components/text-input';\nimport { DATE, ENUM, FLOAT, MULTI_SELECT, NUMBER, STRING, VALUE } from '../../constants';\nimport messages from '../../messages';\nimport type { ConditionValueType } from '../../flowTypes';\n\nimport '../../styles/Condition.scss';\n\ntype Props = {\n    error?: React.Node,\n    onChange: (value: Array<ConditionValueType>) => void,\n    selectedValues: Array<ConditionValueType>,\n    valueOptions: Array<Object>,\n    valueType: string,\n};\n\nconst getDateValue = selectedValues => {\n    if (selectedValues.length === 0 || selectedValues[0] === null) {\n        return undefined;\n    }\n\n    const value = selectedValues[0];\n    const date = new Date(value);\n    if (!isNaN(date.valueOf())) {\n        return date;\n    }\n\n    throw new Error('Expected Date');\n};\n\nconst getStringValue = selectedValues => {\n    if (selectedValues.length === 0) {\n        return undefined;\n    }\n\n    const value = selectedValues[0];\n    if (typeof value === 'string') {\n        return value !== '' ? value : null;\n    }\n\n    throw new Error('Expected string');\n};\n\nconst ValueField = ({ error, onChange, selectedValues, valueOptions, valueType }: Props) => {\n    const value = selectedValues.length > 0 ? selectedValues[0] : '';\n    const onInputChange = e => {\n        return e.target.value !== '' ? onChange([e.target.value]) : onChange([]);\n    };\n\n    switch (valueType) {\n        case STRING:\n        case NUMBER:\n        case FLOAT:\n            return (\n                <div className=\"filter-dropdown-text-field-container\">\n                    <TextInput\n                        error={error}\n                        errorPosition=\"middle-left\"\n                        hideLabel\n                        label=\"Text Input\"\n                        name=\"text\"\n                        onChange={onInputChange}\n                        placeholder={`Enter ${valueType === STRING ? 'value' : 'a number'}`}\n                        value={value}\n                    />\n                </div>\n            );\n        case DATE:\n            return (\n                <div className=\"filter-dropdown-date-field-container\">\n                    <DatePicker\n                        displayFormat={{\n                            day: 'numeric',\n                            month: 'long',\n                            year: 'numeric',\n                        }}\n                        hideLabel\n                        label=\"Date\"\n                        name=\"datepicker\"\n                        onChange={date => onChange([date])}\n                        placeholder=\"Date\"\n                        value={getDateValue(selectedValues)}\n                    />\n                </div>\n            );\n        case ENUM:\n            return (\n                <SingleSelectField\n                    fieldType={VALUE}\n                    onChange={e => onChange([e.value])}\n                    options={valueOptions}\n                    placeholder={<FormattedMessage {...messages.selectValuePlaceholderText} />}\n                    selectedValue={getStringValue(selectedValues)}\n                />\n            );\n        case MULTI_SELECT:\n            return (\n                <MultiSelectField\n                    fieldType={VALUE}\n                    onChange={e => onChange(e.map(option => option.value))}\n                    options={valueOptions}\n                    placeholder={<FormattedMessage {...messages.selectValuePlaceholderText} />}\n                    selectedValues={selectedValues}\n                />\n            );\n        default:\n            return null;\n    }\n};\n\nexport default ValueField;\n"],"file":"ValueField.js"}