{"version":3,"sources":["../../../../../src/features/query-bar/components/filter/FilterButton.js"],"names":["React","FormattedMessage","classNames","uniqueId","cloneDeep","IconMetadataFilter","Condition","Button","PrimaryButton","MenuToggle","Flyout","Overlay","AND","OR","COLUMN_OPERATORS","messages","FilterButton","props","setState","isMenuOpen","state","conditionID","columns","length","firstColumn","operator","type","key","columnId","id","values","Error","newCondition","createCondition","transientConditions","hasUserSubmitted","onFilterChange","areAllValid","conditionId","updateCondition","newConditionIndex","conditionToUpdate","find","currentCondition","index","newConditions","condition","column","c","value","updateConditionState","option","convert","str","selectedConnector","conditionsAfterDeletion","filter","conditionIndex","forEach","event","target","classList","contains","parentNode","conditions","prevProps","prevState","prevIsMenuOpen","wasFlyoutOpened","hasUnsavedConditions","shouldSetInitialCondition","numberOfConditions","buttonClasses","isFilterDisabled","shouldClose","onClose","onOpen","toggleButton","filtersButtonText","multipleFiltersButtonText","number","noFiltersAppliedText","map","deleteCondition","handleColumnChange","handleConnectorChange","handleOperatorChange","handleValueChange","addFilter","addFilterButtonText","applyFilters","applyFiltersButtonText","Component"],"mappings":"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","sourcesContent":["// @flow\nimport * as React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport classNames from 'classnames';\nimport uniqueId from 'lodash/uniqueId';\nimport cloneDeep from 'lodash/cloneDeep';\n\nimport IconMetadataFilter from '../../../../icons/metadata-view/IconMetadataFilter';\nimport Condition from './Condition';\nimport Button from '../../../../components/button/Button';\nimport PrimaryButton from '../../../../components/primary-button/PrimaryButton';\nimport MenuToggle from '../../../../components/dropdown-menu/MenuToggle';\nimport { Flyout, Overlay } from '../../../../components/flyout';\nimport { AND, OR, COLUMN_OPERATORS } from '../../constants';\n\nimport messages from '../../messages';\n\nimport type {\n    ColumnType,\n    ConditionType,\n    ConditionValueType,\n    ConnectorType,\n    OperatorType,\n    OptionType,\n} from '../../flowTypes';\n\ntype State = {\n    hasUserSubmitted: boolean,\n    isMenuOpen: boolean,\n    selectedConnector: ConnectorType,\n    transientConditions: Array<Object>,\n};\n\ntype Props = {\n    columns?: Array<ColumnType>,\n    conditions: Array<ConditionType>,\n    onFilterChange?: Function,\n};\n\nclass FilterButton extends React.Component<Props, State> {\n    constructor(props: Props) {\n        super(props);\n\n        this.state = {\n            hasUserSubmitted: false,\n            isMenuOpen: false,\n            selectedConnector: AND,\n            transientConditions: cloneDeep(this.props.conditions),\n        };\n    }\n\n    componentDidUpdate(prevProps: Props, prevState: State) {\n        const { columns, conditions } = this.props;\n        const { isMenuOpen, transientConditions } = this.state;\n        const { isMenuOpen: prevIsMenuOpen } = prevState;\n        const wasFlyoutOpened = isMenuOpen && !prevIsMenuOpen;\n        if (wasFlyoutOpened) {\n            const hasUnsavedConditions = transientConditions.length > 0;\n            const shouldSetInitialCondition = conditions.length === 0;\n\n            if (!hasUnsavedConditions) {\n                if (shouldSetInitialCondition) {\n                    const newConditions = columns && columns.length === 0 ? [] : [this.createCondition()];\n                    this.setState({\n                        transientConditions: newConditions,\n                    });\n                } else {\n                    this.setState({\n                        transientConditions: cloneDeep(this.props.conditions),\n                    });\n                }\n            }\n        }\n    }\n\n    onClose = () => {\n        this.setState({\n            isMenuOpen: false,\n        });\n    };\n\n    onOpen = () => {\n        this.setState({ isMenuOpen: true });\n    };\n\n    toggleButton = () => {\n        this.setState({ isMenuOpen: !this.state.isMenuOpen });\n    };\n\n    createCondition = () => {\n        const conditionID = uniqueId();\n        const { columns } = this.props;\n        if (columns && columns.length > 0) {\n            const firstColumn = columns[0];\n            const operator = COLUMN_OPERATORS[firstColumn.type][0].key;\n\n            return {\n                columnId: firstColumn.id,\n                id: conditionID,\n                operator,\n                values: [],\n            };\n        }\n        throw new Error('Columns Required');\n    };\n\n    addFilter = () => {\n        const newCondition = this.createCondition();\n        this.setState({\n            transientConditions: [...this.state.transientConditions, newCondition],\n            hasUserSubmitted: false,\n        });\n    };\n\n    applyFilters = () => {\n        const { onFilterChange } = this.props;\n        const { transientConditions } = this.state;\n\n        const areAllValid = this.areAllValid();\n\n        if (areAllValid) {\n            if (onFilterChange) {\n                onFilterChange(transientConditions);\n            }\n            this.setState({\n                isMenuOpen: false,\n                transientConditions: [],\n                hasUserSubmitted: false,\n            });\n        } else {\n            this.setState({\n                hasUserSubmitted: true,\n            });\n        }\n    };\n\n    updateConditionState = (conditionId: string, updateCondition: Function) => {\n        const { transientConditions } = this.state;\n        let newConditionIndex = 0;\n        const conditionToUpdate = transientConditions.find((currentCondition, index) => {\n            newConditionIndex = index;\n            return currentCondition.id === conditionId;\n        });\n\n        let newCondition = { ...conditionToUpdate };\n        newCondition = updateCondition(newCondition);\n\n        const newConditions = cloneDeep(transientConditions);\n        newConditions[newConditionIndex] = newCondition;\n\n        this.setState({\n            transientConditions: newConditions,\n        });\n    };\n\n    handleColumnChange = (condition: ConditionType, columnId: string) => {\n        const { columns } = this.props;\n        const { transientConditions } = this.state;\n        let newConditionIndex = 0;\n        const conditionToUpdate = transientConditions.find((currentCondition, index) => {\n            newConditionIndex = index;\n            return currentCondition.id === condition.id;\n        });\n\n        const column = columns && columns.find(c => c.id === columnId);\n        if (!column) {\n            throw new Error('Invalid Column.id');\n        }\n\n        const type = column && column.type;\n\n        const operator = COLUMN_OPERATORS[type][0].key;\n\n        const newCondition = {\n            ...conditionToUpdate,\n            columnId,\n            operator,\n            values: [],\n        };\n\n        const newConditions = cloneDeep(transientConditions);\n        newConditions[newConditionIndex] = newCondition;\n\n        this.setState({\n            transientConditions: newConditions,\n        });\n    };\n\n    handleOperatorChange = (conditionId: string, value: OperatorType) => {\n        this.updateConditionState(conditionId, condition => {\n            condition.operator = value;\n            return condition;\n        });\n    };\n\n    handleValueChange = (conditionId: string, values: Array<ConditionValueType>) => {\n        this.updateConditionState(conditionId, condition => {\n            condition.values = values;\n            return condition;\n        });\n    };\n\n    handleConnectorChange = (option: OptionType) => {\n        const convert = str => {\n            switch (str) {\n                case AND:\n                    return AND;\n                case OR:\n                    return OR;\n                default:\n                    throw new Error('Invalid connector');\n            }\n        };\n\n        this.setState({\n            selectedConnector: convert(option.value),\n        });\n    };\n\n    deleteCondition = (index: number) => {\n        const { transientConditions } = this.state;\n\n        const conditionsAfterDeletion = transientConditions.filter((condition, conditionIndex) => {\n            return conditionIndex !== index;\n        });\n\n        this.setState({\n            transientConditions: conditionsAfterDeletion,\n        });\n    };\n\n    areAllValid = () => {\n        const { transientConditions } = this.state;\n        let areAllValid = true;\n        transientConditions.forEach(condition => {\n            if (condition.values.length === 0) {\n                areAllValid = false;\n            }\n        });\n        return areAllValid;\n    };\n\n    // Should close when all the conditions have a value set and the apply button is pressed.\n    shouldClose = (event?: SyntheticEvent<>) => {\n        // The current approach assumes that the Apply button contains at most one child element.\n        const areAllValid = this.areAllValid();\n\n        if (event && event.target && areAllValid) {\n            if (\n                (event.target: window.HTMLButtonElement).classList.contains('apply-filters-button') ||\n                (event.target: window.HTMLSpanElement).parentNode.classList.contains('apply-filters-button')\n            ) {\n                return true;\n            }\n        }\n        return false;\n    };\n\n    render() {\n        const { columns, conditions } = this.props;\n        const { transientConditions, hasUserSubmitted, isMenuOpen, selectedConnector } = this.state;\n\n        const numberOfConditions = conditions.length;\n        const areAllValid = this.areAllValid();\n\n        const buttonClasses = classNames(\n            'query-bar-button',\n            numberOfConditions !== 0 && areAllValid ? 'is-active' : '',\n        );\n\n        const isFilterDisabled = !columns || columns.length === 0;\n\n        return (\n            <Flyout\n                className=\"query-bar-filter-dropdown-flyout\"\n                closeOnClick\n                closeOnClickOutside\n                closeOnClickPredicate={this.shouldClose}\n                onClose={this.onClose}\n                onOpen={this.onOpen}\n                overlayIsVisible={isMenuOpen}\n                portaledClasses={['pika-single']} /* Element in DatePicker package  */\n                position=\"bottom-right\"\n                shouldDefaultFocus\n            >\n                <Button\n                    className={buttonClasses}\n                    isDisabled={isFilterDisabled}\n                    onClick={this.toggleButton}\n                    type=\"button\"\n                >\n                    <MenuToggle>\n                        <IconMetadataFilter className=\"button-icon\" />\n                        <span className=\"button-label\">\n                            {numberOfConditions === 0 ? (\n                                <FormattedMessage {...messages.filtersButtonText} />\n                            ) : (\n                                <FormattedMessage\n                                    {...messages.multipleFiltersButtonText}\n                                    values={{\n                                        number: numberOfConditions,\n                                    }}\n                                />\n                            )}\n                        </span>\n                    </MenuToggle>\n                </Button>\n\n                <Overlay>\n                    {isMenuOpen ? (\n                        <div className=\"filter-button-dropdown\">\n                            <div className=\"filter-button-dropdown-header\">\n                                {transientConditions.length === 0 ? (\n                                    <FormattedMessage {...messages.noFiltersAppliedText} />\n                                ) : null}\n                                {transientConditions.map((condition, index) => {\n                                    return (\n                                        <Condition\n                                            key={`metadata-view-filter-item-${condition.id}`}\n                                            hasUserSubmitted={hasUserSubmitted}\n                                            columns={columns}\n                                            condition={condition}\n                                            deleteCondition={this.deleteCondition}\n                                            index={index}\n                                            onColumnChange={this.handleColumnChange}\n                                            onConnectorChange={this.handleConnectorChange}\n                                            onOperatorChange={this.handleOperatorChange}\n                                            onValueChange={this.handleValueChange}\n                                            selectedConnector={selectedConnector}\n                                        />\n                                    );\n                                })}\n                            </div>\n                            <div className=\"filter-button-dropdown-footer\">\n                                <Button type=\"button\" onClick={this.addFilter}>\n                                    <FormattedMessage {...messages.addFilterButtonText} />\n                                </Button>\n\n                                <PrimaryButton\n                                    className=\"apply-filters-button\"\n                                    onClick={this.applyFilters}\n                                    type=\"button\"\n                                >\n                                    <FormattedMessage {...messages.applyFiltersButtonText} />\n                                </PrimaryButton>\n                            </div>\n                        </div>\n                    ) : (\n                        <div />\n                    )}\n                </Overlay>\n            </Flyout>\n        );\n    }\n}\n\nexport default FilterButton;\n"],"file":"FilterButton.js"}