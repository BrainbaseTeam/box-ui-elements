{"version":3,"sources":["../../../../../src/features/query-bar/components/filter/Condition.js"],"names":["React","FormattedMessage","isFinite","isInteger","classNames","IconClose","Tooltip","IconAlertDefault","SingleSelectField","ValueField","messages","AND","COLUMN","COLUMN_OPERATORS","DATE","ENUM","FLOAT","MULTI_SELECT","NUMBER","OPERATOR","OR","STRING","deleteButtonIconHeight","deleteButtonIconWidth","Condition","hasUserSubmitted","columns","condition","deleteCondition","onColumnChange","onOperatorChange","onValueChange","index","selectedConnector","onConnectorChange","onDeleteButtonClick","handleColumnChange","option","columnId","value","handleOperatorChange","id","handleValueChange","values","getColumnOperators","column","find","c","type","getColumnOptions","options","map","key","displayText","validateValue","Number","getErrorMessage","isValueEmpty","length","isValueValid","messageText","tooltipEnterValueError","tooltipInvalidNumberError","tooltipInvalidFloatError","tooltipSelectDateError","tooltipSelectValueError","renderDeleteButton","renderConnectorField","connectorOptions","connector","connectorWhereText","renderColumnField","columnOptions","displayName","renderOperatorField","operator","columnOperators","operatorOptions","_operator","renderValueField","Error","valueOptions","error","classnames","renderErrorIcon"],"mappings":"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","sourcesContent":["// @flow\nimport * as React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport isFinite from 'lodash/isFinite';\nimport isInteger from 'lodash/isInteger';\nimport classNames from 'classnames';\n\nimport IconClose from '../../../../icons/general/IconClose';\nimport Tooltip from '../../../../components/tooltip';\nimport IconAlertDefault from '../../../../icons/general/IconAlertDefault';\nimport SingleSelectField from '../../../../components/select-field/SingleSelectField';\nimport ValueField from './ValueField';\n\nimport messages from '../../messages';\nimport {\n    AND,\n    COLUMN,\n    COLUMN_OPERATORS,\n    DATE,\n    ENUM,\n    FLOAT,\n    MULTI_SELECT,\n    NUMBER,\n    OPERATOR,\n    OR,\n    STRING,\n} from '../../constants';\nimport type {\n    ColumnType,\n    ConditionType,\n    ConditionValueType,\n    ConnectorType,\n    OperatorOptionType,\n    OperatorType,\n    OptionType,\n} from '../../flowTypes';\n\nimport '../../styles/Condition.scss';\n\ntype Props = {\n    columns?: Array<ColumnType>,\n    condition: ConditionType,\n    deleteCondition: (index: number) => void,\n    hasUserSubmitted: boolean,\n    index: number,\n    onColumnChange: (condition: ConditionType, columnId: string) => void,\n    onConnectorChange: (option: OptionType) => void,\n    onOperatorChange: (conditionId: string, value: OperatorType) => void,\n    onValueChange: (conditionId: string, values: Array<ConditionValueType>) => void,\n    selectedConnector: ConnectorType,\n};\n\nconst deleteButtonIconHeight = 18;\nconst deleteButtonIconWidth = 18;\n\nconst Condition = ({\n    hasUserSubmitted,\n    columns,\n    condition,\n    deleteCondition,\n    onColumnChange,\n    onOperatorChange,\n    onValueChange,\n    index,\n    selectedConnector,\n    onConnectorChange,\n}: Props) => {\n    const onDeleteButtonClick = () => {\n        deleteCondition(index);\n    };\n\n    const handleColumnChange = (option: OptionType) => {\n        const { value: columnId } = option;\n        onColumnChange(condition, columnId);\n    };\n\n    const handleOperatorChange = (option: OperatorOptionType) => {\n        const { id } = condition;\n        const { value } = option;\n        onOperatorChange(id, value);\n    };\n\n    const handleValueChange = (values: Array<ConditionValueType>) => {\n        const { id } = condition;\n        onValueChange(id, values);\n    };\n\n    const getColumnOperators = () => {\n        const { columnId } = condition;\n        const column = columns && columns.find(c => c.id === columnId);\n        const type = column && column.type;\n\n        if (!type) {\n            return [];\n        }\n        return COLUMN_OPERATORS[type];\n    };\n\n    const getColumnOptions = () => {\n        const { columnId } = condition;\n        const column = columns && columns.find(c => c.id === columnId);\n        if (column && column.options) {\n            return column.options.map(option => {\n                const { key } = option;\n                return {\n                    displayText: key,\n                    value: key,\n                };\n            });\n        }\n        return [];\n    };\n\n    const validateValue = (values: Array<ConditionValueType>, type: string) => {\n        switch (type) {\n            case NUMBER:\n                return isInteger(Number(values[0]));\n            case FLOAT:\n                return isFinite(Number(values[0]));\n            default:\n                break;\n        }\n        return true;\n    };\n\n    const getErrorMessage = () => {\n        const { values, columnId } = condition;\n        const column = columns && columns.find(c => c.id === columnId);\n        const type = column && column.type;\n\n        const isValueEmpty = values.length === 0;\n\n        let isValueValid = false;\n        if (!isValueEmpty && type) {\n            isValueValid = validateValue(values, type);\n        }\n\n        /**\n         * isValueValid handles the error case when the user tries to enter an invalid input in either a\n         * number type field or a float type field\n         *\n         * (!hasUserSubmitted && !isValueSet) handles the error case when a user presses on the Apply button\n         * but the input field is empty\n         */\n        if (isValueValid || (!hasUserSubmitted && isValueEmpty)) {\n            return null;\n        }\n\n        let messageText;\n        switch (type) {\n            case STRING:\n                messageText = messages.tooltipEnterValueError;\n                break;\n            case NUMBER:\n                messageText = !isValueValid ? messages.tooltipInvalidNumberError : messages.tooltipEnterValueError;\n                break;\n            case FLOAT:\n                messageText = !isValueValid ? messages.tooltipInvalidFloatError : messages.tooltipEnterValueError;\n                break;\n            case DATE:\n                messageText = messages.tooltipSelectDateError;\n                break;\n            case ENUM:\n                messageText = messages.tooltipSelectValueError;\n                break;\n            case MULTI_SELECT:\n                messageText = messages.tooltipSelectValueError;\n                break;\n            default:\n                break;\n        }\n\n        return messageText && <FormattedMessage {...messageText} />;\n    };\n\n    const renderDeleteButton = () => {\n        return (\n            <div className=\"condition-delete-button\">\n                <button className=\"delete-button\" onClick={onDeleteButtonClick} type=\"button\">\n                    <IconClose width={deleteButtonIconWidth} height={deleteButtonIconHeight} color=\"#999EA4\" />\n                </button>\n            </div>\n        );\n    };\n\n    const renderConnectorField = () => {\n        const connectorOptions = [AND, OR].map(connector => ({\n            displayText: connector,\n            value: connector,\n        }));\n\n        return (\n            <div className=\"condition-connector\">\n                {index === 0 ? (\n                    <p className=\"condition-connector-text\">\n                        <FormattedMessage {...messages.connectorWhereText} />\n                    </p>\n                ) : (\n                    <SingleSelectField\n                        isDisabled={false}\n                        onChange={onConnectorChange}\n                        options={connectorOptions}\n                        selectedValue={selectedConnector}\n                    />\n                )}\n            </div>\n        );\n    };\n\n    const renderColumnField = () => {\n        const { columnId } = condition;\n\n        const columnOptions =\n            columns &&\n            columns.map(column => {\n                const { displayName, id, type } = column;\n                return {\n                    displayText: displayName,\n                    type,\n                    value: id,\n                };\n            });\n\n        return (\n            <div className=\"condition-column-dropdown-container\">\n                <div className=\"filter-dropdown-single-select-field-container\">\n                    <SingleSelectField\n                        fieldType={COLUMN}\n                        isDisabled={false}\n                        onChange={handleColumnChange}\n                        options={columnOptions || []}\n                        selectedValue={columnId}\n                    />\n                </div>\n            </div>\n        );\n    };\n\n    const renderOperatorField = () => {\n        const { operator } = condition;\n        const columnOperators = getColumnOperators();\n        const operatorOptions = columnOperators.map(_operator => {\n            const { displayText, key } = _operator;\n            return {\n                displayText,\n                value: key,\n            };\n        });\n\n        return (\n            <div className=\"condition-operator-dropdown-container\">\n                <div className=\"filter-dropdown-single-select-field-container\">\n                    <SingleSelectField\n                        fieldType={OPERATOR}\n                        isDisabled={false}\n                        onChange={handleOperatorChange}\n                        options={operatorOptions}\n                        selectedValue={operator}\n                    />\n                </div>\n            </div>\n        );\n    };\n\n    const renderValueField = () => {\n        const column = columns && columns.find(c => c.id === condition.columnId);\n\n        if (!column) {\n            throw new Error('Expected Column');\n        }\n\n        const valueOptions = getColumnOptions();\n        const error = getErrorMessage();\n\n        const classnames = classNames('condition-value-dropdown-container', {\n            'show-error': error,\n        });\n\n        return (\n            <div className={classnames}>\n                <ValueField\n                    onChange={handleValueChange}\n                    selectedValues={condition.values}\n                    valueOptions={valueOptions}\n                    valueType={column.type}\n                />\n            </div>\n        );\n    };\n\n    const renderErrorIcon = () => {\n        const error = getErrorMessage();\n        return (\n            error && (\n                <div className=\"condition-error-icon-status\">\n                    <Tooltip text={error || ''} position=\"middle-right\" theme=\"error\">\n                        <span>\n                            <IconAlertDefault />\n                        </span>\n                    </Tooltip>\n                </div>\n            )\n        );\n    };\n\n    return (\n        <div className=\"condition-container\">\n            {renderDeleteButton()}\n            {renderConnectorField()}\n            {renderColumnField()}\n            {renderOperatorField()}\n            {renderValueField()}\n            {renderErrorIcon()}\n        </div>\n    );\n};\n\nexport default Condition;\n"],"file":"Condition.js"}