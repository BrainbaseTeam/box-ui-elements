{"version":3,"sources":["../../../../src/features/query-bar/components/ColumnButtonOverlay.js"],"names":["React","FormattedMessage","uniqueId","cloneDeep","Checkbox","DraggableList","PortaledDraggableListItem","PrimaryButton","reorder","messages","ColumnButtonOverlay","props","sourceIndex","destinationIndex","pendingColumns","state","columns","setState","column","pendingColumnsCopy","newColumn","isShown","foundIndex","findIndex","originalColumn","id","onColumnChange","reduce","total","listId","onDragEnd","map","item","index","displayName","updatePendingColumns","applyFilters","applyFiltersButtonText","Component"],"mappings":"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","sourcesContent":["// @flow\nimport * as React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport uniqueId from 'lodash/uniqueId';\nimport cloneDeep from 'lodash/cloneDeep';\n\nimport Checkbox from '../../../components/checkbox/Checkbox';\nimport DraggableList from '../../../components/draggable-list';\nimport PortaledDraggableListItem from '../../../components/draggable-list/PortaledDraggableListItem';\nimport PrimaryButton from '../../../components/primary-button/PrimaryButton';\nimport reorder from '../../../components/draggable-list/draggable-list-utils/reorder';\n\nimport type { ColumnType } from '../flowTypes';\n\nimport messages from '../messages';\n\ntype State = {\n    listId: string,\n    pendingColumns: Array<ColumnType>,\n};\n\ntype Props = {\n    columns?: Array<ColumnType>,\n    onColumnChange?: (columnTypes: Array<ColumnType>) => void,\n};\n\nclass ColumnButtonOverlay extends React.Component<Props, State> {\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            listId: uniqueId(),\n            pendingColumns: props.columns ? cloneDeep(props.columns) : [],\n        };\n    }\n\n    onDragEnd = (sourceIndex: number, destinationIndex: number) => {\n        const { pendingColumns } = this.state;\n        const columns = reorder(pendingColumns, sourceIndex, destinationIndex);\n        this.setState({\n            pendingColumns: cloneDeep(columns),\n        });\n    };\n\n    updatePendingColumns = (column: ColumnType) => {\n        const { pendingColumns } = this.state;\n\n        const pendingColumnsCopy = cloneDeep(pendingColumns);\n\n        const newColumn = { ...column, isShown: !column.isShown };\n\n        const foundIndex = pendingColumnsCopy.findIndex(originalColumn => originalColumn.id === column.id);\n\n        pendingColumnsCopy[foundIndex] = newColumn;\n        this.setState({\n            pendingColumns: pendingColumnsCopy,\n        });\n    };\n\n    applyFilters = () => {\n        const { onColumnChange } = this.props;\n        const { pendingColumns } = this.state;\n        if (onColumnChange) {\n            onColumnChange(pendingColumns);\n        }\n    };\n\n    getNumberOfHiddenColumns = () => {\n        const { columns } = this.props;\n\n        return columns\n            ? columns.reduce((total, column) => {\n                  if (!column.isShown) {\n                      return total + 1;\n                  }\n                  return total;\n              }, 0)\n            : 0;\n    };\n\n    render() {\n        const { listId, pendingColumns } = this.state;\n\n        return (\n            <div className=\"column-button-dropdown\">\n                <div className=\"column-button-dropdown-header\">\n                    <DraggableList className=\"draggable-list-example\" listId={listId} onDragEnd={this.onDragEnd}>\n                        {pendingColumns.map((item, index) => {\n                            return (\n                                <PortaledDraggableListItem id={item.id} index={index} isDraggableViaHandle key={index}>\n                                    <Checkbox\n                                        isChecked={item.isShown}\n                                        label={item.displayName}\n                                        name={item.displayName}\n                                        onChange={() => this.updatePendingColumns(item)}\n                                    />\n                                </PortaledDraggableListItem>\n                            );\n                        })}\n                    </DraggableList>\n                </div>\n                <div className=\"column-button-dropdown-footer\">\n                    <PrimaryButton type=\"button\" onClick={this.applyFilters}>\n                        <FormattedMessage {...messages.applyFiltersButtonText} />\n                    </PrimaryButton>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default ColumnButtonOverlay;\n"],"file":"ColumnButtonOverlay.js"}