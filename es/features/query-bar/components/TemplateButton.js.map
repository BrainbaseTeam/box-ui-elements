{"version":3,"sources":["../../../../src/features/query-bar/components/TemplateButton.js"],"names":["React","FormattedMessage","classNames","MetadataDefaultBadge","MetadataActiveBadge","TemplateDropdown","Button","MenuToggle","messages","LoadingIndicator","TemplateButton","isTemplateMenuOpen","setState","state","template","onTemplateChange","props","templates","activeTemplate","icon","text","isLoadingTemplates","hasTemplates","length","templatesLoadingButtonText","noTemplatesText","displayName","templatesButtonText","buttonClasses","toggleTemplateDropdownButton","metadataViewTemplateListHeaderTitle","usedTemplates","renderTitle","updateActiveTemplate","renderEntryButton","Component"],"mappings":"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","sourcesContent":["// @flow\nimport * as React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport classNames from 'classnames';\n\nimport MetadataDefaultBadge from '../../../icons/badges/MetadataDefaultBadge';\nimport MetadataActiveBadge from '../../../icons/badges/MetadataActiveBadge';\nimport TemplateDropdown from '../../metadata-instance-editor/TemplateDropdown';\nimport Button from '../../../components/button/Button';\nimport MenuToggle from '../../../components/dropdown-menu/MenuToggle';\nimport messages from '../messages';\nimport LoadingIndicator from '../../../components/loading-indicator';\nimport type { MetadataTemplate } from '../../../common/types/metadata';\n\ntype State = {\n    isTemplateMenuOpen: boolean,\n};\n\ntype Props = {\n    activeTemplate?: MetadataTemplate,\n    onAdd?: Function,\n    onTemplateChange?: Function,\n    templates?: Array<Object>,\n    usedTemplates: Array<Object>,\n};\n\nclass TemplateButton extends React.Component<Props, State> {\n    static defaultProps = {\n        usedTemplates: [],\n    };\n\n    state = {\n        isTemplateMenuOpen: false,\n    };\n\n    toggleTemplateDropdownButton = () => {\n        this.setState({ isTemplateMenuOpen: !this.state.isTemplateMenuOpen });\n    };\n\n    updateActiveTemplate = (template: MetadataTemplate) => {\n        const { onTemplateChange } = this.props;\n\n        if (onTemplateChange) {\n            onTemplateChange(template);\n        }\n    };\n\n    renderEntryButton = () => {\n        const { templates, activeTemplate } = this.props;\n\n        let icon;\n        let text;\n\n        const isLoadingTemplates = !templates;\n        const hasTemplates = templates && templates.length > 0;\n\n        if (isLoadingTemplates) {\n            icon = <LoadingIndicator className=\"loading-indicator\" />;\n            text = <FormattedMessage {...messages.templatesLoadingButtonText} />;\n        } else if (!hasTemplates) {\n            text = <FormattedMessage {...messages.noTemplatesText} />;\n        } else if (activeTemplate) {\n            icon = <MetadataActiveBadge />;\n            text = activeTemplate.displayName;\n        } else if (!activeTemplate) {\n            icon = <MetadataDefaultBadge />;\n            text = <FormattedMessage {...messages.templatesButtonText} />;\n        }\n\n        const buttonClasses = classNames('query-bar-button', {\n            'is-active': activeTemplate,\n        });\n\n        return (\n            <Button\n                className={buttonClasses}\n                isDisabled={!templates || templates.length === 0}\n                type=\"button\"\n                onClick={this.toggleTemplateDropdownButton}\n            >\n                <MenuToggle>\n                    {icon}\n                    <span className=\"button-label\">{text}</span>\n                </MenuToggle>\n            </Button>\n        );\n    };\n\n    renderTitle = () => (\n        <div className=\"template-dropdown-list-title\">\n            <FormattedMessage {...messages.metadataViewTemplateListHeaderTitle} />\n        </div>\n    );\n\n    render() {\n        const { activeTemplate, templates, usedTemplates } = this.props;\n        return (\n            <TemplateDropdown\n                className=\"query-bar-template-dropdown-flyout\"\n                defaultTemplateIcon={<MetadataDefaultBadge className=\"template-list-item-badge\" />}\n                title={this.renderTitle()}\n                onAdd={this.updateActiveTemplate}\n                activeTemplate={activeTemplate}\n                activeTemplateIcon={<MetadataActiveBadge className=\"template-list-item-badge\" />}\n                templates={templates || []}\n                usedTemplates={usedTemplates}\n                entryButton={this.renderEntryButton()}\n            />\n        );\n    }\n}\n\nexport default TemplateButton;\n"],"file":"TemplateButton.js"}