{"version":3,"sources":["../../../src/features/virtualized-table/DraggableVirtualizedTable.js"],"names":["React","noop","classNames","Column","DragDropContext","Droppable","bdlGray","IconDrag","draggableRowRenderer","VIRTUALIZED_TABLE_DEFAULTS","VirtualizedTable","HEADER_HEIGHT","ROW_HEIGHT","ICON_SIZE","DraggableVirtualizedTable","children","className","onDragEnd","rowData","shouldShowDragHandle","tableId","rest","tableClassName","draggableCellRenderer","tableHeight","length","handleDragEnd","destination","source","destinationIndex","index","droppableProvided","innerRef","displayName","defaultProps"],"mappings":";;;;;;AACA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,IAAP,MAAiB,aAAjB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,SAASC,MAAT,QAAuB,uCAAvB;AACA,SAASC,eAAT,EAA0BC,SAA1B,QAA2C,qBAA3C;AAKA,SAASC,OAAT,QAAwB,wBAAxB;AACA,OAAOC,QAAP,MAAqB,8BAArB;AACA,SAASC,oBAAT,QAAqC,gCAArC;AAEA,SAASC,0BAAT,QAA2C,aAA3C;AACA,OAAOC,gBAAP,MAA6B,oBAA7B;AAEA,OAAO,kCAAP;IAEQC,a,GAA8BF,0B,CAA9BE,a;IAAeC,U,GAAeH,0B,CAAfG,U;AACvB,IAAMC,SAAS,GAAG,EAAlB;;AAQA,IAAMC,yBAAyB,GAAG,SAA5BA,yBAA4B,OAQrB;AAAA,MAPTC,QAOS,QAPTA,QAOS;AAAA,MANTC,SAMS,QANTA,SAMS;AAAA,MALTC,SAKS,QALTA,SAKS;AAAA,MAJTC,OAIS,QAJTA,OAIS;AAAA,MAHTC,oBAGS,QAHTA,oBAGS;AAAA,MAFTC,OAES,QAFTA,OAES;AAAA,MADNC,IACM;;AACT,MAAMC,cAAc,GAAGpB,UAAU,CAAC,+BAAD,EAAkCc,SAAlC,CAAjC;;AACA,MAAMO,qBAAqB,GAAG,SAAxBA,qBAAwB;AAAA,WAAM,oBAAC,QAAD;AAAU,MAAA,KAAK,EAAEjB,OAAjB;AAA0B,MAAA,MAAM,EAAEO,SAAlC;AAA6C,MAAA,KAAK,EAAEA;AAApD,MAAN;AAAA,GAA9B,CAFS,CAGT;AACA;AACA;AACA;AACA;;;AACA,MAAMW,WAAW,GAAGN,OAAO,CAACO,MAAR,GAAiBb,UAAjB,GAA8BD,aAAlD;;AAEA,MAAMe,aAAa,GAAG,SAAhBA,aAAgB,QAA6B;AAAA,QAA1BC,WAA0B,SAA1BA,WAA0B;AAAA,QAAbC,MAAa,SAAbA,MAAa;AAC/C,QAAMC,gBAAgB,GAAGF,WAAW,GAAGA,WAAW,CAACG,KAAf,GAAuBF,MAAM,CAACE,KAAlE;AACA,WAAOb,SAAS,CAACW,MAAM,CAACE,KAAR,EAAeD,gBAAf,CAAhB;AACH,GAHD;;AAKA,SACI,oBAAC,eAAD;AAAiB,IAAA,SAAS,EAAEH;AAA5B,KACI,oBAAC,SAAD;AAAW,IAAA,WAAW,EAAEN;AAAxB,KACK,UAACW,iBAAD;AAAA,WACG;AAAK,MAAA,GAAG,EAAEA,iBAAiB,CAACC;AAA5B,OACI,oBAAC,gBAAD,eACQX,IADR;AAEI,MAAA,SAAS,EAAEC,cAFf;AAGI,MAAA,WAAW,EAAEd,oBAHjB;AAII,MAAA,MAAM,EAAEgB,WAJZ;AAKI,MAAA,OAAO,EAAEN;AALb,QAOKC,oBAAoB,IACjB,oBAAC,MAAD;AACI,MAAA,YAAY,EAAEI,qBADlB;AAEI,MAAA,SAAS,EAAC,gDAFd;AAGI,MAAA,OAAO,EAAC,YAHZ;AAII,MAAA,WAAW,MAJf;AAKI,MAAA,QAAQ,EAAE,CALd;AAMI,MAAA,eAAe,EAAC,gDANpB;AAOI,MAAA,KAAK,EAAEV;AAPX,MARR,EAkBKE,QAlBL,CADJ,CADH;AAAA,GADL,CADJ,CADJ;AA8BH,CArDD;;AAuDAD,yBAAyB,CAACmB,WAA1B,GAAwC,2BAAxC;AAEAnB,yBAAyB,CAACoB,YAA1B,GAAyC;AACrCjB,EAAAA,SAAS,EAAEhB,IAD0B;AAErCkB,EAAAA,oBAAoB,EAAE;AAFe,CAAzC;AAKA,eAAeL,yBAAf","sourcesContent":["// @flow\nimport * as React from 'react';\nimport noop from 'lodash/noop';\nimport classNames from 'classnames';\nimport { Column } from 'react-virtualized/dist/es/Table/index';\nimport { DragDropContext, Droppable } from 'react-beautiful-dnd';\n\nimport type { DroppableProvided } from 'react-beautiful-dnd';\nimport type { VirtualizedTableProps } from './VirtualizedTable';\n\nimport { bdlGray } from '../../styles/variables';\nimport IconDrag from '../../icons/general/IconDrag';\nimport { draggableRowRenderer } from '../virtualized-table-renderers';\n\nimport { VIRTUALIZED_TABLE_DEFAULTS } from './constants';\nimport VirtualizedTable from './VirtualizedTable';\n\nimport './DraggableVirtualizedTable.scss';\n\nconst { HEADER_HEIGHT, ROW_HEIGHT } = VIRTUALIZED_TABLE_DEFAULTS;\nconst ICON_SIZE = 24;\n\ntype Props = VirtualizedTableProps & {\n    onDragEnd: (sourceIndex: number, destinationIndex: number) => void,\n    shouldShowDragHandle?: boolean,\n    tableId: string,\n};\n\nconst DraggableVirtualizedTable = ({\n    children,\n    className,\n    onDragEnd,\n    rowData,\n    shouldShowDragHandle,\n    tableId,\n    ...rest\n}: Props) => {\n    const tableClassName = classNames('bdl-DraggableVirtualizedTable', className);\n    const draggableCellRenderer = () => <IconDrag color={bdlGray} height={ICON_SIZE} width={ICON_SIZE} />;\n    // Virtualized table's performance optimizations can not be used here since\n    // all rows need to be rendered in order for drag and drop to work properly.\n    // From a UX perspective, it also doesn't make sense to have drag and drop on\n    // very large tables that actually require optimizations, so this component\n    // always forces the table to be tall enough to fit all rows\n    const tableHeight = rowData.length * ROW_HEIGHT + HEADER_HEIGHT;\n\n    const handleDragEnd = ({ destination, source }) => {\n        const destinationIndex = destination ? destination.index : source.index;\n        return onDragEnd(source.index, destinationIndex);\n    };\n\n    return (\n        <DragDropContext onDragEnd={handleDragEnd}>\n            <Droppable droppableId={tableId}>\n                {(droppableProvided: DroppableProvided) => (\n                    <div ref={droppableProvided.innerRef}>\n                        <VirtualizedTable\n                            {...rest}\n                            className={tableClassName}\n                            rowRenderer={draggableRowRenderer}\n                            height={tableHeight}\n                            rowData={rowData}\n                        >\n                            {shouldShowDragHandle && (\n                                <Column\n                                    cellRenderer={draggableCellRenderer}\n                                    className=\"bdl-DraggableVirtualizedTable-dragHandleColumn\"\n                                    dataKey=\"dragHandle\"\n                                    disableSort\n                                    flexGrow={0}\n                                    headerClassName=\"bdl-DraggableVirtualizedTable-dragHandleColumn\"\n                                    width={ICON_SIZE}\n                                />\n                            )}\n                            {children}\n                        </VirtualizedTable>\n                    </div>\n                )}\n            </Droppable>\n        </DragDropContext>\n    );\n};\n\nDraggableVirtualizedTable.displayName = 'DraggableVirtualizedTable';\n\nDraggableVirtualizedTable.defaultProps = {\n    onDragEnd: noop,\n    shouldShowDragHandle: true,\n};\n\nexport default DraggableVirtualizedTable;\n"],"file":"DraggableVirtualizedTable.js"}