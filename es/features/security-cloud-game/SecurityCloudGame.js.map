{"version":3,"sources":["../../../src/features/security-cloud-game/SecurityCloudGame.js"],"names":["PropTypes","React","Component","FormattedMessage","throttle","Draggable","DragCloud","DropCloud","messages","SecurityCloudGame","props","onValidDrop","state","isOverlap","setState","isValidDrop","e","x","y","newPosition","dragCloudPosition","checkOverlap","dropCloudPosition","occupiedRegions","onDrag","leading","trailing","setGameBoardHeight","bind","prevProps","prevState","gameBoardHeight","getRandomCloudPosition","Math","random","cloudSize","width","height","getRandom","messageElement","getBoundingClientRect","dragLeft","dragTop","dragRight","dragBottom","dropLeft","dropTop","dropMidX","dropMidY","onDragStop","success","instructions","renderMessage","renderDropCloud","renderDragCloud","number","isRequired","func"],"mappings":"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","sourcesContent":["import PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport throttle from 'lodash/throttle';\nimport Draggable from 'react-draggable';\n\nimport DragCloud from './DragCloud';\nimport DropCloud from './DropCloud';\nimport messages from './messages';\n\nimport './SecurityCloudGame.scss';\n\nclass SecurityCloudGame extends Component {\n    static propTypes = {\n        /** Width/Height to set the drag and drop clouds to.  Defaults to 64 */\n        cloudSize: PropTypes.number,\n        /** Height to set the game to */\n        height: PropTypes.number.isRequired,\n        /** Function to call when the `DragCloud` is successfuly dropped onto the `DropCloud` */\n        onValidDrop: PropTypes.func,\n        /** Width to set the game to */\n        width: PropTypes.number.isRequired,\n    };\n\n    static defaultProps = {\n        cloudSize: 64,\n    };\n\n    constructor(props) {\n        super(props);\n        this.occupiedRegions = [];\n        this.state = {\n            isValidDrop: false,\n            isOverlap: false,\n        };\n\n        this.onDrag = throttle(this.onDrag, 100, {\n            leading: true,\n            trailing: true,\n        });\n\n        this.setGameBoardHeight = this.setGameBoardHeight.bind(this);\n    }\n\n    /**\n     * If message height was set, calculate cloud positions and save to state.\n     * @param {object} prevProps - previous props.\n     * @param {object} prevState - previous state.\n     * @returns {void}\n     */\n    componentDidUpdate(prevProps, prevState) {\n        // This should only happen once when game board height is calculated\n        if (this.state.gameBoardHeight !== prevState.gameBoardHeight) {\n            const dropCloudPosition = this.getRandomCloudPosition();\n            let dragCloudPosition = this.getRandomCloudPosition();\n\n            while (this.checkOverlap(dragCloudPosition, dropCloudPosition)) {\n                dragCloudPosition = this.getRandomCloudPosition();\n            }\n\n            // we're relying on rendering of the initial DOM to measure message height and set states accordingly.\n            // Calling setState in componentDidUpdate in this case is a fine use case.\n            this.setState({ dropCloudPosition, dragCloudPosition }); // eslint-disable-line\n        }\n    }\n\n    /**\n     * DragCloud drop event handler. Checks if it's valid drop and handles valid drop if it is.\n     * @param {MouseEvent} e - The Drop event\n     * @param {object} {x, y} - Object which contains x and y coordiante of the drop event.\n     * @returns {void}\n     */\n    onDragStop = () => {\n        const { onValidDrop } = this.props;\n\n        if (this.state.isOverlap) {\n            this.setState({\n                isValidDrop: true,\n            });\n\n            if (onValidDrop) {\n                // call onValidDrop if passed in through props\n                onValidDrop();\n            }\n        }\n    };\n\n    /**\n     * DragCloud drag event handler. Sets isOverlap state depending on coordinates.\n     * @param {MouseEvent} e - The drag event\n     * @param {object} {x, y} - Object which contains x and y coordiante of the drag event.\n     * @returns {void}\n     */\n    onDrag = (e, { x, y }) => {\n        // x and y from the event handler passes the offset from starting point.\n        // Add to initial value to calculate actual position.\n        const newPosition = {\n            x: this.state.dragCloudPosition.x + x,\n            y: this.state.dragCloudPosition.y + y,\n        };\n\n        const isOverlap = this.checkOverlap(newPosition, this.state.dropCloudPosition);\n\n        this.setState({ isOverlap });\n    };\n\n    /**\n     * A wrapper function for Math.random for testing purposes.\n     * @returns {float} number between 0 and 1.\n     */\n    getRandom() {\n        // eslint-disable-line class-methods-use-this\n        return Math.random();\n    }\n\n    /**\n     * Gets a random {x,y} position to place a cloud within the game board dimensions.\n     * @returns {Object} - the {x,y} coordinates for the cloud\n     */\n    getRandomCloudPosition() {\n        const { cloudSize, width } = this.props;\n        const height = this.state.gameBoardHeight;\n\n        // get random x position.  calculate using width of board - cloudSize - some extra padding (1% of width);\n        const x = this.getRandom() * (width - cloudSize - width * 0.01);\n        // get random y position.  calculate using height of board - cloudSize - some extra padding (1% of height);\n        const y = this.getRandom() * (height - cloudSize - height * 0.01);\n\n        return { x, y };\n    }\n\n    /**\n     * When message element is rendered, calculates board game dimenstions.\n     * @param {node} messageElement - The message element.\n     * @returns {void}\n     */\n    setGameBoardHeight(messageElement) {\n        // Only calculate game board height on mount.\n        if (messageElement) {\n            this.setState({\n                gameBoardHeight: this.props.height - messageElement.getBoundingClientRect().height,\n            });\n        }\n    }\n\n    /**\n     * Checks if a given position has already been occupied.\n     * The actual calculations checks if the midpoint of the dropcloud image is contained within the drag cloud image.\n     * @param {object} dragCloudPosition - the x,y coordinates of drag cloud\n     * @param {object} dropCloudPosition - the x,y coordinates of drop cloud\n     * @returns boolean - true if there is an overlap, false otherwise\n     */\n    checkOverlap(dragCloudPosition, dropCloudPosition) {\n        const { cloudSize } = this.props;\n        const { x: dragLeft, y: dragTop } = dragCloudPosition;\n\n        const dragRight = dragLeft + cloudSize;\n        const dragBottom = dragTop + cloudSize;\n\n        const { x: dropLeft, y: dropTop } = dropCloudPosition;\n        const dropMidX = dropLeft + cloudSize / 2;\n        const dropMidY = dropTop + cloudSize / 2;\n\n        return !(dragBottom < dropMidY || dragTop > dropMidY || dragLeft > dropMidX || dragRight < dropMidX);\n    }\n\n    /**\n     * Renders the drop cloud.\n     * @returns {JSX}\n     */\n    renderDropCloud() {\n        const { isValidDrop, dropCloudPosition } = this.state;\n\n        if (dropCloudPosition && !isValidDrop) {\n            const { cloudSize } = this.props;\n\n            // return the drop region with a DragCloud and DropCloud by default\n            return (\n                <DropCloud\n                    className={this.state.isOverlap ? 'is-over' : ''}\n                    cloudSize={cloudSize}\n                    position={dropCloudPosition}\n                />\n            );\n        }\n\n        return null;\n    }\n\n    /**\n     * Renders the drag cloud.\n     * @returns {JSX}\n     */\n    renderDragCloud() {\n        const { isValidDrop, dragCloudPosition } = this.state;\n\n        if (dragCloudPosition) {\n            return (\n                <Draggable bounds=\"parent\" disabled={isValidDrop} onDrag={this.onDrag} onStop={this.onDragStop}>\n                    <DragCloud cloudSize={this.props.cloudSize} position={this.state.dragCloudPosition} />\n                </Draggable>\n            );\n        }\n\n        return null;\n    }\n\n    /**\n     * Renders the message shown to the user\n     * @returns {JSX}\n     */\n    renderMessage() {\n        if (this.state.isValidDrop) {\n            return <FormattedMessage {...messages.success} />;\n        }\n\n        return <FormattedMessage {...messages.instructions} />;\n    }\n\n    /**\n     * Renders the cloud game\n     * @returns {JSX}\n     */\n    render() {\n        const { height, width } = this.props;\n\n        return (\n            <div className=\"box-ui-security-cloud-game\" style={{ height: `${height}px`, width: `${width}px` }}>\n                <div ref={this.setGameBoardHeight} className=\"box-ui-security-cloud-game-message\">\n                    {this.renderMessage()}\n                </div>\n                <div className=\"box-ui-security-cloud-game-board\">\n                    {this.renderDropCloud()}\n                    {this.renderDragCloud()}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default SecurityCloudGame;\n"],"file":"SecurityCloudGame.js"}