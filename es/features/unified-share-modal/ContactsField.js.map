{"version":3,"sources":["../../../src/features/unified-share-modal/ContactsField.js"],"names":["React","FormattedMessage","injectIntl","debounce","noop","classNames","PillSelectorDropdown","ContactDatalistItem","parseEmails","commonMessages","messages","isSubstring","value","searchString","toLowerCase","indexOf","ContactsField","props","contacts","suggestedCollaborators","suggestedSelectorOptions","filter","option","id","toString","sort","optionA","optionB","currentSuggestedItemA","currentSuggestedItemB","userScore","slice","setState","numSuggestedShowing","length","selectorOptionsParsed","map","suggestion","includes","pillSelectorInputValue","state","selectedContacts","fullContacts","name","email","find","isExternalUser","type","text","addSuggestedContacts","query","getContacts","then","filteredContacts","filterContacts","catch","error","isCanceled","getContactsPromise","onInput","trimmedValue","trim","debouncedGetContacts","intl","disabled","fieldRef","label","onContactAdd","onContactRemove","onPillCreate","validateForError","validator","groupLabel","shouldShowSuggested","pillSelectorOverlayClasses","scrollable","undefined","autoFocus","onChange","handlePillSelectorInput","formatMessage","suggestedCollabsTitle","pillSelectorPlaceholder","Component","ContactsFieldBase"],"mappings":"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","sourcesContent":["// @flow\n\n'no babel-plugin-flow-react-proptypes';\n\n// turn off this plugin because it breaks the IntlShape flow type\nimport * as React from 'react';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport type { IntlShape } from 'react-intl';\nimport debounce from 'lodash/debounce';\nimport noop from 'lodash/noop';\nimport classNames from 'classnames';\n\nimport PillSelectorDropdown from '../../components/pill-selector-dropdown';\nimport ContactDatalistItem from '../../components/contact-datalist-item';\nimport parseEmails from '../../utils/parseEmails';\nimport commonMessages from '../../common/messages';\n\nimport messages from './messages';\nimport type { contactType as Contact, suggestedCollaboratorsType } from './flowTypes';\nimport type { SelectOptionProp } from '../../components/select-field/props';\n\ntype Props = {\n    disabled: boolean,\n    error: string,\n    fieldRef?: Object,\n    getContacts: (query: string) => Promise<Array<Contact>>,\n    intl: IntlShape,\n    label: React.Node,\n    onContactAdd: Function,\n    onContactRemove: Function,\n    onInput?: Function,\n    onPillCreate?: (pills: Array<SelectOptionProp | Contact>) => void,\n    selectedContacts: Array<Contact>,\n    suggestedCollaborators?: suggestedCollaboratorsType,\n    validateForError: Function,\n    validator: Function,\n};\n\ntype State = {\n    contacts: Array<Contact>,\n    numSuggestedShowing: number,\n    pillSelectorInputValue: string,\n};\n\nconst isSubstring = (value, searchString) => {\n    return value && value.toLowerCase().indexOf(searchString.toLowerCase()) !== -1;\n};\n\nclass ContactsField extends React.Component<Props, State> {\n    constructor(props: Props) {\n        super(props);\n\n        this.state = {\n            contacts: [],\n            numSuggestedShowing: 0,\n            pillSelectorInputValue: '',\n        };\n    }\n\n    addSuggestedContacts = (contacts: Array<Contact>) => {\n        const { suggestedCollaborators = {} } = this.props;\n\n        const suggestedSelectorOptions = contacts\n            .filter(option => {\n                const { id } = option;\n                return id && suggestedCollaborators[id.toString()];\n            })\n            .sort((optionA, optionB) => {\n                const currentSuggestedItemA = suggestedCollaborators[optionA.id.toString()];\n                const currentSuggestedItemB = suggestedCollaborators[optionB.id.toString()];\n                return currentSuggestedItemB.userScore - currentSuggestedItemA.userScore;\n            })\n            .slice(0, 3);\n\n        this.setState({ numSuggestedShowing: suggestedSelectorOptions.length });\n        const selectorOptionsParsed = contacts.filter(\n            option => !suggestedSelectorOptions.map(suggestion => suggestion.id).includes(option.id),\n        );\n\n        return [...suggestedSelectorOptions, ...selectorOptionsParsed];\n    };\n\n    filterContacts = (contacts: Array<Contact>) => {\n        const { pillSelectorInputValue } = this.state;\n        const { selectedContacts, suggestedCollaborators } = this.props;\n\n        if (pillSelectorInputValue && contacts) {\n            const fullContacts = contacts\n                .filter(\n                    // filter contacts whose name or email don't match input value\n                    ({ name, email }) =>\n                        isSubstring(name, pillSelectorInputValue) || isSubstring(email, pillSelectorInputValue),\n                )\n                .filter(\n                    // filter contacts who have already been selected\n                    ({ email, id }) => !selectedContacts.find(({ value }) => value === email || value === id),\n                )\n                .map<Object>(({ email, id, isExternalUser, name, type }) => ({\n                    // map to standardized DatalistItem format\n                    email,\n                    id,\n                    isExternalUser,\n                    text: name,\n                    type,\n                    value: email || id, // if email doesn't exist, contact is a group, use id\n                }));\n\n            if (suggestedCollaborators) {\n                return this.addSuggestedContacts(fullContacts);\n            }\n\n            return fullContacts;\n        }\n\n        // return empty selector options if input value is empty\n        return [];\n    };\n\n    getContactsPromise = (query: string) => {\n        return this.props\n            .getContacts(query)\n            .then(contacts => {\n                const filteredContacts = this.filterContacts(contacts);\n                this.setState({ contacts: filteredContacts });\n            })\n            .catch(error => {\n                if (error.isCanceled) {\n                    // silently fail - this happens often when requests get cancelled\n                    // due to overlapping requests\n                    return;\n                }\n                throw error;\n            });\n    };\n\n    debouncedGetContacts = debounce(this.getContactsPromise, 200);\n\n    handlePillSelectorInput = (value: string) => {\n        const { onInput } = this.props;\n        const trimmedValue = value.trim();\n\n        this.setState({\n            pillSelectorInputValue: trimmedValue,\n        });\n\n        if (onInput) {\n            onInput(value);\n        }\n\n        if (!trimmedValue) {\n            this.setState({ contacts: [] });\n            return;\n        }\n\n        this.debouncedGetContacts(trimmedValue);\n    };\n\n    render() {\n        const {\n            intl,\n            disabled,\n            error,\n            fieldRef,\n            label,\n            selectedContacts,\n            onContactAdd,\n            onContactRemove,\n            onPillCreate,\n            validateForError,\n            validator,\n        } = this.props;\n        const { contacts, numSuggestedShowing } = this.state;\n        const groupLabel = <FormattedMessage {...messages.groupLabel} />;\n        const shouldShowSuggested = numSuggestedShowing > 0 && contacts.length !== numSuggestedShowing;\n        const pillSelectorOverlayClasses = classNames({\n            scrollable: contacts.length > 5,\n        });\n\n        return (\n            <PillSelectorDropdown\n                allowCustomPills\n                className={pillSelectorOverlayClasses}\n                dividerIndex={shouldShowSuggested ? numSuggestedShowing : undefined}\n                disabled={disabled}\n                error={error}\n                inputProps={{\n                    autoFocus: true,\n                    onChange: noop,\n                }}\n                label={label}\n                onInput={this.handlePillSelectorInput}\n                onRemove={onContactRemove}\n                onSelect={onContactAdd}\n                onPillCreate={onPillCreate}\n                overlayTitle={shouldShowSuggested ? intl.formatMessage(messages.suggestedCollabsTitle) : undefined}\n                parseItems={parseEmails}\n                placeholder={intl.formatMessage(commonMessages.pillSelectorPlaceholder)}\n                ref={fieldRef}\n                selectedOptions={selectedContacts}\n                selectorOptions={contacts}\n                validateForError={validateForError}\n                validator={validator}\n            >\n                {contacts.map(({ email, text = null, id }) => (\n                    <ContactDatalistItem key={id} name={text} subtitle={email || groupLabel} title={text} />\n                ))}\n            </PillSelectorDropdown>\n        );\n    }\n}\n\nexport { ContactsField as ContactsFieldBase };\nexport default injectIntl(ContactsField);\n"],"file":"ContactsField.js"}