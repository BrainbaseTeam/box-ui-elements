{"version":3,"sources":["../../../src/features/unified-share-modal/ContactsField.js"],"names":["React","FormattedMessage","injectIntl","debounce","noop","classNames","PillSelectorDropdown","ContactDatalistItem","computeSuggestedCollabs","parseEmails","commonMessages","messages","isSubstring","value","searchString","toLowerCase","indexOf","ContactsField","props","contacts","suggestedCollaborators","pillSelectorInputValue","state","suggestedOptions","otherOptions","setState","numSuggestedShowing","length","selectedContacts","fullContacts","filter","name","email","id","find","addSuggestedContacts","map","isExternalUser","type","text","query","getContacts","then","filteredContacts","filterContacts","catch","error","isCanceled","getContactsPromise","inputValue","validator","emails","validEmails","onInput","trimmedValue","trim","debouncedGetContacts","disabled","fieldRef","getContactAvatarUrl","getPillClassName","intl","label","onContactAdd","onContactRemove","onPillCreate","showContactAvatars","validateForError","groupLabel","shouldShowSuggested","pillSelectorOverlayClasses","scrollable","undefined","autoFocus","onChange","handlePillSelectorInput","formatMessage","suggestedCollabsTitle","handleParseItems","pillSelectorPlaceholder","Component","ContactsFieldBase"],"mappings":"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","sourcesContent":["// @flow\n\nimport * as React from 'react';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport debounce from 'lodash/debounce';\nimport noop from 'lodash/noop';\nimport classNames from 'classnames';\n\nimport PillSelectorDropdown from '../../components/pill-selector-dropdown';\nimport ContactDatalistItem from '../../components/contact-datalist-item';\nimport computeSuggestedCollabs from './utils/computeSuggestedCollabs';\nimport parseEmails from '../../utils/parseEmails';\nimport commonMessages from '../../common/messages';\n\nimport messages from './messages';\nimport type { SuggestedCollabLookup, contactType as Contact } from './flowTypes';\nimport type { SelectOptionProp } from '../../components/select-field/props';\n\ntype Props = {\n    disabled: boolean,\n    error: string,\n    fieldRef?: Object,\n    getContactAvatarUrl?: (contact: Contact) => string,\n    getContacts: (query: string) => Promise<Array<Contact>>,\n    getPillClassName?: (option: SelectOptionProp) => string,\n    intl: any,\n    label: React.Node,\n    onContactAdd: Function,\n    onContactRemove: Function,\n    onInput?: Function,\n    onPillCreate?: (pills: Array<SelectOptionProp | Contact>) => void,\n    selectedContacts: Array<Contact>,\n    showContactAvatars?: boolean,\n    suggestedCollaborators?: SuggestedCollabLookup,\n    validateForError: Function,\n    validator: Function,\n};\n\ntype State = {\n    contacts: Array<Contact>,\n    numSuggestedShowing: number,\n    pillSelectorInputValue: string,\n};\n\nconst isSubstring = (value, searchString) => {\n    return value && value.toLowerCase().indexOf(searchString.toLowerCase()) !== -1;\n};\n\nclass ContactsField extends React.Component<Props, State> {\n    static defaultProps = {\n        showContactAvatars: false,\n    };\n\n    constructor(props: Props) {\n        super(props);\n\n        this.state = {\n            contacts: [],\n            numSuggestedShowing: 0,\n            pillSelectorInputValue: '',\n        };\n    }\n\n    addSuggestedContacts = (contacts: Array<Contact>) => {\n        const { suggestedCollaborators = {} } = this.props;\n        const { pillSelectorInputValue } = this.state;\n\n        const [suggestedOptions, otherOptions] = computeSuggestedCollabs(\n            contacts,\n            suggestedCollaborators,\n            pillSelectorInputValue,\n        );\n        this.setState({ numSuggestedShowing: suggestedOptions.length });\n        return [...suggestedOptions, ...otherOptions];\n    };\n\n    filterContacts = (contacts: Array<Contact>): Array<Contact> => {\n        const { pillSelectorInputValue } = this.state;\n        const { selectedContacts, suggestedCollaborators } = this.props;\n        if (pillSelectorInputValue && contacts) {\n            let fullContacts = contacts\n                .filter(\n                    // filter contacts whose name or email don't match input value\n                    ({ name, email }) =>\n                        isSubstring(name, pillSelectorInputValue) || isSubstring(email, pillSelectorInputValue),\n                )\n                .filter(\n                    // filter contacts who have already been selected\n                    ({ email, id }) => !selectedContacts.find(({ value }) => value === email || value === id),\n                );\n\n            if (suggestedCollaborators) {\n                fullContacts = this.addSuggestedContacts(fullContacts);\n            }\n\n            return fullContacts.map<Contact>(({ email, id, isExternalUser, name, type }) => ({\n                // map to standardized DatalistItem format\n                // TODO: refactor this so inline conversions aren't required at every usage\n                email,\n                id,\n                isExternalUser,\n                text: name,\n                type,\n                value: email || id, // if email doesn't exist, contact is a group, use id\n            }));\n        }\n\n        // return empty selector options if input value is empty\n        return [];\n    };\n\n    getContactsPromise = (query: string) => {\n        return this.props\n            .getContacts(query)\n            .then(contacts => {\n                const filteredContacts = this.filterContacts(contacts);\n                this.setState({ contacts: filteredContacts });\n            })\n            .catch(error => {\n                if (error.isCanceled) {\n                    // silently fail - this happens often when requests get cancelled\n                    // due to overlapping requests\n                    return;\n                }\n                throw error;\n            });\n    };\n\n    debouncedGetContacts = debounce(this.getContactsPromise, 200);\n\n    handleParseItems = (inputValue: string): Array<string> => {\n        const { validator } = this.props;\n\n        // ContactField allows invalid pills to be displayed in\n        // in some cases (e.g., when user is external and external\n        // collab is restricted). We don't allow, however, invalid\n        // emails from the pill selector input to be turned into pills.\n        const emails = parseEmails(inputValue);\n        const validEmails = emails.filter(email => validator(email));\n\n        return validEmails;\n    };\n\n    handlePillSelectorInput = (value: string) => {\n        const { onInput } = this.props;\n        const trimmedValue = value.trim();\n\n        this.setState({\n            pillSelectorInputValue: trimmedValue,\n        });\n\n        if (onInput) {\n            onInput(value);\n        }\n\n        if (!trimmedValue) {\n            this.setState({ contacts: [] });\n            return;\n        }\n\n        this.debouncedGetContacts(trimmedValue);\n    };\n\n    render() {\n        const {\n            disabled,\n            error,\n            fieldRef,\n            getContactAvatarUrl,\n            getPillClassName,\n            intl,\n            label,\n            onContactAdd,\n            onContactRemove,\n            onPillCreate,\n            selectedContacts,\n            showContactAvatars,\n            validateForError,\n            validator,\n        } = this.props;\n        const { contacts, numSuggestedShowing } = this.state;\n        const groupLabel = <FormattedMessage {...messages.groupLabel} />;\n        const shouldShowSuggested = numSuggestedShowing > 0;\n        const pillSelectorOverlayClasses = classNames({\n            scrollable: contacts.length > 5,\n        });\n\n        return (\n            <PillSelectorDropdown\n                allowCustomPills\n                allowInvalidPills\n                className={pillSelectorOverlayClasses}\n                dividerIndex={shouldShowSuggested ? numSuggestedShowing : undefined}\n                disabled={disabled}\n                error={error}\n                getPillClassName={getPillClassName}\n                getPillImageUrl={getContactAvatarUrl}\n                inputProps={{\n                    autoFocus: true,\n                    onChange: noop,\n                }}\n                label={label}\n                onInput={this.handlePillSelectorInput}\n                onRemove={onContactRemove}\n                onSelect={onContactAdd}\n                onPillCreate={onPillCreate}\n                overlayTitle={shouldShowSuggested ? intl.formatMessage(messages.suggestedCollabsTitle) : undefined}\n                parseItems={this.handleParseItems}\n                placeholder={intl.formatMessage(commonMessages.pillSelectorPlaceholder)}\n                ref={fieldRef}\n                selectedOptions={selectedContacts}\n                showRoundedPills\n                selectorOptions={contacts}\n                validateForError={validateForError}\n                validator={validator}\n            >\n                {contacts.map(({ email, isExternalUser, text = null, id }) => (\n                    <ContactDatalistItem\n                        getContactAvatarUrl={getContactAvatarUrl}\n                        key={id}\n                        id={id}\n                        isExternal={isExternalUser}\n                        name={text}\n                        subtitle={email || groupLabel}\n                        title={text}\n                        showAvatar={showContactAvatars}\n                    />\n                ))}\n            </PillSelectorDropdown>\n        );\n    }\n}\n\nexport { ContactsField as ContactsFieldBase };\nexport default injectIntl(ContactsField);\n"],"file":"ContactsField.js"}