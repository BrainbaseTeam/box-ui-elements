{"version":3,"sources":["../../../src/features/unified-share-modal/EmailForm.js"],"names":["React","classNames","FormattedMessage","injectIntl","TextArea","PrimaryButton","ModalActions","Button","Tooltip","InlineNotice","PillSelectorDropdown","commonMessages","emailValidator","IconGlobe","ContactsField","messages","EmailForm","props","createRef","contacts","selectedContacts","onContactAdd","updateSelectedContacts","updatedContacts","validateContacts","option","index","onContactRemove","slice","removed","splice","contactLimit","intl","contactsFieldError","undefined","length","formatMessage","contactsExceedLimitError","maxContacts","enterAtLeastOneEmailError","setState","value","onContactInput","event","target","HTMLTextAreaElement","message","contactsFieldRef","current","inputValue","onRequestClose","preventDefault","onSubmit","state","contactsError","emails","groupIDs","forEach","type","push","catch","error","invitedEmails","filterSentEmails","sentEmails","filter","includes","text","isValidEmail","invalidEmailError","cancelButtonProps","children","contactsFieldAvatars","contactsFieldDisabledTooltip","contactsFieldLabel","inlineNotice","isContactsFieldEnabled","isExternalUserSelected","getContacts","isExpanded","messageProps","onPillCreate","recommendedSharingTooltipCalloutName","sendButtonProps","showEnterEmailsCallout","submitting","suggestedCollaborators","ftuxTooltipProps","className","isShown","position","showCloseButton","enterEmailAddressesCalloutText","theme","recommendedSharingTooltipProps","recommendedSharingTooltipCalloutText","fullName","tooltipPropsToRender","contactsField","handleContactAdd","handleContactRemove","handleContactInput","validateContactField","contactsFieldWrap","handleSubmit","content","messageTitle","handleMessageChange","messageSelectorPlaceholder","contentSharedWithExternalCollaborators","handleClose","cancel","send","Component","EmailFormBase"],"mappings":"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","sourcesContent":["// @flow\n\n'no babel-plugin-flow-react-proptypes';\n\n// this plugin breaks the IntlShape type\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport type { IntlShape } from 'react-intl';\n\nimport TextArea from '../../components/text-area';\nimport PrimaryButton from '../../components/primary-button';\nimport { ModalActions } from '../../components/modal';\nimport Button from '../../components/button';\nimport Tooltip from '../../components/tooltip';\nimport InlineNotice from '../../components/inline-notice';\nimport PillSelectorDropdown from '../../components/pill-selector-dropdown';\nimport commonMessages from '../../common/messages';\nimport { emailValidator } from '../../utils/validators';\nimport type { InlineNoticeType } from '../../common/types/core';\nimport IconGlobe from '../../icons/general/IconGlobe';\n\nimport ContactsField from './ContactsField';\nimport messages from './messages';\nimport type { contactType as Contact, suggestedCollaboratorsType } from './flowTypes';\nimport type { SelectOptionProp } from '../../components/select-field/props';\n\ntype Props = {\n    cancelButtonProps?: Object,\n    children?: React.Node,\n    contactLimit?: number,\n    contactsFieldAvatars?: React.Node,\n    contactsFieldDisabledTooltip: React.Node,\n    contactsFieldLabel: React.Node,\n    getContacts: (query: string) => Promise<Array<Contact>>,\n    inlineNotice: {\n        content: React.Node,\n        type: InlineNoticeType,\n    },\n    intl: IntlShape,\n    isContactsFieldEnabled: boolean,\n    isExpanded: boolean,\n    isExternalUserSelected: boolean,\n    messageProps?: Object,\n    onContactAdd?: Function,\n    onContactInput?: Function,\n    onContactRemove?: Function,\n    onPillCreate?: (pills: Array<SelectOptionProp | Contact>) => void,\n    onRequestClose: Function,\n    onSubmit: Function,\n    openInviteCollaboratorsSection?: Function,\n    recommendedSharingTooltipCalloutName?: ?string,\n    selectedContacts: Array<Contact>,\n    sendButtonProps?: Object,\n    showEnterEmailsCallout: boolean,\n    submitting: boolean,\n    suggestedCollaborators?: suggestedCollaboratorsType,\n    updateSelectedContacts: Function,\n};\n\ntype State = {\n    contactsFieldError: string,\n    message: string,\n};\n\nclass EmailForm extends React.Component<Props, State> {\n    static defaultProps = {\n        messageProps: {},\n        contactsFieldDisabledTooltip: null,\n    };\n\n    constructor(props: Props) {\n        super(props);\n\n        this.state = {\n            contactsFieldError: '',\n            message: '',\n        };\n    }\n\n    contactsFieldRef: {\n        current: null | PillSelectorDropdown,\n    } = React.createRef();\n\n    handleContactAdd = (contacts: Array<Contact>) => {\n        const { selectedContacts, onContactAdd, updateSelectedContacts } = this.props;\n\n        const updatedContacts = [...selectedContacts, ...contacts];\n        updateSelectedContacts(updatedContacts);\n\n        this.validateContacts(updatedContacts);\n\n        if (onContactAdd) {\n            onContactAdd(contacts);\n        }\n    };\n\n    handleContactRemove = (option: any, index: number) => {\n        const { onContactRemove, updateSelectedContacts } = this.props;\n        const selectedContacts = this.props.selectedContacts.slice();\n        const removed = selectedContacts.splice(index, 1);\n        updateSelectedContacts(selectedContacts);\n\n        this.validateContacts(selectedContacts);\n\n        if (onContactRemove) {\n            onContactRemove(removed);\n        }\n    };\n\n    validateContacts = (selectedContacts: Array<Contact>) => {\n        const { contactLimit, intl } = this.props;\n\n        let contactsFieldError = '';\n        if (contactLimit !== undefined && selectedContacts.length > contactLimit) {\n            contactsFieldError = intl.formatMessage(messages.contactsExceedLimitError, {\n                maxContacts: contactLimit,\n            });\n        } else if (selectedContacts.length === 0) {\n            contactsFieldError = intl.formatMessage(messages.enterAtLeastOneEmailError);\n        }\n\n        this.setState({ contactsFieldError });\n\n        return contactsFieldError;\n    };\n\n    handleContactInput = (value: string) => {\n        const { onContactInput } = this.props;\n\n        if (onContactInput) {\n            onContactInput(value);\n        }\n    };\n\n    handleMessageChange = (event: SyntheticEvent<HTMLTextAreaElement>) => {\n        const { target } = event;\n\n        if (target instanceof HTMLTextAreaElement) {\n            this.setState({ message: target.value });\n        }\n    };\n\n    handleClose = () => {\n        this.setState({\n            message: '',\n            contactsFieldError: '',\n        });\n\n        this.props.updateSelectedContacts([]);\n\n        /* Need to reset text in contacts field upon cancelling\n           because the field still shows if the field isn't unmounted\n           but only collapsed (like in invite collabs usage).\n           inputValue doesn't get passed down through props but is\n           internal state in pill selector. */\n        if (this.contactsFieldRef.current) {\n            this.contactsFieldRef.current.setState({ inputValue: '' });\n        }\n\n        this.props.onRequestClose();\n    };\n\n    handleSubmit = (event: SyntheticEvent<HTMLFormElement>) => {\n        event.preventDefault();\n\n        const { onSubmit, selectedContacts } = this.props;\n        const { message, contactsFieldError } = this.state;\n\n        if (contactsFieldError !== '') {\n            // Block submission if there's a validation error\n            return;\n        }\n\n        const contactsError = this.validateContacts(selectedContacts);\n        if (contactsError) {\n            return;\n        }\n\n        const emails = [];\n        const groupIDs = [];\n\n        selectedContacts.forEach(({ type, value }) => {\n            if (type === 'group') {\n                groupIDs.push(value);\n            } else {\n                emails.push(value);\n            }\n        });\n        onSubmit({\n            emails,\n            groupIDs,\n            message,\n        }).catch(error => {\n            // Remove sent emails from selected pills\n            const invitedEmails = error.invitedEmails || [];\n            this.filterSentEmails(invitedEmails);\n        });\n    };\n\n    filterSentEmails = (sentEmails: Array<string>) => {\n        this.props.updateSelectedContacts(\n            this.props.selectedContacts.filter(({ value }) => !sentEmails.includes(value)),\n        );\n    };\n\n    validateContactField = (text: string) => {\n        const { intl } = this.props;\n        let contactsFieldError = '';\n\n        if (text && !this.isValidEmail(text)) {\n            contactsFieldError = intl.formatMessage(commonMessages.invalidEmailError);\n        }\n        this.setState({ contactsFieldError });\n    };\n\n    isValidEmail = (text: string): boolean => {\n        return emailValidator(text);\n    };\n\n    render() {\n        const { contactsFieldError, message } = this.state;\n\n        const {\n            cancelButtonProps,\n            children,\n            contactsFieldAvatars,\n            contactsFieldDisabledTooltip,\n            contactsFieldLabel,\n            inlineNotice,\n            isContactsFieldEnabled,\n            isExternalUserSelected,\n            getContacts,\n            intl,\n            isExpanded,\n            messageProps,\n            onPillCreate,\n            recommendedSharingTooltipCalloutName,\n            sendButtonProps,\n            showEnterEmailsCallout,\n            selectedContacts,\n            submitting,\n            suggestedCollaborators,\n        } = this.props;\n\n        const ftuxTooltipProps = {\n            className: 'usm-ftux-tooltip',\n            isShown: showEnterEmailsCallout,\n            position: 'middle-right',\n            showCloseButton: true,\n            text: <FormattedMessage {...messages.enterEmailAddressesCalloutText} />,\n            theme: 'callout',\n        };\n\n        const recommendedSharingTooltipProps = {\n            isShown: !!recommendedSharingTooltipCalloutName,\n            position: 'middle-left',\n            text: (\n                <FormattedMessage\n                    {...messages.recommendedSharingTooltipCalloutText}\n                    values={{ fullName: recommendedSharingTooltipCalloutName }}\n                />\n            ),\n            theme: 'callout',\n        };\n\n        const tooltipPropsToRender = recommendedSharingTooltipCalloutName\n            ? recommendedSharingTooltipProps\n            : ftuxTooltipProps;\n\n        const contactsField = (\n            <div className=\"tooltip-target\">\n                <Tooltip {...tooltipPropsToRender}>\n                    <ContactsField\n                        disabled={!isContactsFieldEnabled}\n                        error={contactsFieldError}\n                        fieldRef={this.contactsFieldRef}\n                        getContacts={getContacts}\n                        label={contactsFieldLabel}\n                        onContactAdd={this.handleContactAdd}\n                        onContactRemove={this.handleContactRemove}\n                        onInput={this.handleContactInput}\n                        onPillCreate={onPillCreate}\n                        selectedContacts={selectedContacts}\n                        suggestedCollaborators={suggestedCollaborators}\n                        validateForError={this.validateContactField}\n                        validator={this.isValidEmail}\n                    />\n                </Tooltip>\n            </div>\n        );\n\n        let contactsFieldWrap;\n        if (isContactsFieldEnabled) {\n            contactsFieldWrap = contactsField;\n        } else {\n            contactsFieldWrap = (\n                <Tooltip position=\"bottom-center\" text={contactsFieldDisabledTooltip}>\n                    {contactsField}\n                </Tooltip>\n            );\n        }\n\n        return (\n            <form\n                className={classNames({\n                    'is-expanded': isExpanded,\n                })}\n                onSubmit={this.handleSubmit}\n            >\n                {inlineNotice.content && isExpanded && (\n                    <InlineNotice type={inlineNotice.type}>{inlineNotice.content}</InlineNotice>\n                )}\n                {contactsFieldAvatars}\n                {contactsFieldWrap}\n                {children}\n                {isExpanded && (\n                    <TextArea\n                        label={<FormattedMessage {...messages.messageTitle} />}\n                        onChange={this.handleMessageChange}\n                        placeholder={intl.formatMessage(commonMessages.messageSelectorPlaceholder)}\n                        rows={3}\n                        value={message}\n                        {...messageProps}\n                    />\n                )}\n                {isExpanded && isExternalUserSelected && (\n                    <div className=\"security-indicator-note\">\n                        <span className=\"security-indicator-icon-globe\">\n                            <IconGlobe height={12} width={12} />\n                        </span>\n                        <FormattedMessage {...messages.contentSharedWithExternalCollaborators} />\n                    </div>\n                )}\n                {isExpanded && (\n                    <ModalActions>\n                        <Button isDisabled={submitting} onClick={this.handleClose} type=\"button\" {...cancelButtonProps}>\n                            <FormattedMessage {...commonMessages.cancel} />\n                        </Button>\n                        <PrimaryButton\n                            isDisabled={submitting}\n                            isLoading={submitting}\n                            type=\"submit\"\n                            {...sendButtonProps}\n                        >\n                            <FormattedMessage {...commonMessages.send} />\n                        </PrimaryButton>\n                    </ModalActions>\n                )}\n            </form>\n        );\n    }\n}\n\nexport { EmailForm as EmailFormBase };\nexport default injectIntl(EmailForm);\n"],"file":"EmailForm.js"}