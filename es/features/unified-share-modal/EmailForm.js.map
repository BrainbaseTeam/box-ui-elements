{"version":3,"sources":["../../../src/features/unified-share-modal/EmailForm.js"],"names":["React","isString","partition","classNames","FormattedMessage","injectIntl","TextArea","PrimaryButton","ModalActions","Button","Tooltip","InlineNotice","PillSelectorDropdown","commonMessages","emailValidator","IconGlobe","ContactRestrictionNotice","ContactsField","hasRestrictedExternalContacts","messages","EmailForm","props","createRef","contacts","selectedContacts","onContactAdd","updateSelectedContacts","updatedContacts","validateContacts","option","index","onContactRemove","slice","removed","splice","value","isRestrictedExternalEmail","removedContacts","remainingContacts","forEach","removedContact","contactLimit","intl","contactsFieldError","undefined","length","formatMessage","contactsExceedLimitError","maxContacts","enterAtLeastOneEmailError","setState","contactsRestrictionError","selectedJustificationReason","state","isRestrictionJustificationEnabled","restrictedExternalEmails","hasRestrictedContacts","isMissingRequiredJustification","justificationRequiredError","restrictedContactsError","onContactInput","event","target","HTMLTextAreaElement","message","validateContactsRestrictions","contactsFieldRef","current","inputValue","onRequestClose","preventDefault","onSubmit","contactsError","emails","groupIDs","type","push","justificationReason","catch","error","invitedEmails","filterSentEmails","sentEmails","filter","includes","text","invalidEmailError","contactPill","isValid","hasRequiredJustification","pillId","String","isWaivedPill","email","prevProps","prevState","prevIsRestrictionJustificationEnabled","prevContactsFieldError","prevContactsRestrictionError","didJustificationRequirementChange","cancelButtonProps","children","config","contactsFieldAvatars","contactsFieldDisabledTooltip","contactsFieldLabel","inlineNotice","isContactsFieldEnabled","isExternalUserSelected","getContactAvatarUrl","getContacts","isExpanded","isFetchingJustificationReasons","justificationReasons","messageProps","onPillCreate","recommendedSharingTooltipCalloutName","sendButtonProps","showEnterEmailsCallout","submitting","suggestedCollaborators","ftuxTooltipProps","className","isShown","position","showCloseButton","enterEmailAddressesCalloutText","theme","recommendedSharingTooltipProps","recommendedSharingTooltipCalloutText","fullName","tooltipPropsToRender","contactsField","getContactPillClassName","handleContactAdd","handleContactRemove","handleContactInput","validateContactField","isValidContactPill","contactsFieldWrap","hideMessageSection","showInviteCollaboratorMessageSection","shouldRenderContactRestrictionNotice","handleSubmit","content","handleRemoveRestrictedExternalContacts","handleSelectJustificationReason","messageTitle","handleMessageChange","messageSelectorPlaceholder","contentSharedWithExternalCollaborators","handleClose","cancel","send","Component","EmailFormBase"],"mappings":"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","sourcesContent":["// @flow\n\nimport * as React from 'react';\nimport isString from 'lodash/isString';\nimport partition from 'lodash/partition';\nimport classNames from 'classnames';\nimport { FormattedMessage, injectIntl } from 'react-intl';\n\nimport TextArea from '../../components/text-area';\nimport PrimaryButton from '../../components/primary-button';\nimport { ModalActions } from '../../components/modal';\nimport Button from '../../components/button';\nimport Tooltip from '../../components/tooltip';\nimport InlineNotice from '../../components/inline-notice';\nimport PillSelectorDropdown from '../../components/pill-selector-dropdown';\nimport commonMessages from '../../common/messages';\nimport { emailValidator } from '../../utils/validators';\nimport type { InlineNoticeType } from '../../common/types/core';\nimport IconGlobe from '../../icons/general/IconGlobe';\n\nimport ContactRestrictionNotice from './ContactRestrictionNotice';\nimport ContactsField from './ContactsField';\nimport hasRestrictedExternalContacts from './utils/hasRestrictedExternalContacts';\nimport messages from './messages';\nimport type { SuggestedCollabLookup, contactType as Contact, USMConfig } from './flowTypes';\nimport type { SelectOptionProp } from '../../components/select-field/props';\n\ntype Props = {\n    cancelButtonProps?: Object,\n    children?: React.Node,\n    config?: USMConfig,\n    contactLimit?: number,\n    contactsFieldAvatars?: React.Node,\n    contactsFieldDisabledTooltip: React.Node,\n    contactsFieldLabel: React.Node,\n    getContactAvatarUrl?: (contact: Contact) => string,\n    getContacts: (query: string) => Promise<Array<Contact>>,\n    inlineNotice: {\n        content: React.Node,\n        type: InlineNoticeType,\n    },\n    intl: any,\n    isContactsFieldEnabled: boolean,\n    isExpanded: boolean,\n    isExternalUserSelected: boolean,\n    isFetchingJustificationReasons?: boolean,\n    isRestrictionJustificationEnabled: boolean,\n    justificationReasons: Array<SelectOptionProp>,\n    messageProps?: Object,\n    onContactAdd?: Function,\n    onContactInput?: Function,\n    onContactRemove?: Function,\n    onPillCreate?: (pills: Array<SelectOptionProp | Contact>) => void,\n    onRequestClose: Function,\n    onSubmit: Function,\n    openInviteCollaboratorsSection?: Function,\n    recommendedSharingTooltipCalloutName?: ?string,\n    restrictedExternalEmails: Array<string>,\n    selectedContacts: Array<Contact>,\n    sendButtonProps?: Object,\n    showEnterEmailsCallout: boolean,\n    submitting: boolean,\n    suggestedCollaborators?: SuggestedCollabLookup,\n    updateSelectedContacts: Function,\n};\n\ntype State = {\n    contactsFieldError: string,\n    contactsRestrictionError: string,\n    message: string,\n    selectedJustificationReason: ?SelectOptionProp,\n};\n\nclass EmailForm extends React.Component<Props, State> {\n    static defaultProps = {\n        messageProps: {},\n        contactsFieldDisabledTooltip: null,\n        isRestrictionJustificationEnabled: false,\n        justificationReasons: [],\n        restrictedExternalEmails: [],\n    };\n\n    constructor(props: Props) {\n        super(props);\n\n        this.state = {\n            contactsFieldError: '',\n            contactsRestrictionError: '',\n            message: '',\n            selectedJustificationReason: null,\n        };\n    }\n\n    contactsFieldRef: {\n        current: null | PillSelectorDropdown,\n    } = React.createRef();\n\n    componentDidUpdate(prevProps: Props, prevState: State) {\n        const { isRestrictionJustificationEnabled } = this.props;\n        const { isRestrictionJustificationEnabled: prevIsRestrictionJustificationEnabled } = prevProps;\n        const { contactsFieldError, contactsRestrictionError } = this.state;\n        const {\n            contactsFieldError: prevContactsFieldError,\n            contactsRestrictionError: prevContactsRestrictionError,\n        } = prevState;\n\n        // Only display one type of error at a time and give preference\n        // to the one triggered most recently\n        if (!prevContactsFieldError && contactsFieldError) {\n            this.setState({ contactsRestrictionError: '' });\n        }\n        if (!prevContactsRestrictionError && contactsRestrictionError) {\n            this.setState({ contactsFieldError: '' });\n        }\n\n        const didJustificationRequirementChange =\n            isRestrictionJustificationEnabled !== prevIsRestrictionJustificationEnabled;\n\n        // Clear selected justification when form state is reset\n        if (didJustificationRequirementChange && !isRestrictionJustificationEnabled) {\n            this.setState({ selectedJustificationReason: null });\n        }\n    }\n\n    handleContactAdd = (contacts: Array<Contact>) => {\n        const { selectedContacts, onContactAdd, updateSelectedContacts } = this.props;\n\n        const updatedContacts = [...selectedContacts, ...contacts];\n        updateSelectedContacts(updatedContacts);\n\n        this.validateContacts(updatedContacts);\n\n        if (onContactAdd) {\n            onContactAdd(contacts);\n        }\n    };\n\n    handleContactRemove = (option: any, index: number) => {\n        const { onContactRemove, updateSelectedContacts } = this.props;\n        const selectedContacts = this.props.selectedContacts.slice();\n        const removed = selectedContacts.splice(index, 1);\n        updateSelectedContacts(selectedContacts);\n\n        this.validateContacts(selectedContacts);\n\n        if (onContactRemove) {\n            onContactRemove(removed);\n        }\n    };\n\n    handleRemoveRestrictedExternalContacts = () => {\n        const { onContactRemove, selectedContacts, updateSelectedContacts } = this.props;\n\n        const [removedContacts, remainingContacts] = partition(selectedContacts, ({ value }) =>\n            this.isRestrictedExternalEmail(value),\n        );\n\n        updateSelectedContacts(remainingContacts);\n        this.validateContacts(remainingContacts);\n\n        if (onContactRemove) {\n            removedContacts.forEach(removedContact => {\n                onContactRemove(removedContact);\n            });\n        }\n    };\n\n    validateContacts = (selectedContacts: Array<Contact>) => {\n        const { contactLimit, intl } = this.props;\n\n        let contactsFieldError = '';\n        if (contactLimit !== undefined && selectedContacts.length > contactLimit) {\n            contactsFieldError = intl.formatMessage(messages.contactsExceedLimitError, {\n                maxContacts: contactLimit,\n            });\n        } else if (selectedContacts.length === 0) {\n            contactsFieldError = intl.formatMessage(messages.enterAtLeastOneEmailError);\n        }\n\n        this.setState({ contactsFieldError });\n\n        return contactsFieldError;\n    };\n\n    validateContactsRestrictions = () => {\n        let contactsRestrictionError = '';\n        const { selectedJustificationReason } = this.state;\n        const { intl, isRestrictionJustificationEnabled, selectedContacts, restrictedExternalEmails } = this.props;\n\n        const hasRestrictedContacts = hasRestrictedExternalContacts(selectedContacts, restrictedExternalEmails);\n        const isMissingRequiredJustification = isRestrictionJustificationEnabled && !selectedJustificationReason;\n\n        if (isMissingRequiredJustification) {\n            contactsRestrictionError = intl.formatMessage(messages.justificationRequiredError);\n        } else if (hasRestrictedContacts && !isRestrictionJustificationEnabled) {\n            contactsRestrictionError = intl.formatMessage(messages.restrictedContactsError);\n        }\n\n        this.setState({ contactsRestrictionError });\n\n        return contactsRestrictionError;\n    };\n\n    handleContactInput = (value: string) => {\n        const { onContactInput } = this.props;\n\n        if (onContactInput) {\n            onContactInput(value);\n        }\n    };\n\n    handleMessageChange = (event: SyntheticEvent<HTMLTextAreaElement>) => {\n        const { target } = event;\n\n        if (target instanceof HTMLTextAreaElement) {\n            this.setState({ message: target.value });\n        }\n    };\n\n    handleSelectJustificationReason = (selectedJustificationReason: SelectOptionProp) => {\n        this.setState({ selectedJustificationReason }, this.validateContactsRestrictions);\n    };\n\n    handleClose = () => {\n        this.setState({\n            message: '',\n            contactsFieldError: '',\n            selectedJustificationReason: null,\n        });\n\n        this.props.updateSelectedContacts([]);\n\n        /* Need to reset text in contacts field upon cancelling\n           because the field still shows if the field isn't unmounted\n           but only collapsed (like in invite collabs usage).\n           inputValue doesn't get passed down through props but is\n           internal state in pill selector. */\n        if (this.contactsFieldRef.current) {\n            this.contactsFieldRef.current.setState({ inputValue: '' });\n        }\n\n        this.props.onRequestClose();\n    };\n\n    handleSubmit = (event: SyntheticEvent<HTMLFormElement>) => {\n        event.preventDefault();\n\n        const { onSubmit, selectedContacts } = this.props;\n        const { message, contactsFieldError, selectedJustificationReason } = this.state;\n\n        if (contactsFieldError !== '') {\n            // Block submission if there's a validation error\n            return;\n        }\n\n        const contactsError = this.validateContacts(selectedContacts);\n        const contactsRestrictionError = this.validateContactsRestrictions();\n\n        if (contactsError || contactsRestrictionError) {\n            return;\n        }\n\n        const emails = [];\n        const groupIDs = [];\n        const restrictedExternalEmails = [];\n\n        selectedContacts.forEach(({ type, value }) => {\n            if (type === 'group') {\n                groupIDs.push(value);\n            } else {\n                if (this.isRestrictedExternalEmail(value)) {\n                    restrictedExternalEmails.push(value);\n                }\n                emails.push(value);\n            }\n        });\n\n        onSubmit({\n            emails,\n            groupIDs,\n            justificationReason: selectedJustificationReason,\n            message,\n            restrictedExternalEmails,\n        }).catch(error => {\n            // Remove sent emails from selected pills\n            const invitedEmails = error.invitedEmails || [];\n            this.filterSentEmails(invitedEmails);\n        });\n    };\n\n    filterSentEmails = (sentEmails: Array<string>) => {\n        this.props.updateSelectedContacts(\n            this.props.selectedContacts.filter(({ value }) => !sentEmails.includes(value)),\n        );\n    };\n\n    validateContactField = (text: string) => {\n        const { intl } = this.props;\n        let contactsFieldError = '';\n\n        if (text && !emailValidator(text)) {\n            contactsFieldError = intl.formatMessage(commonMessages.invalidEmailError);\n        }\n        this.setState({ contactsFieldError });\n    };\n\n    isValidContactPill = (contactPill: string | Contact): boolean => {\n        let isValid = true;\n        const { selectedJustificationReason } = this.state;\n        const { isRestrictionJustificationEnabled } = this.props;\n\n        if (isString(contactPill)) {\n            // If we receive a string it means we're validating unparsed\n            // pill selector input. Check that we have a valid email\n            isValid = emailValidator(contactPill);\n        } else {\n            const hasRequiredJustification = !!selectedJustificationReason && isRestrictionJustificationEnabled;\n            // Invalid emails are filtered out by ContactsField when parsing\n            // new pills, so parsed pills can currently only be invalid\n            // when user is external and external collab is restricted\n            isValid = !this.isRestrictedExternalEmail(contactPill.value) || hasRequiredJustification;\n        }\n        return isValid;\n    };\n\n    getContactPillClassName = (contactPill: SelectOptionProp): string => {\n        const { selectedJustificationReason } = this.state;\n        const { isRestrictionJustificationEnabled } = this.props;\n\n        const pillId = String(contactPill.value);\n        const hasRequiredJustification = !!selectedJustificationReason && isRestrictionJustificationEnabled;\n        const isWaivedPill = this.isRestrictedExternalEmail(pillId) && hasRequiredJustification;\n\n        return isWaivedPill ? 'is-waived' : '';\n    };\n\n    isRestrictedExternalEmail = (email?: string) => {\n        const { restrictedExternalEmails } = this.props;\n\n        return restrictedExternalEmails.includes(email);\n    };\n\n    render() {\n        const { contactsFieldError, contactsRestrictionError, message, selectedJustificationReason } = this.state;\n\n        const {\n            cancelButtonProps,\n            children,\n            config,\n            contactsFieldAvatars,\n            contactsFieldDisabledTooltip,\n            contactsFieldLabel,\n            inlineNotice,\n            isContactsFieldEnabled,\n            isExternalUserSelected,\n            getContactAvatarUrl,\n            getContacts,\n            intl,\n            isExpanded,\n            isFetchingJustificationReasons,\n            isRestrictionJustificationEnabled,\n            justificationReasons,\n            messageProps,\n            onPillCreate,\n            recommendedSharingTooltipCalloutName,\n            restrictedExternalEmails,\n            selectedContacts,\n            sendButtonProps,\n            showEnterEmailsCallout,\n            submitting,\n            suggestedCollaborators,\n        } = this.props;\n\n        const ftuxTooltipProps = {\n            className: 'usm-ftux-tooltip',\n            isShown: showEnterEmailsCallout,\n            position: 'middle-right',\n            showCloseButton: true,\n            text: <FormattedMessage {...messages.enterEmailAddressesCalloutText} />,\n            theme: 'callout',\n        };\n\n        const recommendedSharingTooltipProps = {\n            isShown: !!recommendedSharingTooltipCalloutName,\n            position: 'middle-left',\n            text: (\n                <FormattedMessage\n                    {...messages.recommendedSharingTooltipCalloutText}\n                    values={{ fullName: recommendedSharingTooltipCalloutName }}\n                />\n            ),\n            theme: 'callout',\n        };\n\n        const tooltipPropsToRender = recommendedSharingTooltipCalloutName\n            ? recommendedSharingTooltipProps\n            : ftuxTooltipProps;\n\n        const contactsField = (\n            <div className=\"tooltip-target\">\n                <Tooltip {...tooltipPropsToRender}>\n                    <ContactsField\n                        disabled={!isContactsFieldEnabled}\n                        error={contactsFieldError}\n                        fieldRef={this.contactsFieldRef}\n                        getContacts={getContacts}\n                        getContactAvatarUrl={getContactAvatarUrl}\n                        getPillClassName={this.getContactPillClassName}\n                        label={contactsFieldLabel}\n                        onContactAdd={this.handleContactAdd}\n                        onContactRemove={this.handleContactRemove}\n                        onInput={this.handleContactInput}\n                        onPillCreate={onPillCreate}\n                        selectedContacts={selectedContacts}\n                        suggestedCollaborators={suggestedCollaborators}\n                        validateForError={this.validateContactField}\n                        validator={this.isValidContactPill}\n                        showContactAvatars\n                    />\n                </Tooltip>\n            </div>\n        );\n\n        let contactsFieldWrap;\n        if (isContactsFieldEnabled) {\n            contactsFieldWrap = contactsField;\n        } else {\n            contactsFieldWrap = (\n                <Tooltip position=\"bottom-center\" text={contactsFieldDisabledTooltip}>\n                    {contactsField}\n                </Tooltip>\n            );\n        }\n\n        const hideMessageSection = config && config.showInviteCollaboratorMessageSection === false;\n        const shouldRenderContactRestrictionNotice =\n            isExpanded && hasRestrictedExternalContacts(selectedContacts, restrictedExternalEmails);\n\n        return (\n            <form\n                className={classNames({\n                    'is-expanded': isExpanded,\n                })}\n                onSubmit={this.handleSubmit}\n            >\n                {inlineNotice.content && isExpanded && (\n                    <InlineNotice type={inlineNotice.type}>{inlineNotice.content}</InlineNotice>\n                )}\n                {shouldRenderContactRestrictionNotice && (\n                    <ContactRestrictionNotice\n                        error={contactsRestrictionError}\n                        isFetchingJustificationReasons={isFetchingJustificationReasons}\n                        isRestrictionJustificationEnabled={isRestrictionJustificationEnabled}\n                        justificationReasons={justificationReasons}\n                        onRemoveRestrictedExternalContacts={this.handleRemoveRestrictedExternalContacts}\n                        restrictedExternalEmails={restrictedExternalEmails}\n                        selectedContacts={selectedContacts}\n                        selectedJustificationReason={selectedJustificationReason}\n                        onSelectJustificationReason={this.handleSelectJustificationReason}\n                    />\n                )}\n                {contactsFieldAvatars}\n                {contactsFieldWrap}\n                {children}\n                {isExpanded && !hideMessageSection && (\n                    <TextArea\n                        data-testid=\"be-emailform-message\"\n                        label={<FormattedMessage {...messages.messageTitle} />}\n                        onChange={this.handleMessageChange}\n                        placeholder={intl.formatMessage(commonMessages.messageSelectorPlaceholder)}\n                        rows={3}\n                        value={message}\n                        {...messageProps}\n                    />\n                )}\n                {isExpanded && isExternalUserSelected && (\n                    <div className=\"security-indicator-note\">\n                        <span className=\"security-indicator-icon-globe\">\n                            <IconGlobe height={12} width={12} />\n                        </span>\n                        <FormattedMessage {...messages.contentSharedWithExternalCollaborators} />\n                    </div>\n                )}\n                {isExpanded && (\n                    <ModalActions>\n                        <Button isDisabled={submitting} onClick={this.handleClose} type=\"button\" {...cancelButtonProps}>\n                            <FormattedMessage {...commonMessages.cancel} />\n                        </Button>\n                        <PrimaryButton\n                            isDisabled={submitting}\n                            isLoading={submitting}\n                            type=\"submit\"\n                            {...sendButtonProps}\n                        >\n                            <FormattedMessage {...commonMessages.send} />\n                        </PrimaryButton>\n                    </ModalActions>\n                )}\n            </form>\n        );\n    }\n}\n\nexport { EmailForm as EmailFormBase };\nexport default injectIntl(EmailForm);\n"],"file":"EmailForm.js"}