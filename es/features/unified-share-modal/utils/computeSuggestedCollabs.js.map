{"version":3,"sources":["../../../../src/features/unified-share-modal/utils/computeSuggestedCollabs.js"],"names":["fuzzySearch","scoreComparator","optionA","optionB","userScore","computeSuggestedCollabs","contacts","suggestedCollabLookup","inputValue","maxSuggestions","minCharacters","maxGaps","contactIdSet","Set","map","contact","id","toString","suggestedCollabs","Object","values","exactMatches","filter","suggestedCollab","has","exactMatchIds","suggestedFuzzyMatches","length","option","includes","nameMatches","name","emailAddress","email","emailAlias","substring","indexOf","emailMatches","suggestedResult","sort","slice","suggestedResultIds","suggestion","otherResults"],"mappings":";;;;;;;;AAAA;;;;;AAMA,OAAOA,WAAP,MAAwB,4BAAxB;;AAEA,SAASC,eAAT,CAAyBC,OAAzB,EAAmDC,OAAnD,EAAqF;AACjF,SAAOA,OAAO,CAACC,SAAR,GAAoBF,OAAO,CAACE,SAAnC;AACH;AAED;;;;;;AAIA,SAASC,uBAAT,CACIC,QADJ,EAEIC,qBAFJ,EAGIC,UAHJ,EAOsC;AAAA,MAHlCC,cAGkC,uEAHT,CAGS;AAAA,MAFlCC,aAEkC,uEAFV,CAEU;AAAA,MADlCC,OACkC,uEADhB,CACgB;AAClC,MAAMC,YAAY,GAAG,IAAIC,GAAJ,CAAQP,QAAQ,CAACQ,GAAT,CAAa,UAAAC,OAAO;AAAA,WAAIA,OAAO,CAACC,EAAR,CAAWC,QAAX,EAAJ;AAAA,GAApB,CAAR,CAArB,CADkC,CAElC;;AACA,MAAMC,gBAAwC,GAAGC,MAAM,CAACC,MAAP,CAAcb,qBAAd,CAAjD;AACA,MAAMc,YAAoC,GAAGH,gBAAgB,CAACI,MAAjB,CACzC,UAAAC,eAAe;AAAA,WAAIA,eAAe,CAACP,EAAhB,IAAsBJ,YAAY,CAACY,GAAb,CAAiBD,eAAe,CAACP,EAAhB,CAAmBC,QAAnB,EAAjB,CAA1B;AAAA,GAD0B,CAA7C;AAGA,MAAMQ,aAAa,GAAGJ,YAAY,CAACP,GAAb,CAAiB,UAAAS,eAAe;AAAA,WAAIA,eAAe,CAACP,EAAhB,CAAmBC,QAAnB,EAAJ;AAAA,GAAhC,CAAtB;AAEA,MAAMS,qBAAqB,GACvBL,YAAY,CAACM,MAAb,IAAuBlB,cAAvB,GACM,EADN,GAEMS,gBAAgB,CAACI,MAAjB,CAAwB,UAACM,MAAD,EAA6B;AACjD,QAAI,CAACpB,UAAD,IAAeiB,aAAa,CAACI,QAAd,CAAuBD,MAAM,CAACZ,EAAP,CAAUC,QAAV,EAAvB,CAAnB,EAAiE;AAC7D,aAAO,KAAP;AACH;;AACD,QAAMa,WAAW,GAAG9B,WAAW,CAACQ,UAAD,EAAaoB,MAAM,CAACG,IAApB,EAA0BrB,aAA1B,EAAyCC,OAAzC,CAA/B;AACA,QAAMqB,YAAY,GAAGJ,MAAM,CAACK,KAAP,IAAgB,EAArC;AACA,QAAMC,UAAU,GAAGF,YAAY,CAACG,SAAb,CAAuB,CAAvB,EAA0BH,YAAY,CAACI,OAAb,CAAqB,GAArB,CAA1B,CAAnB;AACA,QAAMC,YAAY,GAAG7B,UAAU,CAACmB,MAAX,IAAqBjB,aAArB,IAAsCwB,UAAU,CAACL,QAAX,CAAoBrB,UAApB,CAA3D;AACA,WAAOsB,WAAW,IAAIO,YAAtB;AACH,GATD,CAHV,CATkC,CAuBlC;;AACA,MAAMC,eAAe,GAAG,6BACjBjB,YAAY,CAACkB,IAAb,CAAkBtC,eAAlB,CADiB,sBAEjByB,qBAAqB,CAACa,IAAtB,CAA2BtC,eAA3B,CAFiB,GAGtBuC,KAHsB,CAGhB,CAHgB,EAGb/B,cAHa,CAAxB;AAIA,MAAMgC,kBAAkB,GAAGH,eAAe,CAACxB,GAAhB,CAAoB,UAAA4B,UAAU;AAAA,WAAIA,UAAU,CAAC1B,EAAf;AAAA,GAA9B,CAA3B;AACA,MAAM2B,YAAY,GAAGrC,QAAQ,CAACgB,MAAT,CAAgB,UAAAP,OAAO;AAAA,WAAI,CAAC0B,kBAAkB,CAACZ,QAAnB,CAA4Bd,OAAO,CAACC,EAApC,CAAL;AAAA,GAAvB,CAArB;AAEA,SAAO,CAACsB,eAAD,EAAkBK,YAAlB,CAAP;AACH;;AAED,eAAetC,uBAAf","sourcesContent":["/**\n * @flow\n * @file Suggested Collaborator utility functions\n * @author Box\n */\nimport type { SuggestedCollab, SuggestedCollabLookup } from '../flowTypes';\nimport fuzzySearch from '../../../utils/fuzzySearch';\n\nfunction scoreComparator(optionA: SuggestedCollab, optionB: SuggestedCollab): number {\n    return optionB.userScore - optionA.userScore;\n}\n\n/**\n * Function to compute suggested collaborators given a list of contacts and cached suggested collaborators.\n * Used by input components to help augment API results with cached suggestions using a fuzzy search.\n */\nfunction computeSuggestedCollabs<C: { id: string }>(\n    contacts: Array<C>,\n    suggestedCollabLookup: SuggestedCollabLookup,\n    inputValue: string,\n    maxSuggestions: number = 3,\n    minCharacters: number = 3,\n    maxGaps: number = 2,\n): [Array<SuggestedCollab>, Array<C>] {\n    const contactIdSet = new Set(contacts.map(contact => contact.id.toString()));\n    // $FlowFixMe\n    const suggestedCollabs: Array<SuggestedCollab> = Object.values(suggestedCollabLookup);\n    const exactMatches: Array<SuggestedCollab> = suggestedCollabs.filter(\n        suggestedCollab => suggestedCollab.id && contactIdSet.has(suggestedCollab.id.toString()),\n    );\n    const exactMatchIds = exactMatches.map(suggestedCollab => suggestedCollab.id.toString());\n\n    const suggestedFuzzyMatches =\n        exactMatches.length >= maxSuggestions\n            ? []\n            : suggestedCollabs.filter((option: SuggestedCollab) => {\n                  if (!inputValue || exactMatchIds.includes(option.id.toString())) {\n                      return false;\n                  }\n                  const nameMatches = fuzzySearch(inputValue, option.name, minCharacters, maxGaps);\n                  const emailAddress = option.email || '';\n                  const emailAlias = emailAddress.substring(0, emailAddress.indexOf('@'));\n                  const emailMatches = inputValue.length >= minCharacters && emailAlias.includes(inputValue);\n                  return nameMatches || emailMatches;\n              });\n\n    // combine both lists preferring exact id matches over fuzzy matches\n    const suggestedResult = [\n        ...exactMatches.sort(scoreComparator),\n        ...suggestedFuzzyMatches.sort(scoreComparator),\n    ].slice(0, maxSuggestions);\n    const suggestedResultIds = suggestedResult.map(suggestion => suggestion.id);\n    const otherResults = contacts.filter(contact => !suggestedResultIds.includes(contact.id));\n\n    return [suggestedResult, otherResults];\n}\n\nexport default computeSuggestedCollabs;\n"],"file":"computeSuggestedCollabs.js"}