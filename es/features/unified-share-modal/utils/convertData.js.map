{"version":3,"sources":["../../../../src/features/unified-share-modal/utils/convertData.js"],"names":["getTypedFileId","getTypedFolderId","checkIsExternalUser","ACCESS_COLLAB","ACCESS_COMPANY","ACCESS_NONE","ACCESS_OPEN","INVITEE_ROLE_EDITOR","PERMISSION_CAN_DOWNLOAD","PERMISSION_CAN_PREVIEW","STATUS_ACCEPTED","STATUS_INACTIVE","TYPE_FOLDER","ALLOWED_ACCESS_LEVELS","ANYONE_IN_COMPANY","ANYONE_WITH_LINK","CAN_VIEW_DOWNLOAD","CAN_VIEW_ONLY","COLLAB_GROUP_TYPE","COLLAB_USER_TYPE","DISABLED_REASON_ACCESS_POLICY","DISABLED_REASON_MALICIOUS_CONTENT","PEOPLE_IN_ITEM","bdlDarkBlue50","bdlGray20","bdlGreenLight50","bdlLightBlue50","bdlOrange50","bdlPurpleRain50","bdlWatermelonRed50","bdlYellow50","CLASSIFICATION_COLOR_ID_0","CLASSIFICATION_COLOR_ID_1","CLASSIFICATION_COLOR_ID_2","CLASSIFICATION_COLOR_ID_3","CLASSIFICATION_COLOR_ID_4","CLASSIFICATION_COLOR_ID_5","CLASSIFICATION_COLOR_ID_6","CLASSIFICATION_COLOR_ID_7","API_TO_USM_ACCESS_LEVEL_MAP","API_TO_USM_PERMISSION_LEVEL_MAP","USM_TO_API_ACCESS_LEVEL_MAP","USM_TO_API_PERMISSION_LEVEL_MAP","API_TO_USM_CLASSIFICATION_COLORS_MAP","APP_USERS_DOMAIN_REGEXP","RegExp","convertAccessLevelsDisabledReasons","disabledReasons","convertedReasons","Object","entries","forEach","level","reason","convertAllowedAccessLevels","levelsFromAPI","convertedLevels","peopleInThisItem","peopleInYourCompany","peopleWithTheLink","convertItemResponse","itemAPIData","allowed_invitee_roles","allowed_shared_link_access_levels","allowed_shared_link_access_levels_disabled_reasons","classification","id","description","extension","name","owned_by","ownerID","ownerEmail","login","permissions","shared_link","shared_link_features","isDirectLinkAvailable","download_url","isPasswordAvailable","password","type","isDownloadSettingAvailable","can_download","canInvite","can_invite_collaborator","isPreviewAllowed","can_preview","canChangeAccessLevel","can_set_share_access","itemShare","can_share","classificationData","color","definition","classificationName","bannerPolicy","body","colorID","isEditAllowed","indexOf","sharedLink","directLink","effective_access","effective_permission","isPasswordEnabled","is_password_enabled","expirationTimestamp","unshared_at","url","vanityName","vanity_name","accessLevel","permissionLevel","isDownloadAllowed","canChangeDownload","canChangePassword","canChangeExpiration","accessLevelsDisabledReason","allowedAccessLevels","canChangeVanityName","Date","getTime","isDownloadAvailable","isDownloadEnabled","isNewSharedLink","item","canUserSeeClassification","grantedPermissions","hideCollaborators","typedID","convertUserResponse","userAPIData","enterprise","hostname","userEnterpriseData","enterpriseName","serverURL","convertSharedLinkPermissions","newSharedLinkPermissionLevel","sharedLinkPermissions","keys","convertSharedLinkSettings","newSettings","isExpirationEnabled","convertedSettings","toISOString","vanity_url","includes","convertCollab","collab","avatarURLMap","isCurrentUserOwner","status","ownerEmailDomain","test","split","accessible_by","userID","email","collabID","executeAt","expires_at","role","avatarURL","undefined","convertedCollab","parseInt","hasCustomAvatar","imageURL","isExternalCollab","translatedRole","toUpperCase","slice","expiration","convertCollabsResponse","collabsAPIData","length","collaborators","filter","push","convertCollabsRequest","collabRequest","emails","groupIDs","permission","emailArray","groupIDArray","roleSettings","toLowerCase","groups","map","groupID","users","sortByName","nameA","nameB","localeCompare","convertUserContactsResponse","contactsAPIData","currentUserID","contact","sort","convertUserContactsByEmailResponse","contactsMap","convertGroupContactsResponse","can_invite_as_collaborator"],"mappings":"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","sourcesContent":["// @flow\nimport { getTypedFileId, getTypedFolderId } from '../../../utils/file';\nimport { checkIsExternalUser } from '../../../utils/parseEmails';\nimport {\n    ACCESS_COLLAB,\n    ACCESS_COMPANY,\n    ACCESS_NONE,\n    ACCESS_OPEN,\n    INVITEE_ROLE_EDITOR,\n    PERMISSION_CAN_DOWNLOAD,\n    PERMISSION_CAN_PREVIEW,\n    STATUS_ACCEPTED,\n    STATUS_INACTIVE,\n    TYPE_FOLDER,\n} from '../../../constants';\nimport {\n    ALLOWED_ACCESS_LEVELS,\n    ANYONE_IN_COMPANY,\n    ANYONE_WITH_LINK,\n    CAN_VIEW_DOWNLOAD,\n    CAN_VIEW_ONLY,\n    COLLAB_GROUP_TYPE,\n    COLLAB_USER_TYPE,\n    DISABLED_REASON_ACCESS_POLICY,\n    DISABLED_REASON_MALICIOUS_CONTENT,\n    PEOPLE_IN_ITEM,\n} from '../constants';\nimport {\n    bdlDarkBlue50,\n    bdlGray20,\n    bdlGreenLight50,\n    bdlLightBlue50,\n    bdlOrange50,\n    bdlPurpleRain50,\n    bdlWatermelonRed50,\n    bdlYellow50,\n} from '../../../styles/variables';\nimport {\n    CLASSIFICATION_COLOR_ID_0,\n    CLASSIFICATION_COLOR_ID_1,\n    CLASSIFICATION_COLOR_ID_2,\n    CLASSIFICATION_COLOR_ID_3,\n    CLASSIFICATION_COLOR_ID_4,\n    CLASSIFICATION_COLOR_ID_5,\n    CLASSIFICATION_COLOR_ID_6,\n    CLASSIFICATION_COLOR_ID_7,\n} from '../../classification/constants';\nimport type {\n    AvatarURLMap,\n    ContentSharingCollaborationsRequest,\n    ContentSharingItemAPIResponse,\n    ContentSharingItemDataType,\n    ContentSharingUserDataType,\n    ConvertCollabOptions,\n    SharedLinkSettingsOptions,\n} from '../../../elements/content-sharing/types';\nimport type {\n    BoxItemPermission,\n    Collaborations,\n    GroupCollection,\n    SharedLink,\n    User,\n    UserCollection,\n} from '../../../common/types/core';\nimport type {\n    accessLevelsDisabledReasonType,\n    allowedAccessLevelsType,\n    collaboratorsListType,\n    collaboratorType,\n    contactType,\n    InviteCollaboratorsRequest,\n} from '../flowTypes';\n\n/**\n * The following constants are used for converting API requests\n * and responses into objects expected by the USM, and vice versa\n */\nexport const API_TO_USM_ACCESS_LEVEL_MAP = {\n    [ACCESS_COLLAB]: PEOPLE_IN_ITEM,\n    [ACCESS_COMPANY]: ANYONE_IN_COMPANY,\n    [ACCESS_OPEN]: ANYONE_WITH_LINK,\n    [ACCESS_NONE]: '',\n};\nexport const API_TO_USM_PERMISSION_LEVEL_MAP = {\n    [PERMISSION_CAN_DOWNLOAD]: CAN_VIEW_DOWNLOAD,\n    [PERMISSION_CAN_PREVIEW]: CAN_VIEW_ONLY,\n};\n\nexport const USM_TO_API_ACCESS_LEVEL_MAP = {\n    [ANYONE_IN_COMPANY]: ACCESS_COMPANY,\n    [ANYONE_WITH_LINK]: ACCESS_OPEN,\n    [PEOPLE_IN_ITEM]: ACCESS_COLLAB,\n};\n\nexport const USM_TO_API_PERMISSION_LEVEL_MAP = {\n    [CAN_VIEW_DOWNLOAD]: PERMISSION_CAN_DOWNLOAD,\n    [CAN_VIEW_ONLY]: PERMISSION_CAN_PREVIEW,\n};\n\nconst API_TO_USM_CLASSIFICATION_COLORS_MAP = {\n    [bdlYellow50]: CLASSIFICATION_COLOR_ID_0,\n    [bdlOrange50]: CLASSIFICATION_COLOR_ID_1,\n    [bdlWatermelonRed50]: CLASSIFICATION_COLOR_ID_2,\n    [bdlPurpleRain50]: CLASSIFICATION_COLOR_ID_3,\n    [bdlLightBlue50]: CLASSIFICATION_COLOR_ID_4,\n    [bdlDarkBlue50]: CLASSIFICATION_COLOR_ID_5,\n    [bdlGreenLight50]: CLASSIFICATION_COLOR_ID_6,\n    [bdlGray20]: CLASSIFICATION_COLOR_ID_7,\n};\n\nconst APP_USERS_DOMAIN_REGEXP = new RegExp('boxdevedition.com');\n\n/**\n * Convert access levels disabled reasons into USM format.\n *\n * @param {{ [string]: string }} disabledReasons\n * @returns {accessLevelsDisabledReasonType | null}\n */\nexport const convertAccessLevelsDisabledReasons = (disabledReasons?: {\n    [string]: typeof DISABLED_REASON_ACCESS_POLICY | typeof DISABLED_REASON_MALICIOUS_CONTENT | null,\n}): accessLevelsDisabledReasonType | null => {\n    if (!disabledReasons) return null;\n    const convertedReasons = {};\n    Object.entries(disabledReasons).forEach(([level, reason]) => {\n        convertedReasons[API_TO_USM_ACCESS_LEVEL_MAP[level]] = reason;\n    });\n    return convertedReasons;\n};\n\n/**\n * Convert allowed access levels into USM format.\n *\n * @param {Array<string>} [levelsFromAPI]\n * @returns {allowedAccessLevelsType | null}\n */\nexport const convertAllowedAccessLevels = (levelsFromAPI?: Array<string>): allowedAccessLevelsType | null => {\n    if (!levelsFromAPI) return null;\n    const convertedLevels = {\n        peopleInThisItem: false,\n        peopleInYourCompany: false,\n        peopleWithTheLink: false,\n    };\n    levelsFromAPI.forEach(level => {\n        convertedLevels[API_TO_USM_ACCESS_LEVEL_MAP[level]] = true;\n    });\n    return convertedLevels;\n};\n\n/**\n * Convert a response from the Item API to the object that the USM expects.\n *\n * @param {BoxItem} itemAPIData\n * @returns {ContentSharingItemDataType} Object containing item and shared link information\n */\n\nexport const convertItemResponse = (itemAPIData: ContentSharingItemAPIResponse): ContentSharingItemDataType => {\n    const {\n        allowed_invitee_roles,\n        allowed_shared_link_access_levels,\n        allowed_shared_link_access_levels_disabled_reasons,\n        classification,\n        id,\n        description,\n        extension,\n        name,\n        owned_by: { id: ownerID, login: ownerEmail },\n        permissions,\n        shared_link,\n        shared_link_features: { download_url: isDirectLinkAvailable, password: isPasswordAvailable },\n        type,\n    } = itemAPIData;\n\n    const {\n        can_download: isDownloadSettingAvailable,\n        can_invite_collaborator: canInvite,\n        can_preview: isPreviewAllowed,\n        can_set_share_access: canChangeAccessLevel,\n        can_share: itemShare,\n    } = permissions;\n\n    // Convert classification data for the item if available\n    let classificationData = {};\n    if (classification) {\n        const { color, definition, name: classificationName } = classification;\n        classificationData = {\n            bannerPolicy: {\n                body: definition,\n                colorID: API_TO_USM_CLASSIFICATION_COLORS_MAP[color],\n            },\n            classification: classificationName,\n        };\n    }\n\n    const isEditAllowed = allowed_invitee_roles.indexOf(INVITEE_ROLE_EDITOR) !== -1;\n\n    // The \"canInvite\" property is necessary even if the item does not have a shared link,\n    // because it allows users to invite individual collaborators.\n    let sharedLink = { canInvite: !!canInvite };\n\n    if (shared_link) {\n        const {\n            download_url: directLink,\n            effective_access,\n            effective_permission,\n            is_password_enabled: isPasswordEnabled,\n            password,\n            unshared_at: expirationTimestamp,\n            url,\n            vanity_name: vanityName,\n        } = shared_link;\n\n        const accessLevel = effective_access ? API_TO_USM_ACCESS_LEVEL_MAP[effective_access] : '';\n        const permissionLevel = effective_permission ? API_TO_USM_PERMISSION_LEVEL_MAP[effective_permission] : null;\n        const isDownloadAllowed = permissionLevel === API_TO_USM_PERMISSION_LEVEL_MAP.can_download;\n        const canChangeDownload =\n            canChangeAccessLevel && isDownloadSettingAvailable && effective_access !== ACCESS_COLLAB; // access must be \"company\" or \"open\"\n        const canChangePassword = canChangeAccessLevel && isPasswordAvailable;\n        const canChangeExpiration = canChangeAccessLevel && isEditAllowed;\n\n        sharedLink = {\n            accessLevel,\n            accessLevelsDisabledReason:\n                convertAccessLevelsDisabledReasons(allowed_shared_link_access_levels_disabled_reasons) || {},\n            allowedAccessLevels: convertAllowedAccessLevels(allowed_shared_link_access_levels) || ALLOWED_ACCESS_LEVELS, // show all access levels by default\n            canChangeAccessLevel,\n            canChangeDownload,\n            canChangeExpiration,\n            canChangePassword,\n            canChangeVanityName: false, // vanity URLs cannot be set via the API\n            canInvite: !!canInvite,\n            directLink,\n            expirationTimestamp: expirationTimestamp ? new Date(expirationTimestamp).getTime() : null, // convert to milliseconds\n            isDirectLinkAvailable,\n            isDownloadAllowed,\n            isDownloadAvailable: isDownloadSettingAvailable,\n            isDownloadEnabled: isDownloadAllowed,\n            isDownloadSettingAvailable,\n            isEditAllowed,\n            isNewSharedLink: false,\n            isPasswordAvailable,\n            isPasswordEnabled,\n            isPreviewAllowed,\n            password,\n            permissionLevel,\n            url,\n            vanityName: vanityName || '',\n        };\n    }\n\n    return {\n        item: {\n            canUserSeeClassification: !!classification,\n            description,\n            extension,\n            grantedPermissions: {\n                itemShare: !!itemShare,\n            },\n            hideCollaborators: false, // to do: connect to Collaborations API\n            id,\n            name,\n            ownerEmail, // the owner email is used to determine whether collaborators are external\n            ownerID, // the owner ID is used to determine whether external collaborator badges should be shown\n            permissions, // the original permissions are necessary for PUT requests to the Item API\n            type,\n            typedID: type === TYPE_FOLDER ? getTypedFolderId(id) : getTypedFileId(id),\n            ...classificationData,\n        },\n        sharedLink,\n    };\n};\n\n/**\n * Convert a response from the User API into the object that the USM expects.\n *\n * @param {User} userAPIData\n * @returns {ContentSharingUserDataType} Object containing user and enterprise information\n */\nexport const convertUserResponse = (userAPIData: User): ContentSharingUserDataType => {\n    const { enterprise, hostname, id } = userAPIData;\n\n    return {\n        id,\n        userEnterpriseData: {\n            enterpriseName: enterprise ? enterprise.name : '',\n            serverURL: hostname ? `${hostname}v/` : '',\n        },\n    };\n};\n\n/**\n * Create a shared link permissions object for the API based on a USM permission level.\n *\n * @param {string} newSharedLinkPermissionLevel\n * @returns {$Shape<BoxItemPermission>} Object containing shared link permissions\n */\nexport const convertSharedLinkPermissions = (newSharedLinkPermissionLevel: string): $Shape<BoxItemPermission> => {\n    const sharedLinkPermissions = {};\n    Object.keys(USM_TO_API_PERMISSION_LEVEL_MAP).forEach(level => {\n        if (level === newSharedLinkPermissionLevel) {\n            sharedLinkPermissions[USM_TO_API_PERMISSION_LEVEL_MAP[level]] = true;\n        } else {\n            sharedLinkPermissions[USM_TO_API_PERMISSION_LEVEL_MAP[level]] = false;\n        }\n    });\n    return sharedLinkPermissions;\n};\n\n/**\n * Convert a shared link settings object from the USM into the format that the API expects.\n * This function compares the provided access level to both API and internal USM access level constants, to accommodate two potential flows:\n * - Changing the settings for a shared link right after the shared link has been created. The access level is saved directly from the data\n *   returned by the API, so it is in API format.\n * - Changing the settings for a shared link in any other scenario. The access level is saved from the initial calls to the Item API and\n *   convertItemResponse, so it is in internal USM format.\n *\n * @param {SharedLinkSettingsOptions} newSettings\n * @param {accessLevel} string\n * @param {serverURL} string\n * @returns {$Shape<SharedLink>}\n */\nexport const convertSharedLinkSettings = (\n    newSettings: SharedLinkSettingsOptions,\n    accessLevel: string,\n    isDownloadAvailable: boolean,\n    serverURL: string,\n): $Shape<SharedLink> => {\n    const {\n        expirationTimestamp,\n        isDownloadEnabled: can_download,\n        isExpirationEnabled,\n        isPasswordEnabled,\n        password,\n        vanityName,\n    } = newSettings;\n    const convertedSettings: $Shape<SharedLink> = {\n        unshared_at: expirationTimestamp && isExpirationEnabled ? new Date(expirationTimestamp).toISOString() : null,\n        vanity_url: serverURL && vanityName ? `${serverURL}${vanityName}` : '',\n    };\n\n    // Download permissions can only be set on \"company\" or \"open\" shared links.\n    if (![ACCESS_COLLAB, PEOPLE_IN_ITEM].includes(accessLevel)) {\n        const permissions: BoxItemPermission = { can_preview: !can_download };\n        if (isDownloadAvailable) {\n            permissions.can_download = can_download;\n        }\n\n        convertedSettings.permissions = permissions;\n    }\n\n    /**\n     * This block covers the following cases:\n     * - Setting a new password: \"isPasswordEnabled\" is true, and \"password\" is a non-empty string.\n     * - Removing a password: \"isPasswordEnabled\" is false, and \"password\" is an empty string.\n     *   The API only accepts non-empty strings and null values, so the empty string must be converted to null.\n     *\n     * Other notes:\n     * - Passwords can only be set on \"open\" shared links.\n     * - Attempting to set the password field on any other type of shared link will throw a 400 error.\n     * - When other settings are updated, and a password has already been set, the SharedLinkSettingsModal\n     *   returns password = '' and isPasswordEnabled = true. In these cases, the password should *not*\n     *   be converted to null, because that would remove the existing password.\n     */\n    if ([ANYONE_WITH_LINK, ACCESS_OPEN].includes(accessLevel)) {\n        if (isPasswordEnabled && !!password) {\n            convertedSettings.password = password;\n        } else if (!isPasswordEnabled) {\n            convertedSettings.password = null;\n        }\n    }\n\n    return convertedSettings;\n};\n\n/**\n * Convert a collaborator.\n * Note: We do not retrieve the avatar URL of collaborators right after inviting them,\n * so the avatar fields (hasCustomAvatar and imageURL) are not set in that case.\n *\n * @param {ConvertCollabOptions} options\n * @returns {collaboratorType | null} Object containing a collaborator\n */\nexport const convertCollab = ({\n    collab,\n    avatarURLMap,\n    ownerEmail,\n    isCurrentUserOwner = false,\n}: ConvertCollabOptions): collaboratorType | null => {\n    if (!collab || collab.status !== STATUS_ACCEPTED) return null;\n\n    const ownerEmailDomain = ownerEmail && /@/.test(ownerEmail) ? ownerEmail.split('@')[1] : null;\n\n    const {\n        accessible_by: { id: userID, login: email, name, type },\n        id: collabID,\n        expires_at: executeAt,\n        role,\n    } = collab;\n    const avatarURL = avatarURLMap ? avatarURLMap[userID] : undefined;\n    const convertedCollab: collaboratorType = {\n        collabID: parseInt(collabID, 10),\n        email,\n        hasCustomAvatar: !!avatarURL,\n        imageURL: avatarURL,\n        isExternalCollab: checkIsExternalUser(isCurrentUserOwner, ownerEmailDomain, email),\n        name,\n        translatedRole: `${role[0].toUpperCase()}${role.slice(1)}`, // capitalize the user's role\n        type,\n        userID: parseInt(userID, 10),\n    };\n    if (executeAt) {\n        convertedCollab.expiration = { executeAt };\n    }\n    return convertedCollab;\n};\n\n/**\n * Convert a response from the Item Collaborations API into the object that the USM expects.\n *\n * @param {Collaborations} collabsAPIData\n * @param {AvatarURLMap | null} avatarURLMap\n * @param {string | null | undefined} ownerEmail\n * @param {boolean} isCurrentUserOwner\n * @returns {collaboratorsListType} Object containing an array of collaborators\n */\nexport const convertCollabsResponse = (\n    collabsAPIData: Collaborations,\n    avatarURLMap: ?AvatarURLMap,\n    ownerEmail: ?string,\n    isCurrentUserOwner: boolean,\n): collaboratorsListType => {\n    const { entries = [] } = collabsAPIData;\n\n    if (!entries.length) return { collaborators: [] };\n\n    const collaborators = [];\n\n    entries\n        // Only show accepted collaborations\n        .filter(collab => collab.status === STATUS_ACCEPTED)\n        .forEach(collab => {\n            const convertedCollab = convertCollab({ collab, avatarURLMap, ownerEmail, isCurrentUserOwner });\n            if (convertedCollab) {\n                // Necessary for Flow checking\n                collaborators.push(convertedCollab);\n            }\n        });\n\n    return { collaborators };\n};\n\n/**\n * Convert a request from the USM (specifically the Invite Collaborators Modal) into the format expected by the Collaborations API.\n * ContentSharing/USM will only call this function when at least one properly-formatted email is entered into the \"Invite People\" field.\n * Within the context of this feature, groups are identified by IDs, whereas users are identified by their emails.\n *\n * @param {InviteCollaboratorsRequest} collabRequest\n * @returns {ContentSharingCollaborationsRequest}\n */\nexport const convertCollabsRequest = (\n    collabRequest: InviteCollaboratorsRequest,\n): ContentSharingCollaborationsRequest => {\n    const { emails, groupIDs, permission } = collabRequest;\n    const emailArray = emails ? emails.split(',') : [];\n    const groupIDArray = groupIDs ? groupIDs.split(',') : [];\n\n    const roleSettings = {\n        role: permission.toLowerCase(), // USM permissions are identical to API roles, except for the casing\n    };\n\n    const groups = groupIDArray.map(groupID => ({\n        accessible_by: {\n            id: groupID,\n            type: COLLAB_GROUP_TYPE,\n        },\n        ...roleSettings,\n    }));\n\n    const users = emailArray.map(email => ({\n        accessible_by: {\n            login: email,\n            type: COLLAB_USER_TYPE,\n        },\n        ...roleSettings,\n    }));\n\n    return { groups, users };\n};\n\nconst sortByName = ({ name: nameA = '' }, { name: nameB = '' }) => nameA.localeCompare(nameB);\n\n/**\n * Convert an enterprise users API response into an array of internal USM contacts.\n *\n * @param {UserCollection} contactsAPIData\n * @param {string|null} currentUserID\n * @returns {Array<contactType>} Array of USM contacts\n */\nexport const convertUserContactsResponse = (\n    contactsAPIData: UserCollection,\n    currentUserID: string | null,\n): Array<contactType> => {\n    const { entries = [] } = contactsAPIData;\n\n    // Return all active users except for the current user and app users\n    return entries\n        .filter(\n            ({ id, login: email, status }) =>\n                id !== currentUserID &&\n                email &&\n                !APP_USERS_DOMAIN_REGEXP.test(email) &&\n                status &&\n                status !== STATUS_INACTIVE,\n        )\n        .map(contact => {\n            const { id, login: email, name, type } = contact;\n            return {\n                id,\n                email,\n                name,\n                type,\n            };\n        })\n        .sort(sortByName);\n};\n\n/**\n * Convert an enterprise users API response into an object of internal USM contacts, keyed by email, which is\n * then passed to the mergeContacts function.\n *\n * @param {UserCollection} contactsAPIData\n * @returns { [string]: contactType } Object of USM contacts\n */\nexport const convertUserContactsByEmailResponse = (contactsAPIData: UserCollection): { [string]: contactType } => {\n    const { entries = [] } = contactsAPIData;\n    const contactsMap = {};\n\n    entries.forEach(contact => {\n        const { id, login: email = '', name, type } = contact;\n        contactsMap[email] = {\n            id,\n            email,\n            name,\n            type,\n        };\n    });\n\n    return contactsMap;\n};\n\n/**\n * Convert an enterprise groups API response into an array of internal USM contacts.\n *\n * @param {GroupCollection} contactsAPIData\n * @returns {Array<contactType>} Array of USM contacts\n */\nexport const convertGroupContactsResponse = (contactsAPIData: GroupCollection): Array<contactType> => {\n    const { entries = [] } = contactsAPIData;\n\n    // Only return groups with the correct permissions\n    return entries\n        .filter(({ permissions }) => {\n            return permissions && permissions.can_invite_as_collaborator;\n        })\n        .map(contact => {\n            const { id, name, type } = contact;\n            return {\n                id,\n                name,\n                type,\n            };\n        })\n        .sort(sortByName);\n};\n"],"file":"convertData.js"}