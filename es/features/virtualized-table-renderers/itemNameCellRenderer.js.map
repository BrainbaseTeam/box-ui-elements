{"version":3,"sources":["../../../src/features/virtualized-table-renderers/itemNameCellRenderer.js"],"names":["React","classNames","noop","getFileExtension","messages","FileIcon","FolderIcon","PlainButton","baseCellRenderer","itemNameCellRenderer","intl","onClick","cellRendererParams","cellValue","name","type","isExternal","dataAttributes","extension","displayName","formatMessage","externalFile","isFolder","itemNameCellClass"],"mappings":";;AACA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AAEA,OAAOC,IAAP,MAAiB,aAAjB;AACA,SAASC,gBAAT,QAAiC,kBAAjC;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,QAAP,MAAqB,uBAArB;AACA,OAAOC,UAAP,MAAuB,yBAAvB;AACA,OAAOC,WAAP,MAAwB,2CAAxB;AACA,OAAOC,gBAAP,MAA6B,oBAA7B;AAEA,OAAO,qBAAP;;AAEA,IAAMC,oBAAoB,GAAG,SAAvBA,oBAAuB,CAACC,IAAD;AAAA,MAAYC,QAAZ,uEAAiCT,IAAjC;;AAAA,SAA0C,UACnEU,kBADmE;AAAA,WAGnEJ,gBAAgB,CAACI,kBAAD,EAAqB,UAACC,SAAD,EAA6C;AAAA,UACtEC,IADsE,GAC3BD,SAD2B,CACtEC,IADsE;AAAA,UAChEC,IADgE,GAC3BF,SAD2B,CAChEE,IADgE;AAAA,UAC1DC,UAD0D,GAC3BH,SAD2B,CAC1DG,UAD0D;AAAA,UAC9CC,cAD8C,GAC3BJ,SAD2B,CAC9CI,cAD8C;AAE9E,UAAMC,SAAS,GAAGf,gBAAgB,CAACW,IAAD,CAAlC;AACA,UAAMK,WAAW,GAAGH,UAAU,GAAGN,IAAI,CAACU,aAAL,CAAmBhB,QAAQ,CAACiB,YAA5B,CAAH,GAA+CP,IAA7E;AACA,UAAMQ,QAAQ,GAAGP,IAAI,KAAK,QAA1B;AACA,UAAMQ,iBAAiB,GAAGtB,UAAU,CAAC,uBAAD,EAA0B;AAC1D,2BAAmBe,UADuC;AAE1D,yBAAiBM;AAFyC,OAA1B,CAApC;AAKA,aACI;AAAM,QAAA,SAAS,EAAC,kBAAhB;AAAmC,QAAA,KAAK,EAAEH;AAA1C,SACKG,QAAQ,GACL,0CACI,oBAAC,UAAD;AAAY,QAAA,SAAS,EAAE,EAAvB;AAA2B,QAAA,UAAU,EAAEN;AAAvC,QADJ,EAEI,oBAAC,WAAD;AACI,QAAA,SAAS,EAAEO,iBADf;AAEI,QAAA,OAAO,EAAE;AAAA,iBAAMZ,QAAO,CAACE,SAAD,CAAb;AAAA,SAFb;AAGI,QAAA,IAAI,EAAC;AAHT,SAIQI,cAJR,GAMKE,WANL,CAFJ,CADK,GAaL,0CACI,oBAAC,QAAD;AAAU,QAAA,SAAS,EAAE,EAArB;AAAyB,QAAA,SAAS,EAAED;AAApC,QADJ,EAEI;AAAM,QAAA,SAAS,EAAEK;AAAjB,SAAwCN,cAAxC,GACKE,WADL,CAFJ,CAdR,CADJ;AAwBH,KAlCe,CAHmD;AAAA,GAA1C;AAAA,CAA7B;;AAuCA,eAAeV,oBAAf","sourcesContent":["// @flow\nimport * as React from 'react';\nimport classNames from 'classnames';\n\nimport noop from 'lodash/noop';\nimport { getFileExtension } from '../../utils/file';\nimport messages from './messages';\nimport FileIcon from '../../icons/file-icon';\nimport FolderIcon from '../../icons/folder-icon';\nimport PlainButton from '../../components/plain-button/PlainButton';\nimport baseCellRenderer from './baseCellRenderer';\nimport type { ItemNameCellRendererCellData, ItemNameCellRendererParams } from './flowTypes';\nimport './ItemNameCell.scss';\n\nconst itemNameCellRenderer = (intl: any, onClick?: Function = noop) => (\n    cellRendererParams: ItemNameCellRendererParams,\n) =>\n    baseCellRenderer(cellRendererParams, (cellValue: ItemNameCellRendererCellData) => {\n        const { name, type, isExternal, dataAttributes } = cellValue;\n        const extension = getFileExtension(name);\n        const displayName = isExternal ? intl.formatMessage(messages.externalFile) : name;\n        const isFolder = type === 'folder';\n        const itemNameCellClass = classNames('bdl-ItemNameCell-name', {\n            'bdl-is-external': isExternal,\n            'bdl-is-folder': isFolder,\n        });\n\n        return (\n            <span className=\"bdl-ItemNameCell\" title={displayName}>\n                {isFolder ? (\n                    <>\n                        <FolderIcon dimension={32} isExternal={isExternal} />\n                        <PlainButton\n                            className={itemNameCellClass}\n                            onClick={() => onClick(cellValue)}\n                            type=\"button\"\n                            {...dataAttributes}\n                        >\n                            {displayName}\n                        </PlainButton>\n                    </>\n                ) : (\n                    <>\n                        <FileIcon dimension={32} extension={extension} />\n                        <span className={itemNameCellClass} {...dataAttributes}>\n                            {displayName}\n                        </span>\n                    </>\n                )}\n            </span>\n        );\n    });\n\nexport default itemNameCellRenderer;\n"],"file":"itemNameCellRenderer.js"}