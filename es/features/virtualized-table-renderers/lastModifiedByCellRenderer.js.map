{"version":3,"sources":["../../../src/features/virtualized-table-renderers/lastModifiedByCellRenderer.js"],"names":["formatUser","baseCellRenderer","messages","lastModifiedByCellRenderer","intl","dateFormat","cellRendererParams","modified_at","modified_by","lastModified","formatDate","formatRelativeTime","Date","parse","now","style","numeric","formatRelative","units","id","name","email","login","user","formatMessage","lastModifiedBy"],"mappings":"AAEA,SAASA,UAAT,QAA2B,iBAA3B;AACA,OAAOC,gBAAP,MAA6B,oBAA7B;AACA,OAAOC,QAAP,MAAqB,YAArB;;AAOA,IAAMC,0BAA0B,GAAG,SAA7BA,0BAA6B,CAACC,IAAD;AAAA,iFAAiE,EAAjE;AAAA,MAAcC,UAAd,QAAcA,UAAd;;AAAA,SAAwE,UACvGC,kBADuG;AAAA,WAGvGL,gBAAgB,CAACK,kBAAD,EAAqB,iBAAsE;AAAA,UAAnEC,WAAmE,SAAnEA,WAAmE;AAAA,UAAtDC,WAAsD,SAAtDA,WAAsD;AACvG,UAAIC,YAAY,GAAG,EAAnB;;AAEA,UAAIJ,UAAJ,EAAgB;AACZI,QAAAA,YAAY,GAAGL,IAAI,CAACM,UAAL,CAAgBH,WAAhB,EAA6BF,UAA7B,CAAf;AACH,OAFD,MAEO,IAAID,IAAI,CAACO,kBAAT,EAA6B;AAChC;AACAF,QAAAA,YAAY,GAAGL,IAAI,CAACO,kBAAL,CAAwBC,IAAI,CAACC,KAAL,CAAWN,WAAX,IAA0BK,IAAI,CAACE,GAAL,EAAlD,EAA8D,KAA9D,EAAqE;AAChFC,UAAAA,KAAK,EAAE,OADyE;AAEhFC,UAAAA,OAAO,EAAE;AAFuE,SAArE,CAAf;AAIH,OANM,MAMA;AACH;AACAP,QAAAA,YAAY,GAAGL,IAAI,CAACa,cAAL,CAAoBL,IAAI,CAACC,KAAL,CAAWN,WAAX,CAApB,EAA6C;AAAEW,UAAAA,KAAK,EAAE,WAAT;AAAsBH,UAAAA,KAAK,EAAE;AAA7B,SAA7C,CAAf;AACH;;AAED,UAAIP,WAAJ,EAAiB;AAAA,YACLW,EADK,GACsBX,WADtB,CACLW,EADK;AAAA,YACDC,IADC,GACsBZ,WADtB,CACDY,IADC;AAAA,YACKC,KADL,GACsBb,WADtB,CACKa,KADL;AAAA,YACYC,KADZ,GACsBd,WADtB,CACYc,KADZ;AAEb,YAAMC,IAAI,GAAGvB,UAAU,CAAC;AAAEmB,UAAAA,EAAE,EAAFA,EAAF;AAAME,UAAAA,KAAK,EAAEA,KAAK,IAAIC,KAAtB;AAA6BF,UAAAA,IAAI,EAAJA;AAA7B,SAAD,EAAsChB,IAAtC,CAAvB;AAEA,eAAOA,IAAI,CAACoB,aAAL,CAAmBtB,QAAQ,CAACuB,cAA5B,EAA4C;AAAEhB,UAAAA,YAAY,EAAZA,YAAF;AAAgBc,UAAAA,IAAI,EAAJA;AAAhB,SAA5C,CAAP;AACH;;AACD,aAAOd,YAAP;AACH,KAvBe,CAHuF;AAAA,GAAxE;AAAA,CAAnC;;AA4BA,eAAeN,0BAAf","sourcesContent":["// @flow\n\nimport { formatUser } from './FormattedUser';\nimport baseCellRenderer from './baseCellRenderer';\nimport messages from './messages';\nimport type { LastModifiedByCellRendererCellData, LastModifiedByCellRendererParams } from './flowTypes';\n\ntype LastModifiedByCellRendererSettings = {\n    dateFormat?: Object,\n};\n\nconst lastModifiedByCellRenderer = (intl: any, { dateFormat }: LastModifiedByCellRendererSettings = {}) => (\n    cellRendererParams: LastModifiedByCellRendererParams,\n) =>\n    baseCellRenderer(cellRendererParams, ({ modified_at, modified_by }: LastModifiedByCellRendererCellData) => {\n        let lastModified = '';\n\n        if (dateFormat) {\n            lastModified = intl.formatDate(modified_at, dateFormat);\n        } else if (intl.formatRelativeTime) {\n            // react-intl v3\n            lastModified = intl.formatRelativeTime(Date.parse(modified_at) - Date.now(), 'day', {\n                style: 'short',\n                numeric: 'auto',\n            });\n        } else {\n            // react-intl v2\n            lastModified = intl.formatRelative(Date.parse(modified_at), { units: 'day-short', style: 'numeric' });\n        }\n\n        if (modified_by) {\n            const { id, name, email, login } = modified_by;\n            const user = formatUser({ id, email: email || login, name }, intl);\n\n            return intl.formatMessage(messages.lastModifiedBy, { lastModified, user });\n        }\n        return lastModified;\n    });\n\nexport default lastModifiedByCellRenderer;\n"],"file":"lastModifiedByCellRenderer.js"}