{"version":3,"sources":["../../../src/features/virtualized-table-renderers/draggableRowRenderer.js"],"names":["React","classNames","Draggable","defaultRowRenderer","Portal","draggableRowRenderer","params","index","key","rowData","defaultRow","draggableId","id","draggableProvided","draggableSnapshot","isDragging","draggableProps","dragHandleProps","innerRef","draggableStyle","style","props","defaultRowClassName","className","defaultRowStyle","extendedRow","cloneElement","ref"],"mappings":";;;;;;AACA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,SAASC,SAAT,QAA0B,qBAA1B;AACA,SAASC,kBAAT,QAAmC,uCAAnC;AAKA,OAAOC,MAAP,MAAmB,yBAAnB;;AAEA,IAAMC,oBAAoB,GAAG,SAAvBA,oBAAuB,CAACC,MAAD,EAA+B;AAAA,MAChDC,KADgD,GACxBD,MADwB,CAChDC,KADgD;AAAA,MACzCC,GADyC,GACxBF,MADwB,CACzCE,GADyC;AAAA,MACpCC,OADoC,GACxBH,MADwB,CACpCG,OADoC;AAExD,MAAMC,UAAU,GAAGP,kBAAkB,CAACG,MAAD,CAArC,CAFwD,CAGxD;AACA;AACA;;AACA,MAAMK,WAAW,GAAGF,OAAO,CAACG,EAAR,IAAcJ,GAAlC;AAEA,SACI,oBAAC,SAAD;AAAW,IAAA,WAAW,EAAEG,WAAxB;AAAqC,IAAA,KAAK,EAAEJ,KAA5C;AAAmD,IAAA,GAAG,EAAEI;AAAxD,KACK,UAACE,iBAAD,EAAuCC,iBAAvC,EAAqF;AAAA,QAC1EC,UAD0E,GAC3DD,iBAD2D,CAC1EC,UAD0E;AAAA,QAE1EC,cAF0E,GAE5BH,iBAF4B,CAE1EG,cAF0E;AAAA,QAE1DC,eAF0D,GAE5BJ,iBAF4B,CAE1DI,eAF0D;AAAA,QAEzCC,QAFyC,GAE5BL,iBAF4B,CAEzCK,QAFyC;AAAA,QAGnEC,cAHmE,GAGhDH,cAHgD,CAG1EI,KAH0E;AAAA,4BAIfV,UAAU,CAACW,KAJI;AAAA,QAI/DC,mBAJ+D,qBAI1EC,SAJ0E;AAAA,QAInCC,eAJmC,qBAI1CJ,KAJ0C;AAMlF,QAAMG,SAAS,GAAGtB,UAAU,CAACqB,mBAAD,EAAsB;AAC9C,qBAAeP;AAD+B,KAAtB,CAA5B,CANkF,CAUlF;;AACA,QAAMU,WAAW,GAAGzB,KAAK,CAAC0B,YAAN,CAAmBhB,UAAnB,oBACbM,cADa,MAEbC,eAFa;AAGhBU,MAAAA,GAAG,EAAET,QAHW;AAIhBK,MAAAA,SAAS,EAATA,SAJgB;AAKhB;AACA;AACAH,MAAAA,KAAK,oBACEI,eADF,MAEEL,cAFF;AAPW,OAApB,CAXkF,CAwBlF;AACA;AACA;;AACA,QAAIJ,UAAJ,EAAgB;AACZ,aACI,oBAAC,MAAD;AAAQ,QAAA,SAAS,EAAC;AAAlB,SAAwEU,WAAxE,CADJ;AAGH;;AACD,WAAOA,WAAP;AACH,GAlCL,CADJ;AAsCH,CA9CD;;AAgDA,eAAepB,oBAAf","sourcesContent":["// @flow\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport { Draggable } from 'react-beautiful-dnd';\nimport { defaultRowRenderer } from 'react-virtualized/dist/es/Table/index';\n\nimport type { DraggableProvided, DraggableStateSnapshot } from 'react-beautiful-dnd';\nimport type { RowRendererParams } from './flowTypes';\n\nimport Portal from '../../components/portal';\n\nconst draggableRowRenderer = (params: RowRendererParams) => {\n    const { index, key, rowData } = params;\n    const defaultRow = defaultRowRenderer(params);\n    // Keys are auto-generated by the virtualized table based on\n    // the row index. We give preference to id when available since\n    // the index changes (and thus also the key) when the rows are re-ordered\n    const draggableId = rowData.id || key;\n\n    return (\n        <Draggable draggableId={draggableId} index={index} key={draggableId}>\n            {(draggableProvided: DraggableProvided, draggableSnapshot: DraggableStateSnapshot) => {\n                const { isDragging } = draggableSnapshot;\n                const { draggableProps, dragHandleProps, innerRef } = draggableProvided;\n                const { style: draggableStyle } = draggableProps;\n                const { className: defaultRowClassName, style: defaultRowStyle } = defaultRow.props;\n\n                const className = classNames(defaultRowClassName, {\n                    'is-dragging': isDragging,\n                });\n\n                // Extend row with draggable properties\n                const extendedRow = React.cloneElement(defaultRow, {\n                    ...draggableProps,\n                    ...dragHandleProps,\n                    ref: innerRef,\n                    className,\n                    // Both virtualized Table and Draggable set inline styles on\n                    // elements. Styles from Draggable should take precedence\n                    style: {\n                        ...defaultRowStyle,\n                        ...draggableStyle,\n                    },\n                });\n\n                // Use portal when dragging so that row is on top of other elements\n                // and not hidden by default VirtualizedTable styles. Portal needs to\n                // have table class names in order for scoped styles to take effect\n                if (isDragging) {\n                    return (\n                        <Portal className=\"bdl-VirtualizedTable bdl-DraggableVirtualizedTable\">{extendedRow}</Portal>\n                    );\n                }\n                return extendedRow;\n            }}\n        </Draggable>\n    );\n};\n\nexport default draggableRowRenderer;\n"],"file":"draggableRowRenderer.js"}