{"version":3,"sources":["../../../src/features/virtualized-table-renderers/filePathCellRenderer.js"],"names":["React","classNames","TYPE_FOLDER","DEFAULT_ROOT","messages","Breadcrumb","FolderIcon","FileIcon","getSize","getFileExtension","baseCellRenderer","getName","name","type","isExternal","id","intl","formatMessage","allFiles","message","externalFolder","externalFile","fileNameCellRenderer","cellRendererParams","cellValue","size","itemPath","itemType","extension","icon","path","map","pathInfo","displaySize","contentName","displayName","fullPath","filePathCellClass","join","itemPathName"],"mappings":"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","sourcesContent":["// @flow\nimport * as React from 'react';\nimport classNames from 'classnames';\n\nimport { TYPE_FOLDER, DEFAULT_ROOT } from '../../constants';\nimport messages from './messages';\nimport Breadcrumb from '../../components/breadcrumb';\nimport FolderIcon from '../../icons/folder-icon';\nimport FileIcon from '../../icons/file-icon';\nimport getSize from '../../utils/size';\nimport { getFileExtension } from '../../utils/file';\nimport baseCellRenderer from './baseCellRenderer';\nimport type { FilePathCellRendererCellData, FilePathCellRendererParams, FileItemPath } from './flowTypes';\nimport './FilePathCell.scss';\n\nconst getName = ({ name, type, isExternal, id }: FileItemPath = {}, intl: any): string => {\n    if (id === DEFAULT_ROOT) {\n        return intl.formatMessage(messages.allFiles);\n    }\n\n    if (isExternal) {\n        const message = type === TYPE_FOLDER ? messages.externalFolder : messages.externalFile;\n        return intl.formatMessage(message);\n    }\n\n    return name || id;\n};\n\nconst fileNameCellRenderer = (intl: any) => (cellRendererParams: FilePathCellRendererParams) =>\n    baseCellRenderer(cellRendererParams, (cellValue: FilePathCellRendererCellData) => {\n        const { id, name = '', size, itemPath = [], itemType, isExternal } = cellValue;\n        const extension = getFileExtension(name);\n        const icon = itemType === TYPE_FOLDER ? <FolderIcon /> : <FileIcon extension={extension} />;\n        const path = itemPath.map(pathInfo => getName(pathInfo, intl));\n        const displaySize = size ? ` (${getSize(size)})` : '';\n        const contentName = getName({ id, isExternal, type: itemType, name }, intl);\n        const displayName = `${contentName}${displaySize}`;\n        const fullPath = [...path, displayName];\n        const filePathCellClass = classNames('bdl-FilePathCell', { 'bdl-is-external': isExternal });\n\n        return (\n            <span className={filePathCellClass} title={fullPath.join(' > ')}>\n                {icon}\n                <Breadcrumb label=\"contentPath\">\n                    {fullPath.map(itemPathName => (\n                        <span key={itemPathName} className=\"bdl-FilePathCell-breadcrumbName\">\n                            {itemPathName}\n                        </span>\n                    ))}\n                </Breadcrumb>\n            </span>\n        );\n    });\n\nexport default fileNameCellRenderer;\n"],"file":"filePathCellRenderer.js"}