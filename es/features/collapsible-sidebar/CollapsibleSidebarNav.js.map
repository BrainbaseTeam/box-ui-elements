{"version":3,"sources":["../../../src/features/collapsible-sidebar/CollapsibleSidebarNav.js"],"names":["React","classNames","debounce","throttle","Scrollbar","styled","CollapsibleSidebarContext","getScrollShadowClassName","StyledScrollThumb","div","props","theme","primary","foreground","StyledScrollContainer","scrollShadowRgba","CollapsibleSidebarNav","createRef","setState","isScrolling","turnOffScrollingState","scrollRef","current","scrollHeight","clientHeight","scrollTop","scrollShadowClassName","debouncedTurnOffScrollingState","scrollValues","prevScrollValues","contentScrollHeight","prevClientHeight","prevContentScrollHeight","setScrollShadowState","state","newScrollShadowClassName","onScrollHandler","onUpdateHandler","className","children","customScrollBarProps","classes","throtteldOnScrollHandler","throttleOnUpdateHandler","elementRef","restProps","height","width","flexGrow","renderer","renderProps","style","background","top","marginRight","Component"],"mappings":"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","sourcesContent":["/**\n * @flow\n * @file Scroll container for lists to be used within CollapsibleSidebar component.\n * @author Box\n *\n * A Scroll container for lists to be used within CollapsibleSidebar component.\n * Applies scroll shadow in the container based on scroll position.\n */\n\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport debounce from 'lodash/debounce';\nimport throttle from 'lodash/throttle';\nimport Scrollbar from 'react-scrollbars-custom';\nimport styled from 'styled-components';\n\nimport type { ScrollState } from 'react-scrollbars-custom';\nimport CollapsibleSidebarContext from './CollapsibleSidebarContext';\nimport { getScrollShadowClassName } from './utils/scrollShadow';\n\nconst StyledScrollThumb = styled.div`\n    background: ${props => props.theme.primary.foreground};\n    opacity: 0;\n    transition: opacity 0.15s;\n\n    .scroll-shadow-container:hover &,\n    &.dragging {\n        opacity: 0.5;\n    }\n`;\n\n// The following values match the derived values from scrollShadow.scss\nconst StyledScrollContainer = styled.div`\n    &::before {\n        box-shadow: 0 6px 6px -2px ${props => props.theme.primary.scrollShadowRgba};\n    }\n\n    &::after {\n        box-shadow: 0 -6px 6px -2px ${props => props.theme.primary.scrollShadowRgba};\n    }\n`;\n\ntype Props = {\n    /** Primary content */\n    children?: React.Node,\n\n    /** Additional classes */\n    className?: string,\n    /** Props for react-scrollbars-custom Scrollbar component */\n    customScrollBarProps?: {},\n};\n\ntype State = {\n    isScrolling: boolean,\n    scrollShadowClassName?: string,\n};\n\nclass CollapsibleSidebarNav extends React.Component<Props, State> {\n    scrollRef: {\n        current: null | { clientHeight: number, scrollHeight: number, scrollTop: number },\n    } = React.createRef();\n\n    constructor(props: Props) {\n        super(props);\n\n        this.state = {\n            isScrolling: false,\n        };\n    }\n\n    componentDidMount() {\n        this.setScrollShadowState();\n    }\n\n    turnOffScrollingState = () => {\n        this.setState({\n            isScrolling: false,\n        });\n    };\n\n    // If there hasn't been an update to isScrolling in 100ms, it'll be set to false.\n    // eslint-disable-next-line react/sort-comp\n    debouncedTurnOffScrollingState = debounce(this.turnOffScrollingState, 100);\n\n    onScrollHandler = () => {\n        if (!this.scrollRef.current) {\n            return;\n        }\n\n        const { scrollHeight, clientHeight, scrollTop } = this.scrollRef.current;\n        const scrollShadowClassName = getScrollShadowClassName(scrollTop, scrollHeight, clientHeight);\n\n        this.setState({\n            isScrolling: true,\n            scrollShadowClassName,\n        });\n\n        this.debouncedTurnOffScrollingState();\n    };\n\n    onUpdateHandler = (scrollValues: ScrollState, prevScrollValues: ScrollState) => {\n        const { clientHeight, contentScrollHeight } = scrollValues;\n        const { clientHeight: prevClientHeight, contentScrollHeight: prevContentScrollHeight } = prevScrollValues;\n        if (clientHeight !== prevClientHeight || contentScrollHeight !== prevContentScrollHeight) {\n            this.setScrollShadowState();\n        }\n    };\n\n    setScrollShadowState = () => {\n        if (!this.scrollRef.current) {\n            return;\n        }\n\n        const { scrollShadowClassName } = this.state;\n\n        const { scrollHeight, clientHeight, scrollTop } = this.scrollRef.current;\n\n        const newScrollShadowClassName = getScrollShadowClassName(scrollTop, scrollHeight, clientHeight);\n\n        if (scrollShadowClassName !== newScrollShadowClassName) {\n            this.setState({ scrollShadowClassName: newScrollShadowClassName });\n        }\n    };\n\n    // sets onScrollHandler to true for a maximum of once every 50ms.\n    throtteldOnScrollHandler = throttle(this.onScrollHandler, 50);\n\n    throttleOnUpdateHandler = throttle(this.onUpdateHandler, 50);\n\n    render() {\n        const { className, children, customScrollBarProps = {} } = this.props;\n        const { isScrolling, scrollShadowClassName } = this.state;\n\n        const classes = classNames('bdl-CollapsibleSidebar-nav', className, {\n            'is-scrolling': isScrolling,\n        });\n\n        return (\n            <CollapsibleSidebarContext.Provider value={{ isScrolling }}>\n                <Scrollbar\n                    ref={this.scrollRef}\n                    className={scrollShadowClassName}\n                    noScrollX\n                    onScroll={this.throtteldOnScrollHandler}\n                    onUpdate={this.throttleOnUpdateHandler}\n                    renderer={props => {\n                        const { elementRef, ...restProps } = props;\n                        return <StyledScrollContainer {...restProps} ref={elementRef} />;\n                    }}\n                    style={{ height: 'auto', width: '100%', flexGrow: 1 }}\n                    thumbYProps={{\n                        renderer: renderProps => {\n                            const { elementRef, style, ...restProps } = renderProps;\n                            if (style && style.background) {\n                                delete style.background; // remove the hardcoded valued so that the theme value can be assigned\n                            }\n                            return <StyledScrollThumb style={style} {...restProps} ref={elementRef} />;\n                        },\n                    }}\n                    trackYProps={{\n                        style: { background: 'none', top: '0', height: '100%', width: '8px', marginRight: '1px' },\n                    }}\n                    {...customScrollBarProps}\n                >\n                    <div className={classes}>{children}</div>\n                </Scrollbar>\n            </CollapsibleSidebarContext.Provider>\n        );\n    }\n}\n\nexport default CollapsibleSidebarNav;\n"],"file":"CollapsibleSidebarNav.js"}