{"version":3,"sources":["../../../src/features/collapsible-sidebar/CollapsibleSidebarItem.js"],"names":["React","Tooltip","LeftSidebarLinkCallout","CollapsibleSidebarItem","props","callout","collapsedElement","expanded","expandedElement","shouldHideTooltip","tooltipMessage","calloutChildren","wrappedCollapsedElement","undefined"],"mappings":"AAAA;;;;;;;AAOA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAEA,OAAOC,OAAP,MAAoB,0BAApB;AAEA,OAAOC,sBAAP,MAAmC,wCAAnC;;AAuBA,SAASC,sBAAT,CAAgCC,KAAhC,EAA8C;AAAA,MAClCC,OADkC,GACkED,KADlE,CAClCC,OADkC;AAAA,MACzBC,gBADyB,GACkEF,KADlE,CACzBE,gBADyB;AAAA,MACPC,QADO,GACkEH,KADlE,CACPG,QADO;AAAA,MACGC,eADH,GACkEJ,KADlE,CACGI,eADH;AAAA,8BACkEJ,KADlE,CACoBK,iBADpB;AAAA,MACoBA,iBADpB,sCACwC,KADxC;AAAA,MAC+CC,cAD/C,GACkEN,KADlE,CAC+CM,cAD/C;;AAG1C,MAAIL,OAAJ,EAAa;AACT,QAAMM,eAAe,GAAGJ,QAAQ,GAAGC,eAAH,GAAqBF,gBAArD;AACA,WACI,oBAAC,sBAAD;AACI,MAAA,kBAAkB,EAAC,aADvB;AAEI,MAAA,OAAO,EAAED,OAFb;AAGI,MAAA,wBAAwB,EAAC;AAH7B,OAKKM,eALL,CADJ;AASH;;AAED,MAAMC,uBAAuB,GACzB,oBAAC,OAAD;AACI,IAAA,UAAU,EAAE,KADhB;AAEI,IAAA,QAAQ,EAAC,cAFb;AAGI,IAAA,IAAI,EAAEF,cAHV;AAII,IAAA,UAAU,EAAE,CAACA,cAJjB;AAKI,IAAA,OAAO,EAAED,iBAAiB,GAAG,KAAH,GAAWI;AALzC,KAOKP,gBAPL,CADJ;AAYA,SAAOC,QAAQ,GAAGC,eAAH,GAAqBI,uBAApC;AACH;;AAED,eAAeT,sBAAf","sourcesContent":["/**\n * @flow\n * @file CollapsibleSidebar item component that will render stylized collapsedElement or expanded depending on the expanded prop.\n * @author Box\n *\n * CollapsibleSidebar item component that will render stylized collapsedElement or expanded depending on the expanded prop.\n */\nimport * as React from 'react';\n\nimport Tooltip from '../../components/tooltip';\n\nimport LeftSidebarLinkCallout from '../left-sidebar/LeftSidebarLinkCallout';\nimport type { Callout } from '../left-sidebar/Callout';\n\ntype Props = {\n    /** Callout element used in the menu. */\n    callout?: Callout,\n\n    /** Element to be shown when component is collapsed */\n    collapsedElement: React.Node,\n\n    /** Controls whether or not the sidebar is expanded on the page */\n    expanded: boolean,\n\n    /** Element to be shown when component is expanded */\n    expandedElement: React.Node,\n\n    /** Tooltip should no be shown is true (usually when another tooltip is showing) */\n    shouldHideTooltip?: boolean,\n\n    /** Tooltip message to show for collapsed item */\n    tooltipMessage?: string,\n};\n\nfunction CollapsibleSidebarItem(props: Props) {\n    const { callout, collapsedElement, expanded, expandedElement, shouldHideTooltip = false, tooltipMessage } = props;\n\n    if (callout) {\n        const calloutChildren = expanded ? expandedElement : collapsedElement;\n        return (\n            <LeftSidebarLinkCallout\n                attachmentPosition=\"bottom left\"\n                callout={callout}\n                targetAttachmentPosition=\"bottom right\"\n            >\n                {calloutChildren}\n            </LeftSidebarLinkCallout>\n        );\n    }\n\n    const wrappedCollapsedElement = (\n        <Tooltip\n            isTabbable={false}\n            position=\"middle-right\"\n            text={tooltipMessage}\n            isDisabled={!tooltipMessage}\n            isShown={shouldHideTooltip ? false : undefined}\n        >\n            {collapsedElement}\n        </Tooltip>\n    );\n\n    return expanded ? expandedElement : wrappedCollapsedElement;\n}\n\nexport default CollapsibleSidebarItem;\n"],"file":"CollapsibleSidebarItem.js"}