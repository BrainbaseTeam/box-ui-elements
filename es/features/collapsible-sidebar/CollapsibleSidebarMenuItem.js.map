{"version":3,"sources":["../../../src/features/collapsible-sidebar/CollapsibleSidebarMenuItem.js"],"names":["React","classNames","styled","Tooltip","useIsContentOverflowed","CollapsibleSidebarContext","StyledMenuItem","div","theme","primary","backgroundHover","backgroundActive","background","StyledIconWrapper","span","foreground","StyledMenuItemLabel","StyledLink","a","base","gridUnitPx","CollapsibleSidebarMenuItem","props","className","content","icon","linkClassName","overflowAction","showOverflowAction","text","shouldHideTooltip","rest","textRef","useRef","isTextOverflowed","useContext","isScrolling","isShowOverflowActionOnHover","menuItemClassName","menuItemLinkClassName","menuItemLabelClassName","renderMenuItem","undefined"],"mappings":"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","sourcesContent":["// @flow strict\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport styled from 'styled-components';\nimport Tooltip from '../../components/tooltip';\nimport { useIsContentOverflowed } from '../../utils/dom';\nimport CollapsibleSidebarContext from './CollapsibleSidebarContext';\n\nconst StyledMenuItem = styled.div`\n    position: relative;\n\n    /* hover styles for link so that hovering both action icon and link\n    will have hover effect over whole container */\n    &:hover a {\n        background-color: ${({ theme }) => theme.primary.backgroundHover};\n    }\n\n    &:hover a.is-currentPage {\n        background-color: ${({ theme }) => theme.primary.backgroundActive};\n    }\n\n    body.is-move-dragging & a:hover {\n        /* if an item is being dragged to left nav, keep menu item defaults (don't highlight) */\n        background-color: ${({ theme }) => theme.primary.background};\n\n        .bdl-CollapsibleSidebar-menuItemIcon {\n            opacity: 0.7;\n        }\n    }\n\n    .bdl-CollapsibleSidebar-menuItemActionContainer {\n        position: absolute;\n        top: 12px;\n        right: 8px;\n        padding: 0;\n        opacity: 0;\n\n        &:hover,\n        &:focus-within {\n            opacity: 1;\n        }\n    }\n`;\n\nconst StyledIconWrapper = styled.span`\n    line-height: 0; /* let inner svg set the height */\n    opacity: 0.7;\n\n    & path,\n    & .fill-color {\n        fill: ${({ theme }) => theme.primary.foreground};\n    }\n\n    a:active &,\n    a:hover &,\n    a:focus &,\n    a.is-currentPage & {\n        opacity: 1;\n    }\n`;\n\nconst StyledMenuItemLabel = styled.span`\n    flex-grow: 1;\n    overflow: hidden;\n    color: ${({ theme }) => theme.primary.foreground};\n    text-overflow: ellipsis;\n    opacity: 0.85;\n\n    &.overflow-action {\n        margin-right: 12px;\n    }\n\n    a:active &,\n    a:hover &,\n    a:focus &,\n    a.is-currentPage & {\n        opacity: 1;\n    }\n`;\n\n// {...rest} props will go here, such as `as` prop to adjust the component name.\n// In most cases the consumer will want the tag to use a `Link` instead of `a`.\nconst StyledLink = styled.a`\n    display: flex;\n    align-items: center;\n    height: ${({ theme }) => theme.base.gridUnitPx * 10}px;\n    padding: 0 ${({ theme }) => theme.base.gridUnitPx * 3}px;\n    overflow-x: hidden;\n    color: ${({ theme }) => theme.primary.foreground};\n    font-weight: bold;\n    white-space: nowrap;\n    border: 1px solid transparent;\n    border-radius: ${({ theme }) => theme.base.gridUnitPx * 2}px;\n    transition: background-color 0.15s cubic-bezier(0.215, 0.61, 0.355, 1);\n\n    &:hover,\n    &:active,\n    &:focus,\n    &.is-currentPage {\n        .bdl-CollapsibleSidebar-menuItemIcon,\n        .bdl-CollapsibleSidebar-menuItemLabel {\n            opacity: 1;\n        }\n    }\n\n    &:focus {\n        border-color: ${({ theme }) => theme.primary.foreground};\n        outline: none;\n    }\n\n    &:focus:active {\n        border-color: transparent;\n    }\n\n    &.is-currentPage {\n        background-color: ${({ theme }) => theme.primary.backgroundActive};\n    }\n\n    &.is-currentPage:active {\n        border-color: ${({ theme }) => theme.primary.foreground};\n    }\n\n    .bdl-CollapsibleSidebar-menuItemIcon + .bdl-CollapsibleSidebar-menuItemLabel {\n        margin-left: 16px;\n    }\n\n    &.show-overflowAction + .bdl-CollapsibleSidebar-menuItemActionContainer,\n    &:focus + .bdl-CollapsibleSidebar-menuItemActionContainer,\n    &:hover + .bdl-CollapsibleSidebar-menuItemActionContainer {\n        opacity: 1;\n    }\n`;\n\ntype Props = {\n    /** Additional classes */\n    className?: string,\n    /** Content to be  displayed next to item label. */\n    content?: React.Node,\n    icon?: React.Node,\n    linkClassName?: string,\n    overflowAction?: React.Node,\n    shouldHideTooltip?: boolean,\n    /** Default is to always show */\n    showOverflowAction?: 'hover' | 'always',\n    text?: string,\n};\n\nfunction CollapsibleSidebarMenuItem(props: Props) {\n    const {\n        className,\n        content,\n        icon,\n        linkClassName,\n        overflowAction,\n        showOverflowAction,\n        text,\n        shouldHideTooltip = false,\n        ...rest\n    } = props;\n    const textRef: { current: null | HTMLElement } = React.useRef(null);\n    const isTextOverflowed = useIsContentOverflowed(textRef);\n    const { isScrolling } = React.useContext(CollapsibleSidebarContext);\n    const isShowOverflowActionOnHover = showOverflowAction === 'hover';\n    const menuItemClassName = classNames('bdl-CollapsibleSidebar-menuItem', className);\n    const menuItemLinkClassName = classNames('bdl-CollapsibleSidebar-menuItemLink', linkClassName, {\n        'show-overflowAction': !isShowOverflowActionOnHover,\n    });\n    const menuItemLabelClassName = classNames('bdl-CollapsibleSidebar-menuItemLabel', {\n        'overflow-action': overflowAction,\n    });\n\n    const renderMenuItem = () => {\n        return (\n            <StyledMenuItem className={menuItemClassName}>\n                <StyledLink className={menuItemLinkClassName} {...rest}>\n                    {icon && (\n                        <StyledIconWrapper className=\"bdl-CollapsibleSidebar-menuItemIcon\">{icon}</StyledIconWrapper>\n                    )}\n                    {text && (\n                        <StyledMenuItemLabel ref={textRef} className={menuItemLabelClassName}>\n                            {text}\n                        </StyledMenuItemLabel>\n                    )}\n                    {content}\n                </StyledLink>\n                {overflowAction && (\n                    <span className=\"bdl-CollapsibleSidebar-menuItemActionContainer\">{overflowAction}</span>\n                )}\n            </StyledMenuItem>\n        );\n    };\n\n    if (isScrolling) {\n        return renderMenuItem();\n    }\n\n    return (\n        <Tooltip\n            className={classNames('bdl-CollapsibleSidebar-menuItemToolTip')}\n            isDisabled={!isTextOverflowed}\n            isShown={isScrolling || shouldHideTooltip ? false : undefined}\n            isTabbable={false}\n            position=\"middle-right\"\n            text={text}\n        >\n            {renderMenuItem()}\n        </Tooltip>\n    );\n}\n\nexport default CollapsibleSidebarMenuItem;\n"],"file":"CollapsibleSidebarMenuItem.js"}