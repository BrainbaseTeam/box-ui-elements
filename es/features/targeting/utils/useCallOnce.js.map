{"version":3,"sources":["../../../../src/features/targeting/utils/useCallOnce.js"],"names":["useState","useCallOnce","callback","hasCalled","setHasCalled","undefined"],"mappings":";;;;;;;;AACA,SAASA,QAAT,QAAyB,OAAzB;AAEA;;;;AAGA,SAASC,WAAT,CAAwBC,QAAxB,EAA2D;AAAA,kBACrBF,QAAQ,CAAU,KAAV,CADa;AAAA;AAAA,MAChDG,SADgD;AAAA,MACrCC,YADqC;;AAEvD,SAAO,YAAM;AACT,QAAI,CAACD,SAAL,EAAgB;AACZC,MAAAA,YAAY,CAAC,IAAD,CAAZ;AACA,aAAOF,QAAQ,EAAf;AACH;;AACD,WAAOG,SAAP;AACH,GAND;AAOH;;AAED,eAAeJ,WAAf","sourcesContent":["// @flow\nimport { useState } from 'react';\n\n/**\n * This hook will call the callback once in the life cycle of the component\n */\nfunction useCallOnce<V>(callback: () => V): () => V | void {\n    const [hasCalled, setHasCalled] = useState<boolean>(false);\n    return () => {\n        if (!hasCalled) {\n            setHasCalled(true);\n            return callback();\n        }\n        return undefined;\n    };\n}\n\nexport default useCallOnce;\n"],"file":"useCallOnce.js"}