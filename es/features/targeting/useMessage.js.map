{"version":3,"sources":["../../../src/features/targeting/useMessage.js"],"names":["useContext","useMemo","MESSAGE_STATES","MessageContext","useMessage","name","messageContext","messageApi","eligibleMessageIDMap","markMessageAsSeen","markMessageAsClosed","messageStateMap","setMessageStateMap","canShow","CLOSED","onShow","SHOWING","onClose","onComplete"],"mappings":";;;;;;AACA,SAASA,UAAT,EAAqBC,OAArB,QAAoC,OAApC;AACA,SAASC,cAAT,QAA+B,aAA/B;AAEA,OAAOC,cAAP,MAA2B,kBAA3B;;AAEA,SAASC,UAAT,CAAoBC,IAApB,EAAqD;AACjD,MAAMC,cAAc,GAAGN,UAAU,CAACG,cAAD,CAAjC;AACA,SAAOF,OAAO,CAAC,YAAM;AAAA,gCAKbK,cALa,CAEbC,UAFa;AAAA,QAECC,oBAFD,yBAECA,oBAFD;AAAA,QAEuBC,iBAFvB,yBAEuBA,iBAFvB;AAAA,QAE0CC,mBAF1C,yBAE0CA,mBAF1C;AAAA,QAGbC,eAHa,GAKbL,cALa,CAGbK,eAHa;AAAA,QAIbC,kBAJa,GAKbN,cALa,CAIbM,kBAJa;AAOjB,QAAMC,OAAO,GAAGR,IAAI,IAAIG,oBAAR,IAAgCG,eAAe,CAACN,IAAD,CAAf,KAA0BH,cAAc,CAACY,MAAzF;;AAEA,aAASC,MAAT,GAAkB;AACd,UAAIF,OAAO,IAAI,CAACF,eAAe,CAACN,IAAD,CAA/B,EAAuC;AACnCO,QAAAA,kBAAkB,mBAAMD,eAAN,sBAAwBN,IAAxB,EAA+BH,cAAc,CAACc,OAA9C,GAAlB,CADmC,CAEnC;AACA;AACA;AACA;AACA;;AACAP,QAAAA,iBAAiB,CAACD,oBAAoB,CAACH,IAAD,CAArB,CAAjB;AACH;AACJ;;AAED,aAASY,OAAT,GAAmB;AACf,UAAIJ,OAAO,IAAIF,eAAe,CAACN,IAAD,CAAf,KAA0BH,cAAc,CAACc,OAAxD,EAAiE;AAC7DJ,QAAAA,kBAAkB,mBAAMD,eAAN,sBAAwBN,IAAxB,EAA+BH,cAAc,CAACY,MAA9C,GAAlB;AACAJ,QAAAA,mBAAmB,CAACF,oBAAoB,CAACH,IAAD,CAArB,CAAnB;AACH;AACJ;;AAED,aAASa,UAAT,GAAsB;AAClB,UAAIL,OAAO,IAAIF,eAAe,CAACN,IAAD,CAAf,KAA0BH,cAAc,CAACc,OAAxD,EAAiE;AAC7DJ,QAAAA,kBAAkB,mBAAMD,eAAN,sBAAwBN,IAAxB,EAA+BH,cAAc,CAACY,MAA9C,GAAlB;AACAJ,QAAAA,mBAAmB,CAACF,oBAAoB,CAACH,IAAD,CAArB,CAAnB;AACH;AACJ;;AAED,WAAO;AAAEQ,MAAAA,OAAO,EAAPA,OAAF;AAAWE,MAAAA,MAAM,EAANA,MAAX;AAAmBE,MAAAA,OAAO,EAAPA,OAAnB;AAA4BC,MAAAA,UAAU,EAAVA;AAA5B,KAAP;AACH,GApCa,EAoCX,CAACZ,cAAD,EAAiBD,IAAjB,CApCW,CAAd;AAqCH;;AAED,eAAeD,UAAf","sourcesContent":["// @flow\nimport { useContext, useMemo } from 'react';\nimport { MESSAGE_STATES } from './constants';\nimport type { MessageName, TargetingApi } from './types';\nimport MessageContext from './MessageContext';\n\nfunction useMessage(name: MessageName): TargetingApi {\n    const messageContext = useContext(MessageContext);\n    return useMemo(() => {\n        const {\n            messageApi: { eligibleMessageIDMap, markMessageAsSeen, markMessageAsClosed },\n            messageStateMap,\n            setMessageStateMap,\n        } = messageContext;\n\n        const canShow = name in eligibleMessageIDMap && messageStateMap[name] !== MESSAGE_STATES.CLOSED;\n\n        function onShow() {\n            if (canShow && !messageStateMap[name]) {\n                setMessageStateMap({ ...messageStateMap, [name]: MESSAGE_STATES.SHOWING });\n                // FIXME markMessageAsSeen action was currently throttled to prevent we make multiple\n                // backend call if onShow is called multiple times before setMessageStateMap\n                // actually alter the messageState. But it is preferrable to prevent\n                // markMessageAsSeen from being called multiple times instead of throttling\n                // after it is called.\n                markMessageAsSeen(eligibleMessageIDMap[name]);\n            }\n        }\n\n        function onClose() {\n            if (canShow && messageStateMap[name] === MESSAGE_STATES.SHOWING) {\n                setMessageStateMap({ ...messageStateMap, [name]: MESSAGE_STATES.CLOSED });\n                markMessageAsClosed(eligibleMessageIDMap[name]);\n            }\n        }\n\n        function onComplete() {\n            if (canShow && messageStateMap[name] === MESSAGE_STATES.SHOWING) {\n                setMessageStateMap({ ...messageStateMap, [name]: MESSAGE_STATES.CLOSED });\n                markMessageAsClosed(eligibleMessageIDMap[name]);\n            }\n        }\n\n        return { canShow, onShow, onClose, onComplete };\n    }, [messageContext, name]);\n}\n\nexport default useMessage;\n"],"file":"useMessage.js"}