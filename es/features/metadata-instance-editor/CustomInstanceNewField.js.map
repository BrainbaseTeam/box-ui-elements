{"version":3,"sources":["../../../src/features/metadata-instance-editor/CustomInstanceNewField.js"],"names":["React","FormattedMessage","injectIntl","Button","TextInput","Tooltip","commonMessages","IconInfo","messages","CustomInstanceNewField","key","value","error","event","onChange","state","props","onAdd","properties","Object","prototype","hasOwnProperty","call","setState","customErrorDuplicateKey","startsWith","customErrorInternalKey","customErrorRequired","attr","currentTarget","intl","isCancellable","onCancel","customNewField","customNewFieldMessage","customKey","onKeyChange","formatMessage","customKeyPlaceholder","customValue","onValueChange","customValuePlaceholder","cancel","customAdd","PureComponent","CustomInstanceNewFieldBase"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AACA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,gBAAT,EAA2BC,UAA3B,QAA6C,YAA7C;AAEA,OAAOC,MAAP,MAAmB,gCAAnB;AACA,OAAOC,SAAP,MAAsB,uCAAtB;AACA,OAAOC,OAAP,MAAoB,kCAApB;AACA,OAAOC,cAAP,MAA2B,uBAA3B;AACA,OAAOC,QAAP,MAAqB,8BAArB;AAEA,OAAOC,QAAP,MAAqB,YAArB;AAEA,OAAO,+BAAP;;IAgBMC,sB;;;;;;;;;;;;;;;;;;4DACa;AACXC,MAAAA,GAAG,EAAE,EADM;AAEXC,MAAAA,KAAK,EAAE,EAFI;AAGXC,MAAAA,KAAK,EAAE;AAHI,K;;kEA2BD,UAACC,KAAD,EAAqD;AAC/D,YAAKC,QAAL,CAAcD,KAAd,EAAqB,KAArB;AACH,K;;oEAQe,UAACA,KAAD,EAAqD;AACjE,YAAKC,QAAL,CAAcD,KAAd,EAAqB,OAArB;AACH,K;;4DAOO,YAAM;AAAA,wBACoB,MAAKE,KADzB;AAAA,UACFL,GADE,eACFA,GADE;AAAA,UACGC,KADH,eACGA,KADH;AAAA,wBAE2B,MAAKK,KAFhC;AAAA,UAEFC,KAFE,eAEFA,KAFE;AAAA,UAEKC,UAFL,eAEKA,UAFL;;AAGV,UAAIC,MAAM,CAACC,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCJ,UAArC,EAAiDR,GAAjD,CAAJ,EAA2D;AACvD,cAAKa,QAAL,CAAc;AACVX,UAAAA,KAAK,EAAE,oBAAC,gBAAD,EAAsBJ,QAAQ,CAACgB,uBAA/B;AADG,SAAd;AAGH,OAJD,MAIO,IAAId,GAAG,CAACe,UAAJ,CAAe,GAAf,CAAJ,EAAyB;AAC5B,cAAKF,QAAL,CAAc;AACVX,UAAAA,KAAK,EAAE,oBAAC,gBAAD,EAAsBJ,QAAQ,CAACkB,sBAA/B;AADG,SAAd;AAGH,OAJM,MAIA,IAAIhB,GAAJ,EAAS;AACZO,QAAAA,KAAK,CAACP,GAAD,EAAMC,KAAN,CAAL;AACH,OAFM,MAEA;AACH,cAAKY,QAAL,CAAc;AACVX,UAAAA,KAAK,EAAE,oBAAC,gBAAD,EAAsBJ,QAAQ,CAACmB,mBAA/B;AADG,SAAd;AAGH;AACJ,K;;;;;;;;AA1DD;;;;;;;6BAOSd,K,EAAiDe,I,EAAc;AACpE,UAAMC,aAAa,GAAIhB,KAAK,CAACgB,aAA7B;AACA,WAAKN,QAAL;AACIX,QAAAA,KAAK,EAAE;AADX,SAEKgB,IAFL,EAEYC,aAAa,CAAClB,KAF1B;AAIH;AAED;;;;;;;;;6BA6CS;AAAA,yBAC4C,KAAKK,KADjD;AAAA,UACGc,IADH,gBACGA,IADH;AAAA,UACSC,aADT,gBACSA,aADT;AAAA,UACwBC,QADxB,gBACwBA,QADxB;AAAA,yBAEgC,KAAKjB,KAFrC;AAAA,UAEGL,GAFH,gBAEGA,GAFH;AAAA,UAEQC,KAFR,gBAEQA,KAFR;AAAA,UAEeC,KAFf,gBAEeA,KAFf;AAGL,aACI;AAAK,QAAA,SAAS,EAAC;AAAf,SACI;AAAK,QAAA,SAAS,EAAC;AAAf,SACI,oBAAC,gBAAD;AAAkB,QAAA,OAAO,EAAC;AAA1B,SAAmCJ,QAAQ,CAACyB,cAA5C,EADJ,EAEI,oBAAC,OAAD;AAAS,QAAA,IAAI,EAAE,oBAAC,gBAAD,EAAsBzB,QAAQ,CAAC0B,qBAA/B;AAAf,SACI;AAAK,QAAA,QAAQ,EAAC;AAAd,SACI,oBAAC,QAAD;AAAU,QAAA,KAAK,EAAC,MAAhB;AAAuB,QAAA,MAAM,EAAE,EAA/B;AAAmC,QAAA,KAAK,EAAE;AAA1C,QADJ,CADJ,CAFJ,CADJ,EASI,oBAAC,SAAD;AACI,QAAA,KAAK,EAAEtB,KADX;AAEI,QAAA,UAAU,MAFd;AAGI,QAAA,KAAK,EAAE,oBAAC,gBAAD,EAAsBJ,QAAQ,CAAC2B,SAA/B,CAHX;AAII,QAAA,QAAQ,EAAE,KAAKC,WAJnB;AAKI,QAAA,WAAW,EAAEN,IAAI,CAACO,aAAL,CAAmB7B,QAAQ,CAAC8B,oBAA5B,CALjB;AAMI,QAAA,IAAI,EAAC,MANT;AAOI,QAAA,KAAK,EAAE5B;AAPX,QATJ,EAkBI,oBAAC,SAAD;AACI,QAAA,iBAAiB,MADrB;AAEI,QAAA,KAAK,EAAE,oBAAC,gBAAD,EAAsBF,QAAQ,CAAC+B,WAA/B,CAFX;AAGI,QAAA,QAAQ,EAAE,KAAKC,aAHnB;AAII,QAAA,WAAW,EAAEV,IAAI,CAACO,aAAL,CAAmB7B,QAAQ,CAACiC,sBAA5B,CAJjB;AAKI,QAAA,IAAI,EAAC,MALT;AAMI,QAAA,KAAK,EAAE9B;AANX,QAlBJ,EA0BI;AAAK,QAAA,SAAS,EAAC;AAAf,SACKoB,aAAa,IACV,oBAAC,MAAD;AAAQ,6BAAkB,4BAA1B;AAAuD,QAAA,OAAO,EAAEC,QAAhE;AAA0E,QAAA,IAAI,EAAC;AAA/E,SACI,oBAAC,gBAAD,EAAsB1B,cAAc,CAACoC,MAArC,CADJ,CAFR,EAMI,oBAAC,MAAD;AAAQ,6BAAkB,yBAA1B;AAAoD,QAAA,OAAO,EAAE,KAAKzB,KAAlE;AAAyE,QAAA,IAAI,EAAC;AAA9E,SACI,oBAAC,gBAAD,EAAsBT,QAAQ,CAACmC,SAA/B,CADJ,CANJ,CA1BJ,CADJ;AAuCH;;;;EA7GgC3C,KAAK,CAAC4C,a;;AAgH3C,SAASnC,sBAAsB,IAAIoC,0BAAnC;AACA,eAAe3C,UAAU,CAACO,sBAAD,CAAzB","sourcesContent":["// @flow\nimport * as React from 'react';\nimport { FormattedMessage, injectIntl } from 'react-intl';\n\nimport Button from '../../components/button/Button';\nimport TextInput from '../../components/text-input/TextInput';\nimport Tooltip from '../../components/tooltip/Tooltip';\nimport commonMessages from '../../common/messages';\nimport IconInfo from '../../icons/general/IconInfo';\n\nimport messages from './messages';\nimport type { MetadataFieldValue, MetadataFields } from '../../common/types/metadata';\nimport './CustomInstanceNewField.scss';\n\ntype Props = {\n    intl: any,\n    isCancellable: boolean,\n    onAdd: (key: string, value: MetadataFieldValue) => void,\n    onCancel: () => void,\n    properties: MetadataFields,\n};\n\ntype State = {\n    error: React.Node,\n    key: string,\n    value: string,\n};\n\nclass CustomInstanceNewField extends React.PureComponent<Props, State> {\n    state: State = {\n        key: '',\n        value: '',\n        error: '',\n    };\n\n    /**\n     * Common change handler\n     *\n     * @param {Event} event - keyboard event\n     * @param {string} attr - key or value\n     * @return {void}\n     */\n    onChange(event: SyntheticKeyboardEvent<HTMLInputElement>, attr: string) {\n        const currentTarget = (event.currentTarget: HTMLInputElement);\n        this.setState({\n            error: '',\n            [attr]: currentTarget.value,\n        });\n    }\n\n    /**\n     * Change handler for the key\n     *\n     * @param {Event} event - keyboard event\n     * @return {void}\n     */\n    onKeyChange = (event: SyntheticKeyboardEvent<HTMLInputElement>) => {\n        this.onChange(event, 'key');\n    };\n\n    /**\n     * Change handler for the value\n     *\n     * @param {Event} event - keyboard event\n     * @return {void}\n     */\n    onValueChange = (event: SyntheticKeyboardEvent<HTMLInputElement>) => {\n        this.onChange(event, 'value');\n    };\n\n    /**\n     * Persists the new metadata added or shows an error\n     *\n     * @return {void}\n     */\n    onAdd = () => {\n        const { key, value }: State = this.state;\n        const { onAdd, properties }: Props = this.props;\n        if (Object.prototype.hasOwnProperty.call(properties, key)) {\n            this.setState({\n                error: <FormattedMessage {...messages.customErrorDuplicateKey} />,\n            });\n        } else if (key.startsWith('$')) {\n            this.setState({\n                error: <FormattedMessage {...messages.customErrorInternalKey} />,\n            });\n        } else if (key) {\n            onAdd(key, value);\n        } else {\n            this.setState({\n                error: <FormattedMessage {...messages.customErrorRequired} />,\n            });\n        }\n    };\n\n    render() {\n        const { intl, isCancellable, onCancel }: Props = this.props;\n        const { key, value, error }: State = this.state;\n        return (\n            <div className=\"custom-new-field\">\n                <div className=\"custom-new-field-header\">\n                    <FormattedMessage tagName=\"h5\" {...messages.customNewField} />\n                    <Tooltip text={<FormattedMessage {...messages.customNewFieldMessage} />}>\n                        <div tabIndex=\"-1\">\n                            <IconInfo color=\"#777\" height={18} width={18} />\n                        </div>\n                    </Tooltip>\n                </div>\n                <TextInput\n                    error={error}\n                    isRequired\n                    label={<FormattedMessage {...messages.customKey} />}\n                    onChange={this.onKeyChange}\n                    placeholder={intl.formatMessage(messages.customKeyPlaceholder)}\n                    type=\"text\"\n                    value={key}\n                />\n                <TextInput\n                    hideOptionalLabel\n                    label={<FormattedMessage {...messages.customValue} />}\n                    onChange={this.onValueChange}\n                    placeholder={intl.formatMessage(messages.customValuePlaceholder)}\n                    type=\"text\"\n                    value={value}\n                />\n                <div className=\"custom-new-field-actions\">\n                    {isCancellable && (\n                        <Button data-resin-target=\"metadata-customfieldcancel\" onClick={onCancel} type=\"button\">\n                            <FormattedMessage {...commonMessages.cancel} />\n                        </Button>\n                    )}\n                    <Button data-resin-target=\"metadata-customfieldadd\" onClick={this.onAdd} type=\"button\">\n                        <FormattedMessage {...messages.customAdd} />\n                    </Button>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport { CustomInstanceNewField as CustomInstanceNewFieldBase };\nexport default injectIntl(CustomInstanceNewField);\n"],"file":"CustomInstanceNewField.js"}