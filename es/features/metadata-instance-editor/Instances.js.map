{"version":3,"sources":["../../../src/features/metadata-instance-editor/Instances.js"],"names":["React","Instance","Instances","isCascadingPolicyApplicable","editors","onModification","onRemove","onSave","selectedTemplateKey","map","isDirty","instance","hasError","template","templateKey","isOpen","length","canEdit","cascadePolicy","data","id"],"mappings":"AACA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAEA,OAAOC,QAAP,MAAqB,YAArB;;AAkBA,IAAMC,SAAS,GAAG,SAAZA,SAAY;AAAA,mCACdC,2BADc;AAAA,MACdA,2BADc,sCACgB,KADhB;AAAA,0BAEdC,OAFc;AAAA,MAEdA,OAFc,6BAEJ,EAFI;AAAA,MAGdC,cAHc,QAGdA,cAHc;AAAA,MAIdC,QAJc,QAIdA,QAJc;AAAA,MAKdC,MALc,QAKdA,MALc;AAAA,MAMdC,mBANc,QAMdA,mBANc;AAAA,SAQdJ,OAAO,CAACK,GAAR,CACI,iBAA+E;AAAA,8BAA5EC,OAA4E;AAAA,QAA5EA,OAA4E,8BAAlE,KAAkE;AAAA,QAA3DC,QAA2D,SAA3DA,QAA2D;AAAA,+BAAjDC,QAAiD;AAAA,QAAjDA,QAAiD,+BAAtC,KAAsC;AAAA,QAA/BC,QAA+B,SAA/BA,QAA+B;AAAA,QACnEC,WADmE,GACnDD,QADmD,CACnEC,WADmE;AAE3E,QAAMC,MAAM,GAAGX,OAAO,CAACY,MAAR,KAAmB,CAAnB,IAAwBF,WAAW,KAAKN,mBAAvD;AACA,WACI,oBAAC,QAAD;AACI,MAAA,OAAO,EAAEG,QAAQ,CAACM,OADtB;AAEI,MAAA,aAAa,EAAEN,QAAQ,CAACO,aAF5B;AAGI,MAAA,IAAI,EAAEP,QAAQ,CAACQ,IAHnB;AAII,MAAA,QAAQ,EAAEP,QAJd;AAKI,MAAA,EAAE,EAAED,QAAQ,CAACS,EALjB;AAMI,MAAA,2BAA2B,EAAEjB,2BANjC;AAOI,MAAA,OAAO,EAAEO,OAPb;AAQI,MAAA,MAAM,EAAEK,MARZ;AASI,MAAA,GAAG,YAAKJ,QAAQ,CAACS,EAAd,cAAoBN,WAApB,CATP;AAUI,MAAA,cAAc,EAAET,cAVpB;AAWI,MAAA,MAAM,EAAEE,MAXZ;AAYI,MAAA,QAAQ,EAAED,QAZd;AAaI,MAAA,QAAQ,EAAEO;AAbd,MADJ;AAiBH,GArBL,CARc;AAAA,CAAlB;;AAgCA,eAAeX,SAAf","sourcesContent":["// @flow\nimport * as React from 'react';\n\nimport Instance from './Instance';\nimport type { MetadataEditor, MetadataCascadingPolicyData } from '../../common/types/metadata';\nimport type { JSONPatchOperations } from '../../common/types/api';\n\ntype Props = {\n    editors?: Array<MetadataEditor>,\n    isCascadingPolicyApplicable?: boolean,\n    onModification?: (id: string, isDirty: boolean) => void,\n    onRemove?: (id: string) => void,\n    onSave?: (\n        id: string,\n        data: JSONPatchOperations,\n        cascadingPolicy?: MetadataCascadingPolicyData,\n        rawData: Object,\n    ) => void,\n    selectedTemplateKey?: string,\n};\n\nconst Instances = ({\n    isCascadingPolicyApplicable = false,\n    editors = [],\n    onModification,\n    onRemove,\n    onSave,\n    selectedTemplateKey,\n}: Props) =>\n    editors.map<React.Element<typeof Instance>>(\n        ({ isDirty = false, instance, hasError = false, template }: MetadataEditor) => {\n            const { templateKey } = template;\n            const isOpen = editors.length === 1 || templateKey === selectedTemplateKey;\n            return (\n                <Instance\n                    canEdit={instance.canEdit}\n                    cascadePolicy={instance.cascadePolicy}\n                    data={instance.data}\n                    hasError={hasError}\n                    id={instance.id}\n                    isCascadingPolicyApplicable={isCascadingPolicyApplicable}\n                    isDirty={isDirty}\n                    isOpen={isOpen}\n                    key={`${instance.id}-${templateKey}`}\n                    onModification={onModification}\n                    onSave={onSave}\n                    onRemove={onRemove}\n                    template={template}\n                />\n            );\n        },\n    );\n\nexport default Instances;\n"],"file":"Instances.js"}