{"version":3,"sources":["../../../src/features/metadata-instance-editor/metadataUtil.js"],"names":["isHidden","obj","hidden","normalizeTemplateFilters","templateFilters","Set","normalizeTemplates","templates","selectedTemplateKey","clonedTemplates","filter","template","templateKey","fields","normalizedFilters","field","has","id"],"mappings":";;;;;;;;AAGA,IAAMA,QAAQ,GAAG,SAAXA,QAAW,CAACC,GAAD,EAA4D;AACzE,SAAO,CAAC,CAACA,GAAG,CAACD,QAAN,IAAkB,CAAC,CAACC,GAAG,CAACC,MAA/B;AACH,CAFD;AAIA;;;;;;;AAKA,IAAMC,wBAAwB,GAAG,SAA3BA,wBAA2B,CAACC,eAAD,EAA0D;AACvF,SAAO,OAAOA,eAAP,KAA2B,QAA3B,GAAsC,IAAIC,GAAJ,CAAQ,CAACD,eAAD,CAAR,CAAtC,GAAmE,IAAIC,GAAJ,CAAQD,eAAR,CAA1E;AACH,CAFD;AAIA;;;;;;;;;AAOA,IAAME,kBAAkB,GAAG,SAArBA,kBAAqB,CACvBC,SADuB,EAEvBC,mBAFuB,EAGvBJ,eAHuB,EAIG;AAC1B,MAAI,CAACI,mBAAL,EAA0B;AACtB,8BAAWD,SAAX;AACH;;AACD,MAAME,eAAe,GAAGF,SAAS,CAACG,MAAV,CAAiB,UAAAC,QAAQ;AAAA,WAAIA,QAAQ,CAACC,WAAT,KAAyBJ,mBAA7B;AAAA,GAAzB,CAAxB;AACA,MAAMK,MAAM,GAAGJ,eAAe,CAAC,CAAD,CAAf,GAAqBA,eAAe,CAAC,CAAD,CAAf,CAAmBI,MAAxC,GAAiD,IAAhE;;AACA,MAAIT,eAAe,IAAIS,MAAvB,EAA+B;AAC3B,QAAMC,iBAAiB,GAAGX,wBAAwB,CAACC,eAAD,CAAlD;AACAK,IAAAA,eAAe,CAAC,CAAD,CAAf,CAAmBI,MAAnB,GAA4BA,MAAM,CAACH,MAAP,CAAc,UAAAK,KAAK;AAAA,aAAID,iBAAiB,CAACE,GAAlB,CAAsBD,KAAK,CAACE,EAA5B,CAAJ;AAAA,KAAnB,CAA5B;AACH;;AACD,SAAOR,eAAP;AACH,CAfD;;AAiBA,SAAST,QAAT,EAAmBM,kBAAnB,EAAuCH,wBAAvC","sourcesContent":["// @flow\nimport type { MetadataTemplateField, MetadataTemplate } from '../../common/types/metadata';\n\nconst isHidden = (obj: MetadataTemplate | MetadataTemplateField): boolean => {\n    return !!obj.isHidden || !!obj.hidden;\n};\n\n/**\n * Utility function for converting a string or array of strings into a Set object\n * @param templateFilters - Array<string> | string\n * @returns {Set<T>}\n */\nconst normalizeTemplateFilters = (templateFilters: Array<string> | string): Set<string> => {\n    return typeof templateFilters === 'string' ? new Set([templateFilters]) : new Set(templateFilters);\n};\n\n/**\n * Utility function for cloning an array of metadata templates and filtering the templates and fields if necessary\n * @param templates Array<MetadataTemplate>\n * @param selectedTemplateKey - string\n * @param templateFilters - Array<string> | string\n * @returns {Array<T>}\n */\nconst normalizeTemplates = (\n    templates: Array<MetadataTemplate>,\n    selectedTemplateKey?: string,\n    templateFilters?: Array<string> | string,\n): Array<MetadataTemplate> => {\n    if (!selectedTemplateKey) {\n        return [...templates];\n    }\n    const clonedTemplates = templates.filter(template => template.templateKey === selectedTemplateKey);\n    const fields = clonedTemplates[0] ? clonedTemplates[0].fields : null;\n    if (templateFilters && fields) {\n        const normalizedFilters = normalizeTemplateFilters(templateFilters);\n        clonedTemplates[0].fields = fields.filter(field => normalizedFilters.has(field.id));\n    }\n    return clonedTemplates;\n};\n\nexport { isHidden, normalizeTemplates, normalizeTemplateFilters };\n"],"file":"metadataUtil.js"}