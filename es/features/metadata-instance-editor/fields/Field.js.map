{"version":3,"sources":["../../../../src/features/metadata-instance-editor/fields/Field.js"],"names":["React","FormattedMessage","InlineError","TextField","EnumField","DateField","FloatField","IntegerField","MultiSelectField","ReadOnlyField","messages","FIELD_TYPE_ENUM","FIELD_TYPE_FLOAT","FIELD_TYPE_INTEGER","FIELD_TYPE_STRING","FIELD_TYPE_DATE","FIELD_TYPE_MULTISELECT","Field","dataKey","dataValue","displayName","description","error","isHidden","canEdit","onChange","onRemove","options","type","Error","invalidMetadataFieldType"],"mappings":"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","sourcesContent":["// @flow\nimport * as React from 'react';\nimport { FormattedMessage } from 'react-intl';\n\nimport InlineError from '../../../components/inline-error/InlineError';\n\nimport TextField from './TextField';\nimport EnumField from './EnumField';\nimport DateField from './DateField';\nimport FloatField from './FloatField';\nimport IntegerField from './IntegerField';\nimport MultiSelectField from './MultiSelectField';\nimport ReadOnlyField from './ReadOnlyField';\nimport messages from '../messages';\n\nimport {\n    FIELD_TYPE_ENUM,\n    FIELD_TYPE_FLOAT,\n    FIELD_TYPE_INTEGER,\n    FIELD_TYPE_STRING,\n    FIELD_TYPE_DATE,\n    FIELD_TYPE_MULTISELECT,\n} from '../constants';\n\ntype Props = {\n    canEdit: boolean,\n    dataKey: string,\n    dataValue?: MetadataFieldValue,\n    description?: string,\n    displayName: string,\n    error?: React.Node,\n    isHidden?: boolean,\n    onChange?: (key: string, value: MetadataFieldValue) => void,\n    onRemove?: (key: string) => void,\n    options?: Array<MetadataTemplateFieldOption>,\n    type: MetadataFieldType,\n};\n\nconst Field = ({\n    dataKey,\n    dataValue,\n    displayName,\n    description,\n    error,\n    isHidden,\n    canEdit,\n    onChange,\n    onRemove,\n    options,\n    type,\n}: Props) => {\n    if (isHidden) {\n        return null;\n    }\n\n    if (!canEdit) {\n        return <ReadOnlyField dataValue={dataValue} description={description} displayName={displayName} type={type} />;\n    }\n\n    if (!onChange || !onRemove) {\n        throw new Error('Need to have onChange and onRemove');\n    }\n\n    switch (type) {\n        case FIELD_TYPE_STRING:\n            return (\n                <TextField\n                    dataKey={dataKey}\n                    dataValue={dataValue}\n                    description={description}\n                    displayName={displayName}\n                    onChange={onChange}\n                    onRemove={onRemove}\n                />\n            );\n\n        case FIELD_TYPE_FLOAT:\n            return (\n                <FloatField\n                    dataKey={dataKey}\n                    dataValue={dataValue}\n                    description={description}\n                    displayName={displayName}\n                    error={error}\n                    onChange={onChange}\n                    onRemove={onRemove}\n                    type={type}\n                />\n            );\n\n        case FIELD_TYPE_INTEGER:\n            return (\n                <IntegerField\n                    dataKey={dataKey}\n                    dataValue={dataValue}\n                    description={description}\n                    displayName={displayName}\n                    error={error}\n                    onChange={onChange}\n                    onRemove={onRemove}\n                    type={type}\n                />\n            );\n\n        case FIELD_TYPE_ENUM:\n            return (\n                <EnumField\n                    dataKey={dataKey}\n                    dataValue={dataValue}\n                    description={description}\n                    displayName={displayName}\n                    onChange={onChange}\n                    onRemove={onRemove}\n                    options={options}\n                />\n            );\n\n        case FIELD_TYPE_MULTISELECT:\n            return (\n                <MultiSelectField\n                    dataKey={dataKey}\n                    dataValue={dataValue}\n                    description={description}\n                    displayName={displayName}\n                    onChange={onChange}\n                    onRemove={onRemove}\n                    options={options}\n                />\n            );\n\n        case FIELD_TYPE_DATE:\n            return (\n                <DateField\n                    dataKey={dataKey}\n                    dataValue={dataValue}\n                    description={description}\n                    displayName={displayName}\n                    onChange={onChange}\n                    onRemove={onRemove}\n                />\n            );\n\n        default:\n            return (\n                <InlineError title={type}>\n                    <FormattedMessage {...messages.invalidMetadataFieldType} />\n                </InlineError>\n            );\n    }\n};\n\nexport default Field;\n"],"file":"Field.js"}