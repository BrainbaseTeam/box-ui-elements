{"version":3,"sources":["../../../src/features/metadata-instance-editor/CustomInstance.js"],"names":["React","isEqual","CustomNewField","CustomMetadataField","EmptyContent","FIELD_TYPE_STRING","CustomInstance","data","properties","props","key","value","canEdit","onFieldChange","onFieldRemove","setState","prevState","isAddFieldVisible","state","fields","Object","keys","canAddFields","length","map","index","onAddFieldToggle","PureComponent"],"mappings":"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","sourcesContent":["// @flow\nimport * as React from 'react';\nimport isEqual from 'lodash/isEqual';\n\nimport CustomNewField from './CustomInstanceNewField';\nimport CustomMetadataField from '../metadata-instance-fields/CustomMetadataField';\nimport EmptyContent from './EmptyContent';\nimport { FIELD_TYPE_STRING } from '../metadata-instance-fields/constants';\nimport type { MetadataFieldValue, MetadataFields } from '../../common/types/metadata';\n\ntype Props = {\n    canEdit: boolean,\n    data: MetadataFields,\n    onFieldChange?: (key: string, value: MetadataFieldValue, type: string) => void,\n    onFieldRemove?: (key: string) => void,\n};\n\ntype State = {\n    isAddFieldVisible: boolean,\n    properties: MetadataFields,\n};\n\nclass CustomInstance extends React.PureComponent<Props, State> {\n    static defaultProps = {\n        canEdit: true,\n        data: {},\n    };\n\n    static getDerivedStateFromProps({ data }: Props, { properties }: State): any {\n        if (!isEqual(data, properties)) {\n            return {\n                properties: { ...data },\n            };\n        }\n\n        return null;\n    }\n\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            isAddFieldVisible: false,\n            properties: { ...props.data },\n        };\n    }\n\n    /**\n     * Adds/updates a new metadata key value pair\n     *\n     * @param {string} key - metadata key\n     * @param {string} value - metadata value\n     * @return {void}\n     */\n    onFieldChange = (key: string, value: MetadataFieldValue) => {\n        const { canEdit, onFieldChange }: Props = this.props;\n        if (canEdit && onFieldChange) {\n            onFieldChange(key, value, FIELD_TYPE_STRING);\n        }\n    };\n\n    /**\n     * Adds/updates a new metadata key value pair\n     *\n     * @param {string} key - metadata key\n     * @param {string} value - metadata value\n     * @return {void}\n     */\n    onFieldRemove = (key: string) => {\n        const { canEdit, onFieldRemove }: Props = this.props;\n        if (canEdit && onFieldRemove) {\n            onFieldRemove(key);\n        }\n    };\n\n    /**\n     * Shows the add new field field\n     *\n     * @return {void}\n     */\n    onAddFieldToggle = () => {\n        this.setState(prevState => ({\n            isAddFieldVisible: !prevState.isAddFieldVisible,\n        }));\n    };\n\n    render() {\n        const { canEdit }: Props = this.props;\n        const { isAddFieldVisible, properties }: State = this.state;\n        const fields = Object.keys(properties);\n        const canAddFields = canEdit && (isAddFieldVisible || fields.length === 0);\n\n        return (\n            <>\n                {fields.map((key, index) => (\n                    <CustomMetadataField\n                        key={key}\n                        canEdit={canEdit}\n                        dataKey={key}\n                        dataValue={properties[key]}\n                        isLast={!isAddFieldVisible && index === fields.length - 1}\n                        onAdd={this.onAddFieldToggle}\n                        onChange={this.onFieldChange}\n                        onRemove={this.onFieldRemove}\n                    />\n                ))}\n                {!canAddFields && fields.length === 0 && <EmptyContent />}\n                {canAddFields && (\n                    <CustomNewField\n                        isCancellable={fields.length !== 0}\n                        onAdd={this.onFieldChange}\n                        onCancel={this.onAddFieldToggle}\n                        properties={this.props.data}\n                    />\n                )}\n            </>\n        );\n    }\n}\n\nexport default CustomInstance;\n"],"file":"CustomInstance.js"}