{"version":3,"sources":["../../../src/features/metadata-instance-editor/Instance.js"],"names":["React","FormattedMessage","classNames","isEqual","cloneDeep","noop","Collapsible","Form","LoadingIndicatorWrapper","PlainButton","Tooltip","IconMetadataColored","IconAlertCircle","IconEdit","bdlWatermelonRed","scrollIntoView","CascadePolicy","TemplatedInstance","CustomInstance","MetadataInstanceConfirmDialog","Footer","messages","FIELD_TYPE_FLOAT","FIELD_TYPE_INTEGER","TEMPLATE_CUSTOM_PROPERTIES","JSON_PATCH_OP_REMOVE","JSON_PATCH_OP_ADD","JSON_PATCH_OP_REPLACE","JSON_PATCH_OP_TEST","isValidValue","isHidden","RESIN_TAG_TARGET","createFieldKeyToTypeMap","fields","reduce","prev","key","type","getValue","data","value","parseFloat","parseInt","Instance","props","id","onModification","setState","getState","shouldConfirmRemove","isEditing","onRemove","isBusy","cascadePolicy","originalData","isDirty","isCascadingPolicyApplicable","onSave","state","currentData","errors","isCascadingEnabled","isCascadingOverwritten","Object","keys","length","shouldShowCascadeOptions","createJSONPatch","canEdit","undefined","isEnabled","overwrite","isValid","finalErrors","finalData","invalidInput","setDirty","isFile","template","message","isProperties","templateKey","metadataName","displayName","hasDataChanged","hasCascadingChanged","createRef","prevState","editClassName","metadataEditTooltip","toggleIsEditing","fieldKeyToTypeMap","prevHasError","hasError","prevIsDirty","currentElement","collapsibleRef","current","block","behavior","customTitle","renderDeleteMessage","ops","forEach","originalValue","path","prototype","hasOwnProperty","call","push","op","isOpen","animationDuration","renderEditButton","getTitle","getConfirmationMessage","onConfirmCancel","onCascadeModeChange","onCascadeToggle","onFieldChange","onFieldRemove","onCancel","onConfirmRemove","PureComponent"],"mappings":"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","sourcesContent":["// @flow\nimport * as React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport classNames from 'classnames';\nimport isEqual from 'lodash/isEqual';\nimport cloneDeep from 'lodash/cloneDeep';\nimport noop from 'lodash/noop';\n\nimport Collapsible from '../../components/collapsible/Collapsible';\nimport Form from '../../components/form-elements/form/Form';\nimport LoadingIndicatorWrapper from '../../components/loading-indicator/LoadingIndicatorWrapper';\nimport PlainButton from '../../components/plain-button/PlainButton';\nimport Tooltip from '../../components/tooltip';\nimport IconMetadataColored from '../../icons/general/IconMetadataColored';\nimport IconAlertCircle from '../../icons/general/IconAlertCircle';\nimport IconEdit from '../../icons/general/IconEdit';\nimport { bdlWatermelonRed } from '../../styles/variables';\nimport { scrollIntoView } from '../../utils/dom';\n\nimport CascadePolicy from './CascadePolicy';\nimport TemplatedInstance from './TemplatedInstance';\nimport CustomInstance from './CustomInstance';\nimport MetadataInstanceConfirmDialog from './MetadataInstanceConfirmDialog';\nimport Footer from './Footer';\nimport messages from './messages';\nimport { FIELD_TYPE_FLOAT, FIELD_TYPE_INTEGER } from '../metadata-instance-fields/constants';\nimport TEMPLATE_CUSTOM_PROPERTIES from './constants';\nimport {\n    JSON_PATCH_OP_REMOVE,\n    JSON_PATCH_OP_ADD,\n    JSON_PATCH_OP_REPLACE,\n    JSON_PATCH_OP_TEST,\n} from '../../common/constants';\nimport { isValidValue } from '../metadata-instance-fields/validateMetadataField';\nimport { isHidden } from './metadataUtil';\nimport { RESIN_TAG_TARGET } from '../../common/variables';\nimport type {\n    MetadataFields,\n    MetadataTemplate,\n    MetadataCascadePolicy,\n    MetadataCascadingPolicyData,\n    MetadataTemplateField,\n    MetadataFieldValue,\n} from '../../common/types/metadata';\nimport type { JSONPatchOperations } from '../../common/types/api';\nimport './Instance.scss';\n\ntype Props = {\n    canEdit: boolean,\n    cascadePolicy?: MetadataCascadePolicy, // eslint-disable-line\n    data: MetadataFields,\n    hasError: boolean,\n    id: string,\n    isCascadingPolicyApplicable?: boolean,\n    isDirty: boolean,\n    isOpen: boolean,\n    onModification?: (id: string, isDirty: boolean, type?: string) => void,\n    onRemove?: (id: string) => void,\n    onSave?: (\n        id: string,\n        data: JSONPatchOperations,\n        cascadingPolicy?: MetadataCascadingPolicyData,\n        rawData: Object,\n    ) => void,\n    template: MetadataTemplate,\n};\n\ntype State = {\n    data: Object,\n    errors: { [string]: React.Node },\n    isBusy: boolean,\n    isCascadingEnabled: boolean,\n    isCascadingOverwritten: boolean,\n    isEditing: boolean,\n    shouldConfirmRemove: boolean,\n    shouldShowCascadeOptions: boolean,\n};\n\nconst createFieldKeyToTypeMap = (fields?: Array<MetadataTemplateField> = []) =>\n    fields.reduce((prev, { key, type }) => {\n        prev[key] = type;\n        return prev;\n    }, {});\n\nconst getValue = (data: Object, key: string, type: string) => {\n    const value = data[key];\n\n    switch (type) {\n        case FIELD_TYPE_FLOAT:\n            return parseFloat(value);\n\n        case FIELD_TYPE_INTEGER:\n            return parseInt(value, 10);\n\n        default:\n            return value;\n    }\n};\n\nclass Instance extends React.PureComponent<Props, State> {\n    static defaultProps = {\n        data: {},\n        isDirty: false,\n    };\n\n    constructor(props: Props) {\n        super(props);\n        this.state = this.getState(props);\n        this.fieldKeyToTypeMap = createFieldKeyToTypeMap(props.template.fields);\n    }\n\n    componentDidUpdate({ hasError: prevHasError, isDirty: prevIsDirty }: Props, prevState: State): void {\n        const currentElement = this.collapsibleRef.current;\n        const { hasError, isDirty }: Props = this.props;\n        const { isEditing }: State = prevState;\n\n        if (currentElement && this.state.shouldConfirmRemove) {\n            scrollIntoView(currentElement, {\n                block: 'start',\n                behavior: 'smooth',\n            });\n        }\n\n        if (hasError && hasError !== prevHasError) {\n            // If hasError is true, which means an error occurred while\n            // doing a network operation and hence hide the busy indicator\n            // Saving also disables isEditing, so need to enable that back.\n            // isDirty remains as it was before.\n            this.setState({ isBusy: false, isEditing: true });\n        } else if (prevIsDirty && !isDirty) {\n            // If the form was dirty and now its not dirty\n            // we know a successful save may have happened.\n            // We don't modify isEditing here because we maintain the\n            // prior state for that. If we came here from a save\n            // success then save already disabled isEditing.\n            if (isEditing) {\n                // We are still editing so don't reset it\n                this.setState({ isBusy: false });\n            } else {\n                // For a successfull save we reset cascading overwrite radio\n                this.setState({ isBusy: false, isCascadingOverwritten: false });\n            }\n        }\n    }\n\n    /**\n     * Undo any changes made\n     *\n     * @return {void}\n     */\n    onCancel = (): void => {\n        const { id, onModification }: Props = this.props;\n        this.setState(this.getState(this.props));\n\n        // Callback to parent to tell that something is dirty\n        if (onModification) {\n            onModification(id, false);\n        }\n    };\n\n    /**\n     * Allows a user to confirm metadata instance removal\n     *\n     * @return {void}\n     */\n    onConfirmRemove = (): void => {\n        this.setState({ shouldConfirmRemove: true });\n    };\n\n    /**\n     * Cancel the remove instance attempt\n     *\n     * @return {void}\n     */\n    onConfirmCancel = (): void => {\n        this.setState({ shouldConfirmRemove: false });\n    };\n\n    /**\n     * Removes an instance\n     *\n     * @return {void}\n     */\n    onRemove = (): void => {\n        if (!this.isEditing()) {\n            return;\n        }\n\n        const { id, onRemove }: Props = this.props;\n        if (onRemove) {\n            onRemove(id);\n            this.setState({ isBusy: true });\n        }\n    };\n\n    /**\n     * Saves instance data\n     *\n     * @return {void}\n     */\n    onSave = (): void => {\n        const {\n            cascadePolicy,\n            data: originalData,\n            id,\n            isDirty,\n            isCascadingPolicyApplicable,\n            onSave,\n        }: Props = this.props;\n        const { data: currentData, errors, isCascadingEnabled, isCascadingOverwritten }: State = this.state;\n\n        if (!this.isEditing() || !isDirty || !onSave || Object.keys(errors).length) {\n            return;\n        }\n\n        this.setState({\n            isBusy: true,\n            isEditing: false,\n            shouldShowCascadeOptions: false,\n        });\n        onSave(\n            id,\n            this.createJSONPatch(currentData, originalData),\n            isCascadingPolicyApplicable\n                ? {\n                      canEdit: cascadePolicy ? cascadePolicy.canEdit : false,\n                      id: cascadePolicy ? cascadePolicy.id : undefined,\n                      isEnabled: isCascadingEnabled,\n                      overwrite: isCascadingOverwritten,\n                  }\n                : undefined,\n            cloneDeep(currentData),\n        );\n    };\n\n    /**\n     * Updates a key value in the instance data\n     *\n     * @param {string} key - key to update\n     * @param {FieldValue} value - value to update\n     * @param {string} type - type of field\n     * @return {void}\n     */\n    onFieldChange = (key: string, value: MetadataFieldValue, type: string): void => {\n        const { data, errors }: State = this.state;\n\n        // Don't do anything if data is the same or not in edit mode\n        if (!this.isEditing() || isEqual(data[key], value)) {\n            return;\n        }\n\n        const isValid = isValidValue(type, value);\n        const finalErrors = { ...errors };\n        const finalData = cloneDeep(data);\n        finalData[key] = value;\n\n        if (isValid) {\n            delete finalErrors[key];\n        } else {\n            finalErrors[key] = <FormattedMessage {...messages.invalidInput} />;\n        }\n\n        this.setState({ data: finalData, errors: finalErrors }, () => {\n            this.setDirty(type);\n        });\n    };\n\n    /**\n     * Removes a key from instance data\n     *\n     * @param {string} key - key to remove\n     * @return {void}\n     */\n    onFieldRemove = (key: string): void => {\n        if (!this.isEditing()) {\n            return;\n        }\n\n        const { data, errors }: State = this.state;\n        const finalData = cloneDeep(data);\n        const finalErrors = { ...errors };\n        delete finalData[key];\n        delete finalErrors[key];\n        this.setState({ data: finalData, errors: finalErrors }, this.setDirty);\n    };\n\n    /**\n     * Toggle cascading policy\n     *\n     * @param {boolean} value - true when turned on\n     * @return {void}\n     */\n    onCascadeToggle = (value: boolean) => {\n        const { isCascadingPolicyApplicable }: Props = this.props;\n        if (!isCascadingPolicyApplicable) {\n            return;\n        }\n\n        this.setState(\n            {\n                isCascadingEnabled: value,\n                shouldShowCascadeOptions: value,\n            },\n            this.setDirty,\n        );\n    };\n\n    /**\n     * Changes the cascade mode.\n     * isCascadingOverwritten is slways false to start off.\n     *\n     * @param {boolean} value - true when overwrite policy is chosen\n     * @return {void}\n     */\n    onCascadeModeChange = (value: boolean): void => {\n        const { isCascadingPolicyApplicable }: Props = this.props;\n        if (!isCascadingPolicyApplicable) {\n            return;\n        }\n\n        this.setState(\n            {\n                isCascadingOverwritten: value,\n            },\n            this.setDirty,\n        );\n    };\n\n    /**\n     * Returns the state from props\n     *\n     * @return {Object} - react state\n     */\n    getState(props: Props): State {\n        return {\n            data: cloneDeep(props.data),\n            errors: {},\n            isBusy: false,\n            isCascadingEnabled: this.isCascadingEnabled(props),\n            isCascadingOverwritten: false,\n            isEditing: false,\n            shouldConfirmRemove: false,\n            shouldShowCascadeOptions: false,\n        };\n    }\n\n    /**\n     * Returns the card title with possible error mark\n     *\n     * @return {Object} - react title element\n     */\n    getTitle(): React.Node {\n        const { cascadePolicy = {}, hasError, isCascadingPolicyApplicable, template }: Props = this.props;\n        const isProperties = template.templateKey === TEMPLATE_CUSTOM_PROPERTIES;\n\n        const type = isCascadingPolicyApplicable && cascadePolicy.id ? 'cascade' : 'default';\n\n        return (\n            <span className=\"metadata-instance-editor-instance-title\">\n                <IconMetadataColored type={type} />\n                <span\n                    className={classNames('metadata-instance-editor-instance-title-text', {\n                        'metadata-instance-editor-instance-has-error': hasError,\n                    })}\n                >\n                    {isProperties ? <FormattedMessage {...messages.customTitle} /> : template.displayName}\n                </span>\n                {hasError && <IconAlertCircle color={bdlWatermelonRed} />}\n            </span>\n        );\n    }\n\n    /**\n     * Render the correct delete message to show based on custom metadata and file/folder metadata\n     */\n    renderDeleteMessage = (isFile: boolean, template: Object) => {\n        let message;\n        const isProperties = template.templateKey === TEMPLATE_CUSTOM_PROPERTIES;\n\n        if (isProperties) {\n            message = isFile ? 'fileMetadataRemoveCustomTemplateConfirm' : 'folderMetadataRemoveCustomTemplateConfirm';\n        } else {\n            message = isFile ? 'fileMetadataRemoveTemplateConfirm' : 'folderMetadataRemoveTemplateConfirm';\n        }\n\n        return (\n            <FormattedMessage\n                {...messages[message]}\n                values={{\n                    metadataName: template.displayName,\n                }}\n            />\n        );\n    };\n\n    /**\n     * Get the delete confirmation message base on the template key\n     */\n    getConfirmationMessage(): React.Node {\n        const { template, isCascadingPolicyApplicable }: Props = this.props;\n        const isFile = !isCascadingPolicyApplicable;\n        return this.renderDeleteMessage(isFile, template);\n    }\n\n    /**\n     * Evaluates if the metadata was changed or cascading policy\n     * altered or enabled.\n     *\n     * @return {void}\n     */\n    setDirty = (type?: string): void => {\n        const { id, isCascadingPolicyApplicable, onModification }: Props = this.props;\n        const { data, isCascadingEnabled, isCascadingOverwritten } = this.state;\n        const hasDataChanged = !isEqual(data, this.props.data);\n        let hasCascadingChanged = false;\n\n        if (isCascadingPolicyApplicable) {\n            // isCascadingOverwritten always starts out as false, so true signifies a change\n            hasCascadingChanged = isCascadingOverwritten || isCascadingEnabled !== this.isCascadingEnabled(this.props);\n        }\n\n        // Callback to parent to tell that something is dirty\n        if (onModification) {\n            onModification(id, hasDataChanged || hasCascadingChanged, type);\n        }\n    };\n\n    collapsibleRef: {\n        current: null | HTMLDivElement,\n    } = React.createRef();\n\n    fieldKeyToTypeMap: Object;\n\n    /**\n     * Determines if cascading policy is enabled based on\n     * whether it has an id or not.\n     *\n     * @param {Object} props - component props\n     * @return {boolean} true if cascading policy is enabled\n     */\n    isCascadingEnabled(props: Props) {\n        if (props.cascadePolicy) {\n            return !!props.cascadePolicy.id;\n        }\n        return false;\n    }\n\n    /**\n     * Toggles the edit mode\n     *\n     * @private\n     * @return {void}\n     */\n    toggleIsEditing = (): void => {\n        this.setState(prevState => ({\n            isEditing: !prevState.isEditing,\n        }));\n    };\n\n    /**\n     * Creates JSON Patch operations from the passed in\n     * data while comparing it to the original data from props.\n     *\n     * Only diffs at the root level and primitives.\n     *\n     * @param {*} currentData - the latest changes by the user\n     * @param {*} originalData - the original values\n     * @return {Array} - JSON patch operations\n     */\n    createJSONPatch(currentData: Object, originalData: Object): JSONPatchOperations {\n        const ops = [];\n        const data = cloneDeep(currentData); // clone the data for mutation\n\n        // Iterate over the original data and find keys that have changed.\n        // Also remove them from the data object to only leave new keys.\n        Object.keys(originalData).forEach(key => {\n            const type = this.fieldKeyToTypeMap[key];\n            const originalValue = getValue(originalData, key, type);\n            const path = `/${key}`;\n\n            if (Object.prototype.hasOwnProperty.call(data, key)) {\n                const value = getValue(data, key, type);\n\n                // Only register changed data\n                if (!isEqual(value, originalValue)) {\n                    // Add a test OP for each replaces\n                    ops.push({\n                        op: JSON_PATCH_OP_TEST,\n                        path,\n                        value: originalValue,\n                    });\n                    ops.push({\n                        op: JSON_PATCH_OP_REPLACE,\n                        path,\n                        value,\n                    });\n                }\n            } else {\n                // Key was removed\n                // Add a test OP for removes\n                ops.push({\n                    op: JSON_PATCH_OP_TEST,\n                    path,\n                    value: originalValue,\n                });\n                ops.push({ op: JSON_PATCH_OP_REMOVE, path });\n            }\n            delete data[key];\n        });\n\n        // Iterate over the remaining keys that are new.\n        Object.keys(data).forEach(key => {\n            const type = this.fieldKeyToTypeMap[key];\n            const value = getValue(data, key, type);\n\n            ops.push({\n                op: JSON_PATCH_OP_ADD,\n                path: `/${key}`,\n                value,\n            });\n        });\n\n        return ops;\n    }\n\n    /**\n     * Utility function to determine if instance is editable\n     *\n     * @return {boolean} true if editable\n     */\n    canEdit(): boolean {\n        const { canEdit, onModification, onRemove, onSave }: Props = this.props;\n        return (\n            canEdit &&\n            typeof onRemove === 'function' &&\n            typeof onSave === 'function' &&\n            typeof onModification === 'function'\n        );\n    }\n\n    /**\n     * Utility function to determine if instance is in edit mode\n     *\n     * @return {boolean} true if editing\n     */\n    isEditing(): boolean {\n        const { isEditing }: State = this.state;\n        return this.canEdit() && isEditing;\n    }\n\n    renderEditButton = () => {\n        const { isDirty }: Props = this.props;\n        const { isBusy }: State = this.state;\n        const canEdit = this.canEdit();\n        const isEditing = this.isEditing();\n        const editClassName = classNames('metadata-instance-editor-instance-edit', {\n            'metadata-instance-editor-instance-is-editing': isEditing,\n        });\n\n        if (canEdit && !isDirty && !isBusy) {\n            return (\n                <Tooltip position=\"top-left\" text={<FormattedMessage {...messages.metadataEditTooltip} />}>\n                    <PlainButton\n                        className={editClassName}\n                        data-resin-target=\"metadata-instanceedit\"\n                        onClick={this.toggleIsEditing}\n                        type=\"button\"\n                    >\n                        <IconEdit />\n                    </PlainButton>\n                </Tooltip>\n            );\n        }\n        return null;\n    };\n\n    render() {\n        const { cascadePolicy = {}, isDirty, isCascadingPolicyApplicable, isOpen, template }: Props = this.props;\n        const { fields = [] } = template;\n        const {\n            data,\n            errors,\n            isBusy,\n            isCascadingEnabled,\n            shouldConfirmRemove,\n            shouldShowCascadeOptions,\n            isCascadingOverwritten,\n        }: State = this.state;\n        const isProperties = template.templateKey === TEMPLATE_CUSTOM_PROPERTIES;\n        const isEditing = this.isEditing();\n\n        if (!template || isHidden(template)) {\n            return null;\n        }\n\n        // Animate short and tall cards at consistent speeds.\n        const animationDuration = (fields.length + 1) * 50;\n\n        return (\n            <div ref={this.collapsibleRef}>\n                <Collapsible\n                    animationDuration={animationDuration}\n                    buttonProps={{\n                        [RESIN_TAG_TARGET]: 'metadata-card',\n                    }}\n                    hasStickyHeader\n                    headerActionItems={this.renderEditButton()}\n                    isBordered\n                    isOpen={isOpen}\n                    title={this.getTitle()}\n                >\n                    {shouldConfirmRemove && (\n                        <LoadingIndicatorWrapper isLoading={isBusy}>\n                            <MetadataInstanceConfirmDialog\n                                confirmationMessage={this.getConfirmationMessage()}\n                                onCancel={this.onConfirmCancel}\n                                onConfirm={this.onRemove}\n                            />\n                        </LoadingIndicatorWrapper>\n                    )}\n                    {!shouldConfirmRemove && (\n                        <LoadingIndicatorWrapper isLoading={isBusy}>\n                            <Form onValidSubmit={isDirty ? this.onSave : noop}>\n                                <div className=\"metadata-instance-editor-instance\">\n                                    {isCascadingPolicyApplicable && (\n                                        <CascadePolicy\n                                            canEdit={isEditing && !!cascadePolicy.canEdit}\n                                            isCascadingEnabled={isCascadingEnabled}\n                                            isCascadingOverwritten={isCascadingOverwritten}\n                                            isCustomMetadata={isProperties}\n                                            onCascadeModeChange={this.onCascadeModeChange}\n                                            onCascadeToggle={this.onCascadeToggle}\n                                            shouldShowCascadeOptions={shouldShowCascadeOptions}\n                                        />\n                                    )}\n                                    {isProperties ? (\n                                        <CustomInstance\n                                            canEdit={isEditing}\n                                            data={data}\n                                            onFieldChange={this.onFieldChange}\n                                            onFieldRemove={this.onFieldRemove}\n                                        />\n                                    ) : (\n                                        <TemplatedInstance\n                                            canEdit={isEditing}\n                                            data={data}\n                                            errors={errors}\n                                            onFieldChange={this.onFieldChange}\n                                            onFieldRemove={this.onFieldRemove}\n                                            template={template}\n                                        />\n                                    )}\n                                </div>\n                                {isEditing && (\n                                    <Footer\n                                        onCancel={this.onCancel}\n                                        onRemove={this.onConfirmRemove}\n                                        showSave={isDirty}\n                                    />\n                                )}\n                            </Form>\n                        </LoadingIndicatorWrapper>\n                    )}\n                </Collapsible>\n            </div>\n        );\n    }\n}\n\nexport default Instance;\n"],"file":"Instance.js"}