{"version":3,"sources":["../../../src/features/metadata-instance-editor/TemplateDropdown.js"],"names":["React","classNames","isEqual","FormattedMessage","injectIntl","DatalistItem","SelectorDropdown","SearchForm","PlainButton","LoadingIndicator","Flyout","Overlay","MenuToggle","messages","TEMPLATE_CUSTOM_PROPERTIES","InputContainer","inputProps","rest","getAvailableTemplates","allTemplates","usedTemplates","filter","template","findIndex","usedTemplate","templateKey","scope","TemplateDropdown","props","isDropdownBusy","onAdd","activeTemplate","defaultTemplateIcon","activeTemplateIcon","templates","title","state","hasUnusedTemplates","length","hasTemplates","hasResults","indicatorOrMessage","message","id","metadataTemplatesServerHasNoTemplates","metadataTemplatesNoRemainingTemplates","metadataTemplatesNoResults","renderedTemplates","map","isTemplateSelected","buttonClassName","getTemplateName","index","getSelector","intl","filterText","handleUserInput","formatMessage","metadataTemplateSearchPlaceholder","userInput","setState","label","customTitle","defaultMessage","displayName","toLowerCase","includes","onDropdownToggle","isDropdownOpen","entryButton","buttonToggleClassName","metadataTemplateAdd","prevTemplates","prevUsedTemplates","className","flyoutClassName","onClose","onOpen","renderEntryButton","getDropdown","PureComponent","TemplateDropdownBase"],"mappings":"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","sourcesContent":["// @flow\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport isEqual from 'lodash/isEqual';\nimport { FormattedMessage, injectIntl } from 'react-intl';\n\nimport DatalistItem from '../../components/datalist-item';\nimport SelectorDropdown from '../../components/selector-dropdown';\nimport SearchForm from '../../components/search-form/SearchForm';\nimport PlainButton from '../../components/plain-button';\nimport LoadingIndicator from '../../components/loading-indicator';\nimport { Flyout, Overlay } from '../../components/flyout';\n\nimport MenuToggle from '../../components/dropdown-menu/MenuToggle';\nimport messages from './messages';\nimport TEMPLATE_CUSTOM_PROPERTIES from './constants';\nimport type { MetadataTemplate } from '../../common/types/metadata';\nimport './TemplateDropdown.scss';\n\ntype Props = {\n    activeTemplate?: ?MetadataTemplate,\n    activeTemplateIcon?: React.Node,\n    className?: string,\n    defaultTemplateIcon?: React.Node,\n    entryButton?: React.Node,\n    intl: any,\n    isDropdownBusy?: boolean,\n    onAdd: (template: MetadataTemplate) => void,\n    onDropdownToggle?: (isDropdownOpen: boolean) => void,\n    templates: Array<MetadataTemplate>,\n    title?: React.Node,\n    usedTemplates: Array<MetadataTemplate>,\n};\n\ntype State = {\n    filterText: string,\n    isDropdownOpen: boolean,\n    templates: Array<MetadataTemplate>,\n};\n\nconst InputContainer = ({ inputProps = {}, ...rest }: { inputProps?: Object }) => (\n    <SearchForm\n        {...inputProps}\n        {...rest}\n        shouldPreventClearEventPropagation\n        data-resin-target=\"metadata-templatesearch\"\n    />\n);\n\nconst getAvailableTemplates = (allTemplates: Array<MetadataTemplate>, usedTemplates: Array<MetadataTemplate>) =>\n    allTemplates.filter(\n        (template: MetadataTemplate) =>\n            usedTemplates.findIndex(\n                (usedTemplate: MetadataTemplate) =>\n                    usedTemplate.templateKey === template.templateKey && usedTemplate.scope === template.scope,\n            ) === -1,\n    );\n\nclass TemplateDropdown extends React.PureComponent<Props, State> {\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            isDropdownOpen: false,\n            filterText: '',\n            templates: getAvailableTemplates(props.templates, props.usedTemplates),\n        };\n    }\n\n    /**\n     * Updates the state\n     *\n     * @param {Object} prevProps - next props\n     * @return {void}\n     */\n    componentDidUpdate({ templates: prevTemplates, usedTemplates: prevUsedTemplates }: Props) {\n        const { templates, usedTemplates } = this.props;\n\n        if (!isEqual(prevTemplates, templates) || !isEqual(prevUsedTemplates, usedTemplates)) {\n            this.setState({\n                templates: getAvailableTemplates(templates, usedTemplates),\n            });\n        }\n    }\n\n    getDropdown = () => {\n        const {\n            isDropdownBusy,\n            onAdd,\n            activeTemplate,\n            defaultTemplateIcon,\n            activeTemplateIcon,\n            templates: allTemplates,\n            title,\n            usedTemplates,\n        }: Props = this.props;\n        const { templates }: State = this.state;\n        const hasUnusedTemplates = getAvailableTemplates(allTemplates, usedTemplates).length > 0;\n        const hasTemplates = allTemplates.length > 0;\n        const hasResults = templates.length > 0;\n\n        let indicatorOrMessage = null;\n\n        if (isDropdownBusy) {\n            indicatorOrMessage = (\n                <LoadingIndicator className=\"metadata-instance-editor-template-message template-dropdown-loading-indicator\" />\n            );\n        } else if (!hasTemplates || !hasUnusedTemplates || !hasResults) {\n            let message = { id: '' };\n\n            if (!hasTemplates) {\n                message = messages.metadataTemplatesServerHasNoTemplates;\n            } else if (!hasUnusedTemplates) {\n                message = messages.metadataTemplatesNoRemainingTemplates;\n            } else if (!hasResults) {\n                message = messages.metadataTemplatesNoResults;\n            }\n\n            indicatorOrMessage = (\n                <i className=\"metadata-instance-editor-template-message\">\n                    <FormattedMessage {...message} />\n                </i>\n            );\n        }\n\n        const renderedTemplates = templates.map(template => {\n            const isTemplateSelected = activeTemplate && activeTemplate.id === template.id;\n\n            const buttonClassName = classNames('metadata-template-dropdown-select-template', {\n                'metadata-template-dropdown-is-selected': isTemplateSelected,\n            });\n\n            return (\n                <DatalistItem key={template.id}>\n                    <PlainButton className={buttonClassName} tabIndex=\"-1\" type=\"button\">\n                        {isTemplateSelected ? activeTemplateIcon : defaultTemplateIcon}\n                        {this.getTemplateName(template)}\n                    </PlainButton>\n                </DatalistItem>\n            );\n        });\n\n        return (\n            <>\n                <SelectorDropdown\n                    className=\"metadata-instance-editor-template-dropdown-menu\"\n                    title={title}\n                    isAlwaysOpen\n                    onSelect={(index: number) => {\n                        onAdd(templates[index]);\n                    }}\n                    selector={this.getSelector()}\n                    shouldScroll\n                >\n                    {indicatorOrMessage ? null : renderedTemplates}\n                </SelectorDropdown>\n                {indicatorOrMessage}\n            </>\n        );\n    };\n\n    /**\n     * Returns the input field for the drop down\n     *\n     * @return {React.Node} - input selector\n     */\n    getSelector = () => {\n        const { intl }: Props = this.props;\n        const { filterText }: State = this.state;\n        return (\n            <InputContainer\n                label=\"\"\n                onChange={this.handleUserInput}\n                placeholder={intl.formatMessage(messages.metadataTemplateSearchPlaceholder)}\n                type=\"text\"\n                useClearButton\n                value={filterText}\n            />\n        );\n    };\n\n    /**\n     * Returns template display name.\n     * For custom metadata we have it on the client.\n     *\n     * @return {React.Node} - string or formatted name\n     */\n    getTemplateName(template: MetadataTemplate): React.Node {\n        return template.templateKey === TEMPLATE_CUSTOM_PROPERTIES ? (\n            <FormattedMessage className=\"template-display-name\" {...messages.customTitle} />\n        ) : (\n            <div className=\"template-display-name\">{template.displayName}</div>\n        );\n    }\n\n    /**\n     * Updates the filter text and filters the results\n     *\n     * @param {UserInput} userInput - input value returned from onChangeHandler from SearchForm.js\n     * @return {void}\n     */\n    handleUserInput = (userInput: string) => {\n        const { templates: allTemplates, usedTemplates } = this.props;\n        const filterText = userInput;\n        const templates = getAvailableTemplates(allTemplates, usedTemplates);\n\n        this.setState({\n            filterText,\n            templates: templates.filter(template => {\n                const label: string = ((template.templateKey === TEMPLATE_CUSTOM_PROPERTIES\n                    ? messages.customTitle.defaultMessage\n                    : template.displayName): any);\n                return label.toLowerCase().includes(filterText.toLowerCase());\n            }),\n        });\n    };\n\n    onOpen = () => {\n        const { onDropdownToggle, templates, usedTemplates } = this.props;\n\n        if (onDropdownToggle) {\n            onDropdownToggle(true);\n        }\n\n        this.setState({\n            isDropdownOpen: true,\n            filterText: '',\n            templates: getAvailableTemplates(templates, usedTemplates),\n        });\n    };\n\n    onClose = () => {\n        const { onDropdownToggle } = this.props;\n\n        if (onDropdownToggle) {\n            onDropdownToggle(false);\n        }\n\n        this.setState({ isDropdownOpen: false });\n    };\n\n    renderEntryButton = () => {\n        const { entryButton } = this.props;\n        const { isDropdownOpen } = this.state;\n        const buttonToggleClassName = classNames('lnk', {\n            'is-toggled': isDropdownOpen,\n        });\n        if (entryButton) {\n            return entryButton;\n        }\n        return (\n            <PlainButton data-resin-target=\"metadata-templateaddmenu\" className={buttonToggleClassName} type=\"button\">\n                <MenuToggle>\n                    <FormattedMessage {...messages.metadataTemplateAdd} />\n                </MenuToggle>\n            </PlainButton>\n        );\n    };\n\n    render() {\n        const { className } = this.props;\n        const flyoutClassName = classNames('metadata-instance-editor-template-dropdown-flyout', className);\n\n        return (\n            <Flyout\n                className={flyoutClassName}\n                closeOnClick\n                closeOnClickOutside\n                onClose={this.onClose}\n                onOpen={this.onOpen}\n                position=\"bottom-left\"\n                shouldDefaultFocus\n            >\n                {this.renderEntryButton()}\n                <Overlay>{this.getDropdown()}</Overlay>\n            </Flyout>\n        );\n    }\n}\n\nexport { TemplateDropdown as TemplateDropdownBase };\nexport default injectIntl(TemplateDropdown);\n"],"file":"TemplateDropdown.js"}