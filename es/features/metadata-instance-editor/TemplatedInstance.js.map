{"version":3,"sources":["../../../src/features/metadata-instance-editor/TemplatedInstance.js"],"names":["React","FormattedMessage","Field","messages","isHidden","TemplatedInstance","canEdit","data","errors","onFieldChange","onFieldRemove","template","fields","hasFields","length","hasVisibleFields","some","field","showNoFieldsMessage","showHiddenFieldsMessage","map","id","key","description","displayName","value","type","options","allAttributesAreHidden","noAttributesForTemplate"],"mappings":"AACA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,gBAAT,QAAiC,YAAjC;AAEA,OAAOC,KAAP,MAAkB,gBAAlB;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,SAASC,QAAT,QAAyB,gBAAzB;AACA,OAAO,0BAAP;;AAWA,IAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,OAAmF;AAAA,MAAhFC,OAAgF,QAAhFA,OAAgF;AAAA,uBAAvEC,IAAuE;AAAA,MAAvEA,IAAuE,0BAAhE,EAAgE;AAAA,MAA5DC,MAA4D,QAA5DA,MAA4D;AAAA,MAApDC,aAAoD,QAApDA,aAAoD;AAAA,MAArCC,aAAqC,QAArCA,aAAqC;AAAA,MAAtBC,QAAsB,QAAtBA,QAAsB;AAAA,yBACjFA,QADiF,CACjGC,MADiG;AAAA,MACjGA,MADiG,iCACxF,EADwF;AAEzG,MAAMC,SAAS,GAAGD,MAAM,CAACE,MAAP,GAAgB,CAAlC;AACA,MAAMC,gBAAgB,GAAGF,SAAS,IAAID,MAAM,CAACI,IAAP,CAAY,UAAAC,KAAK;AAAA,WAAI,CAACb,QAAQ,CAACa,KAAD,CAAb;AAAA,GAAjB,CAAtC;AACA,MAAMC,mBAAmB,GAAG,CAACL,SAA7B;AACA,MAAMM,uBAAuB,GAAGN,SAAS,IAAI,CAACE,gBAA9C;AAEA,sBACI,0CACKA,gBAAgB,IACbH,MAAM,CAACQ,GAAP,CAAW,UAAAH,KAAK;AAAA,wBACZ,oBAAC,KAAD;AACI,MAAA,GAAG,EAAEA,KAAK,CAACI,EADf;AAEI,MAAA,OAAO,EAAEf,OAFb;AAGI,MAAA,OAAO,EAAEW,KAAK,CAACK,GAHnB;AAII,MAAA,SAAS,EAAEf,IAAI,CAACU,KAAK,CAACK,GAAP,CAJnB;AAKI,MAAA,WAAW,EAAEL,KAAK,CAACM,WALvB;AAMI,MAAA,WAAW,EAAEN,KAAK,CAACO,WANvB;AAOI,MAAA,KAAK,EAAEhB,MAAM,CAACS,KAAK,CAACK,GAAP,CAPjB;AAQI,MAAA,QAAQ,EAAElB,QAAQ,CAACa,KAAD,CARtB,CAQ+B;AAR/B;AASI,MAAA,QAAQ,EAAE,kBAACK,GAAD,EAAcG,KAAd,EAA4C;AAClD,YAAInB,OAAO,IAAIG,aAAf,EAA8B;AAC1BA,UAAAA,aAAa,CAACa,GAAD,EAAMG,KAAN,EAAaR,KAAK,CAACS,IAAnB,CAAb;AACH;AACJ,OAbL;AAcI,MAAA,QAAQ,EAAE,kBAACJ,GAAD,EAAiB;AACvB,YAAIhB,OAAO,IAAII,aAAf,EAA8B;AAC1BA,UAAAA,aAAa,CAACY,GAAD,CAAb;AACH;AACJ,OAlBL;AAmBI,MAAA,OAAO,EAAEL,KAAK,CAACU,OAnBnB;AAoBI,MAAA,IAAI,EAAEV,KAAK,CAACS;AApBhB,MADY;AAAA,GAAhB,CAFR,EA0BKP,uBAAuB,iBACpB;AAAK,IAAA,SAAS,EAAC;AAAf,kBACI,oBAAC,gBAAD,EAAsBhB,QAAQ,CAACyB,sBAA/B,CADJ,CA3BR,EA+BKV,mBAAmB,iBAChB;AAAK,IAAA,SAAS,EAAC;AAAf,kBACI,oBAAC,gBAAD,EAAsBf,QAAQ,CAAC0B,uBAA/B,CADJ,CAhCR,CADJ;AAuCH,CA9CD;;AAgDA,eAAexB,iBAAf","sourcesContent":["// @flow\nimport * as React from 'react';\nimport { FormattedMessage } from 'react-intl';\n\nimport Field from './fields/Field';\nimport messages from './messages';\nimport { isHidden } from './metadataUtil';\nimport './TemplatedInstance.scss';\n\ntype Props = {\n    canEdit: boolean,\n    data: MetadataFields,\n    errors: { [string]: React.Node },\n    onFieldChange?: (key: string, value: MetadataFieldValue, type: string) => void,\n    onFieldRemove?: (key: string) => void,\n    template: MetadataTemplate,\n};\n\nconst TemplatedInstance = ({ canEdit, data = {}, errors, onFieldChange, onFieldRemove, template }: Props) => {\n    const { fields = [] } = template;\n    const hasFields = fields.length > 0;\n    const hasVisibleFields = hasFields && fields.some(field => !isHidden(field));\n    const showNoFieldsMessage = !hasFields;\n    const showHiddenFieldsMessage = hasFields && !hasVisibleFields;\n\n    return (\n        <>\n            {hasVisibleFields &&\n                fields.map(field => (\n                    <Field\n                        key={field.id}\n                        canEdit={canEdit}\n                        dataKey={field.key}\n                        dataValue={data[field.key]}\n                        description={field.description}\n                        displayName={field.displayName}\n                        error={errors[field.key]}\n                        isHidden={isHidden(field)} // Checking both isHidden and hidden attributes due to differences in V2 and V3 APIs\n                        onChange={(key: string, value: MetadataFieldValue) => {\n                            if (canEdit && onFieldChange) {\n                                onFieldChange(key, value, field.type);\n                            }\n                        }}\n                        onRemove={(key: string) => {\n                            if (canEdit && onFieldRemove) {\n                                onFieldRemove(key);\n                            }\n                        }}\n                        options={field.options}\n                        type={field.type}\n                    />\n                ))}\n            {showHiddenFieldsMessage && (\n                <div className=\"attributes-hidden-message\">\n                    <FormattedMessage {...messages.allAttributesAreHidden} />\n                </div>\n            )}\n            {showNoFieldsMessage && (\n                <div className=\"no-attributes-message\">\n                    <FormattedMessage {...messages.noAttributesForTemplate} />\n                </div>\n            )}\n        </>\n    );\n};\n\nexport default TemplatedInstance;\n"],"file":"TemplatedInstance.js"}