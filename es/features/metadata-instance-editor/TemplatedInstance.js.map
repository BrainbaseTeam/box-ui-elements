{"version":3,"sources":["../../../src/features/metadata-instance-editor/TemplatedInstance.js"],"names":["React","FormattedMessage","MetadataField","messages","isHidden","MetadataInstanceEditorContext","TemplatedInstance","canEdit","data","errors","onFieldChange","onFieldRemove","template","fields","hasFields","length","hasVisibleFields","some","field","showNoFieldsMessage","showHiddenFieldsMessage","useContext","blurExceptionClassNames","map","id","key","description","displayName","value","type","options","allAttributesAreHidden","noAttributesForTemplate"],"mappings":"AACA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,gBAAT,QAAiC,YAAjC;AAEA,OAAOC,aAAP,MAA0B,2CAA1B;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,SAASC,QAAT,QAAyB,gBAAzB;AAEA,OAAOC,6BAAP,MAA0C,iCAA1C;AACA,OAAO,0BAAP;;AAWA,IAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,OAAmF;AAAA,MAAhFC,OAAgF,QAAhFA,OAAgF;AAAA,uBAAvEC,IAAuE;AAAA,MAAvEA,IAAuE,0BAAhE,EAAgE;AAAA,MAA5DC,MAA4D,QAA5DA,MAA4D;AAAA,MAApDC,aAAoD,QAApDA,aAAoD;AAAA,MAArCC,aAAqC,QAArCA,aAAqC;AAAA,MAAtBC,QAAsB,QAAtBA,QAAsB;AAAA,yBACjFA,QADiF,CACjGC,MADiG;AAAA,MACjGA,MADiG,iCACxF,EADwF;AAEzG,MAAMC,SAAS,GAAGD,MAAM,CAACE,MAAP,GAAgB,CAAlC;AACA,MAAMC,gBAAgB,GAAGF,SAAS,IAAID,MAAM,CAACI,IAAP,CAAY,UAAAC,KAAK;AAAA,WAAI,CAACd,QAAQ,CAACc,KAAD,CAAb;AAAA,GAAjB,CAAtC;AACA,MAAMC,mBAAmB,GAAG,CAACL,SAA7B;AACA,MAAMM,uBAAuB,GAAGN,SAAS,IAAI,CAACE,gBAA9C;;AALyG,0BAMrEhB,KAAK,CAACqB,UAAN,CAAiBhB,6BAAjB,CANqE;AAAA,MAMjGiB,uBANiG,qBAMjGA,uBANiG;;AAQzG,SACI,0CACKN,gBAAgB,IACbH,MAAM,CAACU,GAAP,CAAW,UAAAL,KAAK;AAAA,WACZ,oBAAC,aAAD;AACI,MAAA,GAAG,EAAEA,KAAK,CAACM,EADf;AAEI,MAAA,uBAAuB,EAAEF,uBAF7B;AAGI,MAAA,OAAO,EAAEf,OAHb;AAII,MAAA,OAAO,EAAEW,KAAK,CAACO,GAJnB;AAKI,MAAA,SAAS,EAAEjB,IAAI,CAACU,KAAK,CAACO,GAAP,CALnB;AAMI,MAAA,WAAW,EAAEP,KAAK,CAACQ,WANvB;AAOI,MAAA,WAAW,EAAER,KAAK,CAACS,WAPvB;AAQI,MAAA,KAAK,EAAElB,MAAM,CAACS,KAAK,CAACO,GAAP,CARjB;AASI,MAAA,QAAQ,EAAErB,QAAQ,CAACc,KAAD,CATtB,CAS+B;AAT/B;AAUI,MAAA,QAAQ,EAAE,kBAACO,GAAD,EAAcG,KAAd,EAA4C;AAClD,YAAIrB,OAAO,IAAIG,aAAf,EAA8B;AAC1BA,UAAAA,aAAa,CAACe,GAAD,EAAMG,KAAN,EAAaV,KAAK,CAACW,IAAnB,CAAb;AACH;AACJ,OAdL;AAeI,MAAA,QAAQ,EAAE,kBAACJ,GAAD,EAAiB;AACvB,YAAIlB,OAAO,IAAII,aAAf,EAA8B;AAC1BA,UAAAA,aAAa,CAACc,GAAD,CAAb;AACH;AACJ,OAnBL;AAoBI,MAAA,OAAO,EAAEP,KAAK,CAACY,OApBnB;AAqBI,MAAA,IAAI,EAAEZ,KAAK,CAACW;AArBhB,MADY;AAAA,GAAhB,CAFR,EA2BKT,uBAAuB,IACpB;AAAK,IAAA,SAAS,EAAC;AAAf,KACI,oBAAC,gBAAD,EAAsBjB,QAAQ,CAAC4B,sBAA/B,CADJ,CA5BR,EAgCKZ,mBAAmB,IAChB;AAAK,IAAA,SAAS,EAAC;AAAf,KACI,oBAAC,gBAAD,EAAsBhB,QAAQ,CAAC6B,uBAA/B,CADJ,CAjCR,CADJ;AAwCH,CAhDD;;AAkDA,eAAe1B,iBAAf","sourcesContent":["// @flow\nimport * as React from 'react';\nimport { FormattedMessage } from 'react-intl';\n\nimport MetadataField from '../metadata-instance-fields/MetadataField';\nimport messages from './messages';\nimport { isHidden } from './metadataUtil';\nimport type { MetadataFields, MetadataTemplate, MetadataFieldValue } from '../../common/types/metadata';\nimport MetadataInstanceEditorContext from './MetadataInstanceEditorContext';\nimport './TemplatedInstance.scss';\n\ntype Props = {\n    canEdit: boolean,\n    data: MetadataFields,\n    errors: { [string]: React.Node },\n    onFieldChange?: (key: string, value: MetadataFieldValue, type: string) => void,\n    onFieldRemove?: (key: string) => void,\n    template: MetadataTemplate,\n};\n\nconst TemplatedInstance = ({ canEdit, data = {}, errors, onFieldChange, onFieldRemove, template }: Props) => {\n    const { fields = [] } = template;\n    const hasFields = fields.length > 0;\n    const hasVisibleFields = hasFields && fields.some(field => !isHidden(field));\n    const showNoFieldsMessage = !hasFields;\n    const showHiddenFieldsMessage = hasFields && !hasVisibleFields;\n    const { blurExceptionClassNames } = React.useContext(MetadataInstanceEditorContext);\n\n    return (\n        <>\n            {hasVisibleFields &&\n                fields.map(field => (\n                    <MetadataField\n                        key={field.id}\n                        blurExceptionClassNames={blurExceptionClassNames}\n                        canEdit={canEdit}\n                        dataKey={field.key}\n                        dataValue={data[field.key]}\n                        description={field.description}\n                        displayName={field.displayName}\n                        error={errors[field.key]}\n                        isHidden={isHidden(field)} // Checking both isHidden and hidden attributes due to differences in V2 and V3 APIs\n                        onChange={(key: string, value: MetadataFieldValue) => {\n                            if (canEdit && onFieldChange) {\n                                onFieldChange(key, value, field.type);\n                            }\n                        }}\n                        onRemove={(key: string) => {\n                            if (canEdit && onFieldRemove) {\n                                onFieldRemove(key);\n                            }\n                        }}\n                        options={field.options}\n                        type={field.type}\n                    />\n                ))}\n            {showHiddenFieldsMessage && (\n                <div className=\"attributes-hidden-message\">\n                    <FormattedMessage {...messages.allAttributesAreHidden} />\n                </div>\n            )}\n            {showNoFieldsMessage && (\n                <div className=\"no-attributes-message\">\n                    <FormattedMessage {...messages.noAttributesForTemplate} />\n                </div>\n            )}\n        </>\n    );\n};\n\nexport default TemplatedInstance;\n"],"file":"TemplatedInstance.js"}