{"version":3,"sources":["../../../../src/features/message-center/components/MessageCenter.js"],"names":["React","noop","Megaphone20","CountBadge","Badgeable","MessageCenterModal","Internationalize","MessageCenter","contentPreviewProps","getUnreadMessageCount","ButtonComponent","buttonComponent","getEligibleMessages","getToken","apiHost","postMarkAllMessagesAsSeen","overscanRowCount","language","messages","onMessageShown","useState","isOpen","setIsOpen","unreadMessageCount","setUnreadMessageCount","eligibleMessages","setEligibleMessages","isFetchingMessagesRef","useRef","useEffect","fetchUnreadMessageCount","count","fetchEligibleMessages","current","eligibleMessagesResponse","isOpenAndNoMessages","shouldPrefetch","handleOnClick","prevIsOpen","err","onRequestClose","icon"],"mappings":"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","sourcesContent":["// @flow\nimport * as React from 'react';\nimport noop from 'lodash/noop';\nimport Megaphone20 from '../../../icon/fill/Megaphone20';\nimport CountBadge from '../../../components/count-badge/CountBadge';\nimport Badgeable from '../../../components/badgeable/Badgeable';\nimport type { Token, StringMap } from '../../../common/types/core';\nimport MessageCenterModal from './message-center-modal/MessageCenterModal';\nimport type {\n    GetEligibleMessageCenterMessages,\n    UnreadEligibleMessageCenterMessageCount,\n    EligibleMessageCenterMessage,\n} from '../types';\nimport type { ContentPreviewProps } from '../../message-preview-content/MessagePreviewContent';\nimport Internationalize from '../../../elements/common/Internationalize';\n\ntype Props = {|\n    apiHost: string,\n    buttonComponent: React.ComponentType<{ render: () => React.Node }>,\n    contentPreviewProps?: ContentPreviewProps,\n    getEligibleMessages: () => Promise<GetEligibleMessageCenterMessages>,\n    getToken: (fileId: string) => Promise<Token>,\n    getUnreadMessageCount: () => Promise<UnreadEligibleMessageCenterMessageCount>,\n    language?: string,\n    messages?: StringMap,\n    onMessageShown?: EligibleMessageCenterMessage => void,\n    overscanRowCount?: number,\n    postMarkAllMessagesAsSeen: (messageArray: Array<EligibleMessageCenterMessage> | Error) => Promise<null>,\n|};\n\nfunction MessageCenter({\n    contentPreviewProps,\n    getUnreadMessageCount,\n    buttonComponent: ButtonComponent,\n    getEligibleMessages,\n    getToken,\n    apiHost,\n    postMarkAllMessagesAsSeen,\n    overscanRowCount,\n    language,\n    messages,\n    onMessageShown = noop,\n}: Props) {\n    const [isOpen, setIsOpen] = React.useState(false);\n    const [unreadMessageCount, setUnreadMessageCount] = React.useState(null);\n    // TODO: create hook for fetching, loading\n    const [eligibleMessages, setEligibleMessages] = React.useState<GetEligibleMessageCenterMessages | null | Error>(\n        null,\n    );\n    const isFetchingMessagesRef = React.useRef(false);\n\n    React.useEffect(() => {\n        async function fetchUnreadMessageCount() {\n            try {\n                const { count } = await getUnreadMessageCount();\n                setUnreadMessageCount(count);\n            } catch (err) {\n                // TODO: add error handling\n            }\n        }\n\n        fetchUnreadMessageCount();\n    }, [getUnreadMessageCount]);\n\n    React.useEffect(() => {\n        async function fetchEligibleMessages() {\n            if (!isFetchingMessagesRef.current) {\n                isFetchingMessagesRef.current = true;\n                try {\n                    const eligibleMessagesResponse = await getEligibleMessages();\n                    setEligibleMessages(eligibleMessagesResponse);\n                } catch (err) {\n                    setEligibleMessages(err);\n                }\n                isFetchingMessagesRef.current = false;\n            }\n        }\n\n        const isOpenAndNoMessages = isOpen && !eligibleMessages;\n        // if there are unread messages, prefetch the data as the user is more likely to click on the message center\n        const shouldPrefetch = !isOpen && !eligibleMessages && !!unreadMessageCount;\n        if (isOpenAndNoMessages || shouldPrefetch) {\n            fetchEligibleMessages();\n        }\n    }, [eligibleMessages, getEligibleMessages, isOpen, unreadMessageCount]);\n\n    function handleOnClick() {\n        setIsOpen(prevIsOpen => !prevIsOpen);\n        if (unreadMessageCount && unreadMessageCount > 0 && eligibleMessages) {\n            try {\n                postMarkAllMessagesAsSeen(eligibleMessages);\n            } catch (err) {\n                // swallow\n            }\n            setUnreadMessageCount(0);\n        }\n    }\n\n    function onRequestClose() {\n        setIsOpen(false);\n    }\n\n    const icon = (\n        <ButtonComponent\n            data-resin-target=\"messageCenterOpenModal\"\n            data-testid=\"message-center-unread-count\"\n            onClick={handleOnClick}\n            render={() => (\n                <Badgeable\n                    className=\"icon-bell-badge\"\n                    topRight={\n                        <CountBadge isVisible={!!unreadMessageCount} shouldAnimate value={unreadMessageCount || 0} />\n                    }\n                >\n                    <Megaphone20 className=\"bdl-MessageCenter-icon\" />\n                </Badgeable>\n            )}\n        />\n    );\n\n    return (\n        <Internationalize messages={messages} language={language}>\n            <span className=\"bdl-MessageCenter\" data-resin-component=\"messageCenter\">\n                {isOpen ? (\n                    <>\n                        {icon}\n                        <MessageCenterModal\n                            apiHost={apiHost}\n                            contentPreviewProps={contentPreviewProps}\n                            getToken={getToken}\n                            messages={eligibleMessages}\n                            onRequestClose={onRequestClose}\n                            overscanRowCount={overscanRowCount}\n                            onMessageShown={onMessageShown}\n                        />\n                    </>\n                ) : (\n                    <>{icon}</>\n                )}\n            </span>\n        </Internationalize>\n    );\n}\n\nexport default MessageCenter;\n"],"file":"MessageCenter.js"}