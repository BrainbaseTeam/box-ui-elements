{"version":3,"sources":["../../../../../src/features/message-center/components/collapsibile-scrollbar/CollapsibleScrollbar.js"],"names":["React","classNames","debounce","throttle","Scrollbar","styled","getScrollShadowClassName","StyledScrollThumb","div","StyledScrollContainer","props","theme","primary","scrollShadowRgba","CollapsibleScrollbar","ref","children","className","onScroll","style","thumbYStyles","trackYStyles","rest","scrollRef","useRef","useState","isScrolling","setIsScrolling","scrollShadowClassName","setScrollShadowClassName","turnOffScrollingState","debouncedTurnOffScrollingState","useCallback","onScrollHandler","scrollValues","prevScrollValues","current","scrollHeight","clientHeight","scrollTop","scrollShadowClassNameValue","setScrollShadowState","newScrollShadowClassName","onUpdateHandler","contentScrollHeight","prevClientHeight","prevContentScrollHeight","throttledOnScrollHandler","throttledOnUpdateHandler","classes","useEffect","useImperativeHandle","scrollbarRef","elementRef","restProps","renderer","renderProps","renderPropStyle","background","top","height","width","marginRight","forwardRef"],"mappings":"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","sourcesContent":["// @flow\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport debounce from 'lodash/debounce';\nimport throttle from 'lodash/throttle';\nimport Scrollbar from 'react-scrollbars-custom';\nimport styled from 'styled-components';\n\nimport type { ScrollState } from 'react-scrollbars-custom';\nimport { getScrollShadowClassName } from '../../../collapsible-sidebar/utils/scrollShadow';\n\nconst StyledScrollThumb = styled.div`\n    opacity: 0;\n    transition: opacity 0.15s;\n\n    .scroll-shadow-container:hover &,\n    &.dragging {\n        opacity: 0.5;\n    }\n`;\n\n// The following values match the derived values from scrollShadow.scss\nconst StyledScrollContainer = styled.div`\n    &::before {\n        box-shadow: 0 6px 6px -2px ${props => props.theme.primary.scrollShadowRgba};\n    }\n\n    &::after {\n        box-shadow: 0 -6px 6px -2px ${props => props.theme.primary.scrollShadowRgba};\n    }\n`;\n\ntype Props = {\n    /** Primary content */\n    children?: React.Node,\n    /** Additional classes */\n    className?: string,\n    onScroll?: (\n        { clientHeight: number, scrollLeft: number, scrollTop: number },\n        { clientHeight: number, scrollLeft: number, scrollTop: number },\n    ) => void,\n    style: { height: number | string, width: number | string },\n    thumbYStyles?: Object,\n    trackYStyles?: Object,\n};\n\ntype ScrollbarRef = {\n    clientHeight: number,\n    scrollHeight: number,\n    scrollLeft: number,\n    scrollTop: number,\n};\n\ntype Ref = {\n    scrollbarRef: { current: React.Ref<typeof Scrollbar> | null } | null,\n};\n\nfunction CollapsibleScrollbar(\n    { children, className, onScroll, style, thumbYStyles, trackYStyles, ...rest }: Props,\n    ref,\n) {\n    const scrollRef = React.useRef<ScrollbarRef | null>(null);\n    const [isScrolling, setIsScrolling] = React.useState(false);\n    const [scrollShadowClassName, setScrollShadowClassName] = React.useState();\n\n    const turnOffScrollingState = () => {\n        setIsScrolling(false);\n    };\n\n    // If there hasn't been an update to isScrolling in 100ms, it'll be set to false.\n    const debouncedTurnOffScrollingState = React.useCallback(debounce(turnOffScrollingState, 100), []);\n\n    const onScrollHandler = (scrollValues, prevScrollValues) => {\n        if (!scrollRef.current) {\n            return;\n        }\n\n        const { scrollHeight, clientHeight, scrollTop } = scrollValues;\n        const scrollShadowClassNameValue = getScrollShadowClassName(scrollTop, scrollHeight, clientHeight);\n\n        setIsScrolling(true);\n        setScrollShadowClassName(scrollShadowClassNameValue);\n\n        debouncedTurnOffScrollingState();\n        if (onScroll) {\n            onScroll(scrollValues, prevScrollValues);\n        }\n    };\n\n    const setScrollShadowState = React.useCallback(() => {\n        if (!scrollRef.current) {\n            return;\n        }\n\n        const { scrollHeight, clientHeight, scrollTop } = scrollRef.current;\n\n        const newScrollShadowClassName = getScrollShadowClassName(scrollTop, scrollHeight, clientHeight);\n\n        if (scrollShadowClassName !== newScrollShadowClassName) {\n            setScrollShadowClassName(newScrollShadowClassName);\n        }\n    }, [scrollShadowClassName]);\n\n    const onUpdateHandler = (scrollValues: ScrollState, prevScrollValues: ScrollState) => {\n        const { clientHeight, contentScrollHeight } = scrollValues;\n        const { clientHeight: prevClientHeight, contentScrollHeight: prevContentScrollHeight } = prevScrollValues;\n        if (clientHeight !== prevClientHeight || contentScrollHeight !== prevContentScrollHeight) {\n            setScrollShadowState();\n        }\n    };\n\n    // sets onScrollHandler to true for a maximum of once every 50ms.\n    const throttledOnScrollHandler = throttle(onScrollHandler, 50);\n\n    const throttledOnUpdateHandler = throttle(onUpdateHandler, 50);\n\n    const classes = classNames('bdl-CollapsibleScrollbar', className, {\n        'is-scrolling': isScrolling,\n    });\n\n    React.useEffect(() => {\n        setScrollShadowState();\n    }, [setScrollShadowState]);\n\n    // $FlowFixMe\n    React.useImperativeHandle(ref, () => ({\n        scrollbarRef: scrollRef,\n    }));\n\n    return (\n        <Scrollbar\n            ref={scrollRef}\n            className={scrollShadowClassName}\n            onScroll={throttledOnScrollHandler}\n            onUpdate={throttledOnUpdateHandler}\n            renderer={(props: Object) => {\n                const { elementRef, ...restProps } = props;\n                return <StyledScrollContainer {...restProps} ref={elementRef} />;\n            }}\n            style={style}\n            thumbYProps={{\n                renderer: renderProps => {\n                    const { elementRef, style: renderPropStyle, ...restProps } = renderProps;\n                    return (\n                        <StyledScrollThumb\n                            style={{ ...renderPropStyle, ...thumbYStyles }}\n                            {...restProps}\n                            ref={elementRef}\n                        />\n                    );\n                },\n            }}\n            trackYProps={{\n                style: {\n                    background: 'none',\n                    top: '0',\n                    height: '100%',\n                    width: '8px',\n                    marginRight: '1px',\n                    ...trackYStyles,\n                },\n            }}\n            {...rest}\n        >\n            <div className={classes} data-testid=\"content-wrapper\">\n                {children}\n            </div>\n        </Scrollbar>\n    );\n}\n\nexport default React.forwardRef<Props, Ref>(CollapsibleScrollbar);\n"],"file":"CollapsibleScrollbar.js"}