{"version":3,"sources":["../../../../../src/features/message-center/components/message-center-modal/MessageCenterModal.js"],"names":["React","FormattedMessage","injectIntl","classNames","AutoSizer","CellMeasurer","CellMeasurerCache","List","debounce","AnimateHeight","Scrollbar","Modal","CategorySelector","CollapsibleScrollbar","Message","intlMessages","MessagePreviewGhost","ContentGhost","BottomContentWrapper","ErrorState","EmptyState","ALL","cache","defaultHeight","fixedWidth","SCROLLBAR_MARGIN","listStyle","overflowX","overflowY","trackYStyles","marginLeft","MessageCenterModal","apiHost","contentPreviewProps","onRequestClose","messages","getToken","intl","overscanRowCount","onMessageShown","categories","useMemo","Array","isArray","messageCategoriesSet","Set","forEach","category","templateParams","add","size","value","displayText","formatMessage","all","product","events","boxEducation","listRef","useRef","isMouseInTitleRef","messageLoadCacheRef","Map","useState","setCategory","isExpanded","setIsExpanded","width","height","dimensions","setDimensions","scrollRef","title","current","clearAll","filteredMessages","filter","sort","activateDateA","activateDate","priorityA","priority","activateDateB","priorityB","useEffect","scrollbarRef","scrollToTop","rowRenderer","index","parent","style","isVisible","message","messageId","id","isFirstTimeBeingShown","has","set","registerChild","handleOnScroll","clientHeight","scrollTop","prevClientHeight","prevScrollTop","isScrollingDown","handleResize","resizeDimensions","handlOnResize","useCallback","renderMessages","length","rowHeight","scrollLeft","Grid","handleScrollEvent","Error","errorFetchingPosts"],"mappings":"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","sourcesContent":["// @flow\nimport * as React from 'react';\nimport { FormattedMessage, injectIntl, type InjectIntlProvidedProps } from 'react-intl';\nimport classNames from 'classnames';\nimport { AutoSizer, CellMeasurer, CellMeasurerCache, List } from 'react-virtualized';\nimport debounce from 'lodash/debounce';\nimport AnimateHeight from 'react-animate-height';\nimport Scrollbar from 'react-scrollbars-custom';\nimport type { Token } from '../../../../common/types/core';\nimport Modal from '../../../../components/modal/Modal';\nimport CategorySelector from '../../../../components/category-selector/CategorySelector';\n\nimport CollapsibleScrollbar from '../collapsibile-scrollbar/CollapsibleScrollbar';\nimport Message from '../message/Message';\nimport intlMessages from '../../messages';\nimport type { EligibleMessageCenterMessage } from '../../types';\nimport type { ContentPreviewProps } from '../../../message-preview-content/MessagePreviewContent';\nimport './MessageCenterModal.scss';\nimport MessagePreviewGhost from '../../../message-preview-ghost/MessagePreviewGhost';\nimport ContentGhost from '../templates/common/ContentGhost';\nimport BottomContentWrapper from '../templates/common/BottomContentWrapper';\nimport ErrorState from '../error-state/ErrorState';\nimport EmptyState from './EmptyState';\n\ntype Props = {|\n    apiHost: string,\n    contentPreviewProps?: ContentPreviewProps,\n    getToken: (fileId: string) => Promise<Token>,\n    messages: Array<EligibleMessageCenterMessage> | null | Error,\n    onMessageShown: EligibleMessageCenterMessage => void,\n    onRequestClose: () => void,\n    overscanRowCount?: number,\n|};\n\nconst ALL = 'all';\nconst cache = new CellMeasurerCache({\n    defaultHeight: 400,\n    fixedWidth: true,\n});\n\nconst SCROLLBAR_MARGIN = 16;\nconst listStyle = { overflowX: false, overflowY: false };\nconst trackYStyles = { marginLeft: `${SCROLLBAR_MARGIN}px` };\n\nfunction MessageCenterModal({\n    apiHost,\n    contentPreviewProps,\n    onRequestClose,\n    messages,\n    getToken,\n    intl,\n    overscanRowCount = 1,\n    onMessageShown,\n}: Props & InjectIntlProvidedProps) {\n    const categories: Array<{ displayText: string, value: string }> | null = React.useMemo(() => {\n        if (!Array.isArray(messages)) {\n            return null;\n        }\n\n        const messageCategoriesSet = new Set<string>();\n        messages.forEach(({ templateParams: { category } }) => {\n            messageCategoriesSet.add(category);\n        });\n\n        if (messageCategoriesSet.size <= 1) {\n            return null;\n        }\n\n        return [\n            {\n                value: ALL,\n                displayText: intl.formatMessage(intlMessages.all),\n            },\n            {\n                value: 'product',\n                displayText: intl.formatMessage(intlMessages.product),\n            },\n            {\n                value: 'events',\n                displayText: intl.formatMessage(intlMessages.events),\n            },\n            {\n                value: 'education',\n                displayText: intl.formatMessage(intlMessages.boxEducation),\n            },\n        ];\n    }, [intl, messages]);\n    const listRef = React.useRef(null);\n    const isMouseInTitleRef = React.useRef(false);\n    const messageLoadCacheRef = React.useRef(new Map<number, boolean>());\n    const [category, setCategory] = React.useState(ALL);\n    const [isExpanded, setIsExpanded] = React.useState(true);\n    const [dimensions, setDimensions] = React.useState({ width: 0, height: 0 });\n    const scrollRef = React.useRef<{ scrollbarRef: React.ElementRef<typeof Scrollbar> } | null>(null);\n\n    const title = (\n        <section\n            className={classNames('bdl-MessageCenterModal-title', {\n                'is-expanded': isExpanded,\n                'is-collapsed': !isExpanded,\n            })}\n            data-testid=\"modal-title\"\n            onMouseEnter={() => {\n                isMouseInTitleRef.current = true;\n                setIsExpanded(true);\n            }}\n            onMouseLeave={() => {\n                isMouseInTitleRef.current = false;\n            }}\n        >\n            <div className=\"bdl-MessageCenterModal-whatsNew\">\n                <FormattedMessage {...intlMessages.title} />\n            </div>\n            {categories && (\n                <AnimateHeight duration={300} height={isExpanded ? 'auto' : 0}>\n                    <section className=\"bdl-MessageCenterModal-categorySelector\">\n                        <CategorySelector\n                            currentCategory={category}\n                            categories={categories}\n                            onSelect={value => {\n                                cache.clearAll();\n                                setCategory(value);\n                            }}\n                        />\n                    </section>\n                </AnimateHeight>\n            )}\n        </section>\n    );\n\n    const filteredMessages = React.useMemo(() => {\n        if (!Array.isArray(messages)) {\n            return [];\n        }\n\n        return messages\n            .filter(({ templateParams }) => {\n                return category === ALL || templateParams.category === category;\n            })\n            .sort(\n                (\n                    { activateDate: activateDateA, priority: priorityA },\n                    { activateDate: activateDateB, priority: priorityB },\n                ) => {\n                    // sort by date (descending), secondary sort by priority (descending)\n                    if (activateDateA > activateDateB) {\n                        return -1;\n                    }\n\n                    if (activateDateA < activateDateB) {\n                        return 1;\n                    }\n\n                    if (priorityA > priorityB) {\n                        return -1;\n                    }\n\n                    if (priorityA < priorityB) {\n                        return 1;\n                    }\n\n                    return 0;\n                },\n            );\n    }, [category, messages]);\n\n    React.useEffect(() => {\n        if (scrollRef.current && scrollRef.current.scrollbarRef && scrollRef.current.scrollbarRef.current) {\n            scrollRef.current.scrollbarRef.current.scrollToTop();\n        }\n    }, [category]);\n\n    function rowRenderer({ index, parent, style, isVisible }: Object) {\n        const message = filteredMessages[index];\n        const messageId = message.id;\n        const isFirstTimeBeingShown = !messageLoadCacheRef.current.has(messageId);\n        if (isVisible && isFirstTimeBeingShown) {\n            messageLoadCacheRef.current.set(messageId, true);\n            onMessageShown(message);\n        }\n\n        return (\n            <CellMeasurer key={messageId} cache={cache} columnIndex={0} parent={parent} rowIndex={index}>\n                {({ registerChild }) => (\n                    <div\n                        ref={registerChild}\n                        className=\"bdl-MessageCenterModal-message\"\n                        style={style}\n                        data-testid=\"messagecentermodalmessage\"\n                    >\n                        <Message\n                            contentPreviewProps={contentPreviewProps}\n                            apiHost={apiHost}\n                            {...message}\n                            getToken={getToken}\n                        />\n                    </div>\n                )}\n            </CellMeasurer>\n        );\n    }\n\n    function handleOnScroll(clientHeight, scrollTop, prevClientHeight, prevScrollTop) {\n        if (clientHeight > 0 && clientHeight === prevClientHeight && !isMouseInTitleRef.current) {\n            const isScrollingDown = prevScrollTop < scrollTop;\n            if (isExpanded && isScrollingDown) {\n                setIsExpanded(false);\n            } else if (!isExpanded && !isScrollingDown) {\n                setIsExpanded(true);\n            }\n        }\n    }\n\n    function handleResize(resizeDimensions) {\n        setDimensions(resizeDimensions);\n    }\n\n    const handlOnResize = React.useCallback(debounce(handleResize, 300), []);\n\n    function renderMessages(width: number, height: number): React.Node {\n        if (!messages) {\n            return (\n                <div className=\"bdl-MessageCenterModal-message\">\n                    <div className=\"bdl-MessageCenterModal-ghost\">\n                        <MessagePreviewGhost />\n                        <BottomContentWrapper>\n                            <ContentGhost />\n                        </BottomContentWrapper>\n                    </div>\n                </div>\n            );\n        }\n\n        return (\n            <List\n                ref={listRef}\n                className=\"bdl-MessageCenterModal-list\"\n                deferredMeasurementCache={cache}\n                height={dimensions.height || height}\n                noRowsRenderer={EmptyState}\n                overscanRowCount={overscanRowCount}\n                rowCount={filteredMessages.length}\n                rowHeight={cache.rowHeight}\n                rowRenderer={rowRenderer}\n                style={listStyle}\n                width={width - SCROLLBAR_MARGIN}\n            />\n        );\n    }\n\n    return (\n        <Modal\n            className=\"bdl-MessageCenterModal\"\n            data-resin-component=\"messageCenterModal\"\n            data-testid=\"messagecentermodal\"\n            isOpen\n            onRequestClose={onRequestClose}\n            title={title}\n        >\n            <section className=\"bdl-MessageCenterModal-messages\">\n                <AutoSizer onResize={handlOnResize}>\n                    {({ height, width }) => (\n                        <CollapsibleScrollbar\n                            ref={scrollRef}\n                            onScroll={(\n                                { clientHeight, scrollTop, scrollLeft },\n                                { clientHeight: prevClientHeight, scrollTop: prevScrollTop },\n                            ) => {\n                                handleOnScroll(clientHeight, scrollTop, prevClientHeight, prevScrollTop);\n                                if (listRef.current && listRef.current.Grid) {\n                                    const { Grid } = listRef.current;\n                                    Grid.handleScrollEvent({ scrollTop, scrollLeft });\n                                }\n                            }}\n                            permanentTrackY\n                            style={{ width, height }}\n                            trackYStyles={trackYStyles}\n                        >\n                            {messages instanceof Error ? (\n                                <ErrorState>\n                                    <FormattedMessage {...intlMessages.errorFetchingPosts} />\n                                </ErrorState>\n                            ) : (\n                                renderMessages(width, height)\n                            )}\n                        </CollapsibleScrollbar>\n                    )}\n                </AutoSizer>\n            </section>\n        </Modal>\n    );\n}\n\nexport default injectIntl(MessageCenterModal);\n"],"file":"MessageCenterModal.js"}