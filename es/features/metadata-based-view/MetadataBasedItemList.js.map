{"version":3,"sources":["../../../src/features/metadata-based-view/MetadataBasedItemList.js"],"names":["React","Fragment","FormattedMessage","AutoSizer","classNames","find","getProp","MultiGrid","Field","FileIcon","IconWithTooltip","PlainButton","getFileExtension","messages","CANCEL_ICON_TYPE","EDIT_ICON_TYPE","FILE_ICON_COLUMN_INDEX","FILE_ICON_COLUMN_WIDTH","FILE_ICON_SIZE","FILE_NAME_COLUMN_INDEX","FILE_NAME_COLUMN_WIDTH","FIXED_COLUMNS_NUMBER","FIXED_ROW_NUMBER","HEADER_ROW_INDEX","MIN_METADATA_COLUMN_WIDTH","SAVE_ICON_TYPE","MetadataBasedItemList","props","setState","editedColumnIndex","editedRowIndex","columnIndex","rowIndex","hoveredColumnIndex","hoveredRowIndex","key","style","state","isHeaderRow","isFileIconCell","isFileNameCell","isGridRowHovered","data","getGridHeaderData","getGridCellData","classes","handleMouseLeave","handleMouseEnter","column","width","metadataColumnsToShow","index","availableWidth","Math","max","length","item","onItemClick","permissions","can_preview","itemWithPreviewPermission","items","currentCollection","isCellBeingEdited","isCellHovered","metadataColumn","isCellEditable","name","fields","cellData","handleItemClick","mdFieldName","getMetadataColumnName","field","type","value","options","editLabel","handleEditIconClick","handleCancelEdit","cancel","handleSave","save","rowCount","height","cellRenderer","getColumnWidth","Component"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,OAAOA,KAAP,IAA8BC,QAA9B,QAA8C,OAA9C;AACA,SAASC,gBAAT,QAAiC,YAAjC;AACA,OAAOC,SAAP,MAAsB,qCAAtB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,OAAOC,IAAP,MAAiB,aAAjB;AACA,OAAOC,OAAP,MAAoB,YAApB;AACA,OAAOC,SAAP,MAAsB,+CAAtB;AAEA,OAAOC,KAAP,MAAkB,0CAAlB;AACA,OAAOC,QAAP,MAAqB,uBAArB;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,OAAOC,WAAP,MAAwB,+BAAxB;AAEA,SAASC,gBAAT,QAAiC,kBAAjC;AACA,OAAOC,QAAP,MAAqB,gCAArB;AAEA,OAAO,8BAAP;AASA,SACIC,gBADJ,EAEIC,cAFJ,EAGIC,sBAHJ,EAIIC,sBAJJ,EAKIC,cALJ,EAMIC,sBANJ,EAOIC,sBAPJ,EAQIC,oBARJ,EASIC,gBATJ,EAUIC,gBAVJ,EAWIC,yBAXJ,EAYIC,cAZJ,QAaO,aAbP;;IAsCMC,qB;;;;;AAGF,iCAAYC,KAAZ,EAA0B;AAAA;;AAAA;;AACtB,8BAAMA,KAAN;;AADsB,uEAsDP,YAAY;AAC3B,YAAKC,QAAL,CAAc;AACVC,QAAAA,iBAAiB,EAAE,CAAC,CADV;AAEVC,QAAAA,cAAc,EAAE,CAAC;AAFP,OAAd;AAIH,KA3DyB;;AAAA,iEA6Db,YAAY;AACrB;AACH,KA/DyB;;AAAA,uEAiEP,UAACC,WAAD,EAAsBC,QAAtB;AAAA,aACf,MAAKJ,QAAL,CAAc;AACVK,QAAAA,kBAAkB,EAAEF,WADV;AAEVG,QAAAA,eAAe,EAAEF;AAFP,OAAd,CADe;AAAA,KAjEO;;AAAA,uEAuEP;AAAA,aACf,MAAKJ,QAAL,CAAc;AACVM,QAAAA,eAAe,EAAE,CAAC,CADR;AAEVD,QAAAA,kBAAkB,EAAE,CAAC;AAFX,OAAd,CADe;AAAA,KAvEO;;AAAA,mEAwKX,gBAA6E;AAAA,UAA1EF,WAA0E,QAA1EA,WAA0E;AAAA,UAA7DC,QAA6D,QAA7DA,QAA6D;AAAA,UAAnDG,GAAmD,QAAnDA,GAAmD;AAAA,UAA9CC,KAA8C,QAA9CA,KAA8C;AAAA,UAChFF,eADgF,GAC5D,MAAKG,KADuD,CAChFH,eADgF;AAExF,UAAMI,WAAW,GAAGN,QAAQ,KAAKT,gBAAjC;AACA,UAAMgB,cAAc,GAAG,CAACD,WAAD,IAAgBP,WAAW,KAAKf,sBAAvD;AACA,UAAMwB,cAAc,GAAG,CAACF,WAAD,IAAgBP,WAAW,KAAKZ,sBAAvD;AACA,UAAMsB,gBAAgB,GAAG,CAACH,WAAD,IAAgBN,QAAQ,KAAKE,eAAtD;AAEA,UAAMQ,IAAI,GAAGJ,WAAW,GAAG,MAAKK,iBAAL,CAAuBZ,WAAvB,CAAH,GAAyC,MAAKa,eAAL,CAAqBb,WAArB,EAAkCC,QAAlC,CAAjE;AAEA,UAAMa,OAAO,GAAGzC,UAAU,CAAC,gCAAD,EAAmC;AACzD,oDAA4CmC,cADa;AAEzD,oDAA4CC,cAFa;AAGzD,iDAAyCC;AAHgB,OAAnC,CAA1B;AAMA,0BACI;AACI,QAAA,GAAG,EAAEN,GADT;AAEI,QAAA,SAAS,EAAEU,OAFf;AAGI,QAAA,KAAK,EAAET,KAHX;AAII,QAAA,YAAY,EAAE,MAAKU,gBAJvB;AAKI,QAAA,YAAY,EAAE;AAAA,iBAAM,MAAKC,gBAAL,CAAsBhB,WAAtB,EAAmCC,QAAnC,CAAN;AAAA;AALlB,SAOKU,IAPL,CADJ;AAWH,KAlMyB;;AAGtB,UAAKL,KAAL,GAAa;AACT;AACAR,MAAAA,iBAAiB,EAAE,CAAC,CAFX;AAGTC,MAAAA,cAAc,EAAE,CAAC,CAHR;AAITI,MAAAA,eAAe,EAAE,CAAC,CAJT;AAKTD,MAAAA,kBAAkB,EAAE,CAAC;AALZ,KAAb;AAHsB;AAUzB;;;;0CAEqBe,M,EAA+C;AACjE,aAAO,OAAOA,MAAP,KAAkB,QAAlB,GAA6BA,MAA7B,GAAsC1C,OAAO,CAAC0C,MAAD,EAAS,MAAT,CAApD;AACH;;;mCAEcC,K,EAAoC;AAAA,UACvCC,qBADuC,GACN,KAAKvB,KADC,CACvCuB,qBADuC;AAG/C,aAAO,iBAA0C;AAAA,YAAvCC,KAAuC,SAAvCA,KAAuC;;AAC7C,YAAIA,KAAK,KAAKnC,sBAAd,EAAsC;AAClC,iBAAOC,sBAAP;AACH;;AAED,YAAIkC,KAAK,KAAKhC,sBAAd,EAAsC;AAClC,iBAAOC,sBAAP;AACH;;AAED,YAAMgC,cAAc,GAAGH,KAAK,GAAG7B,sBAAR,GAAiCH,sBAAxD,CAT6C,CASmC;AAChF;;AACA,eAAOoC,IAAI,CAACC,GAAL,CAASF,cAAc,GAAGF,qBAAqB,CAACK,MAAhD,EAAwD/B,yBAAxD,CAAP;AACH,OAZD;AAaH;;;oCAEegC,I,EAAiD;AAAA,UACrDC,WADqD,GAC9B,KAAK9B,KADyB,CACrD8B,WADqD;AAE7D;AACR;AACA;AACA;AACA;;AACQ,UAAMC,WAAW,GAAG;AAAEC,QAAAA,WAAW,EAAE;AAAf,OAApB;;AACA,UAAMC,yBAAyB,mCAAQJ,IAAR;AAAcE,QAAAA,WAAW,EAAXA;AAAd,QAA/B;;AAEAD,MAAAA,WAAW,CAACG,yBAAD,CAAX;AACH;;;wCAEmB7B,W,EAAqBC,Q,EAAwB;AAC7D,WAAKJ,QAAL,CAAc;AACVC,QAAAA,iBAAiB,EAAEE,WADT;AAEVD,QAAAA,cAAc,EAAEE;AAFN,OAAd;AAIH;;;oCAyBeD,W,EAAqBC,Q,EAAuC;AAAA;;AAAA,wBAI7D,KAAKL,KAJwD;AAAA,UAE/CkC,KAF+C,eAEpEC,iBAFoE,CAE/CD,KAF+C;AAAA,UAGpEX,qBAHoE,eAGpEA,qBAHoE;AAAA,wBAKkB,KAAKb,KALvB;AAAA,UAKhEJ,kBALgE,eAKhEA,kBALgE;AAAA,UAK5CC,eAL4C,eAK5CA,eAL4C;AAAA,UAK3BL,iBAL2B,eAK3BA,iBAL2B;AAAA,UAKRC,cALQ,eAKRA,cALQ;AAMxE,UAAMiC,iBAAiB,GAAGhC,WAAW,KAAKF,iBAAhB,IAAqCG,QAAQ,KAAKF,cAA5E;AACA,UAAMkC,aAAa,GAAGjC,WAAW,KAAKE,kBAAhB,IAAsCD,QAAQ,KAAKE,eAAzE;AACA,UAAM+B,cAAc,GAAGf,qBAAqB,CAACnB,WAAW,GAAGV,oBAAf,CAA5C;AACA,UAAM6C,cAAc,GAAG,CAACH,iBAAD,IAAsBC,aAAtB,IAAuC,CAAC,CAAC1D,OAAO,CAAC2D,cAAD,EAAiB,SAAjB,EAA4B,KAA5B,CAAvE;AACA,UAAMT,IAAI,GAAGK,KAAK,CAAC7B,QAAQ,GAAG,CAAZ,CAAlB;AAVwE,UAWhEmC,IAXgE,GAWvDX,IAXuD,CAWhEW,IAXgE;AAYxE,UAAMC,MAAM,GAAG9D,OAAO,CAACkD,IAAD,EAAO,iBAAP,EAA0B,EAA1B,CAAtB;AACA,UAAIa,QAAJ;;AAEA,cAAQtC,WAAR;AACI,aAAKf,sBAAL;AACIqD,UAAAA,QAAQ,gBAAG,oBAAC,QAAD;AAAU,YAAA,SAAS,EAAEnD,cAArB;AAAqC,YAAA,SAAS,EAAEN,gBAAgB,CAACuD,IAAD;AAAhE,YAAX;AACA;;AACJ,aAAKhD,sBAAL;AACIkD,UAAAA,QAAQ,gBACJ,oBAAC,WAAD;AAAa,YAAA,IAAI,EAAC,QAAlB;AAA2B,YAAA,OAAO,EAAE;AAAA,qBAAM,MAAI,CAACC,eAAL,CAAqBd,IAArB,CAAN;AAAA;AAApC,aACKW,IADL,CADJ;AAKA;;AACJ;AAAS;AACL,gBAAMI,WAAW,GAAG,KAAKC,qBAAL,CAA2BP,cAA3B,CAApB;AACA,gBAAMQ,KAAK,GAAGpE,IAAI,CAAC+D,MAAD,EAAS,CAAC,MAAD,EAASG,WAAT,CAAT,CAAlB;;AACA,gBAAI,CAACE,KAAL,EAAY;AACR,qBAAOJ,QAAP;AACH;;AALI,gBAMGK,IANH,GAMiCD,KANjC,CAMGC,IANH;AAAA,gBAMSC,KANT,GAMiCF,KANjC,CAMSE,KANT;AAAA,iCAMiCF,KANjC,CAMgBG,OANhB;AAAA,gBAMgBA,OANhB,+BAM0B,EAN1B;AAOLP,YAAAA,QAAQ,gBACJ,0CACK,CAACN,iBAAD,IAAsBY,KAD3B,EAEKA,KAAK,IAAIT,cAAT,iBACG,oBAAC,eAAD;AACI,cAAA,IAAI,EAAEnD,cADV;AAEI,cAAA,WAAW,eAAE,oBAAC,gBAAD,EAAsBF,QAAQ,CAACgE,SAA/B,CAFjB;AAGI,cAAA,OAAO,EAAE;AAAA,uBAAM,MAAI,CAACC,mBAAL,CAAyB/C,WAAzB,EAAsCC,QAAtC,CAAN;AAAA;AAHb,cAHR,EASK2C,KAAK,IAAIZ,iBAAT,iBACG;AAAK,cAAA,SAAS,EAAC;AAAf,4BACI,oBAAC,KAAD;AACI,cAAA,OAAO,MADX;AAEI,cAAA,OAAO,EAAEY,KAFb;AAGI,cAAA,SAAS,EAAEA,KAHf;AAII,cAAA,WAAW,EAAC,EAJhB;AAKI,cAAA,IAAI,EAAED,IALV;AAMI,cAAA,QAAQ,EAAE,oBAAM;AACZ;AACH,eARL;AASI,cAAA,QAAQ,EAAE,oBAAM;AACZ;AACH,eAXL;AAYI,cAAA,OAAO,EAAEE;AAZb,cADJ,eAeI,oBAAC,eAAD;AACI,cAAA,SAAS,EAAC,4CADd;AAEI,cAAA,OAAO,EAAE,KAAKG,gBAFlB;AAGI,cAAA,WAAW,eAAE,oBAAC,gBAAD,EAAsBlE,QAAQ,CAACmE,MAA/B,CAHjB;AAII,cAAA,IAAI,EAAElE;AAJV,cAfJ,eAqBI,oBAAC,eAAD;AACI,cAAA,SAAS,EAAC,0CADd;AAEI,cAAA,OAAO,EAAE,KAAKmE,UAFlB;AAGI,cAAA,WAAW,eAAE,oBAAC,gBAAD,EAAsBpE,QAAQ,CAACqE,IAA/B,CAHjB;AAII,cAAA,IAAI,EAAEzD;AAJV,cArBJ,CAVR,CADJ;AA0CH;AA5DL;;AA+DA,aAAO4C,QAAP;AACH;;;sCAEiBtC,W,EAAgE;AAAA,UACtEmB,qBADsE,GAC5C,KAAKvB,KADuC,CACtEuB,qBADsE;;AAG9E,UAAInB,WAAW,KAAKZ,sBAApB,EAA4C;AACxC,4BAAO,oBAAC,gBAAD,EAAsBN,QAAQ,CAACsD,IAA/B,CAAP,CADwC,CACQ;AACnD;;AAED,aAAO,KAAKK,qBAAL,CAA2BtB,qBAAqB,CAACnB,WAAW,GAAGV,oBAAf,CAAhD,CAAP,CAP8E,CAOgB;AACjG;;;6BA8BQ;AAAA;;AAAA,yBACuD,KAAKM,KAD5D;AAAA,UACGmC,iBADH,gBACGA,iBADH;AAAA,UACsBZ,qBADtB,gBACsBA,qBADtB;AAEL,UAAMiC,QAAQ,GAAGrB,iBAAiB,CAACD,KAAlB,GAA0BC,iBAAiB,CAACD,KAAlB,CAAwBN,MAAlD,GAA2D,CAA5E;AAEA,0BACI,oBAAC,SAAD,QACK;AAAA,YAAGN,KAAH,SAAGA,KAAH;AAAA,YAAUmC,MAAV,SAAUA,MAAV;AAAA,4BACG;AAAK,UAAA,SAAS,EAAC;AAAf,wBACI,oBAAC,SAAD;AACI,UAAA,YAAY,EAAE,MAAI,CAACC,YADvB;AAEI,UAAA,WAAW,EAAEnC,qBAAqB,CAACK,MAAtB,GAA+BlC,oBAFhD;AAGI,UAAA,WAAW,EAAE,MAAI,CAACiE,cAAL,CAAoBrC,KAApB,CAHjB;AAII,UAAA,gBAAgB,EAAE5B,oBAJtB;AAKI,UAAA,aAAa,EAAEC,gBALnB;AAMI,UAAA,MAAM,EAAE8D,MANZ;AAOI,UAAA,2BAA2B,MAP/B;AAQI,UAAA,yBAAyB,MAR7B;AASI,UAAA,QAAQ,EAAED,QAAQ,GAAG7D,gBATzB;AAUI,UAAA,SAAS,EAAE,EAVf;AAWI,UAAA,KAAK,EAAE2B;AAXX,UADJ,CADH;AAAA,OADL,CADJ;AAqBH;;;;EAhO+BjD,KAAK,CAACuF,S;;AAmO1C,eAAe7D,qBAAf","sourcesContent":["// @flow strict\n\nimport React, { type Element, Fragment } from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport AutoSizer from 'react-virtualized/dist/es/AutoSizer';\nimport classNames from 'classnames';\nimport find from 'lodash/find';\nimport getProp from 'lodash/get';\nimport MultiGrid from 'react-virtualized/dist/es/MultiGrid/MultiGrid';\n\nimport Field from '../metadata-instance-editor/fields/Field';\nimport FileIcon from '../../icons/file-icon';\nimport IconWithTooltip from './IconWithTooltip';\nimport PlainButton from '../../components/plain-button';\n\nimport { getFileExtension } from '../../utils/file';\nimport messages from '../../elements/common/messages';\n\nimport './MetadataBasedItemList.scss';\n\nimport type {\n    FlattenedMetadataQueryResponseCollection,\n    FlattenedMetadataQueryResponseEntry,\n    MetadataColumnConfig,\n    MetadataColumnsToShow,\n} from '../../common/types/metadataQueries';\n\nimport {\n    CANCEL_ICON_TYPE,\n    EDIT_ICON_TYPE,\n    FILE_ICON_COLUMN_INDEX,\n    FILE_ICON_COLUMN_WIDTH,\n    FILE_ICON_SIZE,\n    FILE_NAME_COLUMN_INDEX,\n    FILE_NAME_COLUMN_WIDTH,\n    FIXED_COLUMNS_NUMBER,\n    FIXED_ROW_NUMBER,\n    HEADER_ROW_INDEX,\n    MIN_METADATA_COLUMN_WIDTH,\n    SAVE_ICON_TYPE,\n} from './constants';\n\ntype State = {\n    editedColumnIndex: number,\n    editedRowIndex: number,\n    hoveredColumnIndex: number,\n    hoveredRowIndex: number,\n};\n\ntype Props = {\n    currentCollection: FlattenedMetadataQueryResponseCollection,\n    metadataColumnsToShow: MetadataColumnsToShow,\n    onItemClick: FlattenedMetadataQueryResponseEntry => void,\n};\n\ntype CellRendererArgs = {\n    columnIndex: number,\n    key: string,\n    rowIndex: number,\n    style: StringAnyMap,\n};\n\ntype ColumnWidthCallback = ({ index: number }) => number;\ntype GridCellData = Element<typeof FileIcon | typeof PlainButton | typeof Fragment>;\n\nclass MetadataBasedItemList extends React.Component<Props, State> {\n    props: Props;\n\n    constructor(props: Props) {\n        super(props);\n\n        this.state = {\n            // initial MultiGrid load\n            editedColumnIndex: -1,\n            editedRowIndex: -1,\n            hoveredRowIndex: -1,\n            hoveredColumnIndex: -1,\n        };\n    }\n\n    getMetadataColumnName(column: MetadataColumnConfig | string): string {\n        return typeof column === 'string' ? column : getProp(column, 'name');\n    }\n\n    getColumnWidth(width: number): ColumnWidthCallback {\n        const { metadataColumnsToShow }: Props = this.props;\n\n        return ({ index }: { index: number }): number => {\n            if (index === FILE_ICON_COLUMN_INDEX) {\n                return FILE_ICON_COLUMN_WIDTH;\n            }\n\n            if (index === FILE_NAME_COLUMN_INDEX) {\n                return FILE_NAME_COLUMN_WIDTH;\n            }\n\n            const availableWidth = width - FILE_NAME_COLUMN_WIDTH - FILE_ICON_COLUMN_WIDTH; // total width minus width of sticky columns\n            // Maintain min column width, else occupy the rest of the space equally\n            return Math.max(availableWidth / metadataColumnsToShow.length, MIN_METADATA_COLUMN_WIDTH);\n        };\n    }\n\n    handleItemClick(item: FlattenedMetadataQueryResponseEntry): void {\n        const { onItemClick }: Props = this.props;\n        /*\n            - @TODO: Remove permissions object once its part of API response.\n            - In Content Explorer element, if can_preview permission is false, there is no action taken onClick(item).\n            - Until the response has permissions, add \"can_preview: true\" so that users can click to launch the Preview modal. If users don't have access, they will see the error when Preview loads.\n        */\n        const permissions = { can_preview: true };\n        const itemWithPreviewPermission = { ...item, permissions };\n\n        onItemClick(itemWithPreviewPermission);\n    }\n\n    handleEditIconClick(columnIndex: number, rowIndex: number): void {\n        this.setState({\n            editedColumnIndex: columnIndex,\n            editedRowIndex: rowIndex,\n        });\n    }\n\n    handleCancelEdit = (): void => {\n        this.setState({\n            editedColumnIndex: -1,\n            editedRowIndex: -1,\n        });\n    };\n\n    handleSave = (): void => {\n        /* Implement me */\n    };\n\n    handleMouseEnter = (columnIndex: number, rowIndex: number): void =>\n        this.setState({\n            hoveredColumnIndex: columnIndex,\n            hoveredRowIndex: rowIndex,\n        });\n\n    handleMouseLeave = (): void =>\n        this.setState({\n            hoveredRowIndex: -1,\n            hoveredColumnIndex: -1,\n        });\n\n    getGridCellData(columnIndex: number, rowIndex: number): GridCellData | void {\n        const {\n            currentCollection: { items },\n            metadataColumnsToShow,\n        }: Props = this.props;\n        const { hoveredColumnIndex, hoveredRowIndex, editedColumnIndex, editedRowIndex }: State = this.state;\n        const isCellBeingEdited = columnIndex === editedColumnIndex && rowIndex === editedRowIndex;\n        const isCellHovered = columnIndex === hoveredColumnIndex && rowIndex === hoveredRowIndex;\n        const metadataColumn = metadataColumnsToShow[columnIndex - FIXED_COLUMNS_NUMBER];\n        const isCellEditable = !isCellBeingEdited && isCellHovered && !!getProp(metadataColumn, 'canEdit', false);\n        const item = items[rowIndex - 1];\n        const { name } = item;\n        const fields = getProp(item, 'metadata.fields', []);\n        let cellData;\n\n        switch (columnIndex) {\n            case FILE_ICON_COLUMN_INDEX:\n                cellData = <FileIcon dimension={FILE_ICON_SIZE} extension={getFileExtension(name)} />;\n                break;\n            case FILE_NAME_COLUMN_INDEX:\n                cellData = (\n                    <PlainButton type=\"button\" onClick={() => this.handleItemClick(item)}>\n                        {name}\n                    </PlainButton>\n                );\n                break;\n            default: {\n                const mdFieldName = this.getMetadataColumnName(metadataColumn);\n                const field = find(fields, ['name', mdFieldName]);\n                if (!field) {\n                    return cellData;\n                }\n                const { type, value, options = [] } = field;\n                cellData = (\n                    <>\n                        {!isCellBeingEdited && value}\n                        {value && isCellEditable && (\n                            <IconWithTooltip\n                                type={EDIT_ICON_TYPE}\n                                tooltipText={<FormattedMessage {...messages.editLabel} />}\n                                onClick={() => this.handleEditIconClick(columnIndex, rowIndex)}\n                            />\n                        )}\n                        {value && isCellBeingEdited && (\n                            <div className=\"bdl-MetadataBasedItemList-cell--edit\">\n                                <Field\n                                    canEdit\n                                    dataKey={value}\n                                    dataValue={value}\n                                    displayName=\"\"\n                                    type={type}\n                                    onChange={() => {\n                                        /* implement me */\n                                    }}\n                                    onRemove={() => {\n                                        /* implement me */\n                                    }}\n                                    options={options}\n                                />\n                                <IconWithTooltip\n                                    className=\"bdl-MetadataBasedItemList-cell--cancelIcon\"\n                                    onClick={this.handleCancelEdit}\n                                    tooltipText={<FormattedMessage {...messages.cancel} />}\n                                    type={CANCEL_ICON_TYPE}\n                                />\n                                <IconWithTooltip\n                                    className=\"bdl-MetadataBasedItemList-cell--saveIcon\"\n                                    onClick={this.handleSave}\n                                    tooltipText={<FormattedMessage {...messages.save} />}\n                                    type={SAVE_ICON_TYPE}\n                                />\n                            </div>\n                        )}\n                    </>\n                );\n            }\n        }\n\n        return cellData;\n    }\n\n    getGridHeaderData(columnIndex: number): string | Element<typeof FormattedMessage> {\n        const { metadataColumnsToShow } = this.props;\n\n        if (columnIndex === FILE_NAME_COLUMN_INDEX) {\n            return <FormattedMessage {...messages.name} />; // \"Name\" column header\n        }\n\n        return this.getMetadataColumnName(metadataColumnsToShow[columnIndex - FIXED_COLUMNS_NUMBER]); // column header\n    }\n\n    cellRenderer = ({ columnIndex, rowIndex, key, style }: CellRendererArgs): Element<'div'> => {\n        const { hoveredRowIndex } = this.state;\n        const isHeaderRow = rowIndex === HEADER_ROW_INDEX;\n        const isFileIconCell = !isHeaderRow && columnIndex === FILE_ICON_COLUMN_INDEX;\n        const isFileNameCell = !isHeaderRow && columnIndex === FILE_NAME_COLUMN_INDEX;\n        const isGridRowHovered = !isHeaderRow && rowIndex === hoveredRowIndex;\n\n        const data = isHeaderRow ? this.getGridHeaderData(columnIndex) : this.getGridCellData(columnIndex, rowIndex);\n\n        const classes = classNames('bdl-MetadataBasedItemList-cell', {\n            'bdl-MetadataBasedItemList-cell--fileIcon': isFileIconCell,\n            'bdl-MetadataBasedItemList-cell--filename': isFileNameCell,\n            'bdl-MetadataBasedItemList-cell--hover': isGridRowHovered,\n        });\n\n        return (\n            <div\n                key={key}\n                className={classes}\n                style={style}\n                onMouseLeave={this.handleMouseLeave}\n                onMouseEnter={() => this.handleMouseEnter(columnIndex, rowIndex)}\n            >\n                {data}\n            </div>\n        );\n    };\n\n    render() {\n        const { currentCollection, metadataColumnsToShow }: Props = this.props;\n        const rowCount = currentCollection.items ? currentCollection.items.length : 0;\n\n        return (\n            <AutoSizer>\n                {({ width, height }) => (\n                    <div className=\"bdl-MetadataBasedItemList\">\n                        <MultiGrid\n                            cellRenderer={this.cellRenderer}\n                            columnCount={metadataColumnsToShow.length + FIXED_COLUMNS_NUMBER}\n                            columnWidth={this.getColumnWidth(width)}\n                            fixedColumnCount={FIXED_COLUMNS_NUMBER}\n                            fixedRowCount={FIXED_ROW_NUMBER}\n                            height={height}\n                            hideBottomLeftGridScrollbar\n                            hideTopRightGridScrollbar\n                            rowCount={rowCount + FIXED_ROW_NUMBER}\n                            rowHeight={50}\n                            width={width}\n                        />\n                    </div>\n                )}\n            </AutoSizer>\n        );\n    }\n}\n\nexport default MetadataBasedItemList;\n"],"file":"MetadataBasedItemList.js"}