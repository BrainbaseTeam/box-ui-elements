{"version":3,"sources":["../../../src/features/metadata-based-view/MetadataBasedItemList.js"],"names":["React","Fragment","FormattedMessage","AutoSizer","classNames","find","getProp","isEqual","isNil","isString","MultiGrid","MetadataField","ReadOnlyMetadataField","FileIcon","IconWithTooltip","PlainButton","getFileExtension","messages","CANCEL_ICON_TYPE","EDIT_ICON_TYPE","FILE_ICON_COLUMN_INDEX","FILE_ICON_COLUMN_WIDTH","FILE_ICON_SIZE","FILE_NAME_COLUMN_INDEX","FILE_NAME_COLUMN_WIDTH","FIXED_COLUMNS_NUMBER","FIXED_ROW_NUMBER","HEADER_ROW_INDEX","MIN_METADATA_COLUMN_WIDTH","SAVE_ICON_TYPE","FIELD_TYPE_FLOAT","FIELD_TYPE_INTEGER","FIELD_TYPE_STRING","FIELD_METADATA","MetadataBasedItemList","props","editedColumnIndex","editedRowIndex","hoveredRowIndex","hoveredColumnIndex","isUpdating","scrollLeftOffset","scrollRightOffset","item","permissions","can_preview","can_upload","setState","field","type","currentValue","editedValue","onMetadataUpdate","getItemWithPermissions","getValueForType","columnIndex","rowIndex","clientWidth","scrollLeft","scrollWidth","key","style","state","isHeaderRow","isFileIconCell","isFileNameCell","isGridRowHovered","data","getGridHeaderData","getGridCellData","classes","handleMouseEnter","handleMouseLeave","getInitialState","prevProps","prevItems","currentItems","valueBeingEdited","undefined","fields","map","displayName","width","fieldsToShow","index","availableWidth","Math","max","length","onItemClick","value","parseFloat","parseInt","startsWith","split","pop","currentCollection","items","isCellBeingEdited","isCellHovered","fieldToShow","isCellEditable","id","name","cellData","handleItemClick","options","isMetadataField","fieldName","getFieldNameFromKey","shouldShowEditIcon","editLabel","handleEditIconClick","changeKey","changedValue","handleCancelEdit","cancel","handleSave","save","responseFields","getQueryResponseFields","isViewScrolledLeft","calculateContentWidth","isViewScrolledRight","isViewScrolledInMiddle","rowCount","height","scrollClasses","getScrollPositionClasses","classesTopRightGrid","classesBottomRightGrid","cellRenderer","getColumnWidth","handleContentScroll","Component"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAEA,OAAOA,KAAP,IAA8BC,QAA9B,QAA8C,OAA9C;AACA,SAASC,gBAAT,QAAiC,YAAjC;AACA,OAAOC,SAAP,MAAsB,qCAAtB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,OAAOC,IAAP,MAAiB,aAAjB;AACA,OAAOC,OAAP,MAAoB,YAApB;AACA,OAAOC,OAAP,MAAoB,gBAApB;AACA,OAAOC,KAAP,MAAkB,cAAlB;AACA,OAAOC,QAAP,MAAqB,iBAArB;AACA,OAAOC,SAAP,MAAsB,+CAAtB;AAEA,OAAOC,aAAP,MAA0B,2CAA1B;AACA,OAAOC,qBAAP,MAAkC,mDAAlC;AACA,OAAOC,QAAP,MAAqB,uBAArB;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,OAAOC,WAAP,MAAwB,+BAAxB;AAEA,SAASC,gBAAT,QAAiC,kBAAjC;AACA,OAAOC,QAAP,MAAqB,gCAArB;AAEA,OAAO,8BAAP;AAMA,SACIC,gBADJ,EAEIC,cAFJ,EAGIC,sBAHJ,EAIIC,sBAJJ,EAKIC,cALJ,EAMIC,sBANJ,EAOIC,sBAPJ,EAQIC,oBARJ,EASIC,gBATJ,EAUIC,gBAVJ,EAWIC,yBAXJ,EAYIC,cAZJ,QAaO,aAbP;AAcA,SAASC,gBAAT,EAA2BC,kBAA3B,EAA+CC,iBAA/C,QAAwE,uCAAxE;AACA,SAASC,cAAT,QAA+B,iBAA/B;;IA0CMC,qB;;;;;AAGF,iCAAYC,KAAZ,EAA0B;AAAA;;AAAA;;AACtB,+FAAMA,KAAN;;AADsB,sEAKR,YAAM;AACpB,aAAO;AACHC,QAAAA,iBAAiB,EAAE,CAAC,CADjB;AAEHC,QAAAA,cAAc,EAAE,CAAC,CAFd;AAGHC,QAAAA,eAAe,EAAE,CAAC,CAHf;AAIHC,QAAAA,kBAAkB,EAAE,CAAC,CAJlB;AAKHC,QAAAA,UAAU,EAAE,KALT;AAMHC,QAAAA,gBAAgB,EAAE,CANf;AAOHC,QAAAA,iBAAiB,EAAE;AAPhB,OAAP;AASH,KAfyB;;AAAA,6EAuDD,UAACC,IAAD,EAA4B;AACjD;;;;;AAKA,UAAMC,WAAW,GAAG;AAAEC,QAAAA,WAAW,EAAE,IAAf;AAAqBC,QAAAA,UAAU,EAAE;AAAjC,OAApB;AACA,+BAAYH,IAAZ;AAAkBC,QAAAA,WAAW,EAAXA;AAAlB;AACH,KA/DyB;;AAAA,uEA8EP,YAAY;AAC3B,YAAKG,QAAL,CAAc;AACVX,QAAAA,iBAAiB,EAAE,CAAC,CADV;AAEVC,QAAAA,cAAc,EAAE,CAAC;AAFP,OAAd;AAIH,KAnFyB;;AAAA,iEAqFb,UACTM,IADS,EAETK,KAFS,EAGTC,IAHS,EAITC,YAJS,EAKTC,WALS,EAMF;AAAA,UACCC,gBADD,GACsB,MAAKjB,KAD3B,CACCiB,gBADD;AAEPA,MAAAA,gBAAgB,CACZ,MAAKC,sBAAL,CAA4BV,IAA5B,CADY,EAEZK,KAFY,EAGZE,YAHY,EAIZ,MAAKI,eAAL,CAAqBL,IAArB,EAA2BE,WAA3B,CAJY,CAAhB;;AAMA,YAAKJ,QAAL,CAAc;AAAEP,QAAAA,UAAU,EAAE;AAAd,OAAd;AACH,KApGyB;;AAAA,uEAsGP,UAACe,WAAD,EAAsBC,QAAtB;AAAA,aACf,MAAKT,QAAL,CAAc;AACVR,QAAAA,kBAAkB,EAAEgB,WADV;AAEVjB,QAAAA,eAAe,EAAEkB;AAFP,OAAd,CADe;AAAA,KAtGO;;AAAA,uEA4GP;AAAA,aACf,MAAKT,QAAL,CAAc;AACVT,QAAAA,eAAe,EAAE,CAAC,CADR;AAEVC,QAAAA,kBAAkB,EAAE,CAAC;AAFX,OAAd,CADe;AAAA,KA5GO;;AAAA,0EAkHJ,gBAAqE;AAAA,UAAlEkB,WAAkE,QAAlEA,WAAkE;AAAA,UAArDC,UAAqD,QAArDA,UAAqD;AAAA,UAAzCC,WAAyC,QAAzCA,WAAyC;;AACvF,YAAKZ,QAAL,CAAc;AACVN,QAAAA,gBAAgB,EAAEiB,UADR;AAEVhB,QAAAA,iBAAiB,EAAEiB,WAAW,GAAGF,WAAd,GAA4BC;AAFrC,OAAd;AAIH,KAvHyB;;AAAA,mEAkRX,iBAA6E;AAAA,UAA1EH,WAA0E,SAA1EA,WAA0E;AAAA,UAA7DC,QAA6D,SAA7DA,QAA6D;AAAA,UAAnDI,GAAmD,SAAnDA,GAAmD;AAAA,UAA9CC,KAA8C,SAA9CA,KAA8C;AAAA,UAChFvB,eADgF,GAC5D,MAAKwB,KADuD,CAChFxB,eADgF;AAExF,UAAMyB,WAAW,GAAGP,QAAQ,KAAK7B,gBAAjC;AACA,UAAMqC,cAAc,GAAG,CAACD,WAAD,IAAgBR,WAAW,KAAKnC,sBAAvD;AACA,UAAM6C,cAAc,GAAG,CAACF,WAAD,IAAgBR,WAAW,KAAKhC,sBAAvD;AACA,UAAM2C,gBAAgB,GAAG,CAACH,WAAD,IAAgBP,QAAQ,KAAKlB,eAAtD;AAEA,UAAM6B,IAAI,GAAGJ,WAAW,GAAG,MAAKK,iBAAL,CAAuBb,WAAvB,CAAH,GAAyC,MAAKc,eAAL,CAAqBd,WAArB,EAAkCC,QAAlC,CAAjE;AAEA,UAAMc,OAAO,GAAGlE,UAAU,CAAC,gCAAD,EAAmC;AACzD,oDAA4C4D,cADa;AAEzD,oDAA4CC,cAFa;AAGzD,iDAAyCC;AAHgB,OAAnC,CAA1B;AAMA,aACI;AACI,QAAA,SAAS,EAAEI,OADf;AAEI,QAAA,GAAG,EAAEV,GAFT;AAGI,QAAA,YAAY,EAAE;AAAA,iBAAM,MAAKW,gBAAL,CAAsBhB,WAAtB,EAAmCC,QAAnC,CAAN;AAAA,SAHlB;AAII,QAAA,YAAY,EAAE,MAAKgB,gBAJvB;AAKI,QAAA,KAAK,EAAEX;AALX,SAOKM,IAPL,CADJ;AAWH,KA5SyB;;AAEtB,UAAKL,KAAL,GAAa,MAAKW,eAAL,EAAb;AAFsB;AAGzB;;;;uCAckBC,S,EAAkB;AACjC,UAAMC,SAAS,GAAGrE,OAAO,CAACoE,SAAD,EAAY,yBAAZ,CAAzB;AACA,UAAME,YAAY,GAAGtE,OAAO,CAAC,KAAK6B,KAAN,EAAa,yBAAb,CAA5B;;AAEA,UAAI,CAAC5B,OAAO,CAACqE,YAAD,EAAeD,SAAf,CAAZ,EAAuC;AACnC;AACA,aAAK5B,QAAL,CAAc;AACVX,UAAAA,iBAAiB,EAAE,CAAC,CADV;AAEVC,UAAAA,cAAc,EAAE,CAAC,CAFP;AAGVG,UAAAA,UAAU,EAAE,KAHF;AAIVqC,UAAAA,gBAAgB,EAAEC;AAJR,SAAd;AAMH;AACJ;;;6CAEwB;AACrB,UAAMC,MAAM,GAAGzE,OAAO,CAAC,KAAK6B,KAAN,EAAa,uDAAb,EAAsE,EAAtE,CAAtB;AACA,aAAO4C,MAAM,CAACC,GAAP,CAAW;AAAA,YAAGpB,GAAH,SAAGA,GAAH;AAAA,YAAQqB,WAAR,SAAQA,WAAR;AAAA,eAA2B;AAAErB,UAAAA,GAAG,EAAHA,GAAF;AAAOqB,UAAAA,WAAW,EAAXA;AAAP,SAA3B;AAAA,OAAX,CAAP;AACH;;;mCAEcC,K,EAAoC;AAAA,UACvCC,YADuC,GACtB,KAAKhD,KADiB,CACvCgD,YADuC;AAG/C,aAAO,iBAA0C;AAAA,YAAvCC,KAAuC,SAAvCA,KAAuC;;AAC7C,YAAIA,KAAK,KAAKhE,sBAAd,EAAsC;AAClC,iBAAOC,sBAAP;AACH;;AAED,YAAI+D,KAAK,KAAK7D,sBAAd,EAAsC;AAClC,iBAAOC,sBAAP;AACH;;AAED,YAAM6D,cAAc,GAAGH,KAAK,GAAG1D,sBAAR,GAAiCH,sBAAxD,CAT6C,CASmC;AAChF;;AACA,eAAOiE,IAAI,CAACC,GAAL,CAASF,cAAc,GAAGF,YAAY,CAACK,MAAvC,EAA+C5D,yBAA/C,CAAP;AACH,OAZD;AAaH;;;oCAYee,I,EAAqB;AAAA,UACzB8C,WADyB,GACF,KAAKtD,KADH,CACzBsD,WADyB;AAEjCA,MAAAA,WAAW,CAAC,KAAKpC,sBAAL,CAA4BV,IAA5B,CAAD,CAAX;AACH;;;wCAEmBY,W,EAAqBC,Q,EAAkBkC,K,EAAqB;AAC5E,WAAK3C,QAAL,CAAc;AACVX,QAAAA,iBAAiB,EAAEmB,WADT;AAEVlB,QAAAA,cAAc,EAAEmB,QAFN;AAGVqB,QAAAA,gBAAgB,EAAEa;AAHR,OAAd;AAKH;;;oCA6CezC,I,EAAcyC,K,EAA2B;AACrD,UAAIzC,IAAI,KAAKnB,gBAAT,IAA6B,CAACtB,KAAK,CAACkF,KAAD,CAAvC,EAAgD;AAC5C,eAAOC,UAAU,CAACD,KAAD,CAAjB;AACH;;AAED,UAAIzC,IAAI,KAAKlB,kBAAT,IAA+B,CAACvB,KAAK,CAACkF,KAAD,CAAzC,EAAkD;AAC9C,eAAOE,QAAQ,CAACF,KAAD,EAAQ,EAAR,CAAf;AACH;;AAED,aAAOA,KAAP;AACH;;;oCAEe9B,G,EAAsB;AAClC,aAAOA,GAAG,CAACiC,UAAJ,WAAkB5D,cAAlB,OAAP;AACH;;;wCAEmB2B,G,EAAqB;AACrC,aAAOA,GAAG,CAACkC,KAAJ,CAAU,GAAV,EAAeC,GAAf,EAAP;AACH;;;oCAEexC,W,EAAqBC,Q,EAAuC;AAAA;;AAAA,wBAI7D,KAAKrB,KAJwD;AAAA,8CAEpE6D,iBAFoE,CAE/CC,KAF+C;AAAA,UAE/CA,KAF+C,sCAEvC,EAFuC;AAAA,UAGpEd,YAHoE,eAGpEA,YAHoE;AAAA,wBAa7D,KAAKrB,KAbwD;AAAA,UAOpE1B,iBAPoE,eAOpEA,iBAPoE;AAAA,UAQpEC,cARoE,eAQpEA,cARoE;AAAA,UASpEE,kBAToE,eASpEA,kBAToE;AAAA,UAUpED,eAVoE,eAUpEA,eAVoE;AAAA,UAWpEE,UAXoE,eAWpEA,UAXoE;AAAA,UAYpEqC,gBAZoE,eAYpEA,gBAZoE;AAcxE,UAAMqB,iBAAiB,GAAG3C,WAAW,KAAKnB,iBAAhB,IAAqCoB,QAAQ,KAAKnB,cAA5E;AACA,UAAM8D,aAAa,GAAG5C,WAAW,KAAKhB,kBAAhB,IAAsCiB,QAAQ,KAAKlB,eAAzE;AAEA,UAAM8D,WAAW,GAAGjB,YAAY,CAAC5B,WAAW,GAAG9B,oBAAf,CAAhC;AACA,UAAM4E,cAAc,GAAG,CAACH,iBAAD,IAAsBC,aAAtB,IAAuC7F,OAAO,CAAC8F,WAAD,EAAc,SAAd,EAAyB,KAAzB,CAArE;AACA,UAAMzD,IAAI,GAAGsD,KAAK,CAACzC,QAAQ,GAAG,CAAZ,CAAlB;AAnBwE,UAoBhE8C,EApBgE,GAoBnD3D,IApBmD,CAoBhE2D,EApBgE;AAAA,UAoB5DC,IApB4D,GAoBnD5D,IApBmD,CAoB5D4D,IApB4D;AAqBxE,UAAMxB,MAAM,GAAGzE,OAAO,CAACqC,IAAD,EAAO,4BAAP,EAAqC,EAArC,CAAtB;AACA,UAAI6D,QAAJ;;AAEA,cAAQjD,WAAR;AACI,aAAKnC,sBAAL;AACIoF,UAAAA,QAAQ,GAAG,oBAAC,QAAD;AAAU,YAAA,SAAS,EAAElF,cAArB;AAAqC,YAAA,SAAS,EAAEN,gBAAgB,CAACuF,IAAD;AAAhE,YAAX;AACA;;AACJ,aAAKhF,sBAAL;AACIiF,UAAAA,QAAQ,GACJ,oBAAC,WAAD;AAAa,YAAA,IAAI,EAAC,QAAlB;AAA2B,YAAA,OAAO,EAAE;AAAA,qBAAM,MAAI,CAACC,eAAL,CAAqB9D,IAArB,CAAN;AAAA;AAApC,aACK4D,IADL,CADJ;AAKA;;AACJ;AAAS;AACL,gBAAM3C,GAAG,GAAGnD,QAAQ,CAAC2F,WAAD,CAAR,GAAwBA,WAAxB,GAAsCA,WAAW,CAACxC,GAA9D;AACA,gBAAIZ,KAAJ;AACA,gBAAIC,IAAI,GAAGjB,iBAAX;AACA,gBAAI0D,KAAJ;AACA,gBAAIgB,OAAO,GAAG,EAAd;AACA,gBAAMC,eAAe,GAAG,KAAKA,eAAL,CAAqB/C,GAArB,CAAxB;;AAEA,gBAAI+C,eAAJ,EAAqB;AACjB;AACA3D,cAAAA,KAAK,GAAG3C,IAAI,CAAC0E,MAAD,EAAS,CAAC,KAAD,EAAQnB,GAAR,CAAT,CAAZ;;AACA,kBAAI,CAACZ,KAAL,EAAY;AACR,uBAAOwD,QAAP;AACH;;AALgB,2BAMgBxD,KANhB;AAMdC,cAAAA,IANc,UAMdA,IANc;AAMRyC,cAAAA,KANQ,UAMRA,KANQ;AAAA,0CAMDgB,OANC;AAMDA,cAAAA,OANC,+BAMS,EANT;AAOpB,aAPD,MAOO;AACH;AACAhB,cAAAA,KAAK,GAAGpF,OAAO,CAACqC,IAAD,EAAOiB,GAAP,CAAf;AACH;;AACD,gBAAMgD,SAAS,GAAG,KAAKC,mBAAL,CAAyBjD,GAAzB,CAAlB;AACA,gBAAMkD,kBAAkB,GAAGT,cAAc,IAAI5F,QAAQ,CAACwC,IAAD,CAArD;AACAuD,YAAAA,QAAQ,GACJ,0CACK,CAACN,iBAAD,IAAsB,oBAAC,qBAAD;AAAuB,cAAA,SAAS,EAAER,KAAlC;AAAyC,cAAA,WAAW,EAAC,EAArD;AAAwD,cAAA,IAAI,EAAEzC;AAA9D,cAD3B,EAEK6D,kBAAkB,IACf,oBAAC,eAAD;AACI,cAAA,IAAI,EAAE3F,cADV;AAEI,cAAA,WAAW,EAAE,oBAAC,gBAAD,EAAsBF,QAAQ,CAAC8F,SAA/B,CAFjB;AAGI,cAAA,OAAO,EAAE;AAAA,uBAAM,MAAI,CAACC,mBAAL,CAAyBzD,WAAzB,EAAsCC,QAAtC,EAAgDkC,KAAhD,CAAN;AAAA;AAHb,cAHR,EASKQ,iBAAiB,IACd;AAAK,cAAA,SAAS,EAAC;AAAf,eACI,oBAAC,aAAD;AACI,cAAA,OAAO,MADX;AAEI,cAAA,OAAO,YAAKI,EAAL,SAAU1C,GAAV,CAFX;AAGI,cAAA,SAAS,EAAEiB,gBAHf;AAII,cAAA,WAAW,EAAC,EAJhB;AAKI,cAAA,IAAI,EAAE5B,IALV;AAMI,cAAA,QAAQ,EAAE,kBAACgE,SAAD,EAAYC,YAAZ,EAA6B;AACnC,gBAAA,MAAI,CAACnE,QAAL,CAAc;AACV8B,kBAAAA,gBAAgB,EAAEqC;AADR,iBAAd;AAGH,eAVL;AAWI,cAAA,QAAQ,EAAE,oBAAM;AACZ,gBAAA,MAAI,CAACnE,QAAL,CAAc;AACV8B,kBAAAA,gBAAgB,EAAEC;AADR,iBAAd;AAGH,eAfL;AAgBI,cAAA,OAAO,EAAE4B;AAhBb,cADJ,EAmBI,oBAAC,eAAD;AACI,cAAA,SAAS,EAAC,4CADd;AAEI,cAAA,OAAO,EAAE,KAAKS,gBAFlB;AAGI,cAAA,WAAW,EAAE,oBAAC,gBAAD,EAAsBlG,QAAQ,CAACmG,MAA/B,CAHjB;AAII,cAAA,IAAI,EAAElG;AAJV,cAnBJ,EAyBKwE,KAAK,KAAKb,gBAAV,IACG,oBAAC,eAAD;AACI,cAAA,SAAS,EAAC,0CADd;AAEI,cAAA,OAAO,EAAE;AAAA,uBAAM,MAAI,CAACwC,UAAL,CAAgB1E,IAAhB,EAAsBiE,SAAtB,EAAiC3D,IAAjC,EAAuCyC,KAAvC,EAA8Cb,gBAA9C,CAAN;AAAA,eAFb;AAGI,cAAA,WAAW,EAAE,oBAAC,gBAAD,EAAsB5D,QAAQ,CAACqG,IAA/B,CAHjB;AAII,cAAA,IAAI,EAAEzF,cAJV;AAKI,cAAA,UAAU,EAAEW;AALhB,cA1BR,CAVR,CADJ;AAiDH;AAjFL;;AAoFA,aAAOgE,QAAP;AACH;;;sCAEiBjD,W,EAAuE;AAAA,UAC7E4B,YAD6E,GAC5D,KAAKhD,KADuD,CAC7EgD,YAD6E;AAGrF,UAAI5B,WAAW,KAAK,CAApB,EAAuB,OAAOuB,SAAP;;AACvB,UAAIvB,WAAW,KAAKhC,sBAApB,EAA4C;AACxC,eAAO,oBAAC,gBAAD,EAAsBN,QAAQ,CAACsF,IAA/B,CAAP,CADwC,CACQ;AACnD;;AAED,UAAMgB,cAAc,GAAG,KAAKC,sBAAL,EAAvB;AACA,UAAMxE,KAAmC,GAAGmC,YAAY,CAAC5B,WAAW,GAAG9B,oBAAf,CAAxD;AACA,UAAMmC,GAAG,GAAGnD,QAAQ,CAACuC,KAAD,CAAR,GAAkBA,KAAlB,GAA0BA,KAAK,CAACY,GAA5C,CAVqF,CAYrF;AACA;AACA;AACA;;AACA,UAAMqB,WAAW,GACb3E,OAAO,CAAC0C,KAAD,EAAQ,aAAR,CAAP,IAAiC1C,OAAO,CAACD,IAAI,CAACkH,cAAD,EAAiB,CAAC,KAAD,EAAQ3D,GAAR,CAAjB,CAAL,EAAqC,aAArC,EAAoDA,GAApD,CAD5C;AAGA,aAAOqB,WAAP;AACH;;;6CA8BwBC,K,EAAsC;AAAA,yBACX,KAAKpB,KADM;AAAA,UACnDrB,gBADmD,gBACnDA,gBADmD;AAAA,UACjCC,iBADiC,gBACjCA,iBADiC;AAE3D,UAAM+E,kBAAkB,GAAG,KAAKC,qBAAL,KAA+BxC,KAA/B,IAAwCxC,iBAAiB,GAAG,CAAvF;AACA,UAAMiF,mBAAmB,GAAGlF,gBAAgB,GAAG,CAA/C;AACA,UAAMmF,sBAAsB,GAAGH,kBAAkB,IAAIE,mBAArD;AAEA,aAAO;AACH,2BAAmBF,kBAAkB,IAAI,CAACG,sBADvC;AAC+D;AAClE,4BAAoBD,mBAAmB,IAAI,CAACC,sBAFzC;AAEiE;AACpE,6BAAqBA,sBAHlB,CAG0C;;AAH1C,OAAP;AAKH;;;4CAE+B;AAAA,UACpBzC,YADoB,GACH,KAAKhD,KADF,CACpBgD,YADoB,EAE5B;;AACA,aAAO9D,sBAAsB,GAAGG,sBAAzB,GAAkD2D,YAAY,CAACK,MAAb,GAAsB5D,yBAA/E;AACH;;;6BAEQ;AAAA;;AAAA,yBAC8C,KAAKO,KADnD;AAAA,UACG6D,iBADH,gBACGA,iBADH;AAAA,UACsBb,YADtB,gBACsBA,YADtB;AAEL,UAAM0C,QAAQ,GAAG7B,iBAAiB,CAACC,KAAlB,GAA0BD,iBAAiB,CAACC,KAAlB,CAAwBT,MAAlD,GAA2D,CAA5E;AAEA,aACI,oBAAC,SAAD,QACK,iBAAuB;AAAA,YAApBN,KAAoB,SAApBA,KAAoB;AAAA,YAAb4C,MAAa,SAAbA,MAAa;;AACpB,YAAMC,aAAa,GAAG,MAAI,CAACC,wBAAL,CAA8B9C,KAA9B,CAAtB;;AACA,YAAM+C,mBAAmB,GAAG7H,UAAU,CAAC,wCAAD,EAA2C2H,aAA3C,CAAtC;AACA,YAAMG,sBAAsB,GAAG9H,UAAU,CACrC,2CADqC,EAErC2H,aAFqC,CAAzC;AAIA,eACI;AAAK,UAAA,SAAS,EAAC;AAAf,WACI,oBAAC,SAAD;AACI,UAAA,YAAY,EAAE,MAAI,CAACI,YADvB;AAEI,UAAA,wBAAwB,EAAED,sBAF9B;AAGI,UAAA,qBAAqB,EAAED,mBAH3B;AAII,UAAA,WAAW,EAAE9C,YAAY,CAACK,MAAb,GAAsB/D,oBAJvC;AAKI,UAAA,WAAW,EAAE,MAAI,CAAC2G,cAAL,CAAoBlD,KAApB,CALjB;AAMI,UAAA,gBAAgB,EAAEzD,oBANtB;AAOI,UAAA,aAAa,EAAEC,gBAPnB;AAQI,UAAA,MAAM,EAAEoG,MARZ;AASI,UAAA,2BAA2B,MAT/B;AAUI,UAAA,yBAAyB,MAV7B;AAWI,UAAA,QAAQ,EAAED,QAAQ,GAAGnG,gBAXzB;AAYI,UAAA,SAAS,EAAE,EAZf;AAaI,UAAA,KAAK,EAAEwD,KAbX;AAcI,UAAA,QAAQ,EAAE,MAAI,CAACmD;AAdnB,UADJ,CADJ;AAoBH,OA5BL,CADJ;AAgCH;;;;EAxW+BrI,KAAK,CAACsI,S;;AA2W1C,eAAepG,qBAAf","sourcesContent":["// @flow strict\n\nimport React, { type Element, Fragment } from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport AutoSizer from 'react-virtualized/dist/es/AutoSizer';\nimport classNames from 'classnames';\nimport find from 'lodash/find';\nimport getProp from 'lodash/get';\nimport isEqual from 'lodash/isEqual';\nimport isNil from 'lodash/isNil';\nimport isString from 'lodash/isString';\nimport MultiGrid from 'react-virtualized/dist/es/MultiGrid/MultiGrid';\n\nimport MetadataField from '../metadata-instance-fields/MetadataField';\nimport ReadOnlyMetadataField from '../metadata-instance-fields/ReadOnlyMetadataField';\nimport FileIcon from '../../icons/file-icon';\nimport IconWithTooltip from './IconWithTooltip';\nimport PlainButton from '../../components/plain-button';\n\nimport { getFileExtension } from '../../utils/file';\nimport messages from '../../elements/common/messages';\n\nimport './MetadataBasedItemList.scss';\n\nimport type { MetadataFieldConfig, FieldsToShow } from '../../common/types/metadataQueries';\nimport type { MetadataFieldValue } from '../../common/types/metadata';\nimport type { StringAnyMap, Collection, BoxItem } from '../../common/types/core';\n\nimport {\n    CANCEL_ICON_TYPE,\n    EDIT_ICON_TYPE,\n    FILE_ICON_COLUMN_INDEX,\n    FILE_ICON_COLUMN_WIDTH,\n    FILE_ICON_SIZE,\n    FILE_NAME_COLUMN_INDEX,\n    FILE_NAME_COLUMN_WIDTH,\n    FIXED_COLUMNS_NUMBER,\n    FIXED_ROW_NUMBER,\n    HEADER_ROW_INDEX,\n    MIN_METADATA_COLUMN_WIDTH,\n    SAVE_ICON_TYPE,\n} from './constants';\nimport { FIELD_TYPE_FLOAT, FIELD_TYPE_INTEGER, FIELD_TYPE_STRING } from '../metadata-instance-fields/constants';\nimport { FIELD_METADATA } from '../../constants';\n\ntype State = {\n    editedColumnIndex: number,\n    editedRowIndex: number,\n    hoveredColumnIndex: number,\n    hoveredRowIndex: number,\n    isUpdating: boolean,\n    scrollLeftOffset: number,\n    scrollRightOffset: number,\n    valueBeingEdited?: ?MetadataFieldValue,\n};\n\ntype Props = {\n    currentCollection: Collection,\n    fieldsToShow: FieldsToShow,\n    onItemClick: BoxItem => void,\n    onMetadataUpdate: (BoxItem, string, ?MetadataFieldValue, ?MetadataFieldValue) => void,\n};\n\ntype CellRendererArgs = {\n    columnIndex: number,\n    key: string,\n    rowIndex: number,\n    style: StringAnyMap,\n};\n\ntype ColumnWidthCallback = ({ index: number }) => number;\ntype GridCellData = Element<typeof FileIcon | typeof PlainButton | typeof Fragment>;\n\ntype ScrollPositionClasses = {\n    'is-scrolledLeft': boolean,\n    'is-scrolledMiddle': boolean,\n    'is-scrolledRight': boolean,\n};\n\ntype ScrollEventData = {\n    clientWidth: number,\n    scrollLeft: number,\n    scrollWidth: number,\n};\n\nclass MetadataBasedItemList extends React.Component<Props, State> {\n    props: Props;\n\n    constructor(props: Props) {\n        super(props);\n        this.state = this.getInitialState();\n    }\n\n    getInitialState = () => {\n        return {\n            editedColumnIndex: -1,\n            editedRowIndex: -1,\n            hoveredRowIndex: -1,\n            hoveredColumnIndex: -1,\n            isUpdating: false,\n            scrollLeftOffset: 0,\n            scrollRightOffset: 0,\n        };\n    };\n\n    componentDidUpdate(prevProps: Props) {\n        const prevItems = getProp(prevProps, 'currentCollection.items');\n        const currentItems = getProp(this.props, 'currentCollection.items');\n\n        if (!isEqual(currentItems, prevItems)) {\n            // Either the view was refreshed or metadata was updated, reset edit part of the state to initial values\n            this.setState({\n                editedColumnIndex: -1,\n                editedRowIndex: -1,\n                isUpdating: false,\n                valueBeingEdited: undefined,\n            });\n        }\n    }\n\n    getQueryResponseFields() {\n        const fields = getProp(this.props, 'currentCollection.items[0].metadata.enterprise.fields', []);\n        return fields.map(({ key, displayName }) => ({ key, displayName }));\n    }\n\n    getColumnWidth(width: number): ColumnWidthCallback {\n        const { fieldsToShow } = this.props;\n\n        return ({ index }: { index: number }): number => {\n            if (index === FILE_ICON_COLUMN_INDEX) {\n                return FILE_ICON_COLUMN_WIDTH;\n            }\n\n            if (index === FILE_NAME_COLUMN_INDEX) {\n                return FILE_NAME_COLUMN_WIDTH;\n            }\n\n            const availableWidth = width - FILE_NAME_COLUMN_WIDTH - FILE_ICON_COLUMN_WIDTH; // total width minus width of sticky columns\n            // Maintain min column width, else occupy the rest of the space equally\n            return Math.max(availableWidth / fieldsToShow.length, MIN_METADATA_COLUMN_WIDTH);\n        };\n    }\n\n    getItemWithPermissions = (item: BoxItem): BoxItem => {\n        /*\n            - @TODO: Remove permissions object once its part of API response.\n            - add \"can_preview: true\" so that users can click to launch the Preview modal. If users don't have access, they will see the error when Preview loads.\n            - add \"can_upload: true\" so that users can update the metadata values.\n        */\n        const permissions = { can_preview: true, can_upload: true };\n        return { ...item, permissions };\n    };\n\n    handleItemClick(item: BoxItem): void {\n        const { onItemClick }: Props = this.props;\n        onItemClick(this.getItemWithPermissions(item));\n    }\n\n    handleEditIconClick(columnIndex: number, rowIndex: number, value: string): void {\n        this.setState({\n            editedColumnIndex: columnIndex,\n            editedRowIndex: rowIndex,\n            valueBeingEdited: value,\n        });\n    }\n\n    handleCancelEdit = (): void => {\n        this.setState({\n            editedColumnIndex: -1,\n            editedRowIndex: -1,\n        });\n    };\n\n    handleSave = (\n        item: BoxItem,\n        field: string,\n        type: string,\n        currentValue: ?MetadataFieldValue,\n        editedValue: ?MetadataFieldValue,\n    ): void => {\n        const { onMetadataUpdate } = this.props;\n        onMetadataUpdate(\n            this.getItemWithPermissions(item),\n            field,\n            currentValue,\n            this.getValueForType(type, editedValue),\n        );\n        this.setState({ isUpdating: true });\n    };\n\n    handleMouseEnter = (columnIndex: number, rowIndex: number): void =>\n        this.setState({\n            hoveredColumnIndex: columnIndex,\n            hoveredRowIndex: rowIndex,\n        });\n\n    handleMouseLeave = (): void =>\n        this.setState({\n            hoveredRowIndex: -1,\n            hoveredColumnIndex: -1,\n        });\n\n    handleContentScroll = ({ clientWidth, scrollLeft, scrollWidth }: ScrollEventData): void => {\n        this.setState({\n            scrollLeftOffset: scrollLeft,\n            scrollRightOffset: scrollWidth - clientWidth - scrollLeft,\n        });\n    };\n\n    getValueForType(type: string, value: MetadataFieldValue) {\n        if (type === FIELD_TYPE_FLOAT && !isNil(value)) {\n            return parseFloat(value);\n        }\n\n        if (type === FIELD_TYPE_INTEGER && !isNil(value)) {\n            return parseInt(value, 10);\n        }\n\n        return value;\n    }\n\n    isMetadataField(key: string): boolean {\n        return key.startsWith(`${FIELD_METADATA}.`);\n    }\n\n    getFieldNameFromKey(key: string): string {\n        return key.split('.').pop();\n    }\n\n    getGridCellData(columnIndex: number, rowIndex: number): GridCellData | void {\n        const {\n            currentCollection: { items = [] },\n            fieldsToShow,\n        }: Props = this.props;\n\n        const {\n            editedColumnIndex,\n            editedRowIndex,\n            hoveredColumnIndex,\n            hoveredRowIndex,\n            isUpdating,\n            valueBeingEdited,\n        }: State = this.state;\n        const isCellBeingEdited = columnIndex === editedColumnIndex && rowIndex === editedRowIndex;\n        const isCellHovered = columnIndex === hoveredColumnIndex && rowIndex === hoveredRowIndex;\n\n        const fieldToShow = fieldsToShow[columnIndex - FIXED_COLUMNS_NUMBER];\n        const isCellEditable = !isCellBeingEdited && isCellHovered && getProp(fieldToShow, 'canEdit', false);\n        const item = items[rowIndex - 1];\n        const { id, name } = item;\n        const fields = getProp(item, 'metadata.enterprise.fields', []);\n        let cellData;\n\n        switch (columnIndex) {\n            case FILE_ICON_COLUMN_INDEX:\n                cellData = <FileIcon dimension={FILE_ICON_SIZE} extension={getFileExtension(name)} />;\n                break;\n            case FILE_NAME_COLUMN_INDEX:\n                cellData = (\n                    <PlainButton type=\"button\" onClick={() => this.handleItemClick(item)}>\n                        {name}\n                    </PlainButton>\n                );\n                break;\n            default: {\n                const key = isString(fieldToShow) ? fieldToShow : fieldToShow.key;\n                let field;\n                let type = FIELD_TYPE_STRING;\n                let value;\n                let options = [];\n                const isMetadataField = this.isMetadataField(key);\n\n                if (isMetadataField) {\n                    // If field is metadata instance field\n                    field = find(fields, ['key', key]);\n                    if (!field) {\n                        return cellData;\n                    }\n                    ({ type, value, options = [] } = field);\n                } else {\n                    // If field is item field, e.g. name, size, description etc.\n                    value = getProp(item, key);\n                }\n                const fieldName = this.getFieldNameFromKey(key);\n                const shouldShowEditIcon = isCellEditable && isString(type);\n                cellData = (\n                    <>\n                        {!isCellBeingEdited && <ReadOnlyMetadataField dataValue={value} displayName=\"\" type={type} />}\n                        {shouldShowEditIcon && (\n                            <IconWithTooltip\n                                type={EDIT_ICON_TYPE}\n                                tooltipText={<FormattedMessage {...messages.editLabel} />}\n                                onClick={() => this.handleEditIconClick(columnIndex, rowIndex, value)}\n                            />\n                        )}\n                        {isCellBeingEdited && (\n                            <div className=\"bdl-MetadataBasedItemList-cell--edit\">\n                                <MetadataField\n                                    canEdit\n                                    dataKey={`${id}${key}`}\n                                    dataValue={valueBeingEdited}\n                                    displayName=\"\"\n                                    type={type}\n                                    onChange={(changeKey, changedValue) => {\n                                        this.setState({\n                                            valueBeingEdited: changedValue,\n                                        });\n                                    }}\n                                    onRemove={() => {\n                                        this.setState({\n                                            valueBeingEdited: undefined,\n                                        });\n                                    }}\n                                    options={options}\n                                />\n                                <IconWithTooltip\n                                    className=\"bdl-MetadataBasedItemList-cell--cancelIcon\"\n                                    onClick={this.handleCancelEdit}\n                                    tooltipText={<FormattedMessage {...messages.cancel} />}\n                                    type={CANCEL_ICON_TYPE}\n                                />\n                                {value !== valueBeingEdited && (\n                                    <IconWithTooltip\n                                        className=\"bdl-MetadataBasedItemList-cell--saveIcon\"\n                                        onClick={() => this.handleSave(item, fieldName, type, value, valueBeingEdited)}\n                                        tooltipText={<FormattedMessage {...messages.save} />}\n                                        type={SAVE_ICON_TYPE}\n                                        isUpdating={isUpdating}\n                                    />\n                                )}\n                            </div>\n                        )}\n                    </>\n                );\n            }\n        }\n\n        return cellData;\n    }\n\n    getGridHeaderData(columnIndex: number): string | Element<typeof FormattedMessage> | void {\n        const { fieldsToShow } = this.props;\n\n        if (columnIndex === 0) return undefined;\n        if (columnIndex === FILE_NAME_COLUMN_INDEX) {\n            return <FormattedMessage {...messages.name} />; // \"Name\" column header\n        }\n\n        const responseFields = this.getQueryResponseFields();\n        const field: string | MetadataFieldConfig = fieldsToShow[columnIndex - FIXED_COLUMNS_NUMBER];\n        const key = isString(field) ? field : field.key;\n\n        // Derive displayName in following order:\n        // 1. fieldsToShow prop ||\n        // 2. metadata template instance ||\n        // 3. field key\n        const displayName =\n            getProp(field, 'displayName') || getProp(find(responseFields, ['key', key]), 'displayName', key);\n\n        return displayName;\n    }\n\n    cellRenderer = ({ columnIndex, rowIndex, key, style }: CellRendererArgs): Element<'div'> => {\n        const { hoveredRowIndex } = this.state;\n        const isHeaderRow = rowIndex === HEADER_ROW_INDEX;\n        const isFileIconCell = !isHeaderRow && columnIndex === FILE_ICON_COLUMN_INDEX;\n        const isFileNameCell = !isHeaderRow && columnIndex === FILE_NAME_COLUMN_INDEX;\n        const isGridRowHovered = !isHeaderRow && rowIndex === hoveredRowIndex;\n\n        const data = isHeaderRow ? this.getGridHeaderData(columnIndex) : this.getGridCellData(columnIndex, rowIndex);\n\n        const classes = classNames('bdl-MetadataBasedItemList-cell', {\n            'bdl-MetadataBasedItemList-cell--fileIcon': isFileIconCell,\n            'bdl-MetadataBasedItemList-cell--filename': isFileNameCell,\n            'bdl-MetadataBasedItemList-cell--hover': isGridRowHovered,\n        });\n\n        return (\n            <div\n                className={classes}\n                key={key}\n                onMouseEnter={() => this.handleMouseEnter(columnIndex, rowIndex)}\n                onMouseLeave={this.handleMouseLeave}\n                style={style}\n            >\n                {data}\n            </div>\n        );\n    };\n\n    getScrollPositionClasses(width: number): ScrollPositionClasses {\n        const { scrollLeftOffset, scrollRightOffset } = this.state;\n        const isViewScrolledLeft = this.calculateContentWidth() > width && scrollRightOffset > 0;\n        const isViewScrolledRight = scrollLeftOffset > 0;\n        const isViewScrolledInMiddle = isViewScrolledLeft && isViewScrolledRight;\n\n        return {\n            'is-scrolledLeft': isViewScrolledLeft && !isViewScrolledInMiddle, // content scrolled all the way to the left\n            'is-scrolledRight': isViewScrolledRight && !isViewScrolledInMiddle, // content scrolled all the way to the right\n            'is-scrolledMiddle': isViewScrolledInMiddle, // content scrolled somewhere in between\n        };\n    }\n\n    calculateContentWidth(): number {\n        const { fieldsToShow } = this.props;\n        // total width = sum of widths of sticky & non-sticky columns\n        return FILE_ICON_COLUMN_WIDTH + FILE_NAME_COLUMN_WIDTH + fieldsToShow.length * MIN_METADATA_COLUMN_WIDTH;\n    }\n\n    render() {\n        const { currentCollection, fieldsToShow }: Props = this.props;\n        const rowCount = currentCollection.items ? currentCollection.items.length : 0;\n\n        return (\n            <AutoSizer>\n                {({ width, height }) => {\n                    const scrollClasses = this.getScrollPositionClasses(width);\n                    const classesTopRightGrid = classNames('bdl-MetadataBasedItemList-topRightGrid', scrollClasses);\n                    const classesBottomRightGrid = classNames(\n                        'bdl-MetadataBasedItemList-bottomRightGrid',\n                        scrollClasses,\n                    );\n                    return (\n                        <div className=\"bdl-MetadataBasedItemList\">\n                            <MultiGrid\n                                cellRenderer={this.cellRenderer}\n                                classNameBottomRightGrid={classesBottomRightGrid}\n                                classNameTopRightGrid={classesTopRightGrid}\n                                columnCount={fieldsToShow.length + FIXED_COLUMNS_NUMBER}\n                                columnWidth={this.getColumnWidth(width)}\n                                fixedColumnCount={FIXED_COLUMNS_NUMBER}\n                                fixedRowCount={FIXED_ROW_NUMBER}\n                                height={height}\n                                hideBottomLeftGridScrollbar\n                                hideTopRightGridScrollbar\n                                rowCount={rowCount + FIXED_ROW_NUMBER}\n                                rowHeight={50}\n                                width={width}\n                                onScroll={this.handleContentScroll}\n                            />\n                        </div>\n                    );\n                }}\n            </AutoSizer>\n        );\n    }\n}\n\nexport default MetadataBasedItemList;\n"],"file":"MetadataBasedItemList.js"}