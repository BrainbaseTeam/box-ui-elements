{"version":3,"sources":["../../../src/features/metadata-based-view/MetadataQueryAPIHelper.js"],"names":["cloneDeep","find","getProp","includes","isArray","isNil","API","ITEM_TYPE_FILE","JSON_PATCH_OP_ADD","JSON_PATCH_OP_REMOVE","JSON_PATCH_OP_REPLACE","JSON_PATCH_OP_TEST","METADATA_FIELD_TYPE_ENUM","METADATA_FIELD_TYPE_MULTISELECT","FIELD_NAME","FIELD_METADATA","SELECT_TYPES","MetadataQueryAPIHelper","api","field","oldValue","newValue","operation","testOp","op","path","value","patchOp","metadataQuery","fields","from","filter","map","split","pop","metadata","templateFields","metadataTemplate","instance","templateScope","templateKey","queryFields","getMetadataQueryFields","queryField","templateField","type","displayName","key","options","enterprise","id","$id","metadataEntry","flattenMetadata","response","entries","next_marker","entry","templateSchemaResponse","metadataQueryResponseData","items","flattenResponseEntry","nextMarker","data","filterMetdataQueryResponse","length","Promise","resolve","Object","keys","getMetadataAPI","getSchemaByTemplateKey","reject","getMetadataQueryAPI","queryMetadata","forceFetch","successsCallback","errorCallback","verifyQueryFields","then","getTemplateSchemaInfo","getFlattenedDataWithTypes","catch","file","operations","createJSONPatchOperations","updateMetadata","clonedQuery","clonedFields","push"],"mappings":"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","sourcesContent":["/**\n * @flow strict\n * @file Metadata Queries API Helper\n * @author Box\n */\nimport cloneDeep from 'lodash/cloneDeep';\nimport find from 'lodash/find';\nimport getProp from 'lodash/get';\nimport includes from 'lodash/includes';\nimport isArray from 'lodash/isArray';\nimport isNil from 'lodash/isNil';\nimport API from '../../api';\n\nimport {\n    ITEM_TYPE_FILE,\n    JSON_PATCH_OP_ADD,\n    JSON_PATCH_OP_REMOVE,\n    JSON_PATCH_OP_REPLACE,\n    JSON_PATCH_OP_TEST,\n    METADATA_FIELD_TYPE_ENUM,\n    METADATA_FIELD_TYPE_MULTISELECT,\n} from '../../common/constants';\nimport { FIELD_NAME, FIELD_METADATA } from '../../constants';\n\nimport type { MetadataQuery as MetadataQueryType, MetadataQueryResponseData } from '../../common/types/metadataQueries';\nimport type {\n    MetadataTemplateSchemaResponse,\n    MetadataTemplate,\n    MetadataFieldValue,\n    MetadataType,\n    MetadataQueryInstanceTypeField,\n} from '../../common/types/metadata';\nimport type { ElementsXhrError, JSONPatchOperations } from '../../common/types/api';\nimport type { Collection, BoxItem } from '../../common/types/core';\n\ntype SuccessCallback = (metadataQueryCollection: Collection) => void;\ntype ErrorCallback = (e: ElementsXhrError) => void;\n\nconst SELECT_TYPES: Array<typeof METADATA_FIELD_TYPE_ENUM | typeof METADATA_FIELD_TYPE_MULTISELECT> = [\n    METADATA_FIELD_TYPE_ENUM,\n    METADATA_FIELD_TYPE_MULTISELECT,\n];\n\nexport default class MetadataQueryAPIHelper {\n    api: API;\n\n    metadataQueryResponseData: MetadataQueryResponseData;\n\n    metadataTemplate: MetadataTemplate;\n\n    templateKey: string;\n\n    templateScope: string;\n\n    metadataQuery: MetadataQueryType;\n\n    constructor(api: API) {\n        this.api = api;\n    }\n\n    createJSONPatchOperations = (\n        field: string,\n        oldValue: ?MetadataFieldValue,\n        newValue: ?MetadataFieldValue,\n    ): JSONPatchOperations => {\n        let operation = JSON_PATCH_OP_REPLACE;\n\n        if (isNil(oldValue) && newValue) {\n            operation = JSON_PATCH_OP_ADD;\n        }\n\n        if (oldValue && isNil(newValue)) {\n            operation = JSON_PATCH_OP_REMOVE;\n        }\n\n        const testOp = {\n            op: JSON_PATCH_OP_TEST,\n            path: `/${field}`,\n            value: oldValue,\n        };\n        const patchOp = {\n            op: operation,\n            path: `/${field}`,\n            value: newValue,\n        };\n\n        if (operation === JSON_PATCH_OP_REMOVE) {\n            delete patchOp.value;\n        }\n\n        return operation === JSON_PATCH_OP_ADD ? [patchOp] : [testOp, patchOp];\n    };\n\n    getMetadataQueryFields = (): string[] => {\n        /*\n            Example metadata query:\n            const query = {\n                from: 'enterprise_12345.myAwesomeTemplateKey',\n                fields: [\n                    'name', // base representation field for an item (name, size, etag etc.)\n                    'metadata.enterprise_12345.myAwesomeTemplateKey.field_1', // metadata instance field\n                    'metadata.enterprise_12345.myAwesomeTemplateKey.field_2', // metadata instance field\n                    'metadata.enterprise_12345.myAwesomeTemplateKey.field_3' // metadata instance field\n                ],\n                ancestor_folder_id: 0,\n            };\n\n            This function will return ['field_1', 'field_2', 'field_3']\n        */\n        const { fields = [], from } = this.metadataQuery;\n        return fields.filter(field => field.includes(from)).map(field => field.split('.').pop());\n    };\n\n    flattenMetadata = (metadata?: MetadataType): MetadataType => {\n        const templateFields = getProp(this.metadataTemplate, 'fields', []);\n        const instance = getProp(metadata, `${this.templateScope}.${this.templateKey}`);\n\n        if (!instance) {\n            return {};\n        }\n\n        const queryFields = this.getMetadataQueryFields();\n\n        const fields = queryFields.map((queryField: string) => {\n            const templateField = find(templateFields, ['key', queryField]);\n            const type = getProp(templateField, 'type'); // get data type\n            const displayName = getProp(templateField, 'displayName', queryField); // get displayName, defaults to key\n\n            const field: MetadataQueryInstanceTypeField = {\n                key: `${FIELD_METADATA}.${this.templateScope}.${this.templateKey}.${queryField}`,\n                value: instance[queryField],\n                type,\n                displayName,\n            };\n\n            if (includes(SELECT_TYPES, type)) {\n                // get \"options\" for enums or multiselects\n                field.options = getProp(templateField, 'options');\n            }\n\n            return field;\n        });\n\n        return {\n            enterprise: {\n                fields,\n                id: instance.$id,\n            },\n        };\n    };\n\n    flattenResponseEntry = (metadataEntry: BoxItem): BoxItem => {\n        const { metadata } = metadataEntry;\n        return {\n            ...metadataEntry,\n            metadata: this.flattenMetadata(metadata),\n        };\n    };\n\n    filterMetdataQueryResponse = (response: MetadataQueryResponseData): MetadataQueryResponseData => {\n        const { entries = [], next_marker } = response;\n        return {\n            entries: entries.filter(entry => getProp(entry, 'type') === ITEM_TYPE_FILE), // return only file items\n            next_marker,\n        };\n    };\n\n    getFlattenedDataWithTypes = (templateSchemaResponse?: MetadataTemplateSchemaResponse): Collection => {\n        this.metadataTemplate = getProp(templateSchemaResponse, 'data');\n        const { entries, next_marker }: MetadataQueryResponseData = this.metadataQueryResponseData;\n        return {\n            items: entries.map<BoxItem>(this.flattenResponseEntry),\n            nextMarker: next_marker,\n        };\n    };\n\n    getTemplateSchemaInfo = (data: MetadataQueryResponseData): Promise<MetadataTemplateSchemaResponse | void> => {\n        const { entries } = data;\n        this.metadataQueryResponseData = this.filterMetdataQueryResponse(data);\n        if (!entries || entries.length === 0) {\n            // Don't make metadata API call to get template info\n            return Promise.resolve();\n        }\n\n        const metadata = getProp(entries, '[0].metadata');\n        this.templateScope = Object.keys(metadata)[0];\n        const instance = metadata[this.templateScope];\n        this.templateKey = Object.keys(instance)[0];\n\n        return this.api.getMetadataAPI(true).getSchemaByTemplateKey(this.templateKey);\n    };\n\n    queryMetadata = (): Promise<MetadataQueryResponseData> => {\n        return new Promise((resolve, reject) => {\n            this.api.getMetadataQueryAPI().queryMetadata(this.metadataQuery, resolve, reject, { forceFetch: true });\n        });\n    };\n\n    fetchMetadataQueryResults = (\n        metadataQuery: MetadataQueryType,\n        successsCallback: SuccessCallback,\n        errorCallback: ErrorCallback,\n    ): Promise<void> => {\n        this.metadataQuery = this.verifyQueryFields(metadataQuery);\n        return this.queryMetadata()\n            .then(this.getTemplateSchemaInfo)\n            .then(this.getFlattenedDataWithTypes)\n            .then(successsCallback)\n            .catch(errorCallback);\n    };\n\n    updateMetadata = (\n        file: BoxItem,\n        field: string,\n        oldValue: ?MetadataFieldValue,\n        newValue: ?MetadataFieldValue,\n        successsCallback: void => void,\n        errorCallback: ErrorCallback,\n    ): Promise<void> => {\n        const operations = this.createJSONPatchOperations(field, oldValue, newValue);\n        return this.api\n            .getMetadataAPI(true)\n            .updateMetadata(file, this.metadataTemplate, operations, successsCallback, errorCallback);\n    };\n\n    /**\n     * Verify that the metadata query has required fields and update it if necessary\n     * For a file item, default fields included in the response are \"type\", \"id\", \"etag\"\n     *\n     * @param {MetadataQueryType} metadataQuery metadata query object\n     * @return {MetadataQueryType} updated metadata query object with required fields\n     */\n    verifyQueryFields = (metadataQuery: MetadataQueryType): MetadataQueryType => {\n        const clonedQuery = cloneDeep(metadataQuery);\n        const clonedFields = isArray(clonedQuery.fields) ? clonedQuery.fields : [];\n\n        // Make sure the query fields array has \"name\" field which is necessary to display info.\n        if (!clonedFields.includes(FIELD_NAME)) {\n            clonedFields.push(FIELD_NAME);\n        }\n        clonedQuery.fields = clonedFields;\n\n        return clonedQuery;\n    };\n}\n"],"file":"MetadataQueryAPIHelper.js"}