{"version":3,"sources":["../../../src/features/metadata-based-view/IconWithTooltip.js"],"names":["React","FormattedMessage","PlainButton","Tooltip","IconCheck","IconClose","IconPencil","bdlGray62","CANCEL_ICON_TYPE","EDIT_ICON_TYPE","SAVE_ICON_TYPE","IconWithTooltip","className","onClick","tooltipText","type","icon"],"mappings":"AAEA,OAAOA,KAAP,MAAoC,OAApC;AACA,SAASC,gBAAT,QAAiC,YAAjC;AAEA,OAAOC,WAAP,MAAwB,+BAAxB;AACA,OAAOC,OAAP,MAAoB,0BAApB;AACA,OAAOC,SAAP,MAAsB,+BAAtB;AACA,OAAOC,SAAP,MAAsB,+BAAtB;AACA,OAAOC,UAAP,MAAuB,gCAAvB;AAEA,SAASC,SAAT,QAA0B,wBAA1B;AAEA,SAASC,gBAAT,EAA2BC,cAA3B,EAA2CC,cAA3C,QAAiE,aAAjE;;AAUA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,OAAsF;AAAA,MAAnFC,SAAmF,QAAnFA,SAAmF;AAAA,MAAxEC,OAAwE,QAAxEA,OAAwE;AAAA,MAA/DC,WAA+D,QAA/DA,WAA+D;AAAA,MAAlDC,IAAkD,QAAlDA,IAAkD;AAC1G,MAAIC,IAAJ;;AAEA,UAAQD,IAAR;AACI,SAAKP,gBAAL;AACIQ,MAAAA,IAAI,gBAAG,oBAAC,SAAD;AAAW,QAAA,KAAK,EAAET,SAAlB;AAA6B,QAAA,KAAK,EAAE,EAApC;AAAwC,QAAA,MAAM,EAAE;AAAhD,QAAP;AACA;;AACJ,SAAKE,cAAL;AACIO,MAAAA,IAAI,gBAAG,oBAAC,UAAD;AAAY,QAAA,KAAK,EAAET;AAAnB,QAAP;AACA;;AACJ,SAAKG,cAAL;AACIM,MAAAA,IAAI,gBAAG,oBAAC,SAAD;AAAW,QAAA,KAAK,EAAET,SAAlB;AAA6B,QAAA,KAAK,EAAE,EAApC;AAAwC,QAAA,MAAM,EAAE;AAAhD,QAAP;AACA;;AACJ;AACI,aAAO,IAAP;AAXR;;AAcA,sBACI,oBAAC,OAAD;AAAS,IAAA,IAAI,EAAEO;AAAf,kBACI,oBAAC,WAAD;AAAa,IAAA,SAAS,EAAEF,SAAxB;AAAmC,IAAA,IAAI,EAAC,QAAxC;AAAiD,IAAA,OAAO,EAAEC;AAA1D,KACKG,IADL,CADJ,CADJ;AAOH,CAxBD;;AA0BA,eAAeL,eAAf","sourcesContent":["// @flow strict\n\nimport React, { type Element } from 'react';\nimport { FormattedMessage } from 'react-intl';\n\nimport PlainButton from '../../components/plain-button';\nimport Tooltip from '../../components/tooltip';\nimport IconCheck from '../../icons/general/IconCheck';\nimport IconClose from '../../icons/general/IconClose';\nimport IconPencil from '../../icons/general/IconPencil';\n\nimport { bdlGray62 } from '../../styles/variables';\n\nimport { CANCEL_ICON_TYPE, EDIT_ICON_TYPE, SAVE_ICON_TYPE } from './constants';\n\ntype IconType = typeof CANCEL_ICON_TYPE | typeof EDIT_ICON_TYPE | typeof SAVE_ICON_TYPE;\ntype Props = {\n    className?: string,\n    onClick: void => void,\n    tooltipText: Element<typeof FormattedMessage>,\n    type?: IconType,\n};\n\nconst IconWithTooltip = ({ className, onClick, tooltipText, type }: Props): Element<typeof Tooltip> | null => {\n    let icon;\n\n    switch (type) {\n        case CANCEL_ICON_TYPE:\n            icon = <IconClose color={bdlGray62} width={16} height={16} />;\n            break;\n        case EDIT_ICON_TYPE:\n            icon = <IconPencil color={bdlGray62} />;\n            break;\n        case SAVE_ICON_TYPE:\n            icon = <IconCheck color={bdlGray62} width={16} height={16} />;\n            break;\n        default:\n            return null;\n    }\n\n    return (\n        <Tooltip text={tooltipText}>\n            <PlainButton className={className} type=\"button\" onClick={onClick}>\n                {icon}\n            </PlainButton>\n        </Tooltip>\n    );\n};\n\nexport default IconWithTooltip;\n"],"file":"IconWithTooltip.js"}