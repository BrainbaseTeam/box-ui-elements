{"version":3,"sources":["../../../src/features/metadata-instance-fields/EnumMetadataField.js"],"names":["React","injectIntl","Label","SingleSelectField","messages","EnumMetadataField","blurExceptionClassNames","dataKey","dataValue","displayName","description","intl","onChange","onRemove","options","selectOptions","map","option","displayText","key","value","isSelectable","defaultValue","formatMessage","metadataFieldSelectValue","unshift","Array","isArray","join","EnumMetadataFieldBase"],"mappings":"AACA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,UAAT,QAA2B,YAA3B;AAEA,OAAOC,KAAP,MAAkB,8BAAlB;AACA,OAAOC,iBAAP,MAA8B,iDAA9B;AACA,OAAOC,QAAP,MAAqB,YAArB;AAEA,OAAO,0BAAP;;AAoBA,IAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,OAUb;AAAA,MATTC,uBASS,QATTA,uBASS;AAAA,MARTC,OAQS,QARTA,OAQS;AAAA,MAPTC,SAOS,QAPTA,SAOS;AAAA,MANTC,WAMS,QANTA,WAMS;AAAA,MALTC,WAKS,QALTA,WAKS;AAAA,MAJTC,IAIS,QAJTA,IAIS;AAAA,MAHTC,SAGS,QAHTA,QAGS;AAAA,MAFTC,QAES,QAFTA,QAES;AAAA,0BADTC,OACS;AAAA,MADTA,OACS,6BADC,EACD;AACT,MAAMC,aAAa,GAAGD,OAAO,CAACE,GAAR,CAAY,UAAAC,MAAM;AAAA,WAAK;AACzCC,MAAAA,WAAW,EAAED,MAAM,CAACE,GADqB;AAEzCC,MAAAA,KAAK,EAAEH,MAAM,CAACE,GAF2B;AAGzCE,MAAAA,YAAY,EAAE;AAH2B,KAAL;AAAA,GAAlB,CAAtB;AAMA,MAAMC,YAAY,GAAGX,IAAI,CAACY,aAAL,CAAmBnB,QAAQ,CAACoB,wBAA5B,CAArB;AAEAT,EAAAA,aAAa,CAACU,OAAd,CAAsB;AAClBP,IAAAA,WAAW,EAAEI,YADK;AAElBF,IAAAA,KAAK,EAAEE,YAFW;AAGlBD,IAAAA,YAAY,EAAE;AAHI,GAAtB;AAMA,SACI;AAAK,IAAA,SAAS,EAAC;AAAf,KACI,oBAAC,KAAD;AAAO,IAAA,IAAI,EAAEZ;AAAb,KACK,CAAC,CAACC,WAAF,IAAiB;AAAG,IAAA,SAAS,EAAC;AAAb,KAA2CA,WAA3C,CADtB,EAEI,oBAAC,iBAAD;AACI,IAAA,uBAAuB,EAAEJ,uBAD7B;AAEI,IAAA,sBAAsB,MAF1B;AAGI,IAAA,YAAY,MAHhB;AAII,IAAA,QAAQ,EAAE,kBAACW,MAAD,EAAoB;AAC1B,UAAIA,MAAM,CAACI,YAAX,EAAyB;AACrBT,QAAAA,SAAQ,CAACL,OAAD,EAAUU,MAAM,CAACG,KAAjB,CAAR;AACH,OAFD,MAEO,IAAIP,QAAJ,EAAc;AACjBA,QAAAA,QAAQ,CAACN,OAAD,CAAR;AACH;AACJ,KAVL;AAWI,IAAA,OAAO,EAAEQ,aAXb;AAYI,IAAA,aAAa,EACT;AACAW,IAAAA,KAAK,CAACC,OAAN,CAAcnB,SAAd,IAA2BA,SAAS,CAACoB,IAAV,CAAe,IAAf,CAA3B,GAAkDpB,SAAS,IAAIc;AAdvE,IAFJ,CADJ,CADJ;AAwBH,CAjDD;;AAmDA,SAASjB,iBAAiB,IAAIwB,qBAA9B;AACA,eAAe5B,UAAU,CAACI,iBAAD,CAAzB","sourcesContent":["// @flow\nimport * as React from 'react';\nimport { injectIntl } from 'react-intl';\n\nimport Label from '../../components/label/Label';\nimport SingleSelectField from '../../components/select-field/SingleSelectField';\nimport messages from './messages';\nimport type { MetadataFieldValue, MetadataTemplateFieldOption } from '../../common/types/metadata';\nimport './EnumMetadataField.scss';\n\ntype Option = {\n    displayText: string,\n    isSelectable: boolean,\n    value: string,\n};\n\ntype Props = {\n    blurExceptionClassNames?: Array<string>,\n    dataKey: string,\n    dataValue?: MetadataFieldValue,\n    description?: string,\n    displayName: string,\n    intl: any,\n    onChange: (key: string, value: MetadataFieldValue) => void,\n    onRemove: (key: string) => void,\n    options?: Array<MetadataTemplateFieldOption>,\n};\n\nconst EnumMetadataField = ({\n    blurExceptionClassNames,\n    dataKey,\n    dataValue,\n    displayName,\n    description,\n    intl,\n    onChange,\n    onRemove,\n    options = [],\n}: Props) => {\n    const selectOptions = options.map(option => ({\n        displayText: option.key,\n        value: option.key,\n        isSelectable: true,\n    }));\n\n    const defaultValue = intl.formatMessage(messages.metadataFieldSelectValue);\n\n    selectOptions.unshift({\n        displayText: defaultValue,\n        value: defaultValue,\n        isSelectable: false,\n    });\n\n    return (\n        <div className=\"bdl-EnumMetadataField\">\n            <Label text={displayName}>\n                {!!description && <i className=\"bdl-EnumMetadataField-desc\">{description}</i>}\n                <SingleSelectField\n                    blurExceptionClassNames={blurExceptionClassNames}\n                    isEscapedWithReference\n                    isScrollable\n                    onChange={(option: Option) => {\n                        if (option.isSelectable) {\n                            onChange(dataKey, option.value);\n                        } else if (onRemove) {\n                            onRemove(dataKey);\n                        }\n                    }}\n                    options={selectOptions}\n                    selectedValue={\n                        // Conditional to make flow happy, dataValue should never be an array\n                        Array.isArray(dataValue) ? dataValue.join(', ') : dataValue || defaultValue\n                    }\n                />\n            </Label>\n        </div>\n    );\n};\n\nexport { EnumMetadataField as EnumMetadataFieldBase };\nexport default injectIntl(EnumMetadataField);\n"],"file":"EnumMetadataField.js"}