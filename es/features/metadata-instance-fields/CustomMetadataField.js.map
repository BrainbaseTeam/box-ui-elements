{"version":3,"sources":["../../../src/features/metadata-instance-fields/CustomMetadataField.js"],"names":["React","injectIntl","Button","ButtonGroup","IconMinus","IconPlus","Field","messages","COLOR_999","CustomMetadataField","intl","canEdit","isLast","dataKey","dataValue","onAdd","onChange","onRemove","addBtn","formatMessage","customAdd","removeBtn","customRemove","key","CustomMetadataFieldBase"],"mappings":"AACA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,UAAT,QAA2B,YAA3B;AAEA,OAAOC,MAAP,MAAmB,gCAAnB;AACA,OAAOC,WAAP,MAAwB,2CAAxB;AACA,OAAOC,SAAP,MAAsB,mCAAtB;AACA,OAAOC,QAAP,MAAqB,kCAArB;AACA,OAAOC,KAAP,MAAkB,iBAAlB;AACA,OAAOC,QAAP,MAAqB,YAArB;AAEA,OAAO,4BAAP;AAaA,IAAMC,SAAS,GAAG,MAAlB;;AAEA,IAAMC,mBAAmB,GAAG,SAAtBA,mBAAsB,OAAqF;AAAA,MAAlFC,IAAkF,QAAlFA,IAAkF;AAAA,MAA5EC,OAA4E,QAA5EA,OAA4E;AAAA,MAAnEC,MAAmE,QAAnEA,MAAmE;AAAA,MAA3DC,OAA2D,QAA3DA,OAA2D;AAAA,MAAlDC,SAAkD,QAAlDA,SAAkD;AAAA,MAAvCC,KAAuC,QAAvCA,KAAuC;AAAA,MAAhCC,QAAgC,QAAhCA,QAAgC;AAAA,MAAtBC,QAAsB,QAAtBA,QAAsB;AAC7G,MAAMC,MAAM,GACR,oBAAC,MAAD;AACI,kBAAYR,IAAI,CAACS,aAAL,CAAmBZ,QAAQ,CAACa,SAA5B,CADhB;AAEI,yBAAkB,yBAFtB;AAGI,IAAA,OAAO,EAAEL,KAHb;AAII,IAAA,IAAI,EAAC;AAJT,KAMI,oBAAC,QAAD;AAAU,IAAA,KAAK,EAAEP;AAAjB,IANJ,CADJ;AAWA,MAAMa,SAAS,GACX,oBAAC,MAAD;AACI,kBAAYX,IAAI,CAACS,aAAL,CAAmBZ,QAAQ,CAACe,YAA5B,CADhB;AAEI,yBAAkB,4BAFtB;AAGI,IAAA,OAAO,EAAE,mBAAM;AACX,UAAIL,QAAJ,EAAc;AACVA,QAAAA,QAAQ,CAACJ,OAAD,CAAR;AACH;AACJ,KAPL;AAQI,IAAA,IAAI,EAAC;AART,KAUI,oBAAC,SAAD;AAAW,IAAA,KAAK,EAAEL;AAAlB,IAVJ,CADJ;AAeA,SACI;AAAK,IAAA,SAAS,EAAC;AAAf,KACI,oBAAC,KAAD;AACI,IAAA,OAAO,EAAEG,OADb;AAEI,IAAA,OAAO,EAAEE,OAFb;AAGI,IAAA,SAAS,EAAEC,SAHf;AAII,IAAA,WAAW,EAAED,OAJjB;AAKI,IAAA,QAAQ,EAAEG,QALd,CAMI;AANJ;AAOI,IAAA,QAAQ,EAAE,kBAACO,GAAD;AAAA,aAAiBP,QAAQ,CAACO,GAAD,EAAM,EAAN,CAAzB;AAAA,KAPd;AAQI,IAAA,IAAI,EAAC;AART,IADJ,EAWKZ,OAAO,IACJ;AAAK,IAAA,SAAS,EAAC;AAAf,KACKC,MAAM,GACH,oBAAC,WAAD,QACKS,SADL,EAEKH,MAFL,CADG,GAMHG,SAPR,CAZR,CADJ;AA0BH,CArDD;;AAuDA,SAASZ,mBAAmB,IAAIe,uBAAhC;AACA,eAAevB,UAAU,CAACQ,mBAAD,CAAzB","sourcesContent":["// @flow\nimport * as React from 'react';\nimport { injectIntl } from 'react-intl';\n\nimport Button from '../../components/button/Button';\nimport ButtonGroup from '../../components/button-group/ButtonGroup';\nimport IconMinus from '../../icons/general/IconMinusThin';\nimport IconPlus from '../../icons/general/IconPlusThin';\nimport Field from './MetadataField';\nimport messages from './messages';\nimport type { MetadataFieldValue } from '../../common/types/metadata';\nimport './CustomMetadataField.scss';\n\ntype Props = {\n    canEdit: boolean,\n    dataKey: string,\n    dataValue: MetadataFieldValue,\n    intl: any,\n    isLast: boolean,\n    onAdd: () => void,\n    onChange: (key: string, value: MetadataFieldValue) => void,\n    onRemove: (key: string) => void,\n};\n\nconst COLOR_999 = '#999';\n\nconst CustomMetadataField = ({ intl, canEdit, isLast, dataKey, dataValue, onAdd, onChange, onRemove }: Props) => {\n    const addBtn = (\n        <Button\n            aria-label={intl.formatMessage(messages.customAdd)}\n            data-resin-target=\"metadata-customfieldnew\"\n            onClick={onAdd}\n            type=\"button\"\n        >\n            <IconPlus color={COLOR_999} />\n        </Button>\n    );\n\n    const removeBtn = (\n        <Button\n            aria-label={intl.formatMessage(messages.customRemove)}\n            data-resin-target=\"metadata-customfieldremove\"\n            onClick={() => {\n                if (onRemove) {\n                    onRemove(dataKey);\n                }\n            }}\n            type=\"button\"\n        >\n            <IconMinus color={COLOR_999} />\n        </Button>\n    );\n\n    return (\n        <div className=\"bdl-CustomMetadataField\">\n            <Field\n                canEdit={canEdit}\n                dataKey={dataKey}\n                dataValue={dataValue}\n                displayName={dataKey}\n                onChange={onChange}\n                // Custom metadata doesn't allow removing of props if the value is emptied out, leave it as empty string\n                onRemove={(key: string) => onChange(key, '')}\n                type=\"string\"\n            />\n            {canEdit && (\n                <div className=\"bdl-CustomMetadataField-customActions\">\n                    {isLast ? (\n                        <ButtonGroup>\n                            {removeBtn}\n                            {addBtn}\n                        </ButtonGroup>\n                    ) : (\n                        removeBtn\n                    )}\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport { CustomMetadataField as CustomMetadataFieldBase };\nexport default injectIntl(CustomMetadataField);\n"],"file":"CustomMetadataField.js"}