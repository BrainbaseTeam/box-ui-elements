{"version":3,"sources":["../../../src/features/metadata-instance-fields/TextMetadataField.js"],"names":["React","injectIntl","TextInput","messages","TextMetadataField","dataKey","dataValue","displayName","description","error","intl","onChange","onRemove","type","value","event","currentTarget","formatMessage","metadataFieldSetValue","TextMetadataFieldBase"],"mappings":"AACA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,UAAT,QAA2B,YAA3B;AAEA,OAAOC,SAAP,MAAsB,6BAAtB;AAEA,OAAOC,QAAP,MAAqB,YAArB;AAEA,OAAO,0BAAP;;AAcA,IAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,OAUb;AAAA,MATTC,OASS,QATTA,OASS;AAAA,MARTC,SAQS,QARTA,SAQS;AAAA,MAPTC,WAOS,QAPTA,WAOS;AAAA,MANTC,WAMS,QANTA,WAMS;AAAA,MALTC,KAKS,QALTA,KAKS;AAAA,MAJTC,IAIS,QAJTA,IAIS;AAAA,MAHTC,SAGS,QAHTA,QAGS;AAAA,MAFTC,QAES,QAFTA,QAES;AAAA,uBADTC,IACS;AAAA,MADTA,IACS,0BADF,MACE;AACT,MAAIC,KAAK,GAAG,EAAZ;;AAEA,MAAI,OAAOR,SAAP,KAAqB,QAAzB,EAAmC;AAC/BQ,IAAAA,KAAK,GAAGR,SAAR;AACH,GAFD,MAEO,IAAIA,SAAJ,EAAe;AAClBQ,IAAAA,KAAK,GAAGR,SAAR;AACH;;AAED,SACI,oBAAC,SAAD;AACI,IAAA,SAAS,EAAC,uBADd;AAEI,IAAA,WAAW,EAAEE,WAFjB;AAGI,IAAA,KAAK,EAAEC,KAHX;AAII,IAAA,iBAAiB,MAJrB;AAKI,IAAA,KAAK,EAAEF,WALX;AAMI,IAAA,IAAI,EAAEF,OANV;AAOI,IAAA,QAAQ,EAAE,kBAACU,KAAD,EAAqD;AAC3D,UAAMC,aAAa,GAAID,KAAK,CAACC,aAA7B;;AACA,UAAIA,aAAa,CAACF,KAAlB,EAAyB;AACrBH,QAAAA,SAAQ,CAACN,OAAD,EAAUW,aAAa,CAACF,KAAxB,CAAR;AACH,OAFD,MAEO;AACHF,QAAAA,QAAQ,CAACP,OAAD,CAAR;AACH;AACJ,KAdL;AAeI,IAAA,WAAW,EAAEK,IAAI,CAACO,aAAL,CAAmBd,QAAQ,CAACe,qBAA5B,CAfjB;AAgBI,IAAA,IAAI,EAAEL,IAhBV;AAiBI,IAAA,KAAK,EAAEC;AAjBX,IADJ;AAqBH,CAxCD;;AA0CA,SAASV,iBAAiB,IAAIe,qBAA9B;AACA,eAAelB,UAAU,CAACG,iBAAD,CAAzB","sourcesContent":["// @flow\nimport * as React from 'react';\nimport { injectIntl } from 'react-intl';\n\nimport TextInput from '../../components/text-input';\n\nimport messages from './messages';\nimport type { MetadataFieldValue } from '../../common/types/metadata';\nimport './TextMetadataField.scss';\n\ntype Props = {\n    dataKey: string,\n    dataValue?: MetadataFieldValue,\n    description?: string,\n    displayName: string,\n    error?: React.Node,\n    intl: any,\n    onChange: (key: string, value: MetadataFieldValue) => void,\n    onRemove: (key: string) => void,\n    type?: string,\n};\n\nconst TextMetadataField = ({\n    dataKey,\n    dataValue,\n    displayName,\n    description,\n    error,\n    intl,\n    onChange,\n    onRemove,\n    type = 'text',\n}: Props) => {\n    let value = '';\n\n    if (typeof dataValue === 'number') {\n        value = dataValue;\n    } else if (dataValue) {\n        value = dataValue;\n    }\n\n    return (\n        <TextInput\n            className=\"bdl-TextMetadataField\"\n            description={description}\n            error={error}\n            hideOptionalLabel\n            label={displayName}\n            name={dataKey}\n            onChange={(event: SyntheticKeyboardEvent<HTMLInputElement>) => {\n                const currentTarget = (event.currentTarget: HTMLInputElement);\n                if (currentTarget.value) {\n                    onChange(dataKey, currentTarget.value);\n                } else {\n                    onRemove(dataKey);\n                }\n            }}\n            placeholder={intl.formatMessage(messages.metadataFieldSetValue)}\n            type={type}\n            value={value}\n        />\n    );\n};\n\nexport { TextMetadataField as TextMetadataFieldBase };\nexport default injectIntl(TextMetadataField);\n"],"file":"TextMetadataField.js"}