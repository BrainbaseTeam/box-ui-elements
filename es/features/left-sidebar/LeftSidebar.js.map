{"version":3,"sources":["../../../src/features/left-sidebar/LeftSidebar.js"],"names":["React","classNames","debounce","throttle","NavSidebar","NavList","NavListCollapseHeader","FooterIndicator","LoadingIndicatorWrapper","bdlBoxBlue","CopyrightFooter","InstantLogin","LeftSidebarDropWrapper","LeftSidebarIconWrapper","NewItemsIndicator","defaultNavLinkRenderer","LeftSidebar","props","changeIsScrollingState","throttledCheckAndChangeScrollShadows","elScrollableList","setState","calculateOverflow","state","isScrolling","debouncedTurnOffScrollingState","turnOffScrollingState","checkAndChangeScrollShadows","isScrollableAbove","isScrollableBelow","overflow","iconElement","IconComponent","customTheme","selected","scaleIcon","wrapperClass","secondaryColor","newItemBadge","headerLinkProps","leftSidebarProps","showLoadingIndicator","onToggleCollapse","canReceiveDrop","className","collapsed","dropTargetRef","id","menuItems","placeholder","showDropZoneOnHover","heading","getNavLink","placeholderEl","length","classes","ulProps","onScroll","onListScroll","ref","builtNavList","map","isDragging","callout","htmlAttributes","iconComponent","message","navLinkRenderer","onClickRemove","removeButtonHtmlAttributes","routerLink","routerProps","showTooltip","linkClassNames","linkProps","icon","getIcon","getNewItemBadge","builtLink","elem","scrollTop","scrollHeight","clientHeight","navSidebarProps","instantLoginProps","preparedMenu","key","getNavList","isInstantLoggedIn","copyrightFooterProps","indicatorText","Component"],"mappings":"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","sourcesContent":["// @flow\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport debounce from 'lodash/debounce';\nimport throttle from 'lodash/throttle';\n\nimport { NavSidebar, NavList, NavListCollapseHeader } from '../../components/nav-sidebar';\nimport FooterIndicator from '../../components/footer-indicator/FooterIndicator';\nimport LoadingIndicatorWrapper from '../../components/loading-indicator/LoadingIndicatorWrapper';\nimport { bdlBoxBlue } from '../../styles/variables';\n\nimport CopyrightFooter from './CopyrightFooter';\nimport InstantLogin from './InstantLogin';\nimport LeftSidebarDropWrapper from './LeftSidebarDropWrapper';\nimport LeftSidebarIconWrapper from './LeftSidebarIconWrapper';\nimport NewItemsIndicator from './NewItemsIndicator';\nimport defaultNavLinkRenderer from './defaultNavLinkRenderer';\n\nimport type { Props as LeftSidebarLinkProps } from './LeftSidebarLink';\nimport type { Callout } from './Callout';\n\nimport './styles/LeftSidebar.scss';\n\ntype SubMenuItem = {\n    /** Sidebar Link Callout */\n    callout?: Callout,\n    /** flag to mark whether a menu item can be dropped on */\n    canReceiveDrop?: boolean,\n    /** class to add to sub menu element */\n    className?: string,\n    /** Ref for parent to access drop target */\n    dropTargetRef?: { current: null | HTMLDivElement },\n    /** Optional HTML attributes to append to menu item */\n    htmlAttributes?: Object,\n    /** React element representing an svg icon */\n    iconComponent?: ?React.ComponentType<any>,\n    /** React component representing an svg icon */\n    iconElement?: ?React.Element<any>,\n    /** Unique identifier for menu item */\n    id: string,\n    /** Localized text string to use for individual menu items */\n    message: string,\n    /** Optional left side bar link renderer. Defaults to defaultNavLinkRenderer */\n    navLinkRenderer?: (props: LeftSidebarLinkProps) => React.Node,\n    /** Whether we should show a badge marking new item content */\n    newItemBadge?: boolean,\n    /** Optional remove link click handler */\n    onClickRemove?: Function,\n    /** Optional remove button htmlAttributes */\n    removeButtonHtmlAttributes?: Object,\n    routerLink?: React.ComponentType<any>,\n    routerProps?: Object,\n    /** Whether the menu icon should be scaled to compensate for extra white space in SVG */\n    scaleIcon?: boolean,\n    /** Whether the current page is associated with the current link */\n    selected?: boolean,\n    /** Whether to show drop zone only when hovered over */\n    showDropZoneOnHover?: boolean,\n    /** Whether the tooltip should be shown */\n    showTooltip?: boolean,\n};\n\ntype MenuItem = {\n    /** Sidebar Link Callout */\n    callout?: Callout,\n    /** flag to mark whether a menu item can be dropped on */\n    canReceiveDrop?: boolean,\n    /** class to add to menu element */\n    className?: string,\n    /** Whether the menu should render as collapsed or expanded */\n    collapsed?: boolean,\n    /** Ref for parent to access drop target */\n    dropTargetRef?: { current: null | HTMLDivElement },\n    /** Optional HTML attributes to append to menu item */\n    htmlAttributes?: Object,\n    /** React element or component representing an svg icon */\n    iconComponent?: ?React.ComponentType<any>,\n    /** React component representing an svg icon */\n    iconElement?: ?React.Element<any>,\n    /** Unique identifier for menu item */\n    id: string,\n    /** Sub menu items for the top-level menu */\n    menuItems?: Array<SubMenuItem>,\n    /** Localized text string to use for individual menu items */\n    message: string,\n    /** Optional left side bar link renderer. Defaults to defaultNavLinkRenderer */\n    navLinkRenderer?: (props: LeftSidebarLinkProps) => React.Node,\n    /** Whether we should show a badge marking new item content */\n    newItemBadge?: boolean,\n    /** Optional remove link click handler */\n    onClickRemove?: Function,\n    /** handler for when a user clicks on the toggleable menu item UI element */\n    onToggleCollapse?: Function,\n    placeholder?: string,\n    /** Optional remove button htmlAttributes */\n    removeButtonHtmlAttributes?: Object,\n    routerLink?: React.ComponentType<any>,\n    routerProps?: Object,\n    /** Whether the menu icon should be scaled to compensate for extra white space in SVG */\n    scaleIcon?: boolean,\n    /** Whether the current page is associated with the current link */\n    selected?: boolean,\n    /** Whether child icons of this menu item should be shown */\n    showChildIcons?: boolean,\n    /** Whether to show drop zone only when hovered over */\n    showDropZoneOnHover?: boolean,\n    /** Whether to show a loading indicator on the list */\n    showLoadingIndicator?: boolean,\n    /** Whether the tooltip should be shown */\n    showTooltip?: boolean,\n};\n\ntype LeftSidebarProps = {\n    /** Custom classname(s) */\n    className?: string,\n    /** HTML attributes for use with the copyright footer */\n    copyrightFooterProps?: Object,\n    /** Theme object specifying primary/secondary colors, and highlighting */\n    customTheme?: Object,\n    /** HTML attributes associated with this container */\n    htmlAttributes?: Object,\n    /** Text for the footer indicator */\n    indicatorText?: string,\n    /** Properties associated with InstantLogin component */\n    instantLoginProps?: Object,\n    /** Set the drag mode of the sidebar? */\n    isDragging?: boolean,\n    /** Determine if session is an instant login session or not */\n    isInstantLoggedIn?: boolean,\n};\n\ntype Props = {\n    /** Optional properties defining selected items, customThemes, HTML attributes, and copyright text */\n    leftSidebarProps: LeftSidebarProps,\n    /** Contents for the menu. Allows for two levels of nesting */\n    menuItems: Array<MenuItem>,\n};\n\ntype State = {\n    isScrollableAbove: boolean,\n    isScrollableBelow: boolean,\n    isScrolling: boolean,\n};\n\nclass LeftSidebar extends React.Component<Props, State> {\n    static defaultProps = {\n        leftSidebarProps: {},\n        menuItems: [],\n    };\n\n    constructor(props: Props) {\n        super(props);\n\n        this.state = {\n            isScrollableAbove: false,\n            isScrollableBelow: false,\n            isScrolling: false,\n        };\n    }\n\n    componentDidUpdate() {\n        if (!this.elScrollableList) {\n            return;\n        }\n\n        const overflow = this.calculateOverflow(this.elScrollableList);\n\n        /**\n         * recalculate overflow when dropdown is visible and new collabs are added\n         * This will not go into an infinite loop because we check for changes in local component state\n         */\n        if (\n            overflow.isScrollableAbove !== this.state.isScrollableAbove ||\n            overflow.isScrollableBelow !== this.state.isScrollableBelow\n        ) {\n            // eslint-disable-next-line react/no-did-update-set-state\n            this.setState(overflow);\n        }\n    }\n\n    onListScroll = () => {\n        this.changeIsScrollingState();\n        this.throttledCheckAndChangeScrollShadows();\n    };\n\n    getIcon(\n        iconElement?: ?React.Element<any>,\n        IconComponent?: ?React.ComponentType<any>, // eslint-disable-line\n        customTheme?: Object = {},\n        selected?: boolean,\n        scaleIcon?: boolean,\n    ) {\n        const wrapperClass = scaleIcon ? 'scaled-icon' : '';\n\n        if (iconElement) {\n            return <LeftSidebarIconWrapper className={wrapperClass}>{iconElement}</LeftSidebarIconWrapper>;\n        }\n        if (IconComponent) {\n            return (\n                <LeftSidebarIconWrapper className={wrapperClass}>\n                    <IconComponent\n                        color={selected && customTheme.secondaryColor ? customTheme.secondaryColor : bdlBoxBlue}\n                        selected={selected}\n                    />\n                </LeftSidebarIconWrapper>\n            );\n        }\n\n        return null;\n    }\n\n    getNewItemBadge(newItemBadge?: boolean, customTheme?: Object = {}) {\n        const { secondaryColor } = customTheme;\n\n        return newItemBadge ? <NewItemsIndicator customColor={secondaryColor} /> : null;\n    }\n\n    getNavList(\n        headerLinkProps: MenuItem,\n        leftSidebarProps: LeftSidebarProps,\n        showLoadingIndicator?: boolean,\n        onToggleCollapse?: ?Function,\n    ) {\n        const {\n            canReceiveDrop = false,\n            className = '',\n            collapsed,\n            dropTargetRef,\n            id,\n            menuItems,\n            placeholder,\n            showDropZoneOnHover,\n        } = headerLinkProps;\n\n        const heading = onToggleCollapse ? (\n            <NavListCollapseHeader onToggleCollapse={onToggleCollapse}>\n                {this.getNavLink(headerLinkProps, leftSidebarProps)}\n            </NavListCollapseHeader>\n        ) : (\n            this.getNavLink(headerLinkProps, leftSidebarProps)\n        );\n\n        const placeholderEl =\n            (menuItems && menuItems.length) || showLoadingIndicator ? null : (\n                <div className=\"placeholder\">{placeholder}</div>\n            );\n\n        const classes = classNames('left-sidebar-list', className, {\n            'is-loading-empty': showLoadingIndicator && menuItems && menuItems.length === 0,\n            'is-loading': showLoadingIndicator && menuItems && menuItems.length > 0,\n            'lsb-scrollable-shadow-top': this.state.isScrollableAbove,\n            'lsb-scrollable-shadow-bottom': this.state.isScrollableBelow,\n        });\n\n        const ulProps = onToggleCollapse\n            ? {\n                  onScroll: this.onListScroll,\n                  ref: elScrollableList => {\n                      this.elScrollableList = elScrollableList;\n                  },\n              }\n            : {};\n\n        const builtNavList = (\n            <NavList\n                className={classes}\n                collapsed={collapsed}\n                heading={heading}\n                placeholder={placeholderEl}\n                key={`list-${id}`}\n                ulProps={ulProps}\n            >\n                {(menuItems && menuItems.map(props => this.getNavLink(props, leftSidebarProps))) || null}\n            </NavList>\n        );\n\n        return canReceiveDrop ? (\n            <LeftSidebarDropWrapper\n                isDragging={leftSidebarProps.isDragging}\n                dropTargetRef={dropTargetRef}\n                showDropZoneOnHover={showDropZoneOnHover}\n            >\n                {builtNavList}\n            </LeftSidebarDropWrapper>\n        ) : (\n            builtNavList\n        );\n    }\n\n    getNavLink(props: MenuItem | SubMenuItem, leftSidebarProps: LeftSidebarProps) {\n        const {\n            callout,\n            canReceiveDrop = false,\n            className = '',\n            dropTargetRef,\n            htmlAttributes,\n            iconComponent,\n            iconElement,\n            id,\n            message,\n            navLinkRenderer,\n            newItemBadge,\n            onClickRemove,\n            removeButtonHtmlAttributes,\n            routerLink,\n            routerProps,\n            scaleIcon,\n            selected = false,\n            showTooltip,\n            showDropZoneOnHover,\n        } = props;\n\n        const linkClassNames = classNames('left-sidebar-link', className, {\n            'is-selected': selected,\n        });\n\n        const linkProps = {\n            callout,\n            className: linkClassNames,\n            customTheme: leftSidebarProps.customTheme,\n            onClickRemove,\n            htmlAttributes,\n            icon: this.getIcon(iconElement, iconComponent, leftSidebarProps.customTheme, selected, scaleIcon),\n            isScrolling: this.state.isScrolling,\n            message,\n            newItemBadge: this.getNewItemBadge(newItemBadge, leftSidebarProps.customTheme),\n            removeButtonHtmlAttributes,\n            routerLink,\n            routerProps,\n            selected,\n            showTooltip,\n        };\n\n        const builtLink = navLinkRenderer ? navLinkRenderer(linkProps) : defaultNavLinkRenderer(linkProps);\n\n        // Check for menu items on links so we don't double-highlight groups\n        return canReceiveDrop && !props.menuItems ? (\n            <LeftSidebarDropWrapper\n                isDragging={leftSidebarProps.isDragging}\n                dropTargetRef={dropTargetRef}\n                key={`link-${id}`}\n                showDropZoneOnHover={showDropZoneOnHover}\n            >\n                {builtLink}\n            </LeftSidebarDropWrapper>\n        ) : (\n            <React.Fragment key={`link-${id}`}>{builtLink}</React.Fragment>\n        );\n    }\n\n    calculateOverflow(elem: HTMLElement) {\n        const isScrollableAbove = elem.scrollTop > 0;\n        const isScrollableBelow = elem.scrollTop < elem.scrollHeight - elem.clientHeight;\n        return {\n            isScrollableAbove,\n            isScrollableBelow,\n        };\n    }\n\n    checkAndChangeScrollShadows = () => {\n        if (this.elScrollableList) {\n            this.setState(this.calculateOverflow(this.elScrollableList));\n        }\n    };\n\n    changeIsScrollingState = () => {\n        if (!this.state.isScrolling) {\n            this.setState({\n                isScrolling: true,\n            });\n        }\n\n        this.debouncedTurnOffScrollingState();\n    };\n\n    turnOffScrollingState = () => {\n        this.setState({\n            isScrolling: false,\n        });\n    };\n\n    debouncedTurnOffScrollingState = debounce(this.turnOffScrollingState, 100);\n\n    elScrollableList: ?HTMLElement;\n\n    throttledCheckAndChangeScrollShadows = throttle(this.checkAndChangeScrollShadows, 50);\n\n    render() {\n        const { leftSidebarProps, menuItems } = this.props;\n        const className = leftSidebarProps.className || '';\n        const navSidebarProps = leftSidebarProps.htmlAttributes || {};\n        const instantLoginProps = leftSidebarProps.instantLoginProps || {};\n\n        const preparedMenu = menuItems.map((props, key) => {\n            if (props.menuItems) {\n                if (props.onToggleCollapse) {\n                    const { collapsed, showLoadingIndicator } = props;\n\n                    return (\n                        <LoadingIndicatorWrapper\n                            className=\"favorites-loading-wrapper\"\n                            crawlerPosition=\"top\"\n                            isLoading={showLoadingIndicator && !collapsed}\n                            key={`loading-indicator-${key}`}\n                        >\n                            {this.getNavList(props, leftSidebarProps, showLoadingIndicator, props.onToggleCollapse)}\n                        </LoadingIndicatorWrapper>\n                    );\n                }\n\n                return this.getNavList(props, leftSidebarProps);\n            }\n\n            return this.getNavLink(props, leftSidebarProps);\n        });\n\n        return (\n            <NavSidebar className={`left-sidebar ${className}`} {...navSidebarProps}>\n                {leftSidebarProps.isInstantLoggedIn ? <InstantLogin {...instantLoginProps} /> : null}\n                <div className=\"left-sidebar-container\">{preparedMenu}</div>\n                <CopyrightFooter linkProps={leftSidebarProps.copyrightFooterProps} />\n                {leftSidebarProps.indicatorText ? (\n                    <FooterIndicator indicatorText={leftSidebarProps.indicatorText} />\n                ) : null}\n            </NavSidebar>\n        );\n    }\n}\n\nexport default LeftSidebar;\n"],"file":"LeftSidebar.js"}