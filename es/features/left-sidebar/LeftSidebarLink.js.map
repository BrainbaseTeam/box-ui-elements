{"version":3,"sources":["../../../src/features/left-sidebar/LeftSidebarLink.js"],"names":["React","classNames","LinkBase","Tooltip","LeftSidebarLinkCallout","RemoveButton","LeftSidebarLink","props","state","isTextOverflowed","leftSidebarLinkText","offsetWidth","scrollWidth","setState","callout","className","customTheme","htmlAttributes","icon","isScrolling","message","newItemBadge","onClickRemove","removeButtonHtmlAttributes","RouterLink","routerLink","routerProps","selected","showTooltip","secondaryColor","LinkComponent","routerLinkProps","linkComponent","boxShadow","undefined","component","Component"],"mappings":"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","sourcesContent":["/* @flow */\nimport * as React from 'react';\nimport classNames from 'classnames';\n\nimport LinkBase from '../../components/link/LinkBase';\nimport Tooltip from '../../components/tooltip';\nimport LeftSidebarLinkCallout from './LeftSidebarLinkCallout';\nimport RemoveButton from './RemoveButton';\n\nimport type { Callout } from './Callout';\n\nimport './styles/LeftSidebarLink.scss';\n\nexport type Props = {\n    callout?: Callout,\n    className?: string,\n    customTheme?: Object,\n    htmlAttributes?: Object,\n    icon?: ?React.Element<any>,\n    isScrolling?: boolean,\n    message: string,\n    newItemBadge?: React.Element<any> | null,\n    onClickRemove?: Function,\n    removeButtonHtmlAttributes?: Object,\n    routerLink?: React.ComponentType<any>,\n    routerProps?: Object,\n    selected?: boolean,\n    showTooltip?: boolean,\n};\n\ntype State = {\n    isTextOverflowed: boolean,\n};\n\nclass LeftSidebarLink extends React.Component<Props, State> {\n    constructor(props: Props) {\n        super(props);\n\n        this.state = {\n            isTextOverflowed: false,\n        };\n    }\n\n    componentDidMount() {\n        if (!this.leftSidebarLinkText) {\n            return;\n        }\n\n        const { offsetWidth, scrollWidth } = this.leftSidebarLinkText;\n\n        if (offsetWidth < scrollWidth) {\n            // eslint-disable-next-line react/no-did-mount-set-state\n            this.setState({\n                isTextOverflowed: true,\n            });\n        }\n    }\n\n    leftSidebarLinkText: ?HTMLElement;\n\n    render() {\n        const {\n            callout,\n            className = '',\n            customTheme = {},\n            htmlAttributes = {},\n            icon,\n            isScrolling = false,\n            message,\n            newItemBadge,\n            onClickRemove,\n            removeButtonHtmlAttributes = {},\n            routerLink: RouterLink,\n            routerProps = {},\n            selected = false,\n            showTooltip = true,\n        } = this.props;\n\n        const { secondaryColor } = customTheme;\n        const LinkComponent = RouterLink || LinkBase;\n        const routerLinkProps = RouterLink ? routerProps : {};\n\n        const linkComponent = (\n            <LinkComponent\n                className={className}\n                {...htmlAttributes}\n                {...routerLinkProps}\n                style={\n                    selected && customTheme\n                        ? {\n                              boxShadow: secondaryColor ? `inset 2px 0 0 ${secondaryColor}` : undefined,\n                          }\n                        : {}\n                }\n            >\n                {icon}\n                <span\n                    ref={leftSidebarLinkText => {\n                        this.leftSidebarLinkText = leftSidebarLinkText;\n                    }}\n                    className=\"left-sidebar-link-text\"\n                >\n                    {message}\n                </span>\n                {newItemBadge}\n            </LinkComponent>\n        );\n\n        let component = linkComponent;\n\n        if (callout) {\n            component = <LeftSidebarLinkCallout callout={callout}>{linkComponent}</LeftSidebarLinkCallout>;\n        } else if (showTooltip) {\n            component = (\n                <Tooltip\n                    className={classNames('nav-link-tooltip', {\n                        'is-visible': this.state.isTextOverflowed && !isScrolling,\n                    })}\n                    isTabbable={false}\n                    position=\"middle-right\"\n                    text={message}\n                >\n                    {linkComponent}\n                </Tooltip>\n            );\n        }\n\n        return onClickRemove ? (\n            <div className=\"left-sidebar-removeable-link-container\">\n                {component}\n                <RemoveButton onClickRemove={onClickRemove} removeButtonHtmlAttributes={removeButtonHtmlAttributes} />\n            </div>\n        ) : (\n            component\n        );\n    }\n}\n\nexport default LeftSidebarLink;\n"],"file":"LeftSidebarLink.js"}