{"version":3,"sources":["../../../src/features/presence/PresenceAvatarTooltipContent.tsx"],"names":["React","FormattedMessage","injectIntl","messages","determineInteractionMessage","PresenceAvatarTooltipContent","name","interactedAt","interactionType","intl","isActive","lastActionMessage","timeAgo","formatRelativeTime","Date","now","formatRelative","activeNowText","PresenceAvatarTooltipContentComponent"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,gBAAT,EAA2BC,UAA3B,QAAoE,YAApE,C,CACA;;AACA,OAAOC,QAAP,MAAqB,YAArB,C,CACA;;AACA,SAASC,2BAAT,QAA4C,uBAA5C;AACA,OAAO,qCAAP;;AASA,SAASC,4BAAT,OAAmH;AAAA,MAA3EC,IAA2E,QAA3EA,IAA2E;AAAA,MAArEC,YAAqE,QAArEA,YAAqE;AAAA,MAAvDC,eAAuD,QAAvDA,eAAuD;AAAA,MAAtCC,IAAsC,QAAtCA,IAAsC;AAAA,MAAhCC,QAAgC,QAAhCA,QAAgC;AAC/G,MAAMC,iBAAiB,GAAGP,2BAA2B,CAACI,eAAD,CAArD;AACA,MAAII,OAAJ;;AAEA,MAAIH,IAAI,CAACI,kBAAT,EAA6B;AACzBD,IAAAA,OAAO,GAAGH,IAAI,CAACI,kBAAL,CAAwBN,YAAY,GAAGO,IAAI,CAACC,GAAL,EAAvC,CAAV;AACH,GAFD,MAEO;AACH;AACAH,IAAAA,OAAO,GAAGH,IAAI,CAACO,cAAL,CAAoBT,YAApB,CAAV;AACH;;AAED,SACI;AAAK,IAAA,SAAS,EAAC;AAAf,KACI;AAAM,IAAA,SAAS,EAAC;AAAhB,KAAyDD,IAAzD,CADJ,EAEKK,iBAAiB,IACd;AAAM,IAAA,SAAS,EAAC;AAAhB,KACKD,QAAQ,GACL,oBAAC,gBAAD,EAAsBP,QAAQ,CAACc,aAA/B,CADK,GAGL,oBAAC,gBAAD,eACQN,iBADR;AAEI,IAAA,MAAM,EAAE;AACJC,MAAAA,OAAO,EAAPA;AADI;AAFZ,KAJR,CAHR,CADJ;AAmBH;;AAED,SAASP,4BAA4B,IAAIa,qCAAzC;AAEA,eAAehB,UAAU,CAACG,4BAAD,CAAzB","sourcesContent":["import React from 'react';\nimport { FormattedMessage, injectIntl, WrappedComponentProps } from 'react-intl';\n// @ts-ignore flow import\nimport messages from './messages';\n// @ts-ignore flow import\nimport { determineInteractionMessage } from './utils/presenceUtils';\nimport './PresenceAvatarTooltipContent.scss';\n\nexport type Props = {\n    name: string;\n    interactedAt: number;\n    interactionType: string;\n    isActive?: boolean;\n} & WrappedComponentProps;\n\nfunction PresenceAvatarTooltipContent({ name, interactedAt, interactionType, intl, isActive }: Props): JSX.Element {\n    const lastActionMessage = determineInteractionMessage(interactionType);\n    let timeAgo;\n\n    if (intl.formatRelativeTime) {\n        timeAgo = intl.formatRelativeTime(interactedAt - Date.now());\n    } else {\n        // @ts-ignore: react-intl v2 backwards compatibility\n        timeAgo = intl.formatRelative(interactedAt);\n    }\n\n    return (\n        <div className=\"bdl-PresenceAvatarTooltipContent\">\n            <span className=\"bdl-PresenceAvatarTooltipContent-name\">{name}</span>\n            {lastActionMessage && (\n                <span className=\"bdl-PresenceAvatarTooltipContent-event\">\n                    {isActive ? (\n                        <FormattedMessage {...messages.activeNowText} />\n                    ) : (\n                        <FormattedMessage\n                            {...lastActionMessage}\n                            values={{\n                                timeAgo,\n                            }}\n                        />\n                    )}\n                </span>\n            )}\n        </div>\n    );\n}\n\nexport { PresenceAvatarTooltipContent as PresenceAvatarTooltipContentComponent };\n\nexport default injectIntl(PresenceAvatarTooltipContent);\n"],"file":"PresenceAvatarTooltipContent.js"}