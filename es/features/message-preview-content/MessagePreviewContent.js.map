{"version":3,"sources":["../../../src/features/message-preview-content/MessagePreviewContent.js"],"names":["React","classNames","ContentPreview","Cache","MessagePreviewGhost","PreviewErrorNotification","apiCache","MessagePreviewContent","contentPreviewProps","fileId","sharedLink","getToken","className","apiHost","useState","isPreviewLoaded","setIsPreviewLoaded","isPreviewInErrorState","setIsPreviewInErrorState","previewRef","useRef","useEffect","current","getViewer","disableViewerControls"],"mappings":";;;;;;;;;;AAAA;AACA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,OAAOC,cAAP,MAA2B,gCAA3B;AAEA,OAAOC,KAAP,MAAkB,mBAAlB;AACA,OAAOC,mBAAP,MAAgC,8CAAhC;AACA,OAAOC,wBAAP,MAAqC,4BAArC;AACA,OAAO,qCAAP;AA0BA,IAAMC,QAAQ,GAAG,IAAIH,KAAJ,EAAjB;;AAEA,SAASI,qBAAT,OAAsH;AAAA,MAArFC,mBAAqF,QAArFA,mBAAqF;AAAA,MAAhEC,MAAgE,QAAhEA,MAAgE;AAAA,MAAxDC,UAAwD,QAAxDA,UAAwD;AAAA,MAA5CC,QAA4C,QAA5CA,QAA4C;AAAA,4BAAlCC,SAAkC;AAAA,MAAlCA,SAAkC,+BAAtB,EAAsB;AAAA,MAAlBC,OAAkB,QAAlBA,OAAkB;;AAAA,wBACpEb,KAAK,CAACc,QAAN,CAAe,KAAf,CADoE;AAAA;AAAA,MAC3GC,eAD2G;AAAA,MAC1FC,kBAD0F;;AAAA,yBAExDhB,KAAK,CAACc,QAAN,CAAe,KAAf,CAFwD;AAAA;AAAA,MAE3GG,qBAF2G;AAAA,MAEpFC,wBAFoF;;AAGlH,MAAMC,UAAU,GAAGnB,KAAK,CAACoB,MAAN,CAAa,IAAb,CAAnB;AAEApB,EAAAA,KAAK,CAACqB,SAAN,CAAgB,YAAM;AAClBL,IAAAA,kBAAkB,CAAC,KAAD,CAAlB;AACAE,IAAAA,wBAAwB,CAAC,KAAD,CAAxB;AACH,GAHD,EAGG,CAACT,MAAD,CAHH;AAKA,SACI;AAAK,IAAA,SAAS,EAAER,UAAU,CAAC,uBAAD,EAA0BW,SAA1B;AAA1B,KACKG,eAAe,GAAG,IAAH,GAAU,oBAAC,mBAAD,OAD9B,EAEKE,qBAAqB,GAClB,oBAAC,wBAAD,OADkB,GAGlB,oBAAC,cAAD,eACQT,mBADR;AAEI,IAAA,OAAO,EAAEK,OAFb;AAGI,IAAA,KAAK,EAAEP,QAHX;AAII,IAAA,SAAS,EAAEL,UAAU,CAAC;AAAE,0CAAoC,CAACc;AAAvC,KAAD,CAJzB;AAKI,IAAA,YAAY,EAAEI,UALlB;AAMI,IAAA,MAAM,EAAEV,MANZ;AAOI,IAAA,OAAO,EAAE,mBAAM;AACXO,MAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACAE,MAAAA,wBAAwB,CAAC,IAAD,CAAxB;AACH,KAVL;AAWI,IAAA,MAAM,EAAE,kBAAM;AACV,UAAIC,UAAU,CAACG,OAAf,EAAwB;AACpBH,QAAAA,UAAU,CAACG,OAAX,CAAmBC,SAAnB,GAA+BC,qBAA/B;AACAR,QAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACH;AACJ,KAhBL;AAiBI,IAAA,UAAU,EAAEN,UAjBhB;AAkBI,IAAA,KAAK,EAAE;AAAA,aAAMC,QAAQ,CAACF,MAAD,CAAd;AAAA;AAlBX,KALR,CADJ;AA6BH;;AAED,eAAeF,qBAAf","sourcesContent":["// // @flow\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport ContentPreview from '../../elements/content-preview';\nimport type { Token } from '../../common/types/core';\nimport Cache from '../../utils/Cache';\nimport MessagePreviewGhost from '../message-preview-ghost/MessagePreviewGhost';\nimport PreviewErrorNotification from './PreviewErrorNotification';\nimport './styles/MessagePreviewContent.scss';\n\nexport type ContentPreviewProps = $Diff<\n    React.ElementConfig<typeof ContentPreview>,\n    {\n        apiHost: any,\n        cache: any,\n        className: any,\n        componentRef: any,\n        fileId: any,\n        onError: any,\n        onLoad: any,\n        sharedLink: any,\n        token: any,\n    },\n>;\n\ntype Props = {|\n    apiHost: string,\n    className?: string,\n    contentPreviewProps?: ContentPreviewProps,\n    fileId: string,\n    getToken: (fileId: string) => Promise<Token>,\n    sharedLink: string,\n|};\n\nconst apiCache = new Cache();\n\nfunction MessagePreviewContent({ contentPreviewProps, fileId, sharedLink, getToken, className = '', apiHost }: Props) {\n    const [isPreviewLoaded, setIsPreviewLoaded] = React.useState(false);\n    const [isPreviewInErrorState, setIsPreviewInErrorState] = React.useState(false);\n    const previewRef = React.useRef(null);\n\n    React.useEffect(() => {\n        setIsPreviewLoaded(false);\n        setIsPreviewInErrorState(false);\n    }, [fileId]);\n\n    return (\n        <div className={classNames('MessagePreviewContent', className)}>\n            {isPreviewLoaded ? null : <MessagePreviewGhost />}\n            {isPreviewInErrorState ? (\n                <PreviewErrorNotification />\n            ) : (\n                <ContentPreview\n                    {...contentPreviewProps}\n                    apiHost={apiHost}\n                    cache={apiCache}\n                    className={classNames({ 'MessagePreviewContent is-loading': !isPreviewLoaded })}\n                    componentRef={previewRef}\n                    fileId={fileId}\n                    onError={() => {\n                        setIsPreviewLoaded(true);\n                        setIsPreviewInErrorState(true);\n                    }}\n                    onLoad={() => {\n                        if (previewRef.current) {\n                            previewRef.current.getViewer().disableViewerControls();\n                            setIsPreviewLoaded(true);\n                        }\n                    }}\n                    sharedLink={sharedLink}\n                    token={() => getToken(fileId)}\n                />\n            )}\n        </div>\n    );\n}\n\nexport default MessagePreviewContent;\n"],"file":"MessagePreviewContent.js"}