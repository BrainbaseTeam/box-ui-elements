{"version":3,"sources":["../../../../src/features/content-explorer/content-explorer/ContentExplorerHeaderActions.js"],"names":["PropTypes","React","Component","injectIntl","ContentExplorerSearch","ContentExplorerNewFolderButton","ContentExplorerBreadcrumbs","ContentExplorerModePropType","FoldersPathPropType","messages","SEARCH_RESULTS_FOLDER_ID","isSearchResultsFolder","folder","id","ContentExplorerHeaderActions","props","folderPathIndex","event","foldersPath","onEnterFolder","clickedFolder","preventDefault","length","submitSearch","lastSubmittedSearchInput","newFolderIndex","isViewingSearchResults","exitSearch","handleBreadcrumbClick","input","setState","searchInput","state","foldersPathBeforeSearch","some","getCurrentFolder","onFoldersPathUpdated","onExitSearch","isInSearchMode","foldersPathLength","folderBeforeSearch","intl","onSearchSubmit","name","formatMessage","searchResults","children","contentExplorerMode","CustomInput","customInput","onCreateNewFolderButtonClick","showCreateNewFolderButton","isCreateNewFolderAllowed","searchInputProps","handleClearSearchButtonClick","handleSearchInput","handleSubmitSearch","handleBreadcrumbsUpButtonClick","node","isRequired","func","any","bool","object","ContentExplorerHeaderActionsBase"],"mappings":"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","sourcesContent":["import PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { injectIntl } from 'react-intl';\n\nimport ContentExplorerSearch from './ContentExplorerSearch';\nimport ContentExplorerNewFolderButton from './ContentExplorerNewFolderButton';\nimport ContentExplorerBreadcrumbs from './ContentExplorerBreadcrumbs';\n\nimport { ContentExplorerModePropType, FoldersPathPropType } from '../prop-types';\nimport messages from '../messages';\n\nconst SEARCH_RESULTS_FOLDER_ID = 'search_results_id';\n\nconst isSearchResultsFolder = folder => folder && folder.id === SEARCH_RESULTS_FOLDER_ID;\n\nclass ContentExplorerHeaderActions extends Component {\n    static propTypes = {\n        children: PropTypes.node,\n        contentExplorerMode: ContentExplorerModePropType.isRequired,\n        customInput: PropTypes.func,\n        foldersPath: FoldersPathPropType.isRequired,\n        intl: PropTypes.any,\n        onFoldersPathUpdated: PropTypes.func.isRequired,\n        onEnterFolder: PropTypes.func.isRequired,\n        onCreateNewFolderButtonClick: PropTypes.func,\n        showCreateNewFolderButton: PropTypes.bool,\n        isCreateNewFolderAllowed: PropTypes.bool,\n        onSearchSubmit: PropTypes.func.isRequired,\n        onExitSearch: PropTypes.func.isRequired,\n        searchInputProps: PropTypes.object,\n    };\n\n    static defaultProps = {\n        showCreateNewFolderButton: true,\n        isCreateNewFolderAllowed: true,\n        searchInputProps: {},\n    };\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            searchInput: '',\n        };\n        this.foldersPathBeforeSearch = [];\n        this.lastSubmittedSearchInput = '';\n    }\n\n    getCurrentFolder() {\n        const { foldersPath } = this.props;\n        return foldersPath[foldersPath.length - 1];\n    }\n\n    isInSearchMode() {\n        const { foldersPath } = this.props;\n        return foldersPath.some(isSearchResultsFolder);\n    }\n\n    isViewingSearchResults() {\n        return isSearchResultsFolder(this.getCurrentFolder());\n    }\n\n    handleBreadcrumbClick = (folderPathIndex, event) => {\n        const { foldersPath, onEnterFolder } = this.props;\n        const clickedFolder = foldersPath[folderPathIndex];\n\n        if (event) {\n            event.preventDefault();\n        }\n\n        // Do nothing if the right-most breadcrumb (current folder) is clicked\n        if (folderPathIndex === foldersPath.length - 1) {\n            return;\n        }\n\n        // Show the search results for the last submitted input when clicking the \"Search Results\" breadcrumb\n        if (isSearchResultsFolder(clickedFolder)) {\n            this.submitSearch(this.lastSubmittedSearchInput);\n            return;\n        }\n\n        onEnterFolder(clickedFolder);\n    };\n\n    handleBreadcrumbsUpButtonClick = () => {\n        const { foldersPath } = this.props;\n        const newFolderIndex = foldersPath.length - 2;\n\n        if (this.isViewingSearchResults()) {\n            this.exitSearch();\n        } else if (newFolderIndex >= 0) {\n            this.handleBreadcrumbClick(newFolderIndex);\n        }\n    };\n\n    handleSearchInput = input => {\n        this.setState({\n            searchInput: input,\n        });\n    };\n\n    handleClearSearchButtonClick = () => {\n        this.exitSearch();\n    };\n\n    exitSearch() {\n        const { onFoldersPathUpdated, onExitSearch } = this.props;\n\n        // Clear the search input even if we aren't in search mode\n        this.setState({ searchInput: '' });\n\n        if (this.isInSearchMode()) {\n            const foldersPathLength = this.foldersPathBeforeSearch.length;\n            const folderBeforeSearch = foldersPathLength > 0 ? this.foldersPathBeforeSearch[foldersPathLength - 1] : {};\n            onFoldersPathUpdated(this.foldersPathBeforeSearch);\n            onExitSearch(folderBeforeSearch);\n        }\n    }\n\n    handleSubmitSearch = () => {\n        const { searchInput } = this.state;\n\n        this.submitSearch(searchInput);\n    };\n\n    submitSearch(searchInput) {\n        const { foldersPath, intl, onFoldersPathUpdated, onSearchSubmit } = this.props;\n\n        if (searchInput) {\n            // Only save folders path if we aren't already in search mode\n            if (!this.isInSearchMode()) {\n                this.foldersPathBeforeSearch = foldersPath;\n            }\n\n            this.lastSubmittedSearchInput = searchInput;\n            onFoldersPathUpdated([\n                {\n                    id: SEARCH_RESULTS_FOLDER_ID,\n                    name: intl.formatMessage(messages.searchResults),\n                },\n            ]);\n\n            onSearchSubmit(searchInput);\n        } else {\n            this.exitSearch();\n        }\n    }\n\n    render() {\n        const {\n            children,\n            contentExplorerMode,\n            customInput: CustomInput,\n            foldersPath,\n            onCreateNewFolderButtonClick,\n            showCreateNewFolderButton,\n            isCreateNewFolderAllowed,\n            searchInputProps,\n        } = this.props;\n        const { searchInput } = this.state;\n        const isInSearchMode = this.isInSearchMode();\n\n        return (\n            <div className=\"content-explorer-header-actions\">\n                <div className=\"content-explorer-search-new-folder-container\">\n                    {CustomInput ? (\n                        <CustomInput />\n                    ) : (\n                        <ContentExplorerSearch\n                            inputValue={searchInput}\n                            onClearButtonClick={this.handleClearSearchButtonClick}\n                            onInput={this.handleSearchInput}\n                            onSubmit={this.handleSubmitSearch}\n                            searchInputProps={searchInputProps}\n                        />\n                    )}\n                    {showCreateNewFolderButton && (\n                        <ContentExplorerNewFolderButton\n                            contentExplorerMode={contentExplorerMode}\n                            onClick={onCreateNewFolderButtonClick}\n                            isDisabled={!isCreateNewFolderAllowed || isInSearchMode}\n                            isCreateNewFolderAllowed={isCreateNewFolderAllowed}\n                        />\n                    )}\n                    {children}\n                </div>\n                <ContentExplorerBreadcrumbs\n                    foldersPath={foldersPath}\n                    isUpButtonDisabled={foldersPath.length <= 1 && !isInSearchMode}\n                    onUpButtonClick={this.handleBreadcrumbsUpButtonClick}\n                    onBreadcrumbClick={this.handleBreadcrumbClick}\n                />\n            </div>\n        );\n    }\n}\n\nexport { ContentExplorerHeaderActions as ContentExplorerHeaderActionsBase };\nexport default injectIntl(ContentExplorerHeaderActions);\n"],"file":"ContentExplorerHeaderActions.js"}