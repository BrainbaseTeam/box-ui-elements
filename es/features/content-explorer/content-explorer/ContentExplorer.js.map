{"version":3,"sources":["../../../../src/features/content-explorer/content-explorer/ContentExplorer.js"],"names":["PropTypes","React","Component","classNames","omit","ContentExplorerHeaderActions","ContentExplorerEmptyState","ContentExplorerActionButtons","ItemList","ContentExplorerModePropType","FoldersPathPropType","ItemsPropType","ContentExplorerModes","ItemTypes","ContentExplorer","props","node","className","limit","nodeOfInterest","counter","parentNode","includes","contentExplorerMode","MULTI_SELECT","event","isInside","domNode","contains","target","shouldDeselectItems","deselectItems","enteredFolder","onEnterFolder","foldersPath","state","folderIndex","findIndex","folder","id","newFoldersPath","slice","concat","newState","selectedItems","setState","searchQuery","onSearchSubmit","isInSearchMode","folderBeforeSearch","onExitSearch","index","items","onSelectItem","item","isDisabled","isLoading","stopPropagation","newSelectedItems","toggleSelectedItem","onChooseItems","type","FOLDER","enterFolder","preventDefault","result","isViewingSearchResults","length","initialFoldersPath","document","addEventListener","handleDocumentClick","prevInitialFoldersPath","removeEventListener","actionButtonsProps","cancelButtonProps","chooseButtonProps","chooseButtonText","customInput","headerActionsAccessory","onMoveItem","onCopyItem","onCancelButtonClick","onCreateNewFolderButtonClick","showCreateNewFolderButton","isChooseButtonLoading","isCopyButtonLoading","isCreateNewFolderAllowed","isMoveButtonLoading","numItemsPerPage","numTotalItems","onLoadMoreItems","itemIconRenderer","itemNameLinkRenderer","itemButtonRenderer","listWidth","listHeight","searchInputProps","rest","currentFolder","getCurrentFolder","contentExplorerProps","selectedItemsIds","Object","keys","areActionButtonsDisabled","isActionDisabled","SELECT_FILE","handleContentExplorerClick","ref","handleFoldersPathUpdated","handleExitSearch","handleSearchSubmit","renderItemListEmptyState","handleItemClick","handleItemDoubleClick","handleItemNameClick","object","string","isRequired","func","bool","number"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,SAAP,MAAsB,YAAtB;AACA,OAAOC,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,OAAOC,IAAP,MAAiB,aAAjB;AAEA,OAAOC,4BAAP,MAAyC,gCAAzC;AACA,OAAOC,yBAAP,MAAsC,6BAAtC;AACA,OAAOC,4BAAP,MAAyC,gCAAzC;AAEA,OAAOC,QAAP,MAAqB,cAArB;AACA,SAASC,2BAAT,EAAsCC,mBAAtC,EAA2DC,aAA3D,QAAgF,eAAhF;AACA,OAAOC,oBAAP,MAAiC,UAAjC;AACA,OAAOC,SAAP,MAAsB,eAAtB;AAEA,OAAO,wBAAP;;IAEMC,e;;;;;AA4GF,2BAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACf,8BAAMA,KAAN;;AADe,kFAmCW,UAACC,IAAD,EAAOC,SAAP,EAAkBC,KAAlB,EAA4B;AACtD,UAAIC,cAAc,GAAGH,IAArB;AACA,UAAII,OAAO,GAAG,CAAd;;AACA,aAAOD,cAAc,CAACE,UAAf,IAA6BD,OAAO,GAAGF,KAA9C,EAAqD;AACjD;AACA,YAAI,CAACC,cAAc,CAACE,UAAf,CAA0BJ,SAA/B,EAA0C;AACtC;AACH;;AAED,YAAIE,cAAc,CAACE,UAAf,CAA0BJ,SAA1B,CAAoCK,QAApC,CAA6CL,SAA7C,CAAJ,EAA6D;AACzD,iBAAO,IAAP;AACH;;AAEDE,QAAAA,cAAc,GAAGA,cAAc,CAACE,UAAhC;AACAD,QAAAA,OAAO,IAAI,CAAX;AACH;;AAED,aAAO,KAAP;AACH,KArDkB;;AAAA,0EAuDG,YAAM;AAAA,UAChBG,mBADgB,GACQ,MAAKR,KADb,CAChBQ,mBADgB;AAGxB,aACI;AACAA,QAAAA,mBAAmB,KAAKX,oBAAoB,CAACY;AAFjD;AAIH,KA9DkB;;AAAA,0EAgEG,UAAAC,KAAK,EAAI;AAC3B,UAAMC,QAAQ,GAAI,MAAKC,OAAL,IAAgB,MAAKA,OAAL,CAAaC,QAAb,CAAsBH,KAAK,CAACI,MAA5B,CAAjB,IAAyD,MAAKF,OAAL,KAAiBF,KAAK,CAACI,MAAjG;;AAEA,UAAI,CAACH,QAAD,IAAa,MAAKI,mBAAL,EAAjB,EAA6C;AACzC,cAAKC,aAAL;AACH;AACJ,KAtEkB;;AAAA,iFAwEU,YAAM;AAC/B,UAAI,MAAKD,mBAAL,EAAJ,EAAgC;AAC5B,cAAKC,aAAL;AACH;AACJ,KA5EkB;;AAAA,kEAoFL,UAAAC,aAAa,EAAI;AAAA,wBACoB,MAAKjB,KADzB;AAAA,UACnBQ,mBADmB,eACnBA,mBADmB;AAAA,UACEU,aADF,eACEA,aADF;AAAA,UAEnBC,WAFmB,GAEH,MAAKC,KAFF,CAEnBD,WAFmB;AAI3B,UAAME,WAAW,GAAGF,WAAW,CAACG,SAAZ,CAAsB,UAAAC,MAAM;AAAA,eAAIA,MAAM,CAACC,EAAP,KAAcP,aAAa,CAACO,EAAhC;AAAA,OAA5B,CAApB;AACA,UAAIC,cAAc,GAAGN,WAAW,CAACO,KAAZ,EAArB;;AAEA,UAAIL,WAAW,KAAK,CAAC,CAArB,EAAwB;AACpB;AACAI,QAAAA,cAAc,GAAGA,cAAc,CAACE,MAAf,CAAsB,mBAE5BV,aAF4B,EAAtB,CAAjB;AAKH,OAPD,MAOO;AACH;AACAQ,QAAAA,cAAc,GAAGA,cAAc,CAACC,KAAf,CAAqB,CAArB,EAAwBL,WAAW,GAAG,CAAtC,CAAjB;AACH;;AAED,UAAMO,QAAQ,GAAG;AAAET,QAAAA,WAAW,EAAEM;AAAf,OAAjB;;AACA,UAAIjB,mBAAmB,KAAKX,oBAAoB,CAACY,YAAjD,EAA+D;AAC3DmB,QAAAA,QAAQ,CAACC,aAAT,GAAyB,EAAzB;AACH;;AAED,YAAKC,QAAL,CAAcF,QAAd;;AAEAV,MAAAA,aAAa,CAACD,aAAD,EAAgBQ,cAAhB,CAAb;AACH,KA/GkB;;AAAA,+EAiHQ,UAAAA,cAAc,EAAI;AACzC,YAAKK,QAAL,CAAc;AACVX,QAAAA,WAAW,EAAEM;AADH,OAAd;AAGH,KArHkB;;AAAA,yEAuHE,UAAAM,WAAW,EAAI;AAAA,UACxBC,cADwB,GACL,MAAKhC,KADA,CACxBgC,cADwB;;AAGhC,YAAKF,QAAL,CAAc;AAAEG,QAAAA,cAAc,EAAE;AAAlB,OAAd;;AACAD,MAAAA,cAAc,CAACD,WAAD,CAAd;AACH,KA5HkB;;AAAA,uEA8HA,UAAAG,kBAAkB,EAAI;AAAA,UAC7BC,YAD6B,GACZ,MAAKnC,KADO,CAC7BmC,YAD6B;;AAGrC,YAAKL,QAAL,CAAc;AAAEG,QAAAA,cAAc,EAAE;AAAlB,OAAd;;AACAE,MAAAA,YAAY,CAACD,kBAAD,CAAZ;AACH,KAnIkB;;AAAA,sEAqID,gBAAsB;AAAA,UAAnBxB,KAAmB,QAAnBA,KAAmB;AAAA,UAAZ0B,KAAY,QAAZA,KAAY;AAAA,yBACiB,MAAKpC,KADtB;AAAA,UAC5BQ,mBAD4B,gBAC5BA,mBAD4B;AAAA,UACP6B,KADO,gBACPA,KADO;AAAA,UACAC,YADA,gBACAA,YADA;AAAA,UAE5BT,aAF4B,GAEV,MAAKT,KAFK,CAE5BS,aAF4B;AAGpC,UAAMU,IAAI,GAAGF,KAAK,CAACD,KAAD,CAAlB;;AAEA,UAAIG,IAAI,CAACC,UAAL,IAAmBD,IAAI,CAACE,SAA5B,EAAuC;AACnC;AACH,OAPmC,CASpC;;;AACA/B,MAAAA,KAAK,CAACgC,eAAN;AAEA,UAAIC,gBAAgB,GAAG,EAAvB;;AACA,UAAInC,mBAAmB,KAAKX,oBAAoB,CAACY,YAAjD,EAA+D;AAC3DkC,QAAAA,gBAAgB,GAAG,MAAKC,kBAAL,CAAwBf,aAAxB,EAAuCU,IAAvC,CAAnB;AACH,OAFD,MAEO;AACHI,QAAAA,gBAAgB,CAACJ,IAAI,CAACf,EAAN,CAAhB,GAA4Be,IAA5B;AACH;;AAED,YAAKT,QAAL,CAAc;AAAED,QAAAA,aAAa,EAAEc;AAAjB,OAAd;;AAEA,UAAIL,YAAJ,EAAkB;AACdA,QAAAA,YAAY,CAACC,IAAD,EAAOH,KAAP,CAAZ;AACH;AACJ,KA7JkB;;AAAA,4EA+JK,iBAAe;AAAA,UAAZA,KAAY,SAAZA,KAAY;AAAA,yBACF,MAAKpC,KADH;AAAA,UAC3BqC,KAD2B,gBAC3BA,KAD2B;AAAA,UACpBQ,aADoB,gBACpBA,aADoB;AAEnC,UAAMN,IAAI,GAAGF,KAAK,CAACD,KAAD,CAAlB;;AAEA,UAAIG,IAAI,CAACC,UAAL,IAAmBD,IAAI,CAACE,SAA5B,EAAuC;AACnC;AACH;;AAED,UAAIF,IAAI,CAACO,IAAL,KAAchD,SAAS,CAACiD,MAA5B,EAAoC;AAChC,cAAKC,WAAL,CAAiBT,IAAjB;AACH,OAFD,MAEO;AACHM,QAAAA,aAAa,CAAC,CAACN,IAAD,CAAD,CAAb;AACH;AACJ,KA5KkB;;AAAA,0EA8KG,UAAC7B,KAAD,EAAQ0B,KAAR,EAAkB;AAAA,UAC5BC,KAD4B,GAClB,MAAKrC,KADa,CAC5BqC,KAD4B;AAEpC,UAAME,IAAI,GAAGF,KAAK,CAACD,KAAD,CAAlB;;AAEA,UAAIG,IAAI,CAACO,IAAL,KAAchD,SAAS,CAACiD,MAA5B,EAAoC;AAChC;AACH,OANmC,CAQpC;;;AACArC,MAAAA,KAAK,CAACuC,cAAN;AACAvC,MAAAA,KAAK,CAACgC,eAAN;;AAEA,YAAKM,WAAL,CAAiBT,IAAjB;AACH,KA3LkB;;AAAA,yEA6LE,UAACV,aAAD,EAAgBU,IAAhB,EAAyB;AAC1C,UAAMW,MAAM,qBAAQrB,aAAR,CAAZ;;AACA,UAAIqB,MAAM,CAACX,IAAI,CAACf,EAAN,CAAV,EAAqB;AACjB,eAAO0B,MAAM,CAACX,IAAI,CAACf,EAAN,CAAb;AACH,OAFD,MAEO;AACH0B,QAAAA,MAAM,CAACX,IAAI,CAACf,EAAN,CAAN,GAAkBe,IAAlB;AACH;;AAED,aAAOW,MAAP;AACH,KAtMkB;;AAAA,+EAwMQ,YAAM;AAAA,wBACW,MAAK9B,KADhB;AAAA,UACrBD,WADqB,eACrBA,WADqB;AAAA,UACRc,cADQ,eACRA,cADQ;AAE7B,UAAMkB,sBAAsB,GAAGlB,cAAc,IAAId,WAAW,CAACiC,MAAZ,KAAuB,CAAxE;AAEA,0BAAO,oBAAC,yBAAD;AAA2B,QAAA,QAAQ,EAAED;AAArC,QAAP;AACH,KA7MkB;;AAEf,UAAK/B,KAAL,GAAa;AACTS,MAAAA,aAAa,EAAE,EADN;AAETV,MAAAA,WAAW,EAAEnB,KAAK,CAACqD,kBAFV;AAGTpB,MAAAA,cAAc,EAAE;AAHP,KAAb;AAFe;AAOlB;;;;wCAEmB;AAChBqB,MAAAA,QAAQ,CAACC,gBAAT,CAA0B,OAA1B,EAAmC,KAAKC,mBAAxC,EAA6D,IAA7D;AACH;;;8CAEkE;AAAA,UAA1BC,sBAA0B,SAA9CJ,kBAA8C;AAAA,UACvDA,kBADuD,GAChC,KAAKrD,KAD2B,CACvDqD,kBADuD;;AAG/D,UAAII,sBAAsB,KAAKJ,kBAA/B,EAAmD;AAC/C,aAAKvB,QAAL,CAAc;AACVX,UAAAA,WAAW,EAAEkC;AADH,SAAd;AAGH;AACJ;;;2CAEsB;AACnBC,MAAAA,QAAQ,CAACI,mBAAT,CAA6B,OAA7B,EAAsC,KAAKF,mBAA3C,EAAgE,IAAhE;AACH;;;uCAEkB;AAAA,UACPrC,WADO,GACS,KAAKC,KADd,CACPD,WADO;AAEf,aAAOA,WAAW,CAACA,WAAW,CAACiC,MAAZ,GAAqB,CAAtB,CAAlB;AACH;AAED;AACJ;AACA;;;;oCA4CoB;AACZ,WAAKtB,QAAL,CAAc;AACVD,QAAAA,aAAa,EAAE;AADL,OAAd;AAGH;;;6BA6HQ;AAAA;;AAAA,yBA+BD,KAAK7B,KA/BJ;AAAA,UAED2D,kBAFC,gBAEDA,kBAFC;AAAA,UAGDC,iBAHC,gBAGDA,iBAHC;AAAA,UAIDC,iBAJC,gBAIDA,iBAJC;AAAA,UAKDC,gBALC,gBAKDA,gBALC;AAAA,UAMD5D,SANC,gBAMDA,SANC;AAAA,UAODM,mBAPC,gBAODA,mBAPC;AAAA,UAQDuD,WARC,gBAQDA,WARC;AAAA,UASDC,sBATC,gBASDA,sBATC;AAAA,UAUDnB,aAVC,gBAUDA,aAVC;AAAA,UAWDoB,UAXC,gBAWDA,UAXC;AAAA,UAYDC,UAZC,gBAYDA,UAZC;AAAA,UAaDC,mBAbC,gBAaDA,mBAbC;AAAA,UAcDC,4BAdC,gBAcDA,4BAdC;AAAA,UAeDC,yBAfC,gBAeDA,yBAfC;AAAA,UAgBDC,qBAhBC,gBAgBDA,qBAhBC;AAAA,UAiBDC,mBAjBC,gBAiBDA,mBAjBC;AAAA,UAkBDC,wBAlBC,gBAkBDA,wBAlBC;AAAA,UAmBDC,mBAnBC,gBAmBDA,mBAnBC;AAAA,UAoBDpC,KApBC,gBAoBDA,KApBC;AAAA,UAqBDqC,eArBC,gBAqBDA,eArBC;AAAA,UAsBDC,aAtBC,gBAsBDA,aAtBC;AAAA,UAuBDC,eAvBC,gBAuBDA,eAvBC;AAAA,UAwBDC,gBAxBC,gBAwBDA,gBAxBC;AAAA,UAyBDC,oBAzBC,gBAyBDA,oBAzBC;AAAA,UA0BDC,kBA1BC,gBA0BDA,kBA1BC;AAAA,UA2BDC,SA3BC,gBA2BDA,SA3BC;AAAA,UA4BDC,UA5BC,gBA4BDA,UA5BC;AAAA,UA6BDC,gBA7BC,gBA6BDA,gBA7BC;AAAA,UA8BEC,IA9BF;;AAAA,yBAgCkD,KAAK/D,KAhCvD;AAAA,UAgCGa,cAhCH,gBAgCGA,cAhCH;AAAA,UAgCmBd,WAhCnB,gBAgCmBA,WAhCnB;AAAA,UAgCgCU,aAhChC,gBAgCgCA,aAhChC;AAiCL,UAAMsB,sBAAsB,GAAGlB,cAAc,IAAId,WAAW,CAACiC,MAAZ,KAAuB,CAAxE;AACA,UAAMgC,aAAa,GAAG,KAAKC,gBAAL,EAAtB;AACA,UAAMC,oBAAoB,GAAGjG,IAAI,CAAC8F,IAAD,EAAO,CACpC,oBADoC,EAEpC,eAFoC,EAGpC,cAHoC,EAIpC,gBAJoC,EAKpC,cALoC,CAAP,CAAjC;AAQA,UAAMI,gBAAgB,GAAGC,MAAM,CAACC,IAAP,CAAY5D,aAAZ,CAAzB;AACA,UAAI6D,wBAAJ,CA5CK,CA6CL;AACA;AACA;;AACA,UAAIlF,mBAAmB,KAAKX,oBAAoB,CAACY,YAAjD,EAA+D;AAC3D;AACA;AACAiF,QAAAA,wBAAwB,GACpBH,gBAAgB,CAACnC,MAAjB,KAA4B,CAA5B,IACCmC,gBAAgB,CAACnC,MAAjB,KAA4B,CAA5B,IAAiCvB,aAAa,CAAC0D,gBAAgB,CAAC,CAAD,CAAjB,CAAb,CAAmCI,gBAFzE;AAGH,OAND,MAMO,IAAIxC,sBAAsB,IAAI3C,mBAAmB,KAAKX,oBAAoB,CAAC+F,WAA3E,EAAwF;AAC3F;AACA;AACA;AACAF,QAAAA,wBAAwB,GACpBH,gBAAgB,CAACnC,MAAjB,KAA4B,CAA5B,IAAiCvB,aAAa,CAAC0D,gBAAgB,CAAC,CAAD,CAAjB,CAAb,CAAmCI,gBADxE;AAEH,OANM,MAMA;AACH;AACAD,QAAAA,wBAAwB,GACpBH,gBAAgB,CAACnC,MAAjB,GAA0B,CAA1B,GACMvB,aAAa,CAAC0D,gBAAgB,CAAC,CAAD,CAAjB,CAAb,CAAmCI,gBADzC,GAEMP,aAAa,CAACO,gBAHxB;AAIH;;AAED;AAAA;AACI;AACA;AACI,UAAA,SAAS,EAAEvG,UAAU,CAAC,kBAAD,EAAqBc,SAArB,CADzB;AAEI,UAAA,OAAO,EAAE,KAAK2F,0BAFlB;AAGI,UAAA,GAAG,EAAE,aAAAC,KAAG,EAAI;AACR,YAAA,MAAI,CAAClF,OAAL,GAAekF,KAAf;AACH;AALL,WAMQR,oBANR,gBAQI,oBAAC,4BAAD;AACI,UAAA,mBAAmB,EAAE9E,mBADzB;AAEI,UAAA,WAAW,EAAEuD,WAFjB;AAGI,UAAA,WAAW,EAAE5C,WAHjB;AAII,UAAA,wBAAwB,EAAEqD,wBAJ9B;AAKI,UAAA,4BAA4B,EAAEJ,4BALlC;AAMI,UAAA,oBAAoB,EAAE,KAAK2B,wBAN/B;AAOI,UAAA,aAAa,EAAE,KAAK/C,WAPxB;AAQI,UAAA,YAAY,EAAE,KAAKgD,gBARvB;AASI,UAAA,cAAc,EAAE,KAAKC,kBATzB;AAUI,UAAA,gBAAgB,EAAEf,gBAVtB;AAWI,UAAA,yBAAyB,EAAEb;AAX/B,WAaKL,sBAbL,CARJ,eAuBI,oBAAC,QAAD;AACI,UAAA,mBAAmB,EAAExD,mBADzB;AAEI,UAAA,MAAM,EAAEyE,UAFZ;AAGI,UAAA,kBAAkB,EAAEF,kBAHxB;AAII,UAAA,gBAAgB,EAAEF,gBAJtB;AAKI,UAAA,oBAAoB,EAAEC,oBAL1B;AAMI,UAAA,KAAK,EAAEzC,KANX;AAOI,UAAA,eAAe,EAAE,KAAK6D,wBAP1B;AAQI,UAAA,eAAe,EAAExB,eARrB;AASI,UAAA,aAAa,EAAEC,aATnB;AAUI,UAAA,WAAW,EAAE,KAAKwB,eAVtB;AAWI,UAAA,iBAAiB,EAAE,KAAKC,qBAX5B;AAYI,UAAA,eAAe,EAAE,KAAKC,mBAZ1B;AAaI,UAAA,eAAe,EAAEzB,eAbrB;AAcI,UAAA,aAAa,EAAE/C,aAdnB;AAeI,UAAA,KAAK,EAAEmD;AAfX,UAvBJ,eAwCI,oBAAC,4BAAD;AACI,UAAA,kBAAkB,EAAErB,kBADxB;AAEI,UAAA,kBAAkB,EAAE+B,wBAFxB;AAGI,UAAA,iBAAiB,EAAE9B,iBAHvB;AAII,UAAA,iBAAiB,EAAEC,iBAJvB;AAKI,UAAA,gBAAgB,EAAEC,gBALtB;AAMI,UAAA,mBAAmB,EAAEtD,mBANzB;AAOI,UAAA,aAAa,EAAE4E,aAPnB;AAQI,UAAA,qBAAqB,EAAEd,qBAR3B;AASI,UAAA,mBAAmB,EAAEC,mBATzB;AAUI,UAAA,mBAAmB,EAAEE,mBAVzB;AAWI,UAAA,aAAa,EAAEN,mBAXnB;AAYI,UAAA,aAAa,EAAEtB,aAZnB;AAaI,UAAA,WAAW,EAAEqB,UAbjB;AAcI,UAAA,WAAW,EAAED,UAdjB;AAeI,UAAA,aAAa,EAAEpC;AAfnB,UAxCJ;AAFJ;AA6DH;;;;EA5byB1C,S;;gBAAxBY,e,eACiB;AACf;AACA4D,EAAAA,kBAAkB,EAAE1E,SAAS,CAACqH,MAFf;;AAGf;AACA1C,EAAAA,iBAAiB,EAAE3E,SAAS,CAACqH,MAJd;;AAKf;AACAzC,EAAAA,iBAAiB,EAAE5E,SAAS,CAACqH,MANd;;AAOf;AACAxC,EAAAA,gBAAgB,EAAE7E,SAAS,CAACgB,IARb;;AASf;AACAC,EAAAA,SAAS,EAAEjB,SAAS,CAACsH,MAVN;;AAWf;AACA/F,EAAAA,mBAAmB,EAAEd,2BAA2B,CAAC8G,UAZlC;;AAaf;AACAzC,EAAAA,WAAW,EAAE9E,SAAS,CAACwH,IAdR;;AAef;AACAzC,EAAAA,sBAAsB,EAAE/E,SAAS,CAACgB,IAhBnB;;AAiBf;AACAoD,EAAAA,kBAAkB,EAAE1D,mBAAmB,CAAC6G,UAlBzB;;AAmBf;AACR;AACA;AACA;AACA;AACA;AACQtF,EAAAA,aAAa,EAAEjC,SAAS,CAACwH,IAAV,CAAeD,UAzBf;;AA0Bf;AACR;AACA;AACA;AACA;AACA;AACQlE,EAAAA,YAAY,EAAErD,SAAS,CAACwH,IAhCT;;AAiCf;AACR;AACA;AACA;AACA;AACQ5D,EAAAA,aAAa,EAAE5D,SAAS,CAACwH,IAtCV;;AAuCf;AACR;AACA;AACA;AACA;AACQxC,EAAAA,UAAU,EAAEhF,SAAS,CAACwH,IA5CP;;AA6Cf;AACR;AACA;AACA;AACA;AACQvC,EAAAA,UAAU,EAAEjF,SAAS,CAACwH,IAlDP;;AAmDf;AACAtC,EAAAA,mBAAmB,EAAElF,SAAS,CAACwH,IApDhB;;AAqDf;AACArC,EAAAA,4BAA4B,EAAEnF,SAAS,CAACwH,IAtDzB;;AAuDf;AACApC,EAAAA,yBAAyB,EAAEpF,SAAS,CAACyH,IAxDtB;;AAyDf;AACApC,EAAAA,qBAAqB,EAAErF,SAAS,CAACyH,IA1DlB;;AA2Df;AACAnC,EAAAA,mBAAmB,EAAEtF,SAAS,CAACyH,IA5DhB;;AA6Df;AACAlC,EAAAA,wBAAwB,EAAEvF,SAAS,CAACyH,IA9DrB;;AA+Df;AACAjC,EAAAA,mBAAmB,EAAExF,SAAS,CAACyH,IAhEhB;;AAiEf;AACR;AACA;AACA;AACA;AACQ1E,EAAAA,cAAc,EAAE/C,SAAS,CAACwH,IAAV,CAAeD,UAtEhB;;AAuEf;AACR;AACA;AACA;AACA;AACQrE,EAAAA,YAAY,EAAElD,SAAS,CAACwH,IAAV,CAAeD,UA5Ed;;AA6Ef;AACAnE,EAAAA,KAAK,EAAEzC,aAAa,CAAC4G,UA9EN;;AA+Ef;AACA9B,EAAAA,eAAe,EAAEzF,SAAS,CAAC0H,MAhFZ;;AAiFf;AACAhC,EAAAA,aAAa,EAAE1F,SAAS,CAAC0H,MAlFV;;AAmFf;AACA/B,EAAAA,eAAe,EAAE3F,SAAS,CAACwH,IApFZ;;AAqFf;AACA5B,EAAAA,gBAAgB,EAAE5F,SAAS,CAACwH,IAtFb;;AAuFf;AACA3B,EAAAA,oBAAoB,EAAE7F,SAAS,CAACwH,IAxFjB;;AAyFf;AACA1B,EAAAA,kBAAkB,EAAE9F,SAAS,CAACwH,IA1Ff;;AA2Ff;AACAzB,EAAAA,SAAS,EAAE/F,SAAS,CAAC0H,MAAV,CAAiBH,UA5Fb;;AA6Ff;AACAvB,EAAAA,UAAU,EAAEhG,SAAS,CAAC0H,MAAV,CAAiBH,UA9Fd;;AA+Ff;AACAtB,EAAAA,gBAAgB,EAAEjG,SAAS,CAACqH;AAhGb,C;;gBADjBvG,e,kBAoGoB;AAClB4D,EAAAA,kBAAkB,EAAE,EADF;AAElBC,EAAAA,iBAAiB,EAAE,EAFD;AAGlBC,EAAAA,iBAAiB,EAAE,EAHD;AAIlB3D,EAAAA,SAAS,EAAE,EAJO;AAKlBgF,EAAAA,gBAAgB,EAAE;AALA,C;;AA2V1B,eAAenF,eAAf","sourcesContent":["import PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport classNames from 'classnames';\nimport omit from 'lodash/omit';\n\nimport ContentExplorerHeaderActions from './ContentExplorerHeaderActions';\nimport ContentExplorerEmptyState from './ContentExplorerEmptyState';\nimport ContentExplorerActionButtons from './ContentExplorerActionButtons';\n\nimport ItemList from '../item-list';\nimport { ContentExplorerModePropType, FoldersPathPropType, ItemsPropType } from '../prop-types';\nimport ContentExplorerModes from '../modes';\nimport ItemTypes from '../item-types';\n\nimport './ContentExplorer.scss';\n\nclass ContentExplorer extends Component {\n    static propTypes = {\n        /** Props for the action buttons container */\n        actionButtonsProps: PropTypes.object,\n        /** Props for the cancel button */\n        cancelButtonProps: PropTypes.object,\n        /** Props for the choose button */\n        chooseButtonProps: PropTypes.object,\n        /** Custom text for the choose button */\n        chooseButtonText: PropTypes.node,\n        /** Adds class name. */\n        className: PropTypes.string,\n        /** Configures the content explorer based on the user's intended action (ex. select file or move/copy) */\n        contentExplorerMode: ContentExplorerModePropType.isRequired,\n        /** Props that contains the custom search input. Is rendered in header actions */\n        customInput: PropTypes.func,\n        /** Any extra items in the header to the right of the search input (and new folder button) */\n        headerActionsAccessory: PropTypes.node,\n        /** Initial path of folders. The last folder in the array is the current folder. */\n        initialFoldersPath: FoldersPathPropType.isRequired,\n        /**\n         * Called when the current folder changes\n         *\n         * @param {Object} enteredFolder\n         * @param {Array} newFoldersPath\n         */\n        onEnterFolder: PropTypes.func.isRequired,\n        /**\n         * Called when an item is selected\n         *\n         * @param {Object} selectedItem\n         * @param {number} selectedItemIndex\n         */\n        onSelectItem: PropTypes.func,\n        /**\n         * Called when an item is chosen\n         *\n         * @param {Object[]} chosenItems\n         */\n        onChooseItems: PropTypes.func,\n        /**\n         * Called when a destination folder has been selected for moving an item to\n         *\n         * @param {Object} destFolder destination folder\n         */\n        onMoveItem: PropTypes.func,\n        /**\n         * Called when a destination folder has been selected for copying an item to\n         *\n         * @param {Object} destFolder destination folder\n         */\n        onCopyItem: PropTypes.func,\n        /** Called when cancel button is clicked */\n        onCancelButtonClick: PropTypes.func,\n        /** Called when new folder button is clicked */\n        onCreateNewFolderButtonClick: PropTypes.func,\n        /** Whether the new folder button should be shown */\n        showCreateNewFolderButton: PropTypes.bool,\n        /** Whether the choose button should be shown with a loading indicator */\n        isChooseButtonLoading: PropTypes.bool,\n        /** Whether the copy button should be shown with a loading indicator */\n        isCopyButtonLoading: PropTypes.bool,\n        /** Whether the user has permission to create a new folder */\n        isCreateNewFolderAllowed: PropTypes.bool,\n        /** Whether the move button should be shown with a loading indicator */\n        isMoveButtonLoading: PropTypes.bool,\n        /**\n         * Called when a search query is submitted.\n         *\n         * @param {string} searchQuery\n         */\n        onSearchSubmit: PropTypes.func.isRequired,\n        /**\n         * Called when search mode is exited. An updated items list should now be passed in to display the user's file tree.\n         *\n         * @param {Object} folderBeforeSearch the previous folder object before entering search mode\n         */\n        onExitSearch: PropTypes.func.isRequired,\n        /** List of items to display */\n        items: ItemsPropType.isRequired,\n        /** Number of items to load per page as the user scrolls */\n        numItemsPerPage: PropTypes.number,\n        /** Total number of items across all pages */\n        numTotalItems: PropTypes.number,\n        /** Called to load more items */\n        onLoadMoreItems: PropTypes.func,\n        /** Used to render item icons in the list. Overrides the default icons. */\n        itemIconRenderer: PropTypes.func,\n        /** Used to render item name links in the list. Overrides the default links. */\n        itemNameLinkRenderer: PropTypes.func,\n        /** Used to render item buttons in the list. Overrides the default buttons. */\n        itemButtonRenderer: PropTypes.func,\n        /** Width of the item list */\n        listWidth: PropTypes.number.isRequired,\n        /** Height of the item list */\n        listHeight: PropTypes.number.isRequired,\n        /** Props for the search input */\n        searchInputProps: PropTypes.object,\n    };\n\n    static defaultProps = {\n        actionButtonsProps: {},\n        cancelButtonProps: {},\n        chooseButtonProps: {},\n        className: '',\n        searchInputProps: {},\n    };\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            selectedItems: {},\n            foldersPath: props.initialFoldersPath,\n            isInSearchMode: false,\n        };\n    }\n\n    componentDidMount() {\n        document.addEventListener('click', this.handleDocumentClick, true);\n    }\n\n    componentDidUpdate({ initialFoldersPath: prevInitialFoldersPath }) {\n        const { initialFoldersPath } = this.props;\n\n        if (prevInitialFoldersPath !== initialFoldersPath) {\n            this.setState({\n                foldersPath: initialFoldersPath,\n            });\n        }\n    }\n\n    componentWillUnmount() {\n        document.removeEventListener('click', this.handleDocumentClick, true);\n    }\n\n    getCurrentFolder() {\n        const { foldersPath } = this.state;\n        return foldersPath[foldersPath.length - 1];\n    }\n\n    /**\n     * Traverse the hirerachy up to the limit to see if any of the parent has the className\n     */\n    doAncestersContainClassname = (node, className, limit) => {\n        let nodeOfInterest = node;\n        let counter = 0;\n        while (nodeOfInterest.parentNode && counter < limit) {\n            // Done traversing (Document node does not have classnames)\n            if (!nodeOfInterest.parentNode.className) {\n                break;\n            }\n\n            if (nodeOfInterest.parentNode.className.includes(className)) {\n                return true;\n            }\n\n            nodeOfInterest = nodeOfInterest.parentNode;\n            counter += 1;\n        }\n\n        return false;\n    };\n\n    shouldDeselectItems = () => {\n        const { contentExplorerMode } = this.props;\n\n        return (\n            // always deselect when not in multi select mode\n            contentExplorerMode !== ContentExplorerModes.MULTI_SELECT\n        );\n    };\n\n    handleDocumentClick = event => {\n        const isInside = (this.domNode && this.domNode.contains(event.target)) || this.domNode === event.target;\n\n        if (!isInside && this.shouldDeselectItems()) {\n            this.deselectItems();\n        }\n    };\n\n    handleContentExplorerClick = () => {\n        if (this.shouldDeselectItems()) {\n            this.deselectItems();\n        }\n    };\n\n    deselectItems() {\n        this.setState({\n            selectedItems: {},\n        });\n    }\n\n    enterFolder = enteredFolder => {\n        const { contentExplorerMode, onEnterFolder } = this.props;\n        const { foldersPath } = this.state;\n\n        const folderIndex = foldersPath.findIndex(folder => folder.id === enteredFolder.id);\n        let newFoldersPath = foldersPath.slice();\n\n        if (folderIndex === -1) {\n            // Append folder to the path if it's not already in the folders path\n            newFoldersPath = newFoldersPath.concat([\n                {\n                    ...enteredFolder,\n                },\n            ]);\n        } else {\n            // Otherwise, remove all folders that came after the entered folder\n            newFoldersPath = newFoldersPath.slice(0, folderIndex + 1);\n        }\n\n        const newState = { foldersPath: newFoldersPath };\n        if (contentExplorerMode !== ContentExplorerModes.MULTI_SELECT) {\n            newState.selectedItems = {};\n        }\n\n        this.setState(newState);\n\n        onEnterFolder(enteredFolder, newFoldersPath);\n    };\n\n    handleFoldersPathUpdated = newFoldersPath => {\n        this.setState({\n            foldersPath: newFoldersPath,\n        });\n    };\n\n    handleSearchSubmit = searchQuery => {\n        const { onSearchSubmit } = this.props;\n\n        this.setState({ isInSearchMode: true });\n        onSearchSubmit(searchQuery);\n    };\n\n    handleExitSearch = folderBeforeSearch => {\n        const { onExitSearch } = this.props;\n\n        this.setState({ isInSearchMode: false });\n        onExitSearch(folderBeforeSearch);\n    };\n\n    handleItemClick = ({ event, index }) => {\n        const { contentExplorerMode, items, onSelectItem } = this.props;\n        const { selectedItems } = this.state;\n        const item = items[index];\n\n        if (item.isDisabled || item.isLoading) {\n            return;\n        }\n\n        // Prevent the event from bubbling up (so our content explorer click handler doesn't fire)\n        event.stopPropagation();\n\n        let newSelectedItems = {};\n        if (contentExplorerMode === ContentExplorerModes.MULTI_SELECT) {\n            newSelectedItems = this.toggleSelectedItem(selectedItems, item);\n        } else {\n            newSelectedItems[item.id] = item;\n        }\n\n        this.setState({ selectedItems: newSelectedItems });\n\n        if (onSelectItem) {\n            onSelectItem(item, index);\n        }\n    };\n\n    handleItemDoubleClick = ({ index }) => {\n        const { items, onChooseItems } = this.props;\n        const item = items[index];\n\n        if (item.isDisabled || item.isLoading) {\n            return;\n        }\n\n        if (item.type === ItemTypes.FOLDER) {\n            this.enterFolder(item);\n        } else {\n            onChooseItems([item]);\n        }\n    };\n\n    handleItemNameClick = (event, index) => {\n        const { items } = this.props;\n        const item = items[index];\n\n        if (item.type !== ItemTypes.FOLDER) {\n            return;\n        }\n\n        // Prevent the event from bubbling (so our row click handler doesn't fire)\n        event.preventDefault();\n        event.stopPropagation();\n\n        this.enterFolder(item);\n    };\n\n    toggleSelectedItem = (selectedItems, item) => {\n        const result = { ...selectedItems };\n        if (result[item.id]) {\n            delete result[item.id];\n        } else {\n            result[item.id] = item;\n        }\n\n        return result;\n    };\n\n    renderItemListEmptyState = () => {\n        const { foldersPath, isInSearchMode } = this.state;\n        const isViewingSearchResults = isInSearchMode && foldersPath.length === 1;\n\n        return <ContentExplorerEmptyState isSearch={isViewingSearchResults} />;\n    };\n\n    render() {\n        const {\n            actionButtonsProps,\n            cancelButtonProps,\n            chooseButtonProps,\n            chooseButtonText,\n            className,\n            contentExplorerMode,\n            customInput,\n            headerActionsAccessory,\n            onChooseItems,\n            onMoveItem,\n            onCopyItem,\n            onCancelButtonClick,\n            onCreateNewFolderButtonClick,\n            showCreateNewFolderButton,\n            isChooseButtonLoading,\n            isCopyButtonLoading,\n            isCreateNewFolderAllowed,\n            isMoveButtonLoading,\n            items,\n            numItemsPerPage,\n            numTotalItems,\n            onLoadMoreItems,\n            itemIconRenderer,\n            itemNameLinkRenderer,\n            itemButtonRenderer,\n            listWidth,\n            listHeight,\n            searchInputProps,\n            ...rest\n        } = this.props;\n        const { isInSearchMode, foldersPath, selectedItems } = this.state;\n        const isViewingSearchResults = isInSearchMode && foldersPath.length === 1;\n        const currentFolder = this.getCurrentFolder();\n        const contentExplorerProps = omit(rest, [\n            'initialFoldersPath',\n            'onEnterFolder',\n            'onSelectItem',\n            'onSearchSubmit',\n            'onExitSearch',\n        ]);\n\n        const selectedItemsIds = Object.keys(selectedItems);\n        let areActionButtonsDisabled;\n        // NOTE: it almost feels like this whole section should be inside the\n        // ContentExplorerActionButtons instead. There's a lot of implicit knowledge\n        // of what the action buttons are and what they should be doing.\n        if (contentExplorerMode === ContentExplorerModes.MULTI_SELECT) {\n            // NOTE:o nly expecting to have 1 (choose) button so as long as something\n            // is selected and that item's isActionDisabled is false, we enable the action button\n            areActionButtonsDisabled =\n                selectedItemsIds.length === 0 ||\n                (selectedItemsIds.length === 1 && selectedItems[selectedItemsIds[0]].isActionDisabled);\n        } else if (isViewingSearchResults || contentExplorerMode === ContentExplorerModes.SELECT_FILE) {\n            // Buttons are only enabled when an item is selected\n            // When viewing search results, there is no \"current folder\"\n            // When selecting a file, the file can only selected from the list\n            areActionButtonsDisabled =\n                selectedItemsIds.length === 0 || selectedItems[selectedItemsIds[0]].isActionDisabled;\n        } else {\n            // Buttons are enabled using the selected item or the current folder if no item is selected\n            areActionButtonsDisabled =\n                selectedItemsIds.length > 0\n                    ? selectedItems[selectedItemsIds[0]].isActionDisabled\n                    : currentFolder.isActionDisabled;\n        }\n\n        return (\n            // eslint-disable-next-line jsx-a11y/no-static-element-interactions, jsx-a11y/click-events-have-key-events\n            <div\n                className={classNames('content-explorer', className)}\n                onClick={this.handleContentExplorerClick}\n                ref={ref => {\n                    this.domNode = ref;\n                }}\n                {...contentExplorerProps}\n            >\n                <ContentExplorerHeaderActions\n                    contentExplorerMode={contentExplorerMode}\n                    customInput={customInput}\n                    foldersPath={foldersPath}\n                    isCreateNewFolderAllowed={isCreateNewFolderAllowed}\n                    onCreateNewFolderButtonClick={onCreateNewFolderButtonClick}\n                    onFoldersPathUpdated={this.handleFoldersPathUpdated}\n                    onEnterFolder={this.enterFolder}\n                    onExitSearch={this.handleExitSearch}\n                    onSearchSubmit={this.handleSearchSubmit}\n                    searchInputProps={searchInputProps}\n                    showCreateNewFolderButton={showCreateNewFolderButton}\n                >\n                    {headerActionsAccessory}\n                </ContentExplorerHeaderActions>\n                <ItemList\n                    contentExplorerMode={contentExplorerMode}\n                    height={listHeight}\n                    itemButtonRenderer={itemButtonRenderer}\n                    itemIconRenderer={itemIconRenderer}\n                    itemNameLinkRenderer={itemNameLinkRenderer}\n                    items={items}\n                    noItemsRenderer={this.renderItemListEmptyState}\n                    numItemsPerPage={numItemsPerPage}\n                    numTotalItems={numTotalItems}\n                    onItemClick={this.handleItemClick}\n                    onItemDoubleClick={this.handleItemDoubleClick}\n                    onItemNameClick={this.handleItemNameClick}\n                    onLoadMoreItems={onLoadMoreItems}\n                    selectedItems={selectedItems}\n                    width={listWidth}\n                />\n                <ContentExplorerActionButtons\n                    actionButtonsProps={actionButtonsProps}\n                    areButtonsDisabled={areActionButtonsDisabled}\n                    cancelButtonProps={cancelButtonProps}\n                    chooseButtonProps={chooseButtonProps}\n                    chooseButtonText={chooseButtonText}\n                    contentExplorerMode={contentExplorerMode}\n                    currentFolder={currentFolder}\n                    isChooseButtonLoading={isChooseButtonLoading}\n                    isCopyButtonLoading={isCopyButtonLoading}\n                    isMoveButtonLoading={isMoveButtonLoading}\n                    onCancelClick={onCancelButtonClick}\n                    onChooseClick={onChooseItems}\n                    onCopyClick={onCopyItem}\n                    onMoveClick={onMoveItem}\n                    selectedItems={selectedItems}\n                />\n            </div>\n        );\n    }\n}\n\nexport default ContentExplorer;\n"],"file":"ContentExplorer.js"}