{"version":3,"sources":["../../../../src/features/content-explorer/content-explorer/ContentExplorerActionButtons.js"],"names":["PropTypes","React","FormattedMessage","Button","PrimaryButton","ContentExplorerModePropType","FolderPropType","ItemsMapPropType","ContentExplorerModes","messages","getChosenItemsFromSelectedItems","selectedItems","chosenItems","selectedItemsIds","Object","keys","forEach","id","isActionDisabled","push","ContentExplorerActionButtons","actionButtonsProps","areButtonsDisabled","cancelButtonProps","chooseButtonProps","chooseButtonText","contentExplorerMode","currentFolder","isChooseButtonLoading","isCopyButtonLoading","isMoveButtonLoading","onCancelClick","onChooseClick","onCopyClick","onMoveClick","onSelectedClick","handleChooseClick","length","SELECT_FOLDER","handleMoveClick","itemToMove","handleCopyClick","itemToCopy","renderStatus","statusMessage","numSelected","statusElement","MULTI_SELECT","cancel","SELECT_FILE","choose","MOVE_COPY","move","copy","propTypes","object","bool","node","isRequired","func"],"mappings":"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","sourcesContent":["import PropTypes from 'prop-types';\nimport React from 'react';\nimport { FormattedMessage } from 'react-intl';\n\nimport Button from '../../../components/button';\nimport PrimaryButton from '../../../components/primary-button';\n\nimport { ContentExplorerModePropType, FolderPropType, ItemsMapPropType } from '../prop-types';\nimport ContentExplorerModes from '../modes';\nimport messages from '../messages';\n\nexport const getChosenItemsFromSelectedItems = selectedItems => {\n    const chosenItems = [];\n    const selectedItemsIds = Object.keys(selectedItems);\n    selectedItemsIds.forEach(id => {\n        if (!selectedItems[id].isActionDisabled) {\n            chosenItems.push(selectedItems[id]);\n        }\n    });\n    return chosenItems;\n};\n\nconst ContentExplorerActionButtons = ({\n    actionButtonsProps = {},\n    areButtonsDisabled = false,\n    cancelButtonProps = {},\n    chooseButtonProps = {},\n    chooseButtonText,\n    contentExplorerMode,\n    currentFolder,\n    isChooseButtonLoading = false,\n    isCopyButtonLoading = false,\n    isMoveButtonLoading = false,\n    onCancelClick,\n    onChooseClick,\n    onCopyClick,\n    onMoveClick,\n    onSelectedClick,\n    selectedItems,\n}) => {\n    const handleChooseClick = () => {\n        let chosenItems = getChosenItemsFromSelectedItems(selectedItems);\n        if (chosenItems.length === 0 && contentExplorerMode === ContentExplorerModes.SELECT_FOLDER && currentFolder) {\n            // Choose the selected item. If no item is selected, choose the current folder.\n            chosenItems = [currentFolder];\n        }\n\n        if (onChooseClick && chosenItems.length > 0) {\n            onChooseClick(chosenItems);\n        }\n    };\n\n    const handleMoveClick = () => {\n        const selectedItemsIds = Object.keys(selectedItems);\n        // Move to the selected item. If no item is selected, move to the current folder.\n        const itemToMove = selectedItemsIds.length > 0 ? selectedItems[selectedItemsIds[0]] : currentFolder;\n\n        if (onMoveClick) {\n            onMoveClick(itemToMove);\n        }\n    };\n\n    const handleCopyClick = () => {\n        const selectedItemsIds = Object.keys(selectedItems);\n        // Copy to the selected item. If no item is selected, copy to the current folder.\n        const itemToCopy = selectedItemsIds.length > 0 ? selectedItems[selectedItemsIds[0]] : currentFolder;\n\n        if (onCopyClick) {\n            onCopyClick(itemToCopy);\n        }\n    };\n\n    const renderStatus = () => {\n        const chosenItems = getChosenItemsFromSelectedItems(selectedItems);\n        const statusMessage = (\n            <FormattedMessage {...messages.numSelected} values={{ numSelected: chosenItems.length }} />\n        );\n\n        const statusElement = onSelectedClick ? (\n            <Button className=\"status-message\" onClick={onSelectedClick}>\n                {statusMessage}\n            </Button>\n        ) : (\n            <span className=\"status-message\">{statusMessage}</span>\n        );\n\n        return contentExplorerMode === ContentExplorerModes.MULTI_SELECT && statusElement;\n    };\n\n    return (\n        <div className=\"content-explorer-action-buttons-container\" {...actionButtonsProps}>\n            {renderStatus()}\n            <Button\n                className=\"content-explorer-cancel-button\"\n                type=\"button\"\n                isDisabled={isChooseButtonLoading || isMoveButtonLoading || isCopyButtonLoading}\n                onClick={onCancelClick}\n                {...cancelButtonProps}\n            >\n                <FormattedMessage {...messages.cancel} />\n            </Button>\n            {(contentExplorerMode === ContentExplorerModes.SELECT_FILE ||\n                contentExplorerMode === ContentExplorerModes.SELECT_FOLDER ||\n                contentExplorerMode === ContentExplorerModes.MULTI_SELECT) && (\n                <PrimaryButton\n                    type=\"button\"\n                    className=\"content-explorer-choose-button\"\n                    isDisabled={areButtonsDisabled || isChooseButtonLoading}\n                    isLoading={isChooseButtonLoading}\n                    onClick={handleChooseClick}\n                    {...chooseButtonProps}\n                >\n                    {chooseButtonText || <FormattedMessage {...messages.choose} />}\n                </PrimaryButton>\n            )}\n            {contentExplorerMode === ContentExplorerModes.MOVE_COPY && (\n                <PrimaryButton\n                    key=\"move-btn\"\n                    type=\"button\"\n                    className=\"content-explorer-move-button\"\n                    onClick={handleMoveClick}\n                    isDisabled={areButtonsDisabled || isMoveButtonLoading || isCopyButtonLoading}\n                    isLoading={isMoveButtonLoading}\n                >\n                    <FormattedMessage {...messages.move} />\n                </PrimaryButton>\n            )}\n            {contentExplorerMode === ContentExplorerModes.MOVE_COPY && (\n                <PrimaryButton\n                    key=\"copy-btn\"\n                    type=\"button\"\n                    className=\"content-explorer-copy-button\"\n                    onClick={handleCopyClick}\n                    isDisabled={areButtonsDisabled || isMoveButtonLoading || isCopyButtonLoading}\n                    isLoading={isCopyButtonLoading}\n                >\n                    <FormattedMessage {...messages.copy} />\n                </PrimaryButton>\n            )}\n        </div>\n    );\n};\n\nContentExplorerActionButtons.propTypes = {\n    actionButtonsProps: PropTypes.object,\n    areButtonsDisabled: PropTypes.bool,\n    cancelButtonProps: PropTypes.object,\n    chooseButtonProps: PropTypes.object,\n    chooseButtonText: PropTypes.node,\n    contentExplorerMode: ContentExplorerModePropType.isRequired,\n    currentFolder: FolderPropType,\n    isChooseButtonLoading: PropTypes.bool,\n    isCopyButtonLoading: PropTypes.bool,\n    isMoveButtonLoading: PropTypes.bool,\n    onCancelClick: PropTypes.func,\n    onChooseClick: PropTypes.func,\n    onCopyClick: PropTypes.func,\n    onMoveClick: PropTypes.func,\n    onSelectedClick: PropTypes.func,\n    selectedItems: ItemsMapPropType.isRequired,\n};\n\nexport default ContentExplorerActionButtons;\n"],"file":"ContentExplorerActionButtons.js"}