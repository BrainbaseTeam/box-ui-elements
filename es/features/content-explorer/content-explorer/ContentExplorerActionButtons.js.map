{"version":3,"sources":["../../../../src/features/content-explorer/content-explorer/ContentExplorerActionButtons.js"],"names":["PropTypes","React","FormattedMessage","Button","PrimaryButton","ContentExplorerModePropType","FolderPropType","ItemsMapPropType","ContentExplorerModes","messages","getChosenItemsFromSelectedItems","selectedItems","chosenItems","selectedItemsIds","Object","keys","forEach","id","isActionDisabled","push","ContentExplorerActionButtons","actionButtonsProps","areButtonsDisabled","cancelButtonProps","chooseButtonProps","chooseButtonText","contentExplorerMode","currentFolder","isChooseButtonLoading","isCopyButtonLoading","isMoveButtonLoading","onCancelClick","onChooseClick","onCopyClick","onMoveClick","handleChooseClick","length","SELECT_FOLDER","handleMoveClick","itemToMove","handleCopyClick","itemToCopy","renderStatus","MULTI_SELECT","numSelected","cancel","SELECT_FILE","choose","MOVE_COPY","move","copy","propTypes","object","bool","node","isRequired","func"],"mappings":"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","sourcesContent":["import PropTypes from 'prop-types';\nimport React from 'react';\nimport { FormattedMessage } from 'react-intl';\n\nimport Button from '../../../components/button';\nimport PrimaryButton from '../../../components/primary-button';\n\nimport { ContentExplorerModePropType, FolderPropType, ItemsMapPropType } from '../prop-types';\nimport ContentExplorerModes from '../modes';\nimport messages from '../messages';\n\nexport const getChosenItemsFromSelectedItems = selectedItems => {\n    const chosenItems = [];\n    const selectedItemsIds = Object.keys(selectedItems);\n    selectedItemsIds.forEach(id => {\n        if (!selectedItems[id].isActionDisabled) {\n            chosenItems.push(selectedItems[id]);\n        }\n    });\n    return chosenItems;\n};\n\nconst ContentExplorerActionButtons = ({\n    actionButtonsProps = {},\n    areButtonsDisabled = false,\n    cancelButtonProps = {},\n    chooseButtonProps = {},\n    chooseButtonText,\n    contentExplorerMode,\n    currentFolder,\n    isChooseButtonLoading = false,\n    isCopyButtonLoading = false,\n    isMoveButtonLoading = false,\n    onCancelClick,\n    onChooseClick,\n    onCopyClick,\n    onMoveClick,\n    selectedItems,\n}) => {\n    const handleChooseClick = () => {\n        let chosenItems = getChosenItemsFromSelectedItems(selectedItems);\n        if (chosenItems.length === 0 && contentExplorerMode === ContentExplorerModes.SELECT_FOLDER && currentFolder) {\n            // Choose the selected item. If no item is selected, choose the current folder.\n            chosenItems = [currentFolder];\n        }\n\n        if (onChooseClick && chosenItems.length > 0) {\n            onChooseClick(chosenItems);\n        }\n    };\n\n    const handleMoveClick = () => {\n        const selectedItemsIds = Object.keys(selectedItems);\n        // Move to the selected item. If no item is selected, move to the current folder.\n        const itemToMove = selectedItemsIds.length > 0 ? selectedItems[selectedItemsIds[0]] : currentFolder;\n\n        if (onMoveClick) {\n            onMoveClick(itemToMove);\n        }\n    };\n\n    const handleCopyClick = () => {\n        const selectedItemsIds = Object.keys(selectedItems);\n        // Copy to the selected item. If no item is selected, copy to the current folder.\n        const itemToCopy = selectedItemsIds.length > 0 ? selectedItems[selectedItemsIds[0]] : currentFolder;\n\n        if (onCopyClick) {\n            onCopyClick(itemToCopy);\n        }\n    };\n\n    const renderStatus = () => {\n        const chosenItems = getChosenItemsFromSelectedItems(selectedItems);\n        return (\n            contentExplorerMode === ContentExplorerModes.MULTI_SELECT && (\n                <span className=\"status-message\">\n                    <FormattedMessage {...messages.numSelected} values={{ numSelected: chosenItems.length }} />\n                </span>\n            )\n        );\n    };\n\n    return (\n        <div className=\"content-explorer-action-buttons-container\" {...actionButtonsProps}>\n            {renderStatus()}\n            <Button\n                className=\"content-explorer-cancel-button\"\n                type=\"button\"\n                isDisabled={isChooseButtonLoading || isMoveButtonLoading || isCopyButtonLoading}\n                onClick={onCancelClick}\n                {...cancelButtonProps}\n            >\n                {<FormattedMessage {...messages.cancel} />}\n            </Button>\n            {(contentExplorerMode === ContentExplorerModes.SELECT_FILE ||\n                contentExplorerMode === ContentExplorerModes.SELECT_FOLDER ||\n                contentExplorerMode === ContentExplorerModes.MULTI_SELECT) && (\n                <PrimaryButton\n                    type=\"button\"\n                    className=\"content-explorer-choose-button\"\n                    isDisabled={areButtonsDisabled || isChooseButtonLoading}\n                    isLoading={isChooseButtonLoading}\n                    onClick={handleChooseClick}\n                    {...chooseButtonProps}\n                >\n                    {chooseButtonText || <FormattedMessage {...messages.choose} />}\n                </PrimaryButton>\n            )}\n            {contentExplorerMode === ContentExplorerModes.MOVE_COPY && (\n                <PrimaryButton\n                    key=\"move-btn\"\n                    type=\"button\"\n                    className=\"content-explorer-move-button\"\n                    onClick={handleMoveClick}\n                    isDisabled={areButtonsDisabled || isMoveButtonLoading || isCopyButtonLoading}\n                    isLoading={isMoveButtonLoading}\n                >\n                    <FormattedMessage {...messages.move} />\n                </PrimaryButton>\n            )}\n            {contentExplorerMode === ContentExplorerModes.MOVE_COPY && (\n                <PrimaryButton\n                    key=\"copy-btn\"\n                    type=\"button\"\n                    className=\"content-explorer-copy-button\"\n                    onClick={handleCopyClick}\n                    isDisabled={areButtonsDisabled || isMoveButtonLoading || isCopyButtonLoading}\n                    isLoading={isCopyButtonLoading}\n                >\n                    <FormattedMessage {...messages.copy} />\n                </PrimaryButton>\n            )}\n        </div>\n    );\n};\n\nContentExplorerActionButtons.propTypes = {\n    actionButtonsProps: PropTypes.object,\n    areButtonsDisabled: PropTypes.bool,\n    cancelButtonProps: PropTypes.object,\n    chooseButtonProps: PropTypes.object,\n    chooseButtonText: PropTypes.node,\n    contentExplorerMode: ContentExplorerModePropType.isRequired,\n    currentFolder: FolderPropType,\n    isChooseButtonLoading: PropTypes.bool,\n    isCopyButtonLoading: PropTypes.bool,\n    isMoveButtonLoading: PropTypes.bool,\n    onCancelClick: PropTypes.func,\n    onChooseClick: PropTypes.func,\n    onCopyClick: PropTypes.func,\n    onMoveClick: PropTypes.func,\n    selectedItems: ItemsMapPropType.isRequired,\n};\n\nexport default ContentExplorerActionButtons;\n"],"file":"ContentExplorerActionButtons.js"}