{"version":3,"sources":["../../src/api/Search.js"],"names":["flatten","FOLDER_FIELDS_TO_FETCH","getBadItemError","Base","FileAPI","FolderAPI","WebLinkAPI","CACHE_PREFIX_SEARCH","FIELD_RELEVANCE","FIELD_REPRESENTATIONS","X_REP_HINT_HEADER_DIMENSIONS_DEFAULT","SORT_DESC","ERROR_CODE_SEARCH","Search","data","isDestroyed","entries","total_count","limit","offset","Array","isArray","flattened","options","itemCache","concat","getCache","set","key","item_collection","finish","error","errorCallback","errorCode","query","encodeURIComponent","id","getBaseApiUrl","cache","has","search","get","collection","items","map","percentLoaded","sortBy","sortDirection","totalCount","successCallback","Promise","reject","fields","requestFields","xhr","url","getUrl","params","ancestor_folder_ids","toString","headers","includes","then","searchSuccessHandler","catch","searchErrorHandler","getCacheKey","getEncodedQuery","forceFetch","unset","isLoaded","searchRequest"],"mappings":"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","sourcesContent":["/**\n * @flow\n * @file Helper for the box search api\n * @author Box\n */\n\nimport flatten from '../utils/flatten';\nimport { FOLDER_FIELDS_TO_FETCH } from '../utils/fields';\nimport { getBadItemError } from '../utils/error';\nimport Base from './Base';\nimport FileAPI from './File';\nimport FolderAPI from './Folder';\nimport WebLinkAPI from './WebLink';\nimport {\n    CACHE_PREFIX_SEARCH,\n    FIELD_RELEVANCE,\n    FIELD_REPRESENTATIONS,\n    X_REP_HINT_HEADER_DIMENSIONS_DEFAULT,\n    SORT_DESC,\n    ERROR_CODE_SEARCH,\n} from '../constants';\nimport type { RequestOptions, ElementsErrorCallback } from '../common/types/api';\nimport type { FlattenedBoxItem, FlattenedBoxItemCollection, Collection, BoxItemCollection } from '../common/types/core';\nimport type APICache from '../utils/Cache';\n\nclass Search extends Base {\n    /**\n     * @property {number}\n     */\n    limit: number;\n\n    /**\n     * @property {number}\n     */\n    offset: number;\n\n    /**\n     * @property {string}\n     */\n    id: string;\n\n    /**\n     * @property {string}\n     */\n    key: string;\n\n    /**\n     * @property {string}\n     */\n    query: string;\n\n    /**\n     * @property {Function}\n     */\n    successCallback: Function;\n\n    /**\n     * @property {Function}\n     */\n    errorCallback: ElementsErrorCallback;\n\n    /**\n     * @property {Array}\n     */\n    itemCache: string[];\n\n    /**\n     * Creates a key for the cache\n     *\n     * @param {string} id folder id\n     * @param {string} query search string\n     * @return {string} key\n     */\n    getEncodedQuery(query: string): string {\n        return encodeURIComponent(query);\n    }\n\n    /**\n     * Creates a key for the cache\n     *\n     * @param {string} id folder id\n     * @param {string} query search string\n     * @return {string} key\n     */\n    getCacheKey(id: string, query: string): string {\n        return `${CACHE_PREFIX_SEARCH}${id}|${query}`;\n    }\n\n    /**\n     * URL for search api\n     *\n     * @param {string} [id] optional file id\n     * @return {string} base url for files\n     */\n    getUrl(): string {\n        return `${this.getBaseApiUrl()}/search`;\n    }\n\n    /**\n     * Tells if a search results has its items all loaded\n     *\n     * @return {boolean} if items are loaded\n     */\n    isLoaded(): boolean {\n        const cache: APICache = this.getCache();\n        return cache.has(this.key);\n    }\n\n    /**\n     * Returns the results\n     *\n     * @return {void}\n     */\n    finish(): void {\n        if (this.isDestroyed()) {\n            return;\n        }\n\n        const cache: APICache = this.getCache();\n        const search: FlattenedBoxItem = cache.get(this.key);\n        const { item_collection }: FlattenedBoxItem = search;\n        if (!item_collection) {\n            throw getBadItemError();\n        }\n\n        const { entries, total_count }: FlattenedBoxItemCollection = item_collection;\n        if (!Array.isArray(entries) || typeof total_count !== 'number') {\n            throw getBadItemError();\n        }\n\n        const collection: Collection = {\n            id: this.id,\n            items: entries.map((key: string) => cache.get(key)),\n            offset: this.offset,\n            percentLoaded: 100,\n            sortBy: FIELD_RELEVANCE, // Results are always sorted by relevance\n            sortDirection: SORT_DESC, // Results are always sorted descending\n            totalCount: total_count,\n        };\n        this.successCallback(collection);\n    }\n\n    /**\n     * Handles the folder search response\n     *\n     * @param {Object} response\n     * @return {void}\n     */\n    searchSuccessHandler = ({ data }: { data: BoxItemCollection }): void => {\n        if (this.isDestroyed()) {\n            return;\n        }\n\n        const { entries, total_count, limit, offset }: BoxItemCollection = data;\n        if (\n            !Array.isArray(entries) ||\n            typeof total_count !== 'number' ||\n            typeof limit !== 'number' ||\n            typeof offset !== 'number'\n        ) {\n            throw getBadItemError();\n        }\n\n        const flattened: string[] = flatten(\n            entries,\n            new FolderAPI(this.options),\n            new FileAPI(this.options),\n            new WebLinkAPI(this.options),\n        );\n        this.itemCache = (this.itemCache || []).concat(flattened);\n\n        this.getCache().set(this.key, {\n            item_collection: { ...data, entries: this.itemCache },\n        });\n\n        this.finish();\n    };\n\n    /**\n     * Handles the search error\n     *\n     * @param {Error} error fetch error\n     * @return {void}\n     */\n    searchErrorHandler = (error: Error): void => {\n        if (this.isDestroyed()) {\n            return;\n        }\n\n        this.errorCallback(error, this.errorCode);\n    };\n\n    /**\n     * Does the network request\n     *\n     * @param {RequestOptions} options - options for request\n     * @return {void}\n     */\n    searchRequest(options: RequestOptions = {}): Promise<void> {\n        if (this.isDestroyed()) {\n            return Promise.reject();\n        }\n\n        const { fields } = options;\n        const requestFields = fields || FOLDER_FIELDS_TO_FETCH;\n\n        this.errorCode = ERROR_CODE_SEARCH;\n        return this.xhr\n            .get({\n                url: this.getUrl(),\n                params: {\n                    offset: this.offset,\n                    query: this.query,\n                    ancestor_folder_ids: this.id,\n                    limit: this.limit,\n                    fields: requestFields.toString(),\n                },\n                headers: requestFields.includes(FIELD_REPRESENTATIONS)\n                    ? {\n                          'X-Rep-Hints': X_REP_HINT_HEADER_DIMENSIONS_DEFAULT,\n                      }\n                    : {},\n            })\n            .then(this.searchSuccessHandler)\n            .catch(this.searchErrorHandler);\n    }\n\n    /**\n     * Gets search results\n     *\n     * @param {string} id - folder id\n     * @param {string} query - search string\n     * @param {number} limit - maximum number of items to retrieve\n     * @param {number} offset - starting index from which to retrieve items\n     * @param {Function} successCallback - Function to call with results\n     * @param {Function} errorCallback - Function to call with errors\n     * @param {boolean|void} [options.forceFetch] - Bypasses the cache\n     * @return {void}\n     */\n    search(\n        id: string,\n        query: string,\n        limit: number,\n        offset: number,\n        successCallback: Function,\n        errorCallback: ElementsErrorCallback,\n        options: Object = {},\n    ): void {\n        if (this.isDestroyed()) {\n            return;\n        }\n\n        // Save references\n        this.limit = limit;\n        this.offset = offset;\n        this.query = query;\n        this.id = id;\n        this.key = this.getCacheKey(id, this.getEncodedQuery(this.query));\n        this.successCallback = successCallback;\n        this.errorCallback = errorCallback;\n\n        // Clear the cache if needed\n        if (options.forceFetch) {\n            this.getCache().unset(this.key);\n        }\n\n        // Return the Cache value if it exists\n        if (this.isLoaded()) {\n            this.finish();\n            return;\n        }\n\n        // Make the XHR request\n        this.searchRequest(options);\n    }\n}\n\nexport default Search;\n"],"file":"Search.js"}