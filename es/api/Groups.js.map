{"version":3,"sources":["../../src/api/Groups.js"],"names":["noop","Base","Groups","id","getBaseApiUrl","errorCallback","successCallback","group","file","Promise","resolve","reject","get","url","getUrlForGroupCount","requestData","params","limit"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;;;;;AAKA,OAAOA,IAAP,MAAiB,aAAjB;AACA,OAAOC,IAAP,MAAiB,QAAjB;;IAGMC,M;;;;;;;;;;;;;;AACF;;;;;;wCAMoBC,E,EAAoB;AACpC,uBAAU,KAAKC,aAAL,EAAV,qBAAyCD,EAAzC;AACH;AAED;;;;;;;;;;;wCAkBqC;AAAA;;AAAA,oCATjCE,aASiC;AAAA,UATjCA,cASiC,mCATjBL,IASiB;AAAA,sCARjCM,eAQiC;AAAA,UARjCA,gBAQiC,qCARfN,IAQe;AAAA,UAPjCO,KAOiC,QAPjCA,KAOiC;AAAA,UANjCC,IAMiC,QANjCA,IAMiC;;AACjC,aAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV;AAAA,eACf,KAAI,CAACC,GAAL,CAAS;AACLT,UAAAA,EAAE,EAAEK,IAAI,CAACL,EADJ;AAELU,UAAAA,GAAG,EAAE,KAAI,CAACC,mBAAL,CAAyBP,KAAK,CAACJ,EAA/B,CAFA;AAGLG,UAAAA,eAAe,EAAE,2BAAa;AAC1BA,YAAAA,gBAAe,MAAf;;AACAI,YAAAA,OAAO,MAAP;AACH,WANI;AAOLL,UAAAA,aAAa,EAAE,yBAAa;AACxBA,YAAAA,cAAa,MAAb;;AACAM,YAAAA,MAAM;AACT,WAVI;AAWLI,UAAAA,WAAW,EAAE;AAAEC,YAAAA,MAAM,EAAE;AAAEC,cAAAA,KAAK,EAAE;AAAT;AAAV;AAXR,SAAT,CADe;AAAA,OAAZ,CAAP;AAeH;;;;EA7CgBhB,I;;AAgDrB,eAAeC,MAAf","sourcesContent":["/**\n * @flow\n * @file Helper for the box Groups API\n * @author Box\n */\nimport noop from 'lodash/noop';\nimport Base from './Base';\nimport type { ElementsErrorCallback } from '../common/types/api';\n\nclass Groups extends Base {\n    /**\n     * API URL to get group count\n     *\n     * @param {string} id a box group ID\n     * @return {string} formatted URL for retrieving the membership information\n     */\n    getUrlForGroupCount(id: string): string {\n        return `${this.getBaseApiUrl()}/groups/${id}/memberships`;\n    }\n\n    /**\n     * API for creating a comment on a file\n     *\n     * @param {string} id a box group ID\n     * @param {Function} [successCallback] callback for handling a valid server response\n     * @param {Function} [errorCallback] handle errors raised by backend or connection errors\n     * @return {Promise<{}>} Promise which resolves with the payload, including the total_count\n     */\n    getGroupCount({\n        errorCallback = noop,\n        successCallback = noop,\n        group,\n        file,\n    }: {\n        errorCallback?: ElementsErrorCallback,\n        file: { id: string },\n        group: { id: string },\n        successCallback?: Function,\n    }): Promise<{ total_count: number }> {\n        return new Promise((resolve, reject) =>\n            this.get({\n                id: file.id,\n                url: this.getUrlForGroupCount(group.id),\n                successCallback: (...args) => {\n                    successCallback(...args);\n                    resolve(...args);\n                },\n                errorCallback: (...args) => {\n                    errorCallback(...args);\n                    reject();\n                },\n                requestData: { params: { limit: 1 } },\n            }),\n        );\n    }\n}\n\nexport default Groups;\n"],"file":"Groups.js"}