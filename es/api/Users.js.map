{"version":3,"sources":["../../src/api/Users.js"],"names":["queryString","TokenService","getTypedFileId","Base","ERROR_CODE_FETCH_CURRENT_USER","Users","getBaseApiUrl","id","Error","userId","fileId","cache","getCache","has","get","getReadToken","options","token","accessToken","access_token","pic_type","urlParams","stringify","url","getAvatarUrl","set","successCallback","errorCallback","requestData","errorCode"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;AAMA,OAAOA,WAAP,MAAwB,cAAxB;AACA,OAAOC,YAAP,MAAyB,uBAAzB;AACA,SAASC,cAAT,QAA+B,eAA/B;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,SAASC,6BAAT,QAA8C,cAA9C;;IAIMC,K;;;;;;;;;;;;;;AACF;;;;;6BAKiB;AACb,uBAAU,KAAKC,aAAL,EAAV;AACH;AAED;;;;;;;;;iCAMaC,E,EAAoB;AAC7B,UAAI,CAACA,EAAL,EAAS;AACL,cAAM,IAAIC,KAAJ,CAAU,iBAAV,CAAN;AACH;;AAED,uBAAU,KAAKF,aAAL,EAAV,oBAAwCC,EAAxC;AACH;AAED;;;;;;;;;;;;;+CAOkCE,M,EAAkBC,M;;;;;;oBAC3CD,M;;;;;iDACM,I;;;AAGX;AACME,gBAAAA,K,GAAQ,KAAKC,QAAL,E;;qBACVD,KAAK,CAACE,GAAN,CAAUJ,MAAV,C;;;;;iDACOE,KAAK,CAACG,GAAN,CAAUL,MAAV,C;;;;uBAG6BR,YAAY,CAACc,YAAb,CAA0Bb,cAAc,CAACQ,MAAD,CAAxC,EAAkD,KAAKM,OAAL,CAAaC,KAA/D,C;;;AAAlCC,gBAAAA,W;;sBAEF,OAAOA,WAAP,KAAuB,Q;;;;;AACjBF,gBAAAA,O,GAAU;AACZG,kBAAAA,YAAY,EAAED,WADF;AAEZE,kBAAAA,QAAQ,EAAE;AAFE,iB;AAIVC,gBAAAA,S,GAAYrB,WAAW,CAACsB,SAAZ,CAAsBN,OAAtB,C;AACZO,gBAAAA,G,aAAS,KAAKC,YAAL,CAAkBf,MAAlB,C,cAA6BY,S;AAC5CV,gBAAAA,KAAK,CAACc,GAAN,CAAUhB,MAAV,EAAkBc,GAAlB;iDACOA,G;;;iDAGJ,I;;;;;;;;;;;;;;;;AAGX;;;;;;;;;;;;4BAUIhB,E,EACAmB,e,EACAC,a,EAEI;AAAA,UADJC,WACI,uEADkB,EAClB;AACJ,WAAKC,SAAL,GAAiBzB,6BAAjB;AACA,WAAKU,GAAL,CAAS;AACLP,QAAAA,EAAE,EAAFA,EADK;AAELmB,QAAAA,eAAe,EAAfA,eAFK;AAGLC,QAAAA,aAAa,EAAbA,aAHK;AAILC,QAAAA,WAAW,EAAXA;AAJK,OAAT;AAMH;;;;EAhFezB,I;;AAmFpB,eAAeE,KAAf","sourcesContent":["/**\n * @flow\n * @file Helper for the box Users API\n * @author Box\n */\n\nimport queryString from 'query-string';\nimport TokenService from '../utils/TokenService';\nimport { getTypedFileId } from '../utils/file';\nimport Base from './Base';\nimport { ERROR_CODE_FETCH_CURRENT_USER } from '../constants';\nimport type { ElementsErrorCallback } from '../common/types/api';\nimport type { TokenLiteral } from '../common/types/core';\n\nclass Users extends Base {\n    /**\n     * API URL for Users\n     *\n     * @returns {string} base url for users\n     */\n    getUrl(): string {\n        return `${this.getBaseApiUrl()}/users/me`;\n    }\n\n    /**\n     * API URL for Users avatar\n     *\n     * @param {string} id - A box user id.\n     * @returns {string} base url for users\n     */\n    getAvatarUrl(id: string): string {\n        if (!id) {\n            throw new Error('Missing user id');\n        }\n\n        return `${this.getBaseApiUrl()}/users/${id}/avatar`;\n    }\n\n    /**\n     * Gets authenticated user avatar URL from cache or by getting new token\n     *\n     * @param {string} userId the user id\n     * @param {string} fileId the file id\n     * @returns {string} the user avatar URL string for a given user with access token attached\n     */\n    async getAvatarUrlWithAccessToken(userId?: ?string, fileId: string): Promise<?string> {\n        if (!userId) {\n            return null;\n        }\n\n        // treat cache as key-value pairs of { userId: avatarUrl }\n        const cache = this.getCache();\n        if (cache.has(userId)) {\n            return cache.get(userId);\n        }\n\n        const accessToken: TokenLiteral = await TokenService.getReadToken(getTypedFileId(fileId), this.options.token);\n\n        if (typeof accessToken === 'string') {\n            const options = {\n                access_token: accessToken,\n                pic_type: 'large',\n            };\n            const urlParams = queryString.stringify(options);\n            const url = `${this.getAvatarUrl(userId)}?${urlParams}`;\n            cache.set(userId, url);\n            return url;\n        }\n\n        return null;\n    }\n\n    /**\n     * API for fetching a user\n     *\n     * @param {string} id - a Box item id\n     * @param {Function} successCallback - Success callback\n     * @param {Function} errorCallback - Error callback\n     * @param {Object} requestData - additional request data\n     * @returns {Promise<void>}\n     */\n    getUser(\n        id: string,\n        successCallback: Function,\n        errorCallback: ElementsErrorCallback,\n        requestData: Object = {},\n    ): void {\n        this.errorCode = ERROR_CODE_FETCH_CURRENT_USER;\n        this.get({\n            id,\n            successCallback,\n            errorCallback,\n            requestData,\n        });\n    }\n}\n\nexport default Users;\n"],"file":"Users.js"}