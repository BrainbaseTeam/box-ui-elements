{"version":3,"sources":["../../src/api/AppIntegrations.js"],"names":["Base","TYPE_FILE","ERROR_CODE_EXECUTE_INTEGRATION","AppIntegrations","integrationId","Error","getBaseApiUrl","fileId","successCallback","errorCallback","errorCode","executeURL","getUrl","body","data","item","id","type","post","url"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;;;;;AAMA,OAAOA,IAAP,MAAiB,QAAjB;AACA,SAASC,SAAT,EAAoBC,8BAApB,QAA0D,cAA1D;;IAGMC,e;;;;;;;;;;;;;;AACF;;;;;;2BAMOC,a,EAA+B;AAClC,UAAI,CAACA,aAAL,EAAoB;AAChB,cAAM,IAAIC,KAAJ,CAAU,6BAAV,CAAN;AACH;;AAED,uBAAU,KAAKC,aAAL,EAAV,+BAAmDF,aAAnD;AACH;AAED;;;;;;;;;;4BAQIA,a,EACAG,M,EACAC,e,EACAC,a,EACI;AACJ,UAAI,CAACL,aAAL,EAAoB;AAChB,cAAM,IAAIC,KAAJ,CAAU,yBAAV,CAAN;AACH;;AAED,UAAI,CAACE,MAAL,EAAa;AACT,cAAM,IAAIF,KAAJ,CAAU,kBAAV,CAAN;AACH;;AAED,WAAKK,SAAL,GAAiBR,8BAAjB;AACA,UAAMS,UAAU,aAAM,KAAKC,MAAL,CAAYR,aAAZ,CAAN,aAAhB;AACA,UAAMS,IAAI,GAAG;AACTC,QAAAA,IAAI,EAAE;AACFC,UAAAA,IAAI,EAAE;AACFC,YAAAA,EAAE,EAAET,MADF;AAEFU,YAAAA,IAAI,EAAEhB;AAFJ;AADJ;AADG,OAAb;AASA,WAAKiB,IAAL,CAAU;AACNF,QAAAA,EAAE,EAAET,MADE;AAENY,QAAAA,GAAG,EAAER,UAFC;AAGNG,QAAAA,IAAI,EAAED,IAHA;AAINL,QAAAA,eAAe,EAAfA,eAJM;AAKNC,QAAAA,aAAa,EAAbA;AALM,OAAV;AAOH;;;;EAtDyBT,I;;AAyD9B,eAAeG,eAAf","sourcesContent":["/**\n * @flow\n * @file Helper for the app_integrations API endpoint\n * @author Box\n */\n\nimport Base from './Base';\nimport { TYPE_FILE, ERROR_CODE_EXECUTE_INTEGRATION } from '../constants';\nimport type { ElementsErrorCallback } from '../common/types/api';\n\nclass AppIntegrations extends Base {\n    /**\n     * API URL for Open With\n     *\n     * @param {string} [integrationId] - a box integration app ID\n     * @return {string} base url for app integrations\n     */\n    getUrl(integrationId: string): string {\n        if (!integrationId) {\n            throw new Error('Missing app integration id!');\n        }\n\n        return `${this.getBaseApiUrl()}/app_integrations/${integrationId}`;\n    }\n\n    /**\n     * API endpoint to execute an integration, given an ID\n     *\n     * @param {string} integrationID - An app integration ID\n     * @param {string} fileID - A file ID\n     * @return {string} base url for files\n     */\n    execute(\n        integrationId: ?string,\n        fileId: ?string,\n        successCallback: Function,\n        errorCallback: ElementsErrorCallback,\n    ): void {\n        if (!integrationId) {\n            throw new Error('Missing integration id!');\n        }\n\n        if (!fileId) {\n            throw new Error('Missing file id!');\n        }\n\n        this.errorCode = ERROR_CODE_EXECUTE_INTEGRATION;\n        const executeURL = `${this.getUrl(integrationId)}/execute`;\n        const body = {\n            data: {\n                item: {\n                    id: fileId,\n                    type: TYPE_FILE,\n                },\n            },\n        };\n\n        this.post({\n            id: fileId,\n            url: executeURL,\n            data: body,\n            successCallback,\n            errorCallback,\n        });\n    }\n}\n\nexport default AppIntegrations;\n"],"file":"AppIntegrations.js"}