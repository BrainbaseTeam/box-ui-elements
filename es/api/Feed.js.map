{"version":3,"sources":["../../src/api/Feed.js"],"names":["uniqueId","noop","getBadItemError","getBadUserError","isUserCorrectableError","commonMessages","messages","sortFeedItems","Base","AnnotationsAPI","CommentsAPI","VersionsAPI","TasksNewAPI","GroupsAPI","TaskCollaboratorsAPI","TaskLinksAPI","AppActivityAPI","ERROR_CODE_CREATE_TASK","ERROR_CODE_UPDATE_TASK","ERROR_CODE_GROUP_EXCEEDS_LIMIT","HTTP_STATUS_CODE_CONFLICT","IS_ERROR_DISPLAYED","TASK_NEW_APPROVED","TASK_NEW_COMPLETED","TASK_NEW_REJECTED","TASK_NEW_NOT_STARTED","TYPED_ID_FEED_PREFIX","TASK_MAX_GROUP_ASSIGNEES","TASK_NEW_INITIAL_STATUS","TASK","Feed","options","file","annotationId","text","permissions","successCallback","errorCallback","id","annotationsAPI","updateFeedItem","message","isPending","updateAnnotation","annotation","isDestroyed","e","code","updateCommentErrorCallback","createFeedError","commentUpdateErrorMessage","feedErrorCallback","successCallBack","deleteAnnotation","deleteFeedItem","bind","error","deleteCommentErrorCallback","taskId","taskCollaboratorId","taskCollaboratorStatus","collaboratorsApi","taskCollaboratorsAPI","push","taskCollaboratorPayload","status","handleError","errorMessage","taskApproveErrorMessage","taskCompleteErrorMessage","taskRejectErrorMessage","taskActionErrorTitle","updateTaskCollaborator","taskCollaborator","taskCollab","updateTaskCollaboratorSuccessCallback","updatedCollaborator","tasksNewAPI","getTask","task","groupInfoPromises","addedAssignees","filter","assignee","item","type","map","groupId","getGroupCount","group","Promise","all","groupCounts","hasAnyGroupCountExceeded","some","groupInfo","total_count","warning","resolve","reject","updateTaskWithDeps","taskData","commentId","commentsAPI","deleteComment","commentDeleteErrorMessage","currentUser","assignees","taskType","dueAt","completionRule","uuid","dueAtString","dueAtDate","Date","toISOString","pendingTask","created_by","target","role","completion_rule","created_at","due_at","description","assigned_to","entries","avatar_url","can_delete","can_update","limit","next_marker","can_create_task_collaborator","can_create_task_link","task_links","task_type","taskPayload","then","createTaskWithDeps","taskWithDepsData","addPendingItem","length","catch","deleteTask","taskDeleteErrorMessage","cachedItems","getCachedItems","feedItems","items","feedItem","setCachedItems","hasError","errors","console","itemBase","date","pendingFeedItem","modified_at","feedItemsWithPendingItem","commentData","tagged_message","commentCreateConflictMessage","commentCreateErrorMessage","updates","updatedFeedItems","hasMention","taggedMessage","createComment","comment","createCommentSuccessCallback","createCommentErrorCallback","updateComment","appActivityId","appActivityAPI","deleteAppActivity","deleteAppActivityErrorCallback","appActivityDeleteErrorMessage","taskLinksAPI","newAnnotation","cache","getCache","cacheKey","getCacheKey","get","set","shouldRefreshCache","onError","shouldShowAnnotations","shouldShowAppActivity","annotationsPromise","fetchAnnotations","versionsPromise","fetchVersions","currentVersionPromise","fetchCurrentVersion","commentsPromise","fetchComments","tasksPromise","fetchTasksNew","appActivityPromise","fetchAppActivity","versions","currentVersion","versionsWithCurrent","versionsAPI","addCurrentVersion","sortedFeedItems","getAnnotations","undefined","fetchFeedItemErrorCallback","getComments","getVersions","file_version","getVersion","getTasksForFile","err","shouldDisplayError","createTaskCollaboratorsforGroup","createTaskCollaborator","user","deleteTaskCollaborator","createTaskLink","title","errorOccured","Array","isArray","forEach","api","destroy","getAppActivity","destroyTaskCollaborators","destroyTaskLinks"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;AAKA,OAAOA,QAAP,MAAqB,iBAArB;AACA,OAAOC,IAAP,MAAiB,aAAjB;AAEA,SAASC,eAAT,EAA0BC,eAA1B,EAA2CC,sBAA3C,QAAyE,gBAAzE;AACA,OAAOC,cAAP,MAA2B,6BAA3B;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,SAASC,aAAT,QAA8B,iBAA9B;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,cAAP,MAA2B,eAA3B;AACA,OAAOC,WAAP,MAAwB,YAAxB;AACA,OAAOC,WAAP,MAAwB,YAAxB;AACA,OAAOC,WAAP,MAAwB,kBAAxB;AACA,OAAOC,SAAP,MAAsB,UAAtB;AACA,OAAOC,oBAAP,MAAiC,2BAAjC;AACA,OAAOC,YAAP,MAAyB,mBAAzB;AACA,OAAOC,cAAP,MAA2B,eAA3B;AACA,SACIC,sBADJ,EAEIC,sBAFJ,EAGIC,8BAHJ,EAIIC,yBAJJ,EAKIC,kBALJ,EAMIC,iBANJ,EAOIC,kBAPJ,EAQIC,iBARJ,EASIC,oBATJ,EAUIC,oBAVJ,EAWIC,wBAXJ,QAYO,cAZP;AAgDA,IAAMC,uBAAuB,GAAGH,oBAAhC;AACA,IAAMI,IAAI,GAAG,MAAb;;IASMC,I;;;;;AACF;;;;AAKA;;;;AAKA;;;;AAKA;;;;AAKA;;;;AAKA;;;;AAKA;;;;AAKA;;;;AAKA;;;AAKA,gBAAYC,OAAZ,EAAiC;AAAA;;AAAA;;AAC7B,8EAAMA,OAAN;;AAD6B,uEAuCd,UACfC,IADe,EAEfC,YAFe,EAGfC,IAHe,EAIfC,WAJe,EAKfC,eALe,EAMfC,aANe,EAOR;AACP,UAAI,CAACL,IAAI,CAACM,EAAV,EAAc;AACV,cAAMpC,eAAe,EAArB;AACH;;AAED,YAAKqC,cAAL,GAAsB,IAAI9B,cAAJ,CAAmB,MAAKsB,OAAxB,CAAtB;AAEA,YAAKC,IAAL,GAAYA,IAAZ;AACA,YAAKK,aAAL,GAAqBA,aAArB;;AAEA,YAAKG,cAAL,CAAoB;AAAEC,QAAAA,OAAO,EAAEP,IAAX;AAAiBQ,QAAAA,SAAS,EAAE;AAA5B,OAApB,EAAwDT,YAAxD;;AAEA,YAAKM,cAAL,CAAoBI,gBAApB,CACI,MAAKX,IAAL,CAAUM,EADd,EAEIL,YAFJ,EAGIE,WAHJ,EAIID,IAJJ,EAKI,UAACU,UAAD,EAA4B;AACxB,cAAKJ,cAAL,mBAEWI,UAFX;AAGQF,UAAAA,SAAS,EAAE;AAHnB,YAKIT,YALJ;;AAOA,YAAI,CAAC,MAAKY,WAAL,EAAL,EAAyB;AACrBT,UAAAA,eAAe,CAACQ,UAAD,CAAf;AACH;AACJ,OAhBL,EAiBI,UAACE,CAAD,EAAuBC,IAAvB,EAAwC;AACpC,cAAKC,0BAAL,CAAgCF,CAAhC,EAAmCC,IAAnC,EAAyCd,YAAzC;AACH,OAnBL;AAqBH,KA/EgC;;AAAA,iFAyFJ,UAACa,CAAD,EAAsBC,IAAtB,EAAoCT,EAApC,EAAmD;AAC5E,YAAKE,cAAL,CAAoB,MAAKS,eAAL,CAAqB3C,QAAQ,CAAC4C,yBAA9B,CAApB,EAA8EZ,EAA9E;;AACA,YAAKa,iBAAL,CAAuB,IAAvB,EAA6BL,CAA7B,EAAgCC,IAAhC;AACH,KA5FgC;;AAAA,uEA8Fd,UACff,IADe,EAEfC,YAFe,EAGfE,WAHe,EAIfiB,eAJe,EAKff,aALe,EAMR;AACP,YAAKE,cAAL,GAAsB,IAAI9B,cAAJ,CAAmB,MAAKsB,OAAxB,CAAtB;;AAEA,UAAI,CAACC,IAAI,CAACM,EAAV,EAAc;AACV,cAAMpC,eAAe,EAArB;AACH;;AAED,YAAK8B,IAAL,GAAYA,IAAZ;AACA,YAAKK,aAAL,GAAqBA,aAArB;;AAEA,YAAKG,cAAL,CAAoB;AAAEE,QAAAA,SAAS,EAAE;AAAb,OAApB,EAAyCT,YAAzC;;AACA,YAAKM,cAAL,CAAoBc,gBAApB,CACI,MAAKrB,IAAL,CAAUM,EADd,EAEIL,YAFJ,EAGIE,WAHJ,EAII,MAAKmB,cAAL,CAAoBC,IAApB,gCAA+BtB,YAA/B,EAA6CmB,eAA7C,CAJJ,EAKI,UAACI,KAAD,EAA0BT,IAA1B,EAA2C;AACvC;AACA,cAAKU,0BAAL,CAAgCD,KAAhC,EAAuCT,IAAvC,EAA6Cd,YAA7C;AACH,OARL;AAUH,KAzHgC;;AAAA,6EA8UR,UACrBD,IADqB,EAErB0B,MAFqB,EAGrBC,kBAHqB,EAIrBC,sBAJqB,EAKrBxB,gBALqB,EAMrBC,aANqB,EAOd;AACP,UAAI,CAACL,IAAI,CAACM,EAAV,EAAc;AACV,cAAMpC,eAAe,EAArB;AACH;;AAED,YAAK8B,IAAL,GAAYA,IAAZ;AACA,YAAKK,aAAL,GAAqBA,aAArB;;AACA,YAAKG,cAAL,CAAoB;AAAEE,QAAAA,SAAS,EAAE;AAAb,OAApB,EAAyCgB,MAAzC;;AACA,UAAMG,gBAAgB,GAAG,IAAI/C,oBAAJ,CAAyB,MAAKiB,OAA9B,CAAzB;;AACA,YAAK+B,oBAAL,CAA0BC,IAA1B,CAA+BF,gBAA/B;;AACA,UAAMG,uBAAuB,GAAG;AAC5B1B,QAAAA,EAAE,EAAEqB,kBADwB;AAE5BM,QAAAA,MAAM,EAAEL;AAFoB,OAAhC;;AAIA,UAAMM,WAAW,GAAG,SAAdA,WAAc,CAACpB,CAAD,EAAsBC,IAAtB,EAAuC;AACvD,YAAIoB,YAAJ;;AACA,gBAAQP,sBAAR;AACI,eAAKtC,iBAAL;AACI6C,YAAAA,YAAY,GAAG7D,QAAQ,CAAC8D,uBAAxB;AACA;;AACJ,eAAK7C,kBAAL;AACI4C,YAAAA,YAAY,GAAG7D,QAAQ,CAAC+D,wBAAxB;AACA;;AACJ,eAAK7C,iBAAL;AACI2C,YAAAA,YAAY,GAAG7D,QAAQ,CAACgE,sBAAxB;AACA;;AACJ;AACIH,YAAAA,YAAY,GAAG7D,QAAQ,CAAC+D,wBAAxB;AAXR;;AAaA,cAAK7B,cAAL,CAAoB,MAAKS,eAAL,CAAqBkB,YAArB,EAAmC7D,QAAQ,CAACiE,oBAA5C,CAApB,EAAuFb,MAAvF;;AACA,cAAKP,iBAAL,CAAuB,IAAvB,EAA6BL,CAA7B,EAAgCC,IAAhC;AACH,OAjBD;;AAkBAc,MAAAA,gBAAgB,CAACW,sBAAjB,CAAwC;AACpCxC,QAAAA,IAAI,EAAJA,IADoC;AAEpCyC,QAAAA,gBAAgB,EAAET,uBAFkB;AAGpC5B,QAAAA,eAAe,EAAE,yBAACsC,UAAD,EAAoC;AACjD,gBAAKC,qCAAL,CAA2CjB,MAA3C,EAAmD1B,IAAnD,EAAyD0C,UAAzD,EAAqEtC,gBAArE,EAAsF8B,WAAtF;AACH,SALmC;AAMpC7B,QAAAA,aAAa,EAAE6B;AANqB,OAAxC;AAQH,KA7XgC;;AAAA,4FAuYO,UACpCR,MADoC,EAEpC1B,IAFoC,EAGpC4C,mBAHoC,EAIpCxC,iBAJoC,EAKpCC,aALoC,EAM7B;AACP,YAAKwC,WAAL,GAAmB,IAAIjE,WAAJ,CAAgB,MAAKmB,OAArB,CAAnB;;AACA,YAAK8C,WAAL,CAAiBC,OAAjB,CAAyB;AACrBxC,QAAAA,EAAE,EAAEoB,MADiB;AAErB1B,QAAAA,IAAI,EAAJA,IAFqB;AAGrBI,QAAAA,eAAe,EAAE,yBAAA2C,IAAI,EAAI;AACrB,gBAAKvC,cAAL,mBAAyBuC,IAAzB;AAA+BrC,YAAAA,SAAS,EAAE;AAA1C,cAAmDgB,MAAnD;;AACAtB,UAAAA,iBAAe,CAACwC,mBAAD,CAAf;AACH,SANoB;AAOrBvC,QAAAA,aAAa,EAAbA;AAPqB,OAAzB;AASH,KAxZgC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BAmajB,iBACZL,IADY,EAEZ+C,IAFY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGZ3C,gBAAAA,eAHY,2DAGkBnC,IAHlB;AAIZoC,gBAAAA,aAJY,2DAImBpC,IAJnB;;AAAA,oBAMP+B,IAAI,CAACM,EANE;AAAA;AAAA;AAAA;;AAAA,sBAOFpC,eAAe,EAPb;;AAAA;AAUZ,sBAAK8B,IAAL,GAAYA,IAAZ;AACA,sBAAKK,aAAL,GAAqBA,aAArB;AACA,sBAAKwC,WAAL,GAAmB,IAAIjE,WAAJ,CAAgB,MAAKmB,OAArB,CAAnB;;AACA,sBAAKS,cAAL,CAAoB;AAAEE,kBAAAA,SAAS,EAAE;AAAb,iBAApB,EAAyCqC,IAAI,CAACzC,EAA9C;;AAbY;AAgBR;AACA;AACM0C,gBAAAA,iBAlBE,GAkBuCD,IAAI,CAACE,cAAL,CAC1CC,MAD0C,CAEvC,UAACC,QAAD;AAAA,yBAAkDA,QAAQ,CAACC,IAAT,IAAiBD,QAAQ,CAACC,IAAT,CAAcC,IAAd,KAAuB,OAA1F;AAAA,iBAFuC,EAI1CC,GAJ0C,CAItC,UAAAH,QAAQ;AAAA,yBAAIA,QAAQ,CAAC7C,EAAb;AAAA,iBAJ8B,EAK1CgD,GAL0C,CAKtC,UAAAC,OAAO,EAAI;AACZ,yBAAO,IAAI1E,SAAJ,CAAc,MAAKkB,OAAnB,EAA4ByD,aAA5B,CAA0C;AAC7CxD,oBAAAA,IAAI,EAAJA,IAD6C;AAE7CyD,oBAAAA,KAAK,EAAE;AAAEnD,sBAAAA,EAAE,EAAEiD;AAAN;AAFsC,mBAA1C,CAAP;AAIH,iBAV0C,CAlBvC;AAAA;AAAA,uBA8BkDG,OAAO,CAACC,GAAR,CAAYX,iBAAZ,CA9BlD;;AAAA;AA8BFY,gBAAAA,WA9BE;AA+BFC,gBAAAA,wBA/BE,GA+BkCD,WAAW,CAACE,IAAZ,CACtC,UAAAC,SAAS;AAAA,yBAAIA,SAAS,CAACC,WAAV,GAAwBrE,wBAA5B;AAAA,iBAD6B,CA/BlC;AAkCFsE,gBAAAA,OAlCE,GAkCQ;AACZlD,kBAAAA,IAAI,EAAE5B,8BADM;AAEZkE,kBAAAA,IAAI,EAAE;AAFM,iBAlCR;;AAAA,qBAuCJQ,wBAvCI;AAAA;AAAA;AAAA;;AAwCJ,sBAAK1C,iBAAL,CAAuB,KAAvB,EAA8B8C,OAA9B,EAAuC9E,8BAAvC;;AAxCI;;AAAA;AAAA;AAAA,uBA4CF,IAAIuE,OAAJ,CAAY,UAACQ,OAAD,EAAUC,MAAV,EAAqB;AACnC,wBAAKtB,WAAL,CAAiBuB,kBAAjB,CAAoC;AAChCpE,oBAAAA,IAAI,EAAJA,IADgC;AAEhC+C,oBAAAA,IAAI,EAAJA,IAFgC;AAGhC3C,oBAAAA,eAAe,EAAE8D,OAHe;AAIhC7D,oBAAAA,aAAa,EAAE8D;AAJiB,mBAApC;AAMH,iBAPK,CA5CE;;AAAA;AAAA;AAAA,uBAqDF,IAAIT,OAAJ,CAAY,UAACQ,OAAD,EAAUC,MAAV,EAAqB;AACnC,wBAAKtB,WAAL,CAAiBC,OAAjB,CAAyB;AACrB9C,oBAAAA,IAAI,EAAJA,IADqB;AAErBM,oBAAAA,EAAE,EAAEyC,IAAI,CAACzC,EAFY;AAGrBF,oBAAAA,eAAe,EAAE,yBAACiE,QAAD,EAAoB;AACjC,4BAAK7D,cAAL,mBAEW6D,QAFX;AAGQ3D,wBAAAA,SAAS,EAAE;AAHnB,0BAKIqC,IAAI,CAACzC,EALT;;AAQA4D,sBAAAA,OAAO;AACV,qBAboB;AAcrB7D,oBAAAA,aAAa,EAAE,uBAACS,CAAD,EAAyB;AACpC,4BAAKN,cAAL,CAAoB;AAAEE,wBAAAA,SAAS,EAAE;AAAb,uBAApB,EAA0CqC,IAAI,CAACzC,EAA/C;;AACA,4BAAKa,iBAAL,CAAuB,KAAvB,EAA8BL,CAA9B,EAAiC5B,sBAAjC;;AACAiF,sBAAAA,MAAM;AACT;AAlBoB,mBAAzB;AAoBH,iBArBK,CArDE;;AAAA;AA4ER;AACA,oBAAI,CAAC,MAAKtD,WAAL,EAAL,EAAyB;AACrBT,kBAAAA,eAAe;AAClB;;AA/EO;AAAA;;AAAA;AAAA;AAAA;;AAiFR,sBAAKI,cAAL,CAAoB;AAAEE,kBAAAA,SAAS,EAAE;AAAb,iBAApB,EAA0CqC,IAAI,CAACzC,EAA/C;;AACA,sBAAKa,iBAAL,CAAuB,KAAvB,eAAiCjC,sBAAjC;;AAlFQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAnaiB;;AAAA;AAAA;AAAA;AAAA;;AAAA,oEAmgBjB,UACZc,IADY,EAEZsE,SAFY,EAGZnE,WAHY,EAIZC,eAJY,EAKZC,aALY,EAML;AACP,YAAKkE,WAAL,GAAmB,IAAI7F,WAAJ,CAAgB,MAAKqB,OAArB,CAAnB;;AACA,UAAI,CAACC,IAAI,CAACM,EAAV,EAAc;AACV,cAAMpC,eAAe,EAArB;AACH;;AAED,YAAK8B,IAAL,GAAYA,IAAZ;AACA,YAAKK,aAAL,GAAqBA,aAArB;;AACA,YAAKG,cAAL,CAAoB;AAAEE,QAAAA,SAAS,EAAE;AAAb,OAApB,EAAyC4D,SAAzC;;AAEA,YAAKC,WAAL,CAAiBC,aAAjB,CAA+B;AAC3BxE,QAAAA,IAAI,EAAJA,IAD2B;AAE3BsE,QAAAA,SAAS,EAATA,SAF2B;AAG3BnE,QAAAA,WAAW,EAAXA,WAH2B;AAI3BC,QAAAA,eAAe,EAAE,MAAKkB,cAAL,CAAoBC,IAApB,gCAA+B+C,SAA/B,EAA0ClE,eAA1C,CAJU;AAK3BC,QAAAA,aAAa,EAAE,uBAACS,CAAD,EAAsBC,IAAtB,EAAuC;AAClD,gBAAKU,0BAAL,CAAgCX,CAAhC,EAAmCC,IAAnC,EAAyCuD,SAAzC;AACH;AAP0B,OAA/B;AASH,KA5hBgC;;AAAA,iFAsiBJ,UAACxD,CAAD,EAAsBC,IAAtB,EAAoCuD,SAApC,EAA0D;AACnF,YAAK9D,cAAL,CAAoB,MAAKS,eAAL,CAAqB3C,QAAQ,CAACmG,yBAA9B,CAApB,EAA8EH,SAA9E;;AACA,YAAKnD,iBAAL,CAAuB,IAAvB,EAA6BL,CAA7B,EAAgCC,IAAhC;AACH,KAziBgC;;AAAA,oEAujBjB,UACZf,IADY,EAEZ0E,WAFY,EAGZjE,OAHY,EAIZkE,SAJY,EAKZC,QALY,EAMZC,KANY,EAOZC,cAPY,EAQZ1E,iBARY,EASZC,aATY,EAUL;AACP,UAAI,CAACL,IAAI,CAACM,EAAV,EAAc;AACV,cAAMpC,eAAe,EAArB;AACH;;AAED,YAAK8B,IAAL,GAAYA,IAAZ;AACA,YAAKK,aAAL,GAAqBA,aAArB;AACA,UAAM0E,IAAI,GAAG/G,QAAQ,CAAC,OAAD,CAArB;AACA,UAAIgH,WAAJ;;AACA,UAAIH,KAAJ,EAAW;AACP,YAAMI,SAAe,GAAG,IAAIC,IAAJ,CAASL,KAAT,CAAxB;AACAG,QAAAA,WAAW,GAAGC,SAAS,CAACE,WAAV,EAAd;AACH,OAZM,CAcP;;;AACA,UAAMC,WAAoB,GAAG;AACzBC,QAAAA,UAAU,EAAE;AACRhC,UAAAA,IAAI,EAAE,mBADE;AAERiC,UAAAA,MAAM,EAAEZ,WAFA;AAGRpE,UAAAA,EAAE,EAAEtC,QAAQ,EAHJ;AAIRuH,UAAAA,IAAI,EAAE,SAJE;AAKRtD,UAAAA,MAAM,EAAErC;AALA,SADa;AAQzB4F,QAAAA,eAAe,EAAEV,cARQ;AASzBW,QAAAA,UAAU,EAAE,IAAIP,IAAJ,GAAWC,WAAX,EATa;AAUzBO,QAAAA,MAAM,EAAEV,WAViB;AAWzB1E,QAAAA,EAAE,EAAEyE,IAXqB;AAYzBY,QAAAA,WAAW,EAAElF,OAZY;AAazB4C,QAAAA,IAAI,EAAExD,IAbmB;AAczB+F,QAAAA,WAAW,EAAE;AACTC,UAAAA,OAAO,EAAElB,SAAS,CAACrB,GAAV,CAAc,UAACH,QAAD;AAAA,mBAAmD;AACtE7C,cAAAA,EAAE,EAAEtC,QAAQ,EAD0D;AAEtEsH,cAAAA,MAAM,oBAAOnC,QAAP;AAAiB2C,gBAAAA,UAAU,EAAE,EAA7B;AAAiCzC,gBAAAA,IAAI,EAAE;AAAvC,gBAFgE;AAGtEpB,cAAAA,MAAM,EAAErC,uBAH8D;AAItEO,cAAAA,WAAW,EAAE;AACT4F,gBAAAA,UAAU,EAAE,KADH;AAETC,gBAAAA,UAAU,EAAE;AAFH,eAJyD;AAQtET,cAAAA,IAAI,EAAE,UARgE;AAStElC,cAAAA,IAAI,EAAE;AATgE,aAAnD;AAAA,WAAd,CADA;AAYT4C,UAAAA,KAAK,EAAE,EAZE;AAaTC,UAAAA,WAAW,EAAE;AAbJ,SAdY;AA6BzB/F,QAAAA,WAAW,EAAE;AACT6F,UAAAA,UAAU,EAAE,KADH;AAETD,UAAAA,UAAU,EAAE,KAFH;AAGTI,UAAAA,4BAA4B,EAAE,KAHrB;AAITC,UAAAA,oBAAoB,EAAE;AAJb,SA7BY;AAmCzBC,QAAAA,UAAU,EAAE;AACRR,UAAAA,OAAO,EAAE,CACL;AACIvF,YAAAA,EAAE,EAAEtC,QAAQ,EADhB;AAEIqF,YAAAA,IAAI,EAAE,WAFV;AAGIiC,YAAAA,MAAM;AACFjC,cAAAA,IAAI,EAAE;AADJ,eAECrD,IAFD,CAHV;AAOIG,YAAAA,WAAW,EAAE;AACT4F,cAAAA,UAAU,EAAE,KADH;AAETC,cAAAA,UAAU,EAAE;AAFH;AAPjB,WADK,CADD;AAeRC,UAAAA,KAAK,EAAE,CAfC;AAgBRC,UAAAA,WAAW,EAAE;AAhBL,SAnCa;AAqDzBI,QAAAA,SAAS,EAAE1B,QArDc;AAsDzB3C,QAAAA,MAAM,EAAExC;AAtDiB,OAA7B;AAyDA,UAAM8G,WAAwB,GAAG;AAC7BZ,QAAAA,WAAW,EAAElF,OADgB;AAE7BiF,QAAAA,MAAM,EAAEV,WAFqB;AAG7BsB,QAAAA,SAAS,EAAE1B,QAHkB;AAI7BY,QAAAA,eAAe,EAAEV;AAJY,OAAjC,CAxEO,CA+EP;;AACA,UAAM9B,iBAAsC,GAAG2B,SAAS,CACnDzB,MAD0C,CACnC,UAACC,QAAD;AAAA,eAAkD,CAACA,QAAQ,CAACC,IAAT,IAAiBD,QAAQ,CAACC,IAAT,CAAcC,IAAhC,MAA0C,OAA5F;AAAA,OADmC,EAE1CC,GAF0C,CAEtC,UAAAH,QAAQ;AAAA,eAAIA,QAAQ,CAAC7C,EAAb;AAAA,OAF8B,EAG1CgD,GAH0C,CAGtC,UAAAC,OAAO,EAAI;AACZ,eAAO,IAAI1E,SAAJ,CAAc,MAAKkB,OAAnB,EAA4ByD,aAA5B,CAA0C;AAC7CxD,UAAAA,IAAI,EAAJA,IAD6C;AAE7CyD,UAAAA,KAAK,EAAE;AAAEnD,YAAAA,EAAE,EAAEiD;AAAN;AAFsC,SAA1C,CAAP;AAIH,OAR0C,CAA/C,CAhFO,CA0FP;;AACAG,MAAAA,OAAO,CAACC,GAAR,CAAYX,iBAAZ,EACKwD,IADL,CACU,UAAC5C,WAAD,EAAiD;AACnD,YAAMC,wBAAiC,GAAGD,WAAW,CAACE,IAAZ,CACtC,UAAAC,SAAS;AAAA,iBAAIA,SAAS,CAACC,WAAV,GAAwBrE,wBAA5B;AAAA,SAD6B,CAA1C;AAGA,YAAMsE,OAAO,GAAG;AACZlD,UAAAA,IAAI,EAAE5B,8BADM;AAEZkE,UAAAA,IAAI,EAAE;AAFM,SAAhB;;AAIA,YAAIQ,wBAAJ,EAA8B;AAC1B,gBAAK1C,iBAAL,CAAuB,KAAvB,EAA8B8C,OAA9B,EAAuC9E,8BAAvC;;AACA;AACH;;AAED,cAAK0D,WAAL,GAAmB,IAAIjE,WAAJ,CAAgB,MAAKmB,OAArB,CAAnB;;AACA,cAAK8C,WAAL,CAAiB4D,kBAAjB,CAAoC;AAChCzG,UAAAA,IAAI,EAAJA,IADgC;AAEhC+C,UAAAA,IAAI,EAAEwD,WAF0B;AAGhC5B,UAAAA,SAAS,EAATA,SAHgC;AAIhCvE,UAAAA,eAAe,EAAE,yBAACsG,gBAAD,EAA2B;AACxC,kBAAKC,cAAL,CAAoB,MAAK3G,IAAL,CAAUM,EAA9B,EAAkCoE,WAAlC,EAA+CU,WAA/C;;AACA,kBAAK5E,cAAL,mBAEWkG,gBAFX;AAGQL,cAAAA,UAAU,EAAE;AACRR,gBAAAA,OAAO,EAAEa,gBAAgB,CAACL,UADlB;AAERH,gBAAAA,WAAW,EAAE,IAFL;AAGRD,gBAAAA,KAAK,EAAE;AAHC,eAHpB;AAQQL,cAAAA,WAAW,EAAE;AACTC,gBAAAA,OAAO,EAAEa,gBAAgB,CAACd,WADjB;AAETM,gBAAAA,WAAW,EAAE,IAFJ;AAGTD,gBAAAA,KAAK,EAAES,gBAAgB,CAACd,WAAjB,CAA6BgB;AAH3B,eARrB;AAaQlG,cAAAA,SAAS,EAAE;AAbnB,gBAeIqE,IAfJ;;AAiBA3E,YAAAA,iBAAe,CAACsG,gBAAD,CAAf;AACH,WAxB+B;AAyBhCrG,UAAAA,aAAa,EAAE,uBAACS,CAAD,EAAsBC,IAAtB,EAAuC;AAClD,kBAAKI,iBAAL,CAAuB,KAAvB,EAA8BL,CAA9B,EAAiCC,IAAjC;AACH;AA3B+B,SAApC;AA6BH,OA5CL,EA6CK8F,KA7CL,CA6CW,UAAArF,KAAK,EAAI;AACZ,cAAKL,iBAAL,CAAuB,KAAvB,EAA8BK,KAA9B,EAAqCvC,sBAArC;AACH,OA/CL;AAgDH,KA5sBgC;;AAAA,oEA01BjB,UACZe,IADY,EAEZ+C,IAFY,EAKX;AAAA,UAFD3C,eAEC,uEAF2CnC,IAE3C;AAAA,UADDoC,aACC,uEAD8BpC,IAC9B;;AACD,UAAI,CAAC+B,IAAI,CAACM,EAAV,EAAc;AACV,cAAMpC,eAAe,EAArB;AACH;;AAED,YAAK8B,IAAL,GAAYA,IAAZ;AACA,YAAKK,aAAL,GAAqBA,aAArB;AACA,YAAKwC,WAAL,GAAmB,IAAIjE,WAAJ,CAAgB,MAAKmB,OAArB,CAAnB;;AACA,YAAKS,cAAL,CAAoB;AAAEE,QAAAA,SAAS,EAAE;AAAb,OAApB,EAAyCqC,IAAI,CAACzC,EAA9C;;AAEA,YAAKuC,WAAL,CAAiBiE,UAAjB,CAA4B;AACxB9G,QAAAA,IAAI,EAAJA,IADwB;AAExB+C,QAAAA,IAAI,EAAJA,IAFwB;AAGxB3C,QAAAA,eAAe,EAAE,MAAKkB,cAAL,CAAoBC,IAApB,gCAA+BwB,IAAI,CAACzC,EAApC,EAAwCF,eAAxC,CAHO;AAIxBC,QAAAA,aAAa,EAAE,uBAACS,CAAD,EAAsBC,IAAtB,EAAuC;AAClD,gBAAKP,cAAL,CAAoB,MAAKS,eAAL,CAAqB3C,QAAQ,CAACyI,sBAA9B,CAApB,EAA2EhE,IAAI,CAACzC,EAAhF;;AACA,gBAAKa,iBAAL,CAAuB,IAAvB,EAA6BL,CAA7B,EAAgCC,IAAhC;AACH;AAPuB,OAA5B;AASH,KAl3BgC;;AAAA,qEA03BhB,UAACT,EAAD,EAAkD;AAAA,UAArCF,eAAqC,uEAATnC,IAAS;;AAC/D,UAAM+I,WAAW,GAAG,MAAKC,cAAL,CAAoB,MAAKjH,IAAL,CAAUM,EAA9B,CAApB;;AACA,UAAI0G,WAAJ,EAAiB;AACb,YAAME,WAAS,GAAGF,WAAW,CAACG,KAAZ,CAAkBjE,MAAlB,CAAyB,UAAAkE,QAAQ;AAAA,iBAAIA,QAAQ,CAAC9G,EAAT,KAAgBA,EAApB;AAAA,SAAjC,CAAlB;;AACA,cAAK+G,cAAL,CAAoB,MAAKrH,IAAL,CAAUM,EAA9B,EAAkC4G,WAAlC;;AAEA,YAAI,CAAC,MAAKrG,WAAL,EAAL,EAAyB;AACrBT,UAAAA,eAAe,CAACE,EAAD,CAAf;AACH;AACJ;AACJ,KAp4BgC;;AAAA,wEA84Bb,YAAwE;AAAA,UAAvEgH,QAAuE,uEAAnD,KAAmD;AAAA,UAA5CxG,CAA4C;AAAA,UAAvBC,IAAuB;;AACxF,UAAIuG,QAAJ,EAAc;AACV,cAAKC,MAAL,CAAYxF,IAAZ,mBAAsBjB,CAAtB;AAAyBC,UAAAA,IAAI,EAAJA;AAAzB;AACH;;AAED,UAAI,CAAC,MAAKF,WAAL,EAAD,IAAuB,MAAKR,aAAhC,EAA+C;AAC3C,cAAKA,aAAL,CAAmBS,CAAnB,EAAsBC,IAAtB;AACIS,UAAAA,KAAK,EAAEV;AADX,WAEKzB,kBAFL,EAE0BiI,QAF1B;AAIH;;AAEDE,MAAAA,OAAO,CAAChG,KAAR,CAAcV,CAAd,EAZwF,CAYtE;AACrB,KA35BgC;;AAAA,qEAq6BhB,UAACR,EAAD,EAAaoE,WAAb,EAAgC+C,QAAhC,EAAgG;AAC7G,UAAI,CAAC/C,WAAL,EAAkB;AACd,cAAMvG,eAAe,EAArB;AACH;;AAED,UAAMuJ,IAAI,GAAG,IAAIxC,IAAJ,GAAWC,WAAX,EAAb;;AACA,UAAMwC,eAAe;AACjBlC,QAAAA,UAAU,EAAEiC,IADK;AAEjBrC,QAAAA,UAAU,EAAEX,WAFK;AAGjBkD,QAAAA,WAAW,EAAEF,IAHI;AAIjBhH,QAAAA,SAAS,EAAE;AAJM,SAKd+G,QALc,CAArB;;AAOA,UAAMT,WAAW,GAAG,MAAKC,cAAL,CAAoB,MAAKjH,IAAL,CAAUM,EAA9B,CAApB;;AACA,UAAM4G,SAAS,GAAGF,WAAW,GAAGA,WAAW,CAACG,KAAf,GAAuB,EAApD;AACA,UAAMU,wBAAwB,gCAAOX,SAAP,IAAkBS,eAAlB,EAA9B;;AACA,YAAKN,cAAL,CAAoB/G,EAApB,EAAwBuH,wBAAxB;;AAEA,aAAOF,eAAP;AACH,KAx7BgC;;AAAA,mFAi8BF,UAACG,WAAD,EAAuBxH,EAAvB,EAAmCF,eAAnC,EAAuE;AAAA,iCACpD0H,WADoD,CAC1FrH,OAD0F;AAAA,UAC1FA,OAD0F,qCAChF,EADgF;AAAA,kCACpDqH,WADoD,CAC5EC,cAD4E;AAAA,UAC5EA,cAD4E,sCAC3D,EAD2D,0BAElG;;AACAD,MAAAA,WAAW,CAACC,cAAZ,GAA6BA,cAAc,IAAItH,OAA/C;;AAEA,YAAKD,cAAL,mBAEWsH,WAFX;AAGQpH,QAAAA,SAAS,EAAE;AAHnB,UAKIJ,EALJ;;AAQA,UAAI,CAAC,MAAKO,WAAL,EAAL,EAAyB;AACrBT,QAAAA,eAAe,CAAC0H,WAAD,CAAf;AACH;AACJ,KAj9BgC;;AAAA,iFA29BJ,UAAChH,CAAD,EAAsBC,IAAtB,EAAoCT,EAApC,EAAmD;AAC5E,UAAM6B,YAAY,GACdrB,CAAC,CAACmB,MAAF,KAAa7C,yBAAb,GACMd,QAAQ,CAAC0J,4BADf,GAEM1J,QAAQ,CAAC2J,yBAHnB;;AAIA,YAAKzH,cAAL,CAAoB,MAAKS,eAAL,CAAqBkB,YAArB,CAApB,EAAwD7B,EAAxD;;AACA,YAAKa,iBAAL,CAAuB,KAAvB,EAA8BL,CAA9B,EAAiCC,IAAjC;AACH,KAl+BgC;;AAAA,qEAw/BhB,UAACmH,OAAD,EAAkB5H,EAAlB,EAA6C;AAC1D,UAAI,CAAC,MAAKN,IAAL,CAAUM,EAAf,EAAmB;AACf,cAAMpC,eAAe,EAArB;AACH;;AAED,UAAM8I,WAAW,GAAG,MAAKC,cAAL,CAAoB,MAAKjH,IAAL,CAAUM,EAA9B,CAApB;;AACA,UAAI0G,WAAJ,EAAiB;AACb,YAAMmB,gBAAgB,GAAGnB,WAAW,CAACG,KAAZ,CAAkB7D,GAAlB,CAAsB,UAACF,IAAD,EAAoB;AAC/D,cAAIA,IAAI,CAAC9C,EAAL,KAAYA,EAAhB,EAAoB;AAChB,qCACO8C,IADP,MAEO8E,OAFP;AAIH;;AAED,iBAAO9E,IAAP;AACH,SATwB,CAAzB;;AAWA,cAAKiE,cAAL,CAAoB,MAAKrH,IAAL,CAAUM,EAA9B,EAAkC6H,gBAAlC;;AACA,eAAOA,gBAAP;AACH;;AAED,aAAO,IAAP;AACH,KA/gCgC;;AAAA,oEA4hCjB,UACZnI,IADY,EAEZ0E,WAFY,EAGZxE,IAHY,EAIZkI,UAJY,EAKZhI,iBALY,EAMZC,aANY,EAOL;AACP,UAAM0E,IAAI,GAAG/G,QAAQ,CAAC,UAAD,CAArB;AACA,UAAM8J,WAAW,GAAG;AAChBxH,QAAAA,EAAE,EAAEyE,IADY;AAEhBgD,QAAAA,cAAc,EAAE7H,IAFA;AAGhBmD,QAAAA,IAAI,EAAE;AAHU,OAApB;;AAMA,UAAI,CAACrD,IAAI,CAACM,EAAV,EAAc;AACV,cAAMpC,eAAe,EAArB;AACH;;AAED,YAAK8B,IAAL,GAAYA,IAAZ;AACA,YAAKK,aAAL,GAAqBA,aAArB;;AACA,YAAKsG,cAAL,CAAoB,MAAK3G,IAAL,CAAUM,EAA9B,EAAkCoE,WAAlC,EAA+CoD,WAA/C;;AAEA,UAAMrH,OAAO,GAAG,EAAhB;;AACA,UAAI2H,UAAJ,EAAgB;AACZ3H,QAAAA,OAAO,CAAC4H,aAAR,GAAwBnI,IAAxB;AACH,OAFD,MAEO;AACHO,QAAAA,OAAO,CAACA,OAAR,GAAkBP,IAAlB;AACH;;AAED,YAAKqE,WAAL,GAAmB,IAAI7F,WAAJ,CAAgB,MAAKqB,OAArB,CAAnB;;AAEA,YAAKwE,WAAL,CAAiB+D,aAAjB;AACItI,QAAAA,IAAI,EAAJA;AADJ,SAEOS,OAFP;AAGIL,QAAAA,eAAe,EAAE,yBAACmI,OAAD,EAAsB;AACnC,gBAAKC,4BAAL,CAAkCD,OAAlC,EAA2CxD,IAA3C,EAAiD3E,iBAAjD;AACH,SALL;AAMIC,QAAAA,aAAa,EAAE,uBAACS,CAAD,EAAuBC,IAAvB,EAAwC;AACnD,gBAAK0H,0BAAL,CAAgC3H,CAAhC,EAAmCC,IAAnC,EAAyCgE,IAAzC;AACH;AARL;AAUH,KAtkCgC;;AAAA,oEAmlCjB,UACZ/E,IADY,EAEZsE,SAFY,EAGZpE,IAHY,EAIZkI,UAJY,EAKZjI,WALY,EAMZC,iBANY,EAOZC,aAPY,EAQL;AACP,UAAMyH,WAAW,GAAG;AAChBC,QAAAA,cAAc,EAAE7H;AADA,OAApB;;AAIA,UAAI,CAACF,IAAI,CAACM,EAAV,EAAc;AACV,cAAMpC,eAAe,EAArB;AACH;;AAED,YAAK8B,IAAL,GAAYA,IAAZ;AACA,YAAKK,aAAL,GAAqBA,aAArB;;AACA,YAAKG,cAAL,mBAAyBsH,WAAzB;AAAsCpH,QAAAA,SAAS,EAAE;AAAjD,UAAyD4D,SAAzD;;AAEA,UAAM7D,OAAO,GAAG,EAAhB;;AACA,UAAI2H,UAAJ,EAAgB;AACZ3H,QAAAA,OAAO,CAACsH,cAAR,GAAyB7H,IAAzB;AACH,OAFD,MAEO;AACHO,QAAAA,OAAO,CAACA,OAAR,GAAkBP,IAAlB;AACH;;AAED,YAAKqE,WAAL,GAAmB,IAAI7F,WAAJ,CAAgB,MAAKqB,OAArB,CAAnB;;AAEA,YAAKwE,WAAL,CAAiBmE,aAAjB;AACI1I,QAAAA,IAAI,EAAJA,IADJ;AAEIsE,QAAAA,SAAS,EAATA,SAFJ;AAGInE,QAAAA,WAAW,EAAXA;AAHJ,SAIOM,OAJP;AAKIL,QAAAA,eAAe,EAAE,yBAACmI,OAAD,EAAsB;AACnC;AACA;AACA;AACA,gBAAK/H,cAAL,mBAEWC,OAFX;AAGQC,YAAAA,SAAS,EAAE;AAHnB,cAKI4D,SALJ;;AAOA,cAAI,CAAC,MAAKzD,WAAL,EAAL,EAAyB;AACrBT,YAAAA,iBAAe,CAACmI,OAAD,CAAf;AACH;AACJ,SAnBL;AAoBIlI,QAAAA,aAAa,EAAE,uBAACS,CAAD,EAAuBC,IAAvB,EAAwC;AACnD,gBAAKC,0BAAL,CAAgCF,CAAhC,EAAmCC,IAAnC,EAAyCuD,SAAzC;AACH;AAtBL;AAwBH,KAzoCgC;;AAAA,wEAqrCb,UAChBtE,IADgB,EAEhB2I,aAFgB,EAGhBvI,eAHgB,EAIhBC,aAJgB,EAKT;AAAA,UACCC,EADD,GACQN,IADR,CACCM,EADD;;AAEP,UAAI,CAACA,EAAL,EAAS;AACL,cAAMpC,eAAe,EAArB;AACH;;AAED,YAAK0K,cAAL,GAAsB,IAAI5J,cAAJ,CAAmB,MAAKe,OAAxB,CAAtB;AAEA,YAAKC,IAAL,GAAYA,IAAZ;AACA,YAAKK,aAAL,GAAqBA,aAArB;;AACA,YAAKG,cAAL,CAAoB;AAAEE,QAAAA,SAAS,EAAE;AAAb,OAApB,EAAyCiI,aAAzC;;AAEA,YAAKC,cAAL,CAAoBC,iBAApB,CAAsC;AAClCvI,QAAAA,EAAE,EAAFA,EADkC;AAElCqI,QAAAA,aAAa,EAAbA,aAFkC;AAGlCvI,QAAAA,eAAe,EAAE,MAAKkB,cAAL,CAAoBC,IAApB,gCAA+BoH,aAA/B,EAA8CvI,eAA9C,CAHiB;AAIlCC,QAAAA,aAAa,EAAE,uBAACS,CAAD,EAAsBC,IAAtB,EAAuC;AAClD,gBAAK+H,8BAAL,CAAoChI,CAApC,EAAuCC,IAAvC,EAA6C4H,aAA7C;AACH;AANiC,OAAtC;AAQH,KA9sCgC;;AAAA,qFAwtCA,UAAC7H,CAAD,EAAsBC,IAAtB,EAAoCT,EAApC,EAAmD;AAChF,YAAKE,cAAL,CAAoB,MAAKS,eAAL,CAAqB3C,QAAQ,CAACyK,6BAA9B,CAApB,EAAkFzI,EAAlF;;AACA,YAAKa,iBAAL,CAAuB,IAAvB,EAA6BL,CAA7B,EAAgCC,IAAhC;AACH,KA3tCgC;;AAE7B,UAAKe,oBAAL,GAA4B,EAA5B;AACA,UAAKkH,YAAL,GAAoB,EAApB;AACA,UAAKzB,MAAL,GAAc,EAAd;AAJ6B;AAKhC;AAED;;;;;;;;;;;;kCAQcvH,I,EAAe0E,W,EAAmB9D,U,EAAwBN,E,EAAYI,S,EAA0B;AAC1G,UAAI,CAACV,IAAI,CAACM,EAAV,EAAc;AACV,cAAMpC,eAAe,EAArB;AACH;;AAED,WAAK8B,IAAL,GAAYA,IAAZ,CAL0G,CAO1G;;AACA,UAAIU,SAAJ,EAAe;AACX,YAAMuI,aAAa,qBACZrI,UADY;AAEfyE,UAAAA,UAAU,EAAEX,WAFG;AAGfpE,UAAAA,EAAE,EAAFA,EAHe;AAIf+C,UAAAA,IAAI,EAAE;AAJS,UAAnB;;AAOA,aAAKsD,cAAL,CAAoB,KAAK3G,IAAL,CAAUM,EAA9B,EAAkCoE,WAAlC,EAA+CuE,aAA/C;AAEA;AACH,OAnByG,CAoB1G;;;AACA,WAAKzI,cAAL,mBAAyBI,UAAzB;AAAqCF,QAAAA,SAAS,EAAE;AAAhD,UAAyDJ,EAAzD;AACH;;;;AAsFD;;;;;;gCAMYA,E,EAAoB;AAC5B,uBAAUZ,oBAAV,SAAiCY,EAAjC;AACH;AAED;;;;;;;;mCAKeA,E,EAA6B;AACxC,UAAM4I,KAAK,GAAG,KAAKC,QAAL,EAAd;AACA,UAAMC,QAAQ,GAAG,KAAKC,WAAL,CAAiB/I,EAAjB,CAAjB;AACA,aAAO4I,KAAK,CAACI,GAAN,CAAUF,QAAV,CAAP;AACH;AAED;;;;;;;;;mCAMe9I,E,EAAY6G,K,EAAkB;AACzC,UAAM+B,KAAK,GAAG,KAAKC,QAAL,EAAd;AACA,UAAMC,QAAQ,GAAG,KAAKC,WAAL,CAAiB/I,EAAjB,CAAjB;AACA4I,MAAAA,KAAK,CAACK,GAAN,CAAUH,QAAV,EAAoB;AAChB7B,QAAAA,MAAM,EAAE,KAAKA,MADG;AAEhBJ,QAAAA,KAAK,EAALA;AAFgB,OAApB;AAIH;AAED;;;;;;;;;;;;;;;;;;;;;;;;gBAYInH,I,EACAwJ,kB,EACApJ,e,EACAC,a,EACAoJ,O,EAKI;AAAA;;AAAA,sFADsE,EACtE;AAAA,wCAHAC,qBAGA;AAAA,UAHAA,qBAGA,sCAHwB,KAGxB;AAAA,wCAFAC,qBAEA;AAAA,UAFAA,qBAEA,sCAFwB,KAExB;;AAAA,UACIrJ,EADJ,GAC6BN,IAD7B,CACIM,EADJ;AAAA,8BAC6BN,IAD7B,CACQG,WADR;AAAA,UACQA,WADR,kCACsB,EADtB;AAEJ,UAAM6G,WAAW,GAAG,KAAKC,cAAL,CAAoB3G,EAApB,CAApB;;AACA,UAAI0G,WAAJ,EAAiB;AAAA,YACLO,OADK,GACaP,WADb,CACLO,MADK;AAAA,YACGJ,KADH,GACaH,WADb,CACGG,KADH;;AAEb,YAAII,OAAM,CAACX,MAAX,EAAmB;AACfvG,UAAAA,aAAa,CAAC8G,KAAD,EAAQI,OAAR,CAAb;AACH,SAFD,MAEO;AACHnH,UAAAA,eAAe,CAAC+G,KAAD,CAAf;AACH;;AAED,YAAI,CAACqC,kBAAL,EAAyB;AACrB;AACH;AACJ;;AAED,WAAKxJ,IAAL,GAAYA,IAAZ;AACA,WAAKuH,MAAL,GAAc,EAAd;AACA,WAAKlH,aAAL,GAAqBoJ,OAArB;AACA,UAAMG,kBAAkB,GAAGF,qBAAqB,GAAG,KAAKG,gBAAL,CAAsB1J,WAAtB,CAAH,GAAwCuD,OAAO,CAACQ,OAAR,EAAxF;AACA,UAAM4F,eAAe,GAAG,KAAKC,aAAL,EAAxB;AACA,UAAMC,qBAAqB,GAAG,KAAKC,mBAAL,EAA9B;AACA,UAAMC,eAAe,GAAG,KAAKC,aAAL,CAAmBhK,WAAnB,CAAxB;AACA,UAAMiK,YAAY,GAAG,KAAKC,aAAL,EAArB;AACA,UAAMC,kBAAkB,GAAGX,qBAAqB,GAAG,KAAKY,gBAAL,CAAsBpK,WAAtB,CAAH,GAAwCuD,OAAO,CAACQ,OAAR,EAAxF;AAEAR,MAAAA,OAAO,CAACC,GAAR,CAAY,CACRmG,eADQ,EAERE,qBAFQ,EAGRE,eAHQ,EAIRE,YAJQ,EAKRE,kBALQ,EAMRV,kBANQ,CAAZ,EAOGpD,IAPH,CAOQ,iBAA8E;AAAA;AAAA,YAA5EgE,QAA4E;AAAA,YAAnDC,cAAmD;AAAA,YAAfvD,SAAe;;AAClF,YAAMwD,mBAAmB,GAAG,MAAI,CAACC,WAAL,CAAiBC,iBAAjB,CAAmCH,cAAnC,EAAmDD,QAAnD,EAA6D,MAAI,CAACxK,IAAlE,CAA5B;;AACA,YAAM6K,eAAe,GAAGtM,aAAa,MAAb,UAAcmM,mBAAd,4BAAsCxD,SAAtC,GAAxB;;AACA,YAAI,CAAC,MAAI,CAACrG,WAAL,EAAL,EAAyB;AACrB,UAAA,MAAI,CAACwG,cAAL,CAAoB/G,EAApB,EAAwBuK,eAAxB;;AACA,cAAI,MAAI,CAACtD,MAAL,CAAYX,MAAhB,EAAwB;AACpBvG,YAAAA,aAAa,CAACwK,eAAD,EAAkB,MAAI,CAACtD,MAAvB,CAAb;AACH,WAFD,MAEO;AACHnH,YAAAA,eAAe,CAACyK,eAAD,CAAf;AACH;AACJ;AACJ,OAlBD;AAmBH,K;;;qCAEgB1K,W,EAAuD;AAAA;;AACpE,WAAKI,cAAL,GAAsB,IAAI9B,cAAJ,CAAmB,KAAKsB,OAAxB,CAAtB;AACA,aAAO,IAAI2D,OAAJ,CAAY,UAAAQ,OAAO,EAAI;AAC1B,QAAA,MAAI,CAAC3D,cAAL,CAAoBuK,cAApB,CACI,MAAI,CAAC9K,IAAL,CAAUM,EADd,EAEIyK,SAFJ,EAGI5K,WAHJ,EAII+D,OAJJ,EAKI,MAAI,CAAC8G,0BAAL,CAAgCzJ,IAAhC,CAAqC,MAArC,EAA2C2C,OAA3C,CALJ;AAOH,OARM,CAAP;AASH;AAED;;;;;;;;;kCAMc/D,W,EAAoD;AAAA;;AAC9D,WAAKoE,WAAL,GAAmB,IAAI7F,WAAJ,CAAgB,KAAKqB,OAArB,CAAnB;AACA,aAAO,IAAI2D,OAAJ,CAAY,UAAAQ,OAAO,EAAI;AAC1B,QAAA,MAAI,CAACK,WAAL,CAAiB0G,WAAjB,CACI,MAAI,CAACjL,IAAL,CAAUM,EADd,EAEIH,WAFJ,EAGI+D,OAHJ,EAII,MAAI,CAAC8G,0BAAL,CAAgCzJ,IAAhC,CAAqC,MAArC,EAA2C2C,OAA3C,CAJJ;AAMH,OAPM,CAAP;AAQH;AAED;;;;;;;;oCAKwC;AAAA;;AACpC,WAAKyG,WAAL,GAAmB,IAAIhM,WAAJ,CAAgB,KAAKoB,OAArB,CAAnB;AAEA,aAAO,IAAI2D,OAAJ,CAAY,UAAAQ,OAAO,EAAI;AAC1B,QAAA,MAAI,CAACyG,WAAL,CAAiBO,WAAjB,CAA6B,MAAI,CAAClL,IAAL,CAAUM,EAAvC,EAA2C4D,OAA3C,EAAoD,MAAI,CAAC8G,0BAAL,CAAgCzJ,IAAhC,CAAqC,MAArC,EAA2C2C,OAA3C,CAApD;AACH,OAFM,CAAP;AAGH;AAED;;;;;;;;0CAKgD;AAAA;;AAC5C,WAAKyG,WAAL,GAAmB,IAAIhM,WAAJ,CAAgB,KAAKoB,OAArB,CAAnB;AAEA,aAAO,IAAI2D,OAAJ,CAAY,UAAAQ,OAAO,EAAI;AAAA,oCACI,MAAI,CAAClE,IADT,CAClBmL,YADkB;AAAA,YAClBA,YADkB,sCACH,EADG;;AAE1B,QAAA,MAAI,CAACR,WAAL,CAAiBS,UAAjB,CACI,MAAI,CAACpL,IAAL,CAAUM,EADd,EAEI6K,YAAY,CAAC7K,EAFjB,EAGI4D,OAHJ,EAII,MAAI,CAAC8G,0BAAL,CAAgCzJ,IAAhC,CAAqC,MAArC,EAA2C2C,OAA3C,CAJJ;AAMH,OARM,CAAP;AASH;AAED;;;;;;;;oCAKiC;AAAA;;AAC7B,WAAKrB,WAAL,GAAmB,IAAIjE,WAAJ,CAAgB,KAAKmB,OAArB,CAAnB;AAEA,aAAO,IAAI2D,OAAJ,CAAY,UAAAQ,OAAO,EAAI;AAC1B,QAAA,MAAI,CAACrB,WAAL,CAAiBwI,eAAjB,CAAiC;AAC7BrL,UAAAA,IAAI,EAAE;AAAEM,YAAAA,EAAE,EAAE,MAAI,CAACN,IAAL,CAAUM;AAAhB,WADuB;AAE7BF,UAAAA,eAAe,EAAE8D,OAFY;AAG7B7D,UAAAA,aAAa,EAAE,uBAACiL,GAAD,EAAMvK,IAAN;AAAA,mBAAe,MAAI,CAACiK,0BAAL,CAAgC9G,OAAhC,EAAyCoH,GAAzC,EAA8CvK,IAA9C,CAAf;AAAA;AAHc,SAAjC;AAKH,OANM,CAAP;AAOH;AAED;;;;;;;;;;;;+CAS2BmD,O,EAAmBpD,C,EAAqBC,I,EAAc;AAAA,UACrEkB,MADqE,GAC1DnB,CAD0D,CACrEmB,MADqE;AAE7E,UAAMsJ,kBAAkB,GAAGnN,sBAAsB,CAAC6D,MAAD,CAAjD;AACA,WAAKd,iBAAL,CAAuBoK,kBAAvB,EAA2CzK,CAA3C,EAA8CC,IAA9C;AACAmD,MAAAA,OAAO;AACV;AAED;;;;;;;;;;;;;;;AA2YA;;;;;;;;;oDAUIlE,I,EACA+C,I,EACAI,Q,EACkC;AAAA;;AAClC,UAAI,CAACnD,IAAI,CAACM,EAAV,EAAc;AACV,cAAMpC,eAAe,EAArB;AACH;;AAED,WAAK8B,IAAL,GAAYA,IAAZ;AACA,aAAO,IAAI0D,OAAJ,CAAY,UAACQ,OAAD,EAAUC,MAAV,EAAqB;AACpC,YAAMrC,oBAAoB,GAAG,IAAIhD,oBAAJ,CAAyB,MAAI,CAACiB,OAA9B,CAA7B;;AACA,QAAA,MAAI,CAAC+B,oBAAL,CAA0BC,IAA1B,CAA+BD,oBAA/B;;AACAA,QAAAA,oBAAoB,CAAC0J,+BAArB,CAAqD;AACjDxL,UAAAA,IAAI,EAAJA,IADiD;AAEjD+C,UAAAA,IAAI,EAAJA,IAFiD;AAGjDU,UAAAA,KAAK,EAAEN,QAH0C;AAIjD/C,UAAAA,eAAe,EAAE8D,OAJgC;AAKjD7D,UAAAA,aAAa,EAAE,uBAACS,CAAD,EAAyB;AACpCqD,YAAAA,MAAM,CAACrD,CAAD,CAAN;AACH;AAPgD,SAArD;AASH,OAZM,CAAP;AAaH;AAED;;;;;;;;;;;;2CAUId,I,EACA+C,I,EACAI,Q,EAC2B;AAAA;;AAC3B,UAAI,CAACnD,IAAI,CAACM,EAAV,EAAc;AACV,cAAMpC,eAAe,EAArB;AACH;;AAED,WAAK8B,IAAL,GAAYA,IAAZ;AACA,aAAO,IAAI0D,OAAJ,CAAY,UAACQ,OAAD,EAAUC,MAAV,EAAqB;AACpC,YAAMrC,oBAAoB,GAAG,IAAIhD,oBAAJ,CAAyB,MAAI,CAACiB,OAA9B,CAA7B;;AACA,QAAA,MAAI,CAAC+B,oBAAL,CAA0BC,IAA1B,CAA+BD,oBAA/B;;AAEAA,QAAAA,oBAAoB,CAAC2J,sBAArB,CAA4C;AACxCzL,UAAAA,IAAI,EAAJA,IADwC;AAExC+C,UAAAA,IAAI,EAAJA,IAFwC;AAGxC2I,UAAAA,IAAI,EAAEvI,QAHkC;AAIxC/C,UAAAA,eAAe,EAAE8D,OAJuB;AAKxC7D,UAAAA,aAAa,EAAE,uBAACS,CAAD,EAAyB;AACpCqD,YAAAA,MAAM,CAACrD,CAAD,CAAN;AACH;AAPuC,SAA5C;AASH,OAbM,CAAP;AAcH;AAED;;;;;;;;;;;;2CAUId,I,EACA+C,I,EACAI,Q,EAC2B;AAAA;;AAC3B,UAAI,CAACnD,IAAI,CAACM,EAAV,EAAc;AACV,cAAMpC,eAAe,EAArB;AACH;;AAED,WAAK8B,IAAL,CAAUM,EAAV,GAAeN,IAAI,CAACM,EAApB;AACA,aAAO,IAAIoD,OAAJ,CAAY,UAACQ,OAAD,EAAUC,MAAV,EAAqB;AACpC,YAAMrC,oBAAoB,GAAG,IAAIhD,oBAAJ,CAAyB,OAAI,CAACiB,OAA9B,CAA7B;;AACA,QAAA,OAAI,CAAC+B,oBAAL,CAA0BC,IAA1B,CAA+BD,oBAA/B;;AAEAA,QAAAA,oBAAoB,CAAC6J,sBAArB,CAA4C;AACxC3L,UAAAA,IAAI,EAAJA,IADwC;AAExC+C,UAAAA,IAAI,EAAJA,IAFwC;AAGxCN,UAAAA,gBAAgB,EAAE;AAAEnC,YAAAA,EAAE,EAAE6C,QAAQ,CAAC7C;AAAf,WAHsB;AAIxCF,UAAAA,eAAe,EAAE8D,OAJuB;AAKxC7D,UAAAA,aAAa,EAAE,uBAACS,CAAD,EAAyB;AACpCqD,YAAAA,MAAM,CAACrD,CAAD,CAAN;AACH;AAPuC,SAA5C;AASH,OAbM,CAAP;AAcH;AAED;;;;;;;;;;;mCAQed,I,EAAe+C,I,EAA+B;AAAA;;AACzD,UAAI,CAAC/C,IAAI,CAACM,EAAV,EAAc;AACV,cAAMpC,eAAe,EAArB;AACH;;AAED,WAAK8B,IAAL,GAAYA,IAAZ;AACA,aAAO,IAAI0D,OAAJ,CAAY,UAACQ,OAAD,EAAUC,MAAV,EAAqB;AACpC,YAAM6E,YAAY,GAAG,IAAIjK,YAAJ,CAAiB,OAAI,CAACgB,OAAtB,CAArB;;AACA,QAAA,OAAI,CAACiJ,YAAL,CAAkBjH,IAAlB,CAAuBiH,YAAvB;;AAEAA,QAAAA,YAAY,CAAC4C,cAAb,CAA4B;AACxB5L,UAAAA,IAAI,EAAJA,IADwB;AAExB+C,UAAAA,IAAI,EAAJA,IAFwB;AAGxB3C,UAAAA,eAAe,EAAE8D,OAHO;AAIxB7D,UAAAA,aAAa,EAAE8D;AAJS,SAA5B;AAMH,OAVM,CAAP;AAWH;AAED;;;;;;;;;;;;;AAmJA;;;;;;;oCAOgB1D,O,EAAoF;AAAA,UAAxDoL,KAAwD,uEAA7BxN,cAAc,CAACyN,YAAc;AAChG,aAAO;AACHtK,QAAAA,KAAK,EAAE;AAAEf,UAAAA,OAAO,EAAPA,OAAF;AAAWoL,UAAAA,KAAK,EAALA;AAAX;AADJ,OAAP;AAGH;AAED;;;;;;;;;;+CA0J2B;AACvB,UAAIE,KAAK,CAACC,OAAN,CAAc,KAAKlK,oBAAnB,CAAJ,EAA8C;AAC1C,aAAKA,oBAAL,CAA0BmK,OAA1B,CAAkC,UAAAC,GAAG;AAAA,iBAAIA,GAAG,CAACC,OAAJ,EAAJ;AAAA,SAArC;AACA,aAAKrK,oBAAL,GAA4B,EAA5B;AACH;AACJ;;;uCAEkB;AACf,UAAIiK,KAAK,CAACC,OAAN,CAAc,KAAKhD,YAAnB,CAAJ,EAAsC;AAClC,aAAKA,YAAL,CAAkBiD,OAAlB,CAA0B,UAAAC,GAAG;AAAA,iBAAIA,GAAG,CAACC,OAAJ,EAAJ;AAAA,SAA7B;AACA,aAAKnD,YAAL,GAAoB,EAApB;AACH;AACJ;AAED;;;;;;;;;qCAMiB7I,W,EAA4D;AAAA;;AACzE,WAAKyI,cAAL,GAAsB,IAAI5J,cAAJ,CAAmB,KAAKe,OAAxB,CAAtB;AAEA,aAAO,IAAI2D,OAAJ,CAAY,UAAAQ,OAAO,EAAI;AAC1B,QAAA,OAAI,CAAC0E,cAAL,CAAoBwD,cAApB,CACI,OAAI,CAACpM,IAAL,CAAUM,EADd,EAEIH,WAFJ,EAGI+D,OAHJ,EAII,OAAI,CAAC8G,0BAAL,CAAgCzJ,IAAhC,CAAqC,OAArC,EAA2C2C,OAA3C,CAJJ;AAMH,OAPM,CAAP;AAQH;AAED;;;;;;;;;;;;;AAiDA;;;;;8BAKU;AACN;;AAEA,UAAI,KAAK3D,cAAT,EAAyB;AACrB,aAAKA,cAAL,CAAoB4L,OAApB;AACA,eAAO,KAAK5L,cAAZ;AACH;;AAED,UAAI,KAAKgE,WAAT,EAAsB;AAClB,aAAKA,WAAL,CAAiB4H,OAAjB;AACA,eAAO,KAAK5H,WAAZ;AACH;;AAED,UAAI,KAAKoG,WAAT,EAAsB;AAClB,aAAKA,WAAL,CAAiBwB,OAAjB;AACA,eAAO,KAAKxB,WAAZ;AACH;;AAED,UAAI,KAAK/B,cAAT,EAAyB;AACrB,aAAKA,cAAL,CAAoBuD,OAApB;AACA,eAAO,KAAKvD,cAAZ;AACH;;AAED,UAAI,KAAK/F,WAAT,EAAsB;AAClB,aAAKA,WAAL,CAAiBsJ,OAAjB;AACA,eAAO,KAAKtJ,WAAZ;AACH;;AAED,WAAKwJ,wBAAL;AACA,WAAKC,gBAAL;AACH;;;;EA9yCc9N,I;;AAizCnB,eAAesB,IAAf","sourcesContent":["/**\n * @flow\n * @file Helper for activity feed API's\n * @author Box\n */\nimport uniqueId from 'lodash/uniqueId';\nimport noop from 'lodash/noop';\nimport type { MessageDescriptor } from 'react-intl';\nimport { getBadItemError, getBadUserError, isUserCorrectableError } from '../utils/error';\nimport commonMessages from '../elements/common/messages';\nimport messages from './messages';\nimport { sortFeedItems } from '../utils/sorter';\nimport Base from './Base';\nimport AnnotationsAPI from './Annotations';\nimport CommentsAPI from './Comments';\nimport VersionsAPI from './Versions';\nimport TasksNewAPI from './tasks/TasksNew';\nimport GroupsAPI from './Groups';\nimport TaskCollaboratorsAPI from './tasks/TaskCollaborators';\nimport TaskLinksAPI from './tasks/TaskLinks';\nimport AppActivityAPI from './AppActivity';\nimport {\n    ERROR_CODE_CREATE_TASK,\n    ERROR_CODE_UPDATE_TASK,\n    ERROR_CODE_GROUP_EXCEEDS_LIMIT,\n    HTTP_STATUS_CODE_CONFLICT,\n    IS_ERROR_DISPLAYED,\n    TASK_NEW_APPROVED,\n    TASK_NEW_COMPLETED,\n    TASK_NEW_REJECTED,\n    TASK_NEW_NOT_STARTED,\n    TYPED_ID_FEED_PREFIX,\n    TASK_MAX_GROUP_ASSIGNEES,\n} from '../constants';\nimport type {\n    TaskCompletionRule,\n    TaskCollabAssignee,\n    TaskCollabStatus,\n    TaskLink,\n    TaskNew,\n    TaskType,\n    TaskPayload,\n    TaskUpdatePayload,\n} from '../common/types/tasks';\nimport type { ElementsXhrError, ErrorResponseData, APIOptions } from '../common/types/api';\nimport type {\n    SelectorItems,\n    SelectorItem,\n    UserMini,\n    GroupMini,\n    BoxItem,\n    BoxItemPermission,\n    BoxItemVersion,\n    FileVersions,\n    User,\n} from '../common/types/core';\nimport type {\n    Annotation,\n    AnnotationPermission,\n    Annotations,\n    AppActivityItems,\n    Comment,\n    Comments,\n    FeedItem,\n    FeedItems,\n    Task,\n    Tasks,\n} from '../common/types/feed';\n\nconst TASK_NEW_INITIAL_STATUS = TASK_NEW_NOT_STARTED;\nconst TASK = 'task';\n\ntype FeedItemsCache = {\n    errors: ErrorResponseData[],\n    items: FeedItems,\n};\n\ntype ErrorCallback = (e: ElementsXhrError, code: string, contextInfo?: Object) => void;\n\nclass Feed extends Base {\n    /**\n     * @property {AnnotationsAPI}\n     */\n    annotationsAPI: AnnotationsAPI;\n\n    /**\n     * @property {VersionsAPI}\n     */\n    versionsAPI: VersionsAPI;\n\n    /**\n     * @property {CommentsAPI}\n     */\n    commentsAPI: CommentsAPI;\n\n    /**\n     * @property {AppActivityAPI}\n     */\n    appActivityAPI: AppActivityAPI;\n\n    /**\n     * @property {TasksNewAPI}\n     */\n    tasksNewAPI: TasksNewAPI;\n\n    /**\n     * @property {TaskCollaboratorsAPI}\n     */\n    taskCollaboratorsAPI: TaskCollaboratorsAPI[];\n\n    /**\n     * @property {TaskLinksAPI}\n     */\n    taskLinksAPI: TaskLinksAPI[];\n\n    /**\n     * @property {BoxItem}\n     */\n    file: BoxItem;\n\n    /**\n     * @property {ElementsXhrError}\n     */\n    errors: ElementsXhrError[];\n\n    constructor(options: APIOptions) {\n        super(options);\n        this.taskCollaboratorsAPI = [];\n        this.taskLinksAPI = [];\n        this.errors = [];\n    }\n\n    /**\n     * Creates pending card on create_start action, then updates card on next call\n     * @param {BoxItem} file - The file to which the annotation is assigned\n     * @param {Object} currentUser - the user who performed the action\n     * @param {Annotation} annotation - the current annotation to be created\n     * @param {string} id - unique id for the incoming annotation\n     * @param {boolean} isPending - indicates the current creation process of the annotation\n     */\n    addAnnotation(file: BoxItem, currentUser: User, annotation: Annotation, id: string, isPending: boolean): void {\n        if (!file.id) {\n            throw getBadItemError();\n        }\n\n        this.file = file;\n\n        // Add the pending interstitial card\n        if (isPending) {\n            const newAnnotation = {\n                ...annotation,\n                created_by: currentUser,\n                id,\n                type: 'annotation',\n            };\n\n            this.addPendingItem(this.file.id, currentUser, newAnnotation);\n\n            return;\n        }\n        // Create action has completed, so update the existing pending item\n        this.updateFeedItem({ ...annotation, isPending: false }, id);\n    }\n\n    updateAnnotation = (\n        file: BoxItem,\n        annotationId: string,\n        text: string,\n        permissions: AnnotationPermission,\n        successCallback: (annotation: Annotation) => void,\n        errorCallback: ErrorCallback,\n    ): void => {\n        if (!file.id) {\n            throw getBadItemError();\n        }\n\n        this.annotationsAPI = new AnnotationsAPI(this.options);\n\n        this.file = file;\n        this.errorCallback = errorCallback;\n\n        this.updateFeedItem({ message: text, isPending: true }, annotationId);\n\n        this.annotationsAPI.updateAnnotation(\n            this.file.id,\n            annotationId,\n            permissions,\n            text,\n            (annotation: Annotation) => {\n                this.updateFeedItem(\n                    {\n                        ...annotation,\n                        isPending: false,\n                    },\n                    annotationId,\n                );\n                if (!this.isDestroyed()) {\n                    successCallback(annotation);\n                }\n            },\n            (e: ErrorResponseData, code: string) => {\n                this.updateCommentErrorCallback(e, code, annotationId);\n            },\n        );\n    };\n\n    /**\n     * Error callback for updating a comment\n     *\n     * @param {ElementsXhrError} e - the error returned by the API\n     * @param {string} code - the error code\n     * @param {string} id - the id of either an annotation or comment\n     * @return {void}\n     */\n    updateCommentErrorCallback = (e: ElementsXhrError, code: string, id: string) => {\n        this.updateFeedItem(this.createFeedError(messages.commentUpdateErrorMessage), id);\n        this.feedErrorCallback(true, e, code);\n    };\n\n    deleteAnnotation = (\n        file: BoxItem,\n        annotationId: string,\n        permissions: AnnotationPermission,\n        successCallBack: Function,\n        errorCallback: Function,\n    ): void => {\n        this.annotationsAPI = new AnnotationsAPI(this.options);\n\n        if (!file.id) {\n            throw getBadItemError();\n        }\n\n        this.file = file;\n        this.errorCallback = errorCallback;\n\n        this.updateFeedItem({ isPending: true }, annotationId);\n        this.annotationsAPI.deleteAnnotation(\n            this.file.id,\n            annotationId,\n            permissions,\n            this.deleteFeedItem.bind(this, annotationId, successCallBack),\n            (error: ElementsXhrError, code: string) => {\n                // Reusing comment error handler since annotations are treated as comments to user\n                this.deleteCommentErrorCallback(error, code, annotationId);\n            },\n        );\n    };\n\n    /**\n     * Creates a key for the cache\n     *\n     * @param {string} id folder id\n     * @return {string} key\n     */\n    getCacheKey(id: string): string {\n        return `${TYPED_ID_FEED_PREFIX}${id}`;\n    }\n\n    /**\n     * Gets the items from the cache\n     *\n     * @param {string} id the cache id\n     */\n    getCachedItems(id: string): ?FeedItemsCache {\n        const cache = this.getCache();\n        const cacheKey = this.getCacheKey(id);\n        return cache.get(cacheKey);\n    }\n\n    /**\n     * Sets the items in the cache\n     *\n     * @param {string} id - the cache id\n     * @param {Array} items - the feed items to cache\n     */\n    setCachedItems(id: string, items: FeedItems) {\n        const cache = this.getCache();\n        const cacheKey = this.getCacheKey(id);\n        cache.set(cacheKey, {\n            errors: this.errors,\n            items,\n        });\n    }\n\n    /**\n     * Gets the feed items\n     *\n     * @param {BoxItem} file - The file to which the task is assigned\n     * @param {boolean} shouldRefreshCache - Optionally updates the cache\n     * @param {Function} successCallback - the success callback  which is called after data fetching is complete\n     * @param {Function} errorCallback - the error callback which is called after data fetching is complete if there was an error\n     * @param {Function} onError - the function to be called immediately after an error occurs\n     * @param {Object} [options]- feature flips, etc\n     * @param {Object} [options.shouldShowAppActivity] - feature flip the new app activity api\n     */\n    feedItems(\n        file: BoxItem,\n        shouldRefreshCache: boolean,\n        successCallback: Function,\n        errorCallback: (feedItems: FeedItems, errors: ElementsXhrError[]) => void,\n        onError: ErrorCallback,\n        {\n            shouldShowAnnotations = false,\n            shouldShowAppActivity = false,\n        }: { shouldShowAnnotations?: boolean, shouldShowAppActivity?: boolean } = {},\n    ): void {\n        const { id, permissions = {} } = file;\n        const cachedItems = this.getCachedItems(id);\n        if (cachedItems) {\n            const { errors, items } = cachedItems;\n            if (errors.length) {\n                errorCallback(items, errors);\n            } else {\n                successCallback(items);\n            }\n\n            if (!shouldRefreshCache) {\n                return;\n            }\n        }\n\n        this.file = file;\n        this.errors = [];\n        this.errorCallback = onError;\n        const annotationsPromise = shouldShowAnnotations ? this.fetchAnnotations(permissions) : Promise.resolve();\n        const versionsPromise = this.fetchVersions();\n        const currentVersionPromise = this.fetchCurrentVersion();\n        const commentsPromise = this.fetchComments(permissions);\n        const tasksPromise = this.fetchTasksNew();\n        const appActivityPromise = shouldShowAppActivity ? this.fetchAppActivity(permissions) : Promise.resolve();\n\n        Promise.all([\n            versionsPromise,\n            currentVersionPromise,\n            commentsPromise,\n            tasksPromise,\n            appActivityPromise,\n            annotationsPromise,\n        ]).then(([versions: ?FileVersions, currentVersion: ?BoxItemVersion, ...feedItems]) => {\n            const versionsWithCurrent = this.versionsAPI.addCurrentVersion(currentVersion, versions, this.file);\n            const sortedFeedItems = sortFeedItems(versionsWithCurrent, ...feedItems);\n            if (!this.isDestroyed()) {\n                this.setCachedItems(id, sortedFeedItems);\n                if (this.errors.length) {\n                    errorCallback(sortedFeedItems, this.errors);\n                } else {\n                    successCallback(sortedFeedItems);\n                }\n            }\n        });\n    }\n\n    fetchAnnotations(permissions: BoxItemPermission): Promise<?Annotations> {\n        this.annotationsAPI = new AnnotationsAPI(this.options);\n        return new Promise(resolve => {\n            this.annotationsAPI.getAnnotations(\n                this.file.id,\n                undefined,\n                permissions,\n                resolve,\n                this.fetchFeedItemErrorCallback.bind(this, resolve),\n            );\n        });\n    }\n\n    /**\n     * Fetches the comments for a file\n     *\n     * @param {Object} permissions - the file permissions\n     * @return {Promise} - the file comments\n     */\n    fetchComments(permissions: BoxItemPermission): Promise<?Comments> {\n        this.commentsAPI = new CommentsAPI(this.options);\n        return new Promise(resolve => {\n            this.commentsAPI.getComments(\n                this.file.id,\n                permissions,\n                resolve,\n                this.fetchFeedItemErrorCallback.bind(this, resolve),\n            );\n        });\n    }\n\n    /**\n     * Fetches the versions for a file\n     *\n     * @return {Promise} - the file versions\n     */\n    fetchVersions(): Promise<?FileVersions> {\n        this.versionsAPI = new VersionsAPI(this.options);\n\n        return new Promise(resolve => {\n            this.versionsAPI.getVersions(this.file.id, resolve, this.fetchFeedItemErrorCallback.bind(this, resolve));\n        });\n    }\n\n    /**\n     * Fetches the current version for a file\n     *\n     * @return {Promise} - the file versions\n     */\n    fetchCurrentVersion(): Promise<?BoxItemVersion> {\n        this.versionsAPI = new VersionsAPI(this.options);\n\n        return new Promise(resolve => {\n            const { file_version = {} } = this.file;\n            this.versionsAPI.getVersion(\n                this.file.id,\n                file_version.id,\n                resolve,\n                this.fetchFeedItemErrorCallback.bind(this, resolve),\n            );\n        });\n    }\n\n    /**\n     * Fetches the tasks for a file\n     *\n     * @return {Promise} - the feed items\n     */\n    fetchTasksNew(): Promise<?Tasks> {\n        this.tasksNewAPI = new TasksNewAPI(this.options);\n\n        return new Promise(resolve => {\n            this.tasksNewAPI.getTasksForFile({\n                file: { id: this.file.id },\n                successCallback: resolve,\n                errorCallback: (err, code) => this.fetchFeedItemErrorCallback(resolve, err, code),\n            });\n        });\n    }\n\n    /**\n     * Error callback for fetching feed items.\n     * Should only call the error callback if the response is a 401, 429 or >= 500\n     *\n     * @param {Function} resolve - the function which will be called on error\n     * @param {Object} e - the axios error\n     * @param {string} code - the error code\n     * @return {void}\n     */\n    fetchFeedItemErrorCallback(resolve: Function, e: ElementsXhrError, code: string) {\n        const { status } = e;\n        const shouldDisplayError = isUserCorrectableError(status);\n        this.feedErrorCallback(shouldDisplayError, e, code);\n        resolve();\n    }\n\n    /**\n     * Updates a task assignment\n     *\n     * @param {BoxItem} file - The file to which the task is assigned\n     * @param {string} taskId - ID of task to be updated\n     * @param {string} taskCollaboratorId - Task assignment ID\n     * @param {TaskCollabStatus} taskCollaboratorStatus - New task assignment status\n     * @param {Function} successCallback - the function which will be called on success\n     * @param {Function} errorCallback - the function which will be called on error\n     * @return {void}\n     */\n    updateTaskCollaborator = (\n        file: BoxItem,\n        taskId: string,\n        taskCollaboratorId: string,\n        taskCollaboratorStatus: TaskCollabStatus,\n        successCallback: Function,\n        errorCallback: ErrorCallback,\n    ): void => {\n        if (!file.id) {\n            throw getBadItemError();\n        }\n\n        this.file = file;\n        this.errorCallback = errorCallback;\n        this.updateFeedItem({ isPending: true }, taskId);\n        const collaboratorsApi = new TaskCollaboratorsAPI(this.options);\n        this.taskCollaboratorsAPI.push(collaboratorsApi);\n        const taskCollaboratorPayload = {\n            id: taskCollaboratorId,\n            status: taskCollaboratorStatus,\n        };\n        const handleError = (e: ElementsXhrError, code: string) => {\n            let errorMessage;\n            switch (taskCollaboratorStatus) {\n                case TASK_NEW_APPROVED:\n                    errorMessage = messages.taskApproveErrorMessage;\n                    break;\n                case TASK_NEW_COMPLETED:\n                    errorMessage = messages.taskCompleteErrorMessage;\n                    break;\n                case TASK_NEW_REJECTED:\n                    errorMessage = messages.taskRejectErrorMessage;\n                    break;\n                default:\n                    errorMessage = messages.taskCompleteErrorMessage;\n            }\n            this.updateFeedItem(this.createFeedError(errorMessage, messages.taskActionErrorTitle), taskId);\n            this.feedErrorCallback(true, e, code);\n        };\n        collaboratorsApi.updateTaskCollaborator({\n            file,\n            taskCollaborator: taskCollaboratorPayload,\n            successCallback: (taskCollab: TaskCollabAssignee) => {\n                this.updateTaskCollaboratorSuccessCallback(taskId, file, taskCollab, successCallback, handleError);\n            },\n            errorCallback: handleError,\n        });\n    };\n\n    /**\n     * Updates the task assignment state of the updated task\n     *\n     * @param {string} taskId - Box task id\n     * @param {TaskAssignment} updatedCollaborator - New task assignment from API\n     * @param {Function} successCallback - the function which will be called on success\n     * @return {void}\n     */\n    updateTaskCollaboratorSuccessCallback = (\n        taskId: string,\n        file: { id: string },\n        updatedCollaborator: TaskCollabAssignee,\n        successCallback: Function,\n        errorCallback: Function,\n    ): void => {\n        this.tasksNewAPI = new TasksNewAPI(this.options);\n        this.tasksNewAPI.getTask({\n            id: taskId,\n            file,\n            successCallback: task => {\n                this.updateFeedItem({ ...task, isPending: false }, taskId);\n                successCallback(updatedCollaborator);\n            },\n            errorCallback,\n        });\n    };\n\n    /**\n     * Updates a task in the new API\n     *\n     * @param {BoxItem} file - The file to which the task is assigned\n     * @param {string} task - The update task payload object\n     * @param {Function} successCallback - the function which will be called on success\n     * @param {Function} errorCallback - the function which will be called on error\n     * @return {void}\n     */\n    updateTaskNew = async (\n        file: BoxItem,\n        task: TaskUpdatePayload,\n        successCallback: () => void = noop,\n        errorCallback: ErrorCallback = noop,\n    ) => {\n        if (!file.id) {\n            throw getBadItemError();\n        }\n\n        this.file = file;\n        this.errorCallback = errorCallback;\n        this.tasksNewAPI = new TasksNewAPI(this.options);\n        this.updateFeedItem({ isPending: true }, task.id);\n\n        try {\n            // create request for the size of each group by ID\n            // TODO: use async/await for both creating and editing tasks\n            const groupInfoPromises: Array<Promise<any>> = task.addedAssignees\n                .filter(\n                    (assignee: SelectorItem<UserMini | GroupMini>) => assignee.item && assignee.item.type === 'group',\n                )\n                .map(assignee => assignee.id)\n                .map(groupId => {\n                    return new GroupsAPI(this.options).getGroupCount({\n                        file,\n                        group: { id: groupId },\n                    });\n                });\n\n            const groupCounts: Array<{ total_count: number }> = await Promise.all(groupInfoPromises);\n            const hasAnyGroupCountExceeded: boolean = groupCounts.some(\n                groupInfo => groupInfo.total_count > TASK_MAX_GROUP_ASSIGNEES,\n            );\n            const warning = {\n                code: ERROR_CODE_GROUP_EXCEEDS_LIMIT,\n                type: 'warning',\n            };\n\n            if (hasAnyGroupCountExceeded) {\n                this.feedErrorCallback(false, warning, ERROR_CODE_GROUP_EXCEEDS_LIMIT);\n                return;\n            }\n\n            await new Promise((resolve, reject) => {\n                this.tasksNewAPI.updateTaskWithDeps({\n                    file,\n                    task,\n                    successCallback: resolve,\n                    errorCallback: reject,\n                });\n            });\n\n            await new Promise((resolve, reject) => {\n                this.tasksNewAPI.getTask({\n                    file,\n                    id: task.id,\n                    successCallback: (taskData: Task) => {\n                        this.updateFeedItem(\n                            {\n                                ...taskData,\n                                isPending: false,\n                            },\n                            task.id,\n                        );\n\n                        resolve();\n                    },\n                    errorCallback: (e: ElementsXhrError) => {\n                        this.updateFeedItem({ isPending: false }, task.id);\n                        this.feedErrorCallback(false, e, ERROR_CODE_UPDATE_TASK);\n                        reject();\n                    },\n                });\n            });\n\n            // everything succeeded, so call the passed in success callback\n            if (!this.isDestroyed()) {\n                successCallback();\n            }\n        } catch (e) {\n            this.updateFeedItem({ isPending: false }, task.id);\n            this.feedErrorCallback(false, e, ERROR_CODE_UPDATE_TASK);\n        }\n    };\n\n    /**\n     * Deletes a comment.\n     *\n     * @param {BoxItem} file - The file to which the comment belongs to\n     * @param {string} commentId - Comment ID\n     * @param {BoxItemPermission} permissions - Permissions for the comment\n     * @param {Function} successCallback - the function which will be called on success\n     * @param {Function} errorCallback - the function which will be called on error     *\n     * @return {void}\n     */\n    deleteComment = (\n        file: BoxItem,\n        commentId: string,\n        permissions: BoxItemPermission,\n        successCallback: Function,\n        errorCallback: ErrorCallback,\n    ): void => {\n        this.commentsAPI = new CommentsAPI(this.options);\n        if (!file.id) {\n            throw getBadItemError();\n        }\n\n        this.file = file;\n        this.errorCallback = errorCallback;\n        this.updateFeedItem({ isPending: true }, commentId);\n\n        this.commentsAPI.deleteComment({\n            file,\n            commentId,\n            permissions,\n            successCallback: this.deleteFeedItem.bind(this, commentId, successCallback),\n            errorCallback: (e: ElementsXhrError, code: string) => {\n                this.deleteCommentErrorCallback(e, code, commentId);\n            },\n        });\n    };\n\n    /**\n     * Error callback for deleting a comment\n     *\n     * @param {ElementsXhrError} e - the error returned by the API\n     * @param {string} code - the error code\n     * @param {string} commentId - the comment id\n     * @return {void}\n     */\n    deleteCommentErrorCallback = (e: ElementsXhrError, code: string, commentId: string) => {\n        this.updateFeedItem(this.createFeedError(messages.commentDeleteErrorMessage), commentId);\n        this.feedErrorCallback(true, e, code);\n    };\n\n    /**\n     * Creates a task.\n     *\n     * @param {BoxItem} file - The file to which the task is assigned\n     * @param {Object} currentUser - the user who performed the action\n     * @param {string} message - Task text\n     * @param {Array} assignees - List of assignees\n     * @param {number} dueAt - Task's due date\n     * @param {Function} successCallback - the function which will be called on success\n     * @param {Function} errorCallback - the function which will be called on error\n     * @return {void}\n     */\n    createTaskNew = (\n        file: BoxItem,\n        currentUser: User,\n        message: string,\n        assignees: SelectorItems<>,\n        taskType: TaskType,\n        dueAt: ?string,\n        completionRule: TaskCompletionRule,\n        successCallback: Function,\n        errorCallback: ErrorCallback,\n    ): void => {\n        if (!file.id) {\n            throw getBadItemError();\n        }\n\n        this.file = file;\n        this.errorCallback = errorCallback;\n        const uuid = uniqueId('task_');\n        let dueAtString;\n        if (dueAt) {\n            const dueAtDate: Date = new Date(dueAt);\n            dueAtString = dueAtDate.toISOString();\n        }\n\n        // TODO: make pending task generator a function\n        const pendingTask: TaskNew = {\n            created_by: {\n                type: 'task_collaborator',\n                target: currentUser,\n                id: uniqueId(),\n                role: 'CREATOR',\n                status: TASK_NEW_INITIAL_STATUS,\n            },\n            completion_rule: completionRule,\n            created_at: new Date().toISOString(),\n            due_at: dueAtString,\n            id: uuid,\n            description: message,\n            type: TASK,\n            assigned_to: {\n                entries: assignees.map((assignee: SelectorItem<UserMini | GroupMini>) => ({\n                    id: uniqueId(),\n                    target: { ...assignee, avatar_url: '', type: 'user' },\n                    status: TASK_NEW_INITIAL_STATUS,\n                    permissions: {\n                        can_delete: false,\n                        can_update: false,\n                    },\n                    role: 'ASSIGNEE',\n                    type: 'task_collaborator',\n                })),\n                limit: 10,\n                next_marker: null,\n            },\n            permissions: {\n                can_update: false,\n                can_delete: false,\n                can_create_task_collaborator: false,\n                can_create_task_link: false,\n            },\n            task_links: {\n                entries: [\n                    {\n                        id: uniqueId(),\n                        type: 'task_link',\n                        target: {\n                            type: 'file',\n                            ...file,\n                        },\n                        permissions: {\n                            can_delete: false,\n                            can_update: false,\n                        },\n                    },\n                ],\n                limit: 1,\n                next_marker: null,\n            },\n            task_type: taskType,\n            status: TASK_NEW_NOT_STARTED,\n        };\n\n        const taskPayload: TaskPayload = {\n            description: message,\n            due_at: dueAtString,\n            task_type: taskType,\n            completion_rule: completionRule,\n        };\n\n        // create request for the size of each group by ID\n        const groupInfoPromises: Array<Promise<any>> = assignees\n            .filter((assignee: SelectorItem<UserMini | GroupMini>) => (assignee.item && assignee.item.type) === 'group')\n            .map(assignee => assignee.id)\n            .map(groupId => {\n                return new GroupsAPI(this.options).getGroupCount({\n                    file,\n                    group: { id: groupId },\n                });\n            });\n\n        // Fetch each group size in parallel --> return an array of group sizes\n        Promise.all(groupInfoPromises)\n            .then((groupCounts: Array<{ total_count: number }>) => {\n                const hasAnyGroupCountExceeded: boolean = groupCounts.some(\n                    groupInfo => groupInfo.total_count > TASK_MAX_GROUP_ASSIGNEES,\n                );\n                const warning = {\n                    code: ERROR_CODE_GROUP_EXCEEDS_LIMIT,\n                    type: 'warning',\n                };\n                if (hasAnyGroupCountExceeded) {\n                    this.feedErrorCallback(false, warning, ERROR_CODE_GROUP_EXCEEDS_LIMIT);\n                    return;\n                }\n\n                this.tasksNewAPI = new TasksNewAPI(this.options);\n                this.tasksNewAPI.createTaskWithDeps({\n                    file,\n                    task: taskPayload,\n                    assignees,\n                    successCallback: (taskWithDepsData: any) => {\n                        this.addPendingItem(this.file.id, currentUser, pendingTask);\n                        this.updateFeedItem(\n                            {\n                                ...taskWithDepsData,\n                                task_links: {\n                                    entries: taskWithDepsData.task_links,\n                                    next_marker: null,\n                                    limit: 1,\n                                },\n                                assigned_to: {\n                                    entries: taskWithDepsData.assigned_to,\n                                    next_marker: null,\n                                    limit: taskWithDepsData.assigned_to.length,\n                                },\n                                isPending: false,\n                            },\n                            uuid,\n                        );\n                        successCallback(taskWithDepsData);\n                    },\n                    errorCallback: (e: ElementsXhrError, code: string) => {\n                        this.feedErrorCallback(false, e, code);\n                    },\n                });\n            })\n            .catch(error => {\n                this.feedErrorCallback(false, error, ERROR_CODE_CREATE_TASK);\n            });\n    };\n\n    /**\n     * Creates a task group via the API.\n     *\n     * @param {BoxItem} file - The file to which the task is assigned\n     * @param {Task|TaskUpdatePayload} task - The newly created or existing task from the API\n     * @param {SelectorItem} assignee - The user assigned to this task\n     * @param {Function} errorCallback - Task create error callback\n     * @return {Promise<TaskAssignment>}\n     */\n    createTaskCollaboratorsforGroup(\n        file: BoxItem,\n        task: Task | TaskUpdatePayload,\n        assignee: SelectorItem<UserMini | GroupMini>,\n    ): Promise<Array<TaskCollabAssignee>> {\n        if (!file.id) {\n            throw getBadItemError();\n        }\n\n        this.file = file;\n        return new Promise((resolve, reject) => {\n            const taskCollaboratorsAPI = new TaskCollaboratorsAPI(this.options);\n            this.taskCollaboratorsAPI.push(taskCollaboratorsAPI);\n            taskCollaboratorsAPI.createTaskCollaboratorsforGroup({\n                file,\n                task,\n                group: assignee,\n                successCallback: resolve,\n                errorCallback: (e: ElementsXhrError) => {\n                    reject(e);\n                },\n            });\n        });\n    }\n\n    /**\n     * Creates a task collaborator via the API.\n     *\n     * @param {BoxItem} file - The file to which the task is assigned\n     * @param {Task|TaskUpdatePayload} task - The newly created or existing task from the API\n     * @param {SelectorItem} assignee - The user assigned to this task\n     * @param {Function} errorCallback - Task create error callback\n     * @return {Promise<TaskAssignment>}\n     */\n    createTaskCollaborator(\n        file: BoxItem,\n        task: Task | TaskUpdatePayload,\n        assignee: SelectorItem<UserMini | GroupMini>,\n    ): Promise<TaskCollabAssignee> {\n        if (!file.id) {\n            throw getBadItemError();\n        }\n\n        this.file = file;\n        return new Promise((resolve, reject) => {\n            const taskCollaboratorsAPI = new TaskCollaboratorsAPI(this.options);\n            this.taskCollaboratorsAPI.push(taskCollaboratorsAPI);\n\n            taskCollaboratorsAPI.createTaskCollaborator({\n                file,\n                task,\n                user: assignee,\n                successCallback: resolve,\n                errorCallback: (e: ElementsXhrError) => {\n                    reject(e);\n                },\n            });\n        });\n    }\n\n    /**\n     * Deletes a task collaborator via the API.\n     *\n     * @param {BoxItem} file - The file to which the task is assigned\n     * @param {Task|TaskUpdatePayload} task - The newly deleted or existing task from the API\n     * @param {TaskCollabAssignee} assignee - The user assigned to this task\n     * @param {Function} errorCallback - Task delete error callback\n     * @return {Promise<TaskAssignment>}\n     */\n    deleteTaskCollaborator(\n        file: BoxItem,\n        task: Task | TaskUpdatePayload,\n        assignee: TaskCollabAssignee,\n    ): Promise<TaskCollabAssignee> {\n        if (!file.id) {\n            throw getBadItemError();\n        }\n\n        this.file.id = file.id;\n        return new Promise((resolve, reject) => {\n            const taskCollaboratorsAPI = new TaskCollaboratorsAPI(this.options);\n            this.taskCollaboratorsAPI.push(taskCollaboratorsAPI);\n\n            taskCollaboratorsAPI.deleteTaskCollaborator({\n                file,\n                task,\n                taskCollaborator: { id: assignee.id },\n                successCallback: resolve,\n                errorCallback: (e: ElementsXhrError) => {\n                    reject(e);\n                },\n            });\n        });\n    }\n\n    /**\n     * Creates a task link via the API.\n     *\n     * @param {BoxItem} file - The file to which the task is assigned\n     * @param {Task} task - The newly created task from the API\n     * @param {Function} errorCallback - Task create error callback\n     * @return {Promise<TaskAssignment}\n     */\n    createTaskLink(file: BoxItem, task: Task): Promise<TaskLink> {\n        if (!file.id) {\n            throw getBadItemError();\n        }\n\n        this.file = file;\n        return new Promise((resolve, reject) => {\n            const taskLinksAPI = new TaskLinksAPI(this.options);\n            this.taskLinksAPI.push(taskLinksAPI);\n\n            taskLinksAPI.createTaskLink({\n                file,\n                task,\n                successCallback: resolve,\n                errorCallback: reject,\n            });\n        });\n    }\n\n    /**\n     * Deletes a task in the new API\n     *\n     * @param {BoxItem} file - The file to which the task is assigned\n     * @param {string} taskId - The task's id\n     * @param {Function} successCallback - the function which will be called on success\n     * @param {Function} errorCallback - the function which will be called on error\n     * @return {void}\n     */\n    deleteTaskNew = (\n        file: BoxItem,\n        task: TaskNew,\n        successCallback: (taskId: string) => void = noop,\n        errorCallback: ErrorCallback = noop,\n    ) => {\n        if (!file.id) {\n            throw getBadItemError();\n        }\n\n        this.file = file;\n        this.errorCallback = errorCallback;\n        this.tasksNewAPI = new TasksNewAPI(this.options);\n        this.updateFeedItem({ isPending: true }, task.id);\n\n        this.tasksNewAPI.deleteTask({\n            file,\n            task,\n            successCallback: this.deleteFeedItem.bind(this, task.id, successCallback),\n            errorCallback: (e: ElementsXhrError, code: string) => {\n                this.updateFeedItem(this.createFeedError(messages.taskDeleteErrorMessage), task.id);\n                this.feedErrorCallback(true, e, code);\n            },\n        });\n    };\n\n    /**\n     * Deletes a feed item from the cache\n     *\n     * @param {string} id - The id of the feed item to be deleted\n     * @param {Function} successCallback - function to be called after the delete\n     */\n    deleteFeedItem = (id: string, successCallback: Function = noop) => {\n        const cachedItems = this.getCachedItems(this.file.id);\n        if (cachedItems) {\n            const feedItems = cachedItems.items.filter(feedItem => feedItem.id !== id);\n            this.setCachedItems(this.file.id, feedItems);\n\n            if (!this.isDestroyed()) {\n                successCallback(id);\n            }\n        }\n    };\n\n    /**\n     * Network error callback\n     *\n     * @param {boolean} hasError - true if the UI should display an error\n     * @param {ElementsXhrError} e - the error returned by the API\n     * @param {string} code - the error code for the error which occured\n     * @return {void}\n     */\n    feedErrorCallback = (hasError: boolean = false, e: ElementsXhrError, code: string): void => {\n        if (hasError) {\n            this.errors.push({ ...e, code });\n        }\n\n        if (!this.isDestroyed() && this.errorCallback) {\n            this.errorCallback(e, code, {\n                error: e,\n                [IS_ERROR_DISPLAYED]: hasError,\n            });\n        }\n\n        console.error(e); // eslint-disable-line no-console\n    };\n\n    /**\n     * Add a placeholder pending feed item.\n     *\n     * @param {string} id - the file id\n     * @param {Object} currentUser - the user who performed the action\n     * @param {Object} itemBase - Base properties for item to be added to the feed as pending.\n     * @return {void}\n     */\n    addPendingItem = (id: string, currentUser: User, itemBase: Object): Comment | Task | TaskNew | BoxItemVersion => {\n        if (!currentUser) {\n            throw getBadUserError();\n        }\n\n        const date = new Date().toISOString();\n        const pendingFeedItem = {\n            created_at: date,\n            created_by: currentUser,\n            modified_at: date,\n            isPending: true,\n            ...itemBase,\n        };\n        const cachedItems = this.getCachedItems(this.file.id);\n        const feedItems = cachedItems ? cachedItems.items : [];\n        const feedItemsWithPendingItem = [...feedItems, pendingFeedItem];\n        this.setCachedItems(id, feedItemsWithPendingItem);\n\n        return pendingFeedItem;\n    };\n\n    /**\n     * Callback for successful creation of a Comment.\n     *\n     * @param {Comment} commentData - API returned Comment\n     * @param {string} id - ID of the feed item to update with the new comment data\n     * @return {void}\n     */\n    createCommentSuccessCallback = (commentData: Comment, id: string, successCallback: Function): void => {\n        const { message = '', tagged_message = '' } = commentData;\n        // Comment component uses tagged_message only\n        commentData.tagged_message = tagged_message || message;\n\n        this.updateFeedItem(\n            {\n                ...commentData,\n                isPending: false,\n            },\n            id,\n        );\n\n        if (!this.isDestroyed()) {\n            successCallback(commentData);\n        }\n    };\n\n    /**\n     * Callback for failed creation of a Comment.\n     *\n     * @param {Object} e - The axios error\n     * @param {string} code - the error code\n     * @param {string} id - ID of the feed item to update\n     * @return {void}\n     */\n    createCommentErrorCallback = (e: ElementsXhrError, code: string, id: string) => {\n        const errorMessage =\n            e.status === HTTP_STATUS_CODE_CONFLICT\n                ? messages.commentCreateConflictMessage\n                : messages.commentCreateErrorMessage;\n        this.updateFeedItem(this.createFeedError(errorMessage), id);\n        this.feedErrorCallback(false, e, code);\n    };\n\n    /**\n     * Constructs an error object that renders to an inline feed error\n     *\n     * @param {string} message - The error message body.\n     * @param {string} title - The error message title.\n     * @return {Object} An error message object\n     */\n    createFeedError(message: MessageDescriptor, title: MessageDescriptor = commonMessages.errorOccured) {\n        return {\n            error: { message, title },\n        };\n    }\n\n    /**\n     * Replace a feed item with new feed item data.\n     *\n     * @param {Object} updates - The new data to be applied to the feed item.\n     * @param {string} id - ID of the feed item to replace.\n     * @return {void}\n     */\n    updateFeedItem = (updates: Object, id: string): ?FeedItems => {\n        if (!this.file.id) {\n            throw getBadItemError();\n        }\n\n        const cachedItems = this.getCachedItems(this.file.id);\n        if (cachedItems) {\n            const updatedFeedItems = cachedItems.items.map((item: FeedItem) => {\n                if (item.id === id) {\n                    return {\n                        ...item,\n                        ...updates,\n                    };\n                }\n\n                return item;\n            });\n\n            this.setCachedItems(this.file.id, updatedFeedItems);\n            return updatedFeedItems;\n        }\n\n        return null;\n    };\n\n    /**\n     * Create a comment, and make a pending item to be replaced once the API is successful.\n     *\n     * @param {BoxItem} file - The file to which the task is assigned\n     * @param {Object} currentUser - the user who performed the action\n     * @param {string} text - the comment text\n     * @param {boolean} hasMention - true if there is an @mention in the text\n     * @param {Function} successCallback - the success callback\n     * @param {Function} errorCallback - the error callback\n     * @return {void}\n     */\n    createComment = (\n        file: BoxItem,\n        currentUser: User,\n        text: string,\n        hasMention: boolean,\n        successCallback: Function,\n        errorCallback: ErrorCallback,\n    ): void => {\n        const uuid = uniqueId('comment_');\n        const commentData = {\n            id: uuid,\n            tagged_message: text,\n            type: 'comment',\n        };\n\n        if (!file.id) {\n            throw getBadItemError();\n        }\n\n        this.file = file;\n        this.errorCallback = errorCallback;\n        this.addPendingItem(this.file.id, currentUser, commentData);\n\n        const message = {};\n        if (hasMention) {\n            message.taggedMessage = text;\n        } else {\n            message.message = text;\n        }\n\n        this.commentsAPI = new CommentsAPI(this.options);\n\n        this.commentsAPI.createComment({\n            file,\n            ...message,\n            successCallback: (comment: Comment) => {\n                this.createCommentSuccessCallback(comment, uuid, successCallback);\n            },\n            errorCallback: (e: ErrorResponseData, code: string) => {\n                this.createCommentErrorCallback(e, code, uuid);\n            },\n        });\n    };\n\n    /**\n     * Update a comment\n     *\n     * @param {BoxItem} file - The file to which the task is assigned\n     * @param {Object} currentUser - the user who performed the action\n     * @param {string} text - the comment text\n     * @param {boolean} hasMention - true if there is an @mention in the text\n     * @param {Function} successCallback - the success callback\n     * @param {Function} errorCallback - the error callback\n     * @return {void}\n     */\n    updateComment = (\n        file: BoxItem,\n        commentId: string,\n        text: string,\n        hasMention: boolean,\n        permissions: BoxItemPermission,\n        successCallback: Function,\n        errorCallback: ErrorCallback,\n    ): void => {\n        const commentData = {\n            tagged_message: text,\n        };\n\n        if (!file.id) {\n            throw getBadItemError();\n        }\n\n        this.file = file;\n        this.errorCallback = errorCallback;\n        this.updateFeedItem({ ...commentData, isPending: true }, commentId);\n\n        const message = {};\n        if (hasMention) {\n            message.tagged_message = text;\n        } else {\n            message.message = text;\n        }\n\n        this.commentsAPI = new CommentsAPI(this.options);\n\n        this.commentsAPI.updateComment({\n            file,\n            commentId,\n            permissions,\n            ...message,\n            successCallback: (comment: Comment) => {\n                // use the request payload instead of response in the\n                // feed item update because response may not contain\n                // the tagged version of the message\n                this.updateFeedItem(\n                    {\n                        ...message,\n                        isPending: false,\n                    },\n                    commentId,\n                );\n                if (!this.isDestroyed()) {\n                    successCallback(comment);\n                }\n            },\n            errorCallback: (e: ErrorResponseData, code: string) => {\n                this.updateCommentErrorCallback(e, code, commentId);\n            },\n        });\n    };\n\n    destroyTaskCollaborators() {\n        if (Array.isArray(this.taskCollaboratorsAPI)) {\n            this.taskCollaboratorsAPI.forEach(api => api.destroy());\n            this.taskCollaboratorsAPI = [];\n        }\n    }\n\n    destroyTaskLinks() {\n        if (Array.isArray(this.taskLinksAPI)) {\n            this.taskLinksAPI.forEach(api => api.destroy());\n            this.taskLinksAPI = [];\n        }\n    }\n\n    /**\n     * Fetches app activities for a file\n     * @param {BoxItemPermission} permissions - Permissions to attach to the app activity items\n     *\n     * @return {Promise} - the feed items\n     */\n    fetchAppActivity(permissions: BoxItemPermission): Promise<?AppActivityItems> {\n        this.appActivityAPI = new AppActivityAPI(this.options);\n\n        return new Promise(resolve => {\n            this.appActivityAPI.getAppActivity(\n                this.file.id,\n                permissions,\n                resolve,\n                this.fetchFeedItemErrorCallback.bind(this, resolve),\n            );\n        });\n    }\n\n    /**\n     * Deletes an app activity item.\n     *\n     * @param {BoxItem} file - The file to which the app activity belongs to\n     * @param {string} appActivityId - The app activity item id to delete\n     * @param {Function} successCallback - the function which will be called on success\n     * @param {Function} errorCallback - the function which will be called on error\n     * @return {void}\n     */\n    deleteAppActivity = (\n        file: BoxItem,\n        appActivityId: string,\n        successCallback: Function,\n        errorCallback: ErrorCallback,\n    ): void => {\n        const { id } = file;\n        if (!id) {\n            throw getBadItemError();\n        }\n\n        this.appActivityAPI = new AppActivityAPI(this.options);\n\n        this.file = file;\n        this.errorCallback = errorCallback;\n        this.updateFeedItem({ isPending: true }, appActivityId);\n\n        this.appActivityAPI.deleteAppActivity({\n            id,\n            appActivityId,\n            successCallback: this.deleteFeedItem.bind(this, appActivityId, successCallback),\n            errorCallback: (e: ElementsXhrError, code: string) => {\n                this.deleteAppActivityErrorCallback(e, code, appActivityId);\n            },\n        });\n    };\n\n    /**\n     * Error callback for deleting an app activity item\n     *\n     * @param {ElementsXhrError} e - the error returned by the API\n     * @param {string} code - the error code\n     * @param {string} id - the app activity id\n     * @return {void}\n     */\n    deleteAppActivityErrorCallback = (e: ElementsXhrError, code: string, id: string) => {\n        this.updateFeedItem(this.createFeedError(messages.appActivityDeleteErrorMessage), id);\n        this.feedErrorCallback(true, e, code);\n    };\n\n    /**\n     * Destroys all the task feed API's\n     *\n     * @return {void}\n     */\n    destroy() {\n        super.destroy();\n\n        if (this.annotationsAPI) {\n            this.annotationsAPI.destroy();\n            delete this.annotationsAPI;\n        }\n\n        if (this.commentsAPI) {\n            this.commentsAPI.destroy();\n            delete this.commentsAPI;\n        }\n\n        if (this.versionsAPI) {\n            this.versionsAPI.destroy();\n            delete this.versionsAPI;\n        }\n\n        if (this.appActivityAPI) {\n            this.appActivityAPI.destroy();\n            delete this.appActivityAPI;\n        }\n\n        if (this.tasksNewAPI) {\n            this.tasksNewAPI.destroy();\n            delete this.tasksNewAPI;\n        }\n\n        this.destroyTaskCollaborators();\n        this.destroyTaskLinks();\n    }\n}\n\nexport default Feed;\n"],"file":"Feed.js"}