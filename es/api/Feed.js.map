{"version":3,"sources":["../../src/api/Feed.js"],"names":["uniqueId","noop","getBadItemError","getBadUserError","isUserCorrectableError","commonMessages","messages","sortFeedItems","Base","CommentsAPI","VersionsAPI","TasksNewAPI","TaskCollaboratorsAPI","TaskLinksAPI","AppActivityAPI","ERROR_CODE_CREATE_TASK","ERROR_CODE_UPDATE_TASK","HTTP_STATUS_CODE_CONFLICT","IS_ERROR_DISPLAYED","TASK_NEW_APPROVED","TASK_NEW_COMPLETED","TASK_NEW_REJECTED","TASK_NEW_NOT_STARTED","TYPED_ID_FEED_PREFIX","TASK_NEW_INITIAL_STATUS","TASK","Feed","options","file","taskId","taskCollaboratorId","taskCollaboratorStatus","successCallback","errorCallback","id","updateFeedItem","isPending","collaboratorsApi","taskCollaboratorsAPI","push","taskCollaboratorPayload","status","handleError","e","code","errorMessage","taskApproveErrorMessage","taskCompleteErrorMessage","taskRejectErrorMessage","createFeedError","taskActionErrorTitle","feedErrorCallback","updateTaskCollaborator","taskCollaborator","taskCollab","updateTaskCollaboratorSuccessCallback","updatedCollaborator","tasksNewAPI","getTask","task","updatedWithoutError","Promise","all","addedAssignees","map","assignee","createTaskCollaborator","resolve","reject","updateTask","removedAssignees","deleteTaskCollaborator","catch","removeAssigneeError","taskData","isDestroyed","commentId","permissions","commentsAPI","deleteComment","deleteFeedItem","bind","deleteCommentErrorCallback","commentDeleteErrorMessage","currentUser","message","assignees","taskType","dueAt","completionRule","uuid","dueAtString","dueAtDate","Date","toISOString","pendingTask","created_by","type","target","role","completion_rule","created_at","due_at","description","assigned_to","entries","avatar_url","can_delete","can_update","limit","next_marker","can_create_task_collaborator","can_create_task_link","task_links","task_type","taskPayload","createTask","addPendingItem","createTaskNewSuccessCallback","deleteTask","taskDeleteErrorMessage","cachedItems","getCachedItems","feedItems","items","filter","feedItem","setCachedItems","hasError","error","console","itemBase","date","pendingFeedItem","modified_at","feedItemsWithPendingItem","commentData","tagged_message","commentCreateConflictMessage","commentCreateErrorMessage","updates","updatedFeedItems","item","text","hasMention","taggedMessage","createComment","comment","createCommentSuccessCallback","createCommentErrorCallback","updateComment","appActivityId","appActivityAPI","deleteAppActivity","deleteAppActivityErrorCallback","appActivityDeleteErrorMessage","taskLinksAPI","cache","getCache","cacheKey","getCacheKey","get","set","shouldRefreshCache","onError","shouldShowAppActivity","versionsPromise","fetchVersions","currentVersionPromise","fetchCurrentVersion","commentsPromise","fetchComments","tasksPromise","fetchTasksNew","appActivityPromise","fetchAppActivity","then","versions","currentVersion","versionsWithCurrent","versionsAPI","addCurrentVersion","sortedFeedItems","getComments","fetchFeedItemErrorCallback","getVersions","file_version","getVersion","getTasksForFile","err","shouldDisplayError","createTaskLink","taskLink","taskAssignments","length","user","title","errorOccured","Array","isArray","forEach","api","destroy","getAppActivity","destroyTaskCollaborators","destroyTaskLinks"],"mappings":"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","sourcesContent":["/**\n * @flow\n * @file Helper for activity feed API's\n * @author Box\n */\nimport uniqueId from 'lodash/uniqueId';\nimport noop from 'lodash/noop';\nimport type { MessageDescriptor } from 'react-intl';\nimport { getBadItemError, getBadUserError, isUserCorrectableError } from '../utils/error';\nimport commonMessages from '../elements/common/messages';\nimport messages from './messages';\nimport { sortFeedItems } from '../utils/sorter';\nimport Base from './Base';\nimport CommentsAPI from './Comments';\nimport VersionsAPI from './Versions';\nimport TasksNewAPI from './tasks/TasksNew';\nimport TaskCollaboratorsAPI from './tasks/TaskCollaborators';\nimport TaskLinksAPI from './tasks/TaskLinks';\nimport AppActivityAPI from './AppActivity';\nimport {\n    ERROR_CODE_CREATE_TASK,\n    ERROR_CODE_UPDATE_TASK,\n    HTTP_STATUS_CODE_CONFLICT,\n    IS_ERROR_DISPLAYED,\n    TASK_NEW_APPROVED,\n    TASK_NEW_COMPLETED,\n    TASK_NEW_REJECTED,\n    TASK_NEW_NOT_STARTED,\n    TYPED_ID_FEED_PREFIX,\n} from '../constants';\nimport type {\n    TaskCompletionRule,\n    TaskCollabAssignee,\n    TaskCollabStatus,\n    TaskLink,\n    TaskNew,\n    TaskType,\n    TaskPayload,\n    TaskUpdatePayload,\n} from '../common/types/tasks';\n\nconst TASK_NEW_INITIAL_STATUS = TASK_NEW_NOT_STARTED;\nconst TASK = 'task';\n\ntype FeedItemsCache = {\n    hasError: boolean,\n    items: FeedItems,\n};\n\ntype ErrorCallback = (e: ElementsXhrError, code: string, contextInfo?: Object) => void;\n\nclass Feed extends Base {\n    /**\n     * @property {VersionsAPI}\n     */\n    versionsAPI: VersionsAPI;\n\n    /**\n     * @property {CommentsAPI}\n     */\n    commentsAPI: CommentsAPI;\n\n    /**\n     * @property {AppActivityAPI}\n     */\n    appActivityAPI: AppActivityAPI;\n\n    /**\n     * @property {TasksNewAPI}\n     */\n    tasksNewAPI: TasksNewAPI;\n\n    /**\n     * @property {TaskCollaboratorsAPI}\n     */\n    taskCollaboratorsAPI: TaskCollaboratorsAPI[];\n\n    /**\n     * @property {TaskLinksAPI}\n     */\n    taskLinksAPI: TaskLinksAPI[];\n\n    /**\n     * @property {BoxItem}\n     */\n    file: BoxItem;\n\n    /**\n     * @property {boolean}\n     */\n    hasError: boolean;\n\n    constructor(options: Options) {\n        super(options);\n        this.taskCollaboratorsAPI = [];\n        this.taskLinksAPI = [];\n    }\n\n    /**\n     * Creates a key for the cache\n     *\n     * @param {string} id folder id\n     * @return {string} key\n     */\n    getCacheKey(id: string): string {\n        return `${TYPED_ID_FEED_PREFIX}${id}`;\n    }\n\n    /**\n     * Gets the items from the cache\n     *\n     * @param {string} id the cache id\n     */\n    getCachedItems(id: string): ?FeedItemsCache {\n        const cache = this.getCache();\n        const cacheKey = this.getCacheKey(id);\n        return cache.get(cacheKey);\n    }\n\n    /**\n     * Sets the items in the cache\n     *\n     * @param {string} id - the cache id\n     * @param {Array} items - the feed items to cache\n     */\n    setCachedItems(id: string, items: FeedItems) {\n        const cache = this.getCache();\n        const cacheKey = this.getCacheKey(id);\n        cache.set(cacheKey, {\n            hasError: !!this.hasError,\n            items,\n        });\n    }\n\n    /**\n     * Gets the feed items\n     *\n     * @param {BoxItem} file - The file to which the task is assigned\n     * @param {boolean} shouldRefreshCache - Optionally updates the cache\n     * @param {Function} successCallback - the success callback  which is called after data fetching is complete\n     * @param {Function} errorCallback - the error callback which is called after data fetching is complete if there was an error\n     * @param {Function} onError - the function to be called immediately after an error occurs\n     * @param {Object} [options]- feature flips, etc\n     * @param {Object} [options.shouldShowAppActivity] - feature flip the new app activity api\n     */\n    feedItems(\n        file: BoxItem,\n        shouldRefreshCache: boolean,\n        successCallback: Function,\n        errorCallback: (feedItems: FeedItems) => void,\n        onError: ErrorCallback,\n        { shouldShowAppActivity = false }: { shouldShowAppActivity?: boolean } = {},\n    ): void {\n        const { id, permissions = {} } = file;\n        const cachedItems = this.getCachedItems(id);\n        if (cachedItems) {\n            const { hasError, items } = cachedItems;\n            if (hasError) {\n                errorCallback(items);\n            } else {\n                successCallback(items);\n            }\n\n            if (!shouldRefreshCache) {\n                return;\n            }\n        }\n\n        this.file = file;\n        this.hasError = false;\n        this.errorCallback = onError;\n        const versionsPromise = this.fetchVersions();\n        const currentVersionPromise = this.fetchCurrentVersion();\n        const commentsPromise = this.fetchComments(permissions);\n        const tasksPromise = this.fetchTasksNew();\n        const appActivityPromise = shouldShowAppActivity ? this.fetchAppActivity(permissions) : Promise.resolve();\n\n        Promise.all([versionsPromise, currentVersionPromise, commentsPromise, tasksPromise, appActivityPromise]).then(\n            ([versions: ?FileVersions, currentVersion: ?BoxItemVersion, ...feedItems]) => {\n                const versionsWithCurrent = this.versionsAPI.addCurrentVersion(currentVersion, versions, this.file);\n                const sortedFeedItems = sortFeedItems(versionsWithCurrent, ...feedItems);\n                if (!this.isDestroyed()) {\n                    this.setCachedItems(id, sortedFeedItems);\n                    if (this.hasError) {\n                        errorCallback(sortedFeedItems);\n                    } else {\n                        successCallback(sortedFeedItems);\n                    }\n                }\n            },\n        );\n    }\n\n    /**\n     * Fetches the comments for a file\n     *\n     * @param {Object} permissions - the file permissions\n     * @return {Promise} - the file comments\n     */\n    fetchComments(permissions: BoxItemPermission): Promise<?Comments> {\n        this.commentsAPI = new CommentsAPI(this.options);\n        return new Promise(resolve => {\n            this.commentsAPI.getComments(\n                this.file.id,\n                permissions,\n                resolve,\n                this.fetchFeedItemErrorCallback.bind(this, resolve),\n            );\n        });\n    }\n\n    /**\n     * Fetches the versions for a file\n     *\n     * @return {Promise} - the file versions\n     */\n    fetchVersions(): Promise<?FileVersions> {\n        this.versionsAPI = new VersionsAPI(this.options);\n\n        return new Promise(resolve => {\n            this.versionsAPI.getVersions(this.file.id, resolve, this.fetchFeedItemErrorCallback.bind(this, resolve));\n        });\n    }\n\n    /**\n     * Fetches the current version for a file\n     *\n     * @return {Promise} - the file versions\n     */\n    fetchCurrentVersion(): Promise<?BoxItemVersion> {\n        this.versionsAPI = new VersionsAPI(this.options);\n\n        return new Promise(resolve => {\n            const { file_version = {} } = this.file;\n            this.versionsAPI.getVersion(\n                this.file.id,\n                file_version.id,\n                resolve,\n                this.fetchFeedItemErrorCallback.bind(this, resolve),\n            );\n        });\n    }\n\n    /**\n     * Fetches the tasks for a file\n     *\n     * @return {Promise} - the feed items\n     */\n    fetchTasksNew(): Promise<?Tasks> {\n        this.tasksNewAPI = new TasksNewAPI(this.options);\n\n        return new Promise(resolve => {\n            this.tasksNewAPI.getTasksForFile({\n                file: { id: this.file.id },\n                successCallback: resolve,\n                errorCallback: (err, code) => this.fetchFeedItemErrorCallback(resolve, err, code),\n            });\n        });\n    }\n\n    /**\n     * Error callback for fetching feed items.\n     * Should only call the error callback if the response is a 401, 429 or >= 500\n     *\n     * @param {Function} resolve - the function which will be called on error\n     * @param {Object} e - the axios error\n     * @param {string} code - the error code\n     * @return {void}\n     */\n    fetchFeedItemErrorCallback(resolve: Function, e: ElementsXhrError, code: string) {\n        const { status } = e;\n        const shouldDisplayError = isUserCorrectableError(status);\n        this.feedErrorCallback(shouldDisplayError, e, code);\n        resolve();\n    }\n\n    /**\n     * Updates a task assignment\n     *\n     * @param {BoxItem} file - The file to which the task is assigned\n     * @param {string} taskId - ID of task to be updated\n     * @param {string} taskCollaboratorId - Task assignment ID\n     * @param {TaskCollabStatus} taskCollaboratorStatus - New task assignment status\n     * @param {Function} successCallback - the function which will be called on success\n     * @param {Function} errorCallback - the function which will be called on error\n     * @return {void}\n     */\n    updateTaskCollaborator = (\n        file: BoxItem,\n        taskId: string,\n        taskCollaboratorId: string,\n        taskCollaboratorStatus: TaskCollabStatus,\n        successCallback: Function,\n        errorCallback: ErrorCallback,\n    ): void => {\n        if (!file.id) {\n            throw getBadItemError();\n        }\n\n        this.file = file;\n        this.errorCallback = errorCallback;\n        this.updateFeedItem({ isPending: true }, taskId);\n        const collaboratorsApi = new TaskCollaboratorsAPI(this.options);\n        this.taskCollaboratorsAPI.push(collaboratorsApi);\n        const taskCollaboratorPayload = {\n            id: taskCollaboratorId,\n            status: taskCollaboratorStatus,\n        };\n        const handleError = (e: ElementsXhrError, code: string) => {\n            let errorMessage;\n            switch (taskCollaboratorStatus) {\n                case TASK_NEW_APPROVED:\n                    errorMessage = messages.taskApproveErrorMessage;\n                    break;\n                case TASK_NEW_COMPLETED:\n                    errorMessage = messages.taskCompleteErrorMessage;\n                    break;\n                case TASK_NEW_REJECTED:\n                    errorMessage = messages.taskRejectErrorMessage;\n                    break;\n                default:\n                    errorMessage = messages.taskCompleteErrorMessage;\n            }\n            this.updateFeedItem(this.createFeedError(errorMessage, messages.taskActionErrorTitle), taskId);\n            this.feedErrorCallback(true, e, code);\n        };\n        collaboratorsApi.updateTaskCollaborator({\n            file,\n            taskCollaborator: taskCollaboratorPayload,\n            successCallback: (taskCollab: TaskCollabAssignee) => {\n                this.updateTaskCollaboratorSuccessCallback(taskId, file, taskCollab, successCallback, handleError);\n            },\n            errorCallback: handleError,\n        });\n    };\n\n    /**\n     * Updates the task assignment state of the updated task\n     *\n     * @param {string} taskId - Box task id\n     * @param {TaskAssignment} updatedCollaborator - New task assignment from API\n     * @param {Function} successCallback - the function which will be called on success\n     * @return {void}\n     */\n    updateTaskCollaboratorSuccessCallback = (\n        taskId: string,\n        file: { id: string },\n        updatedCollaborator: TaskCollabAssignee,\n        successCallback: Function,\n        errorCallback: Function,\n    ): void => {\n        this.tasksNewAPI = new TasksNewAPI(this.options);\n        this.tasksNewAPI.getTask({\n            id: taskId,\n            file,\n            successCallback: task => {\n                this.updateFeedItem({ ...task, isPending: false }, taskId);\n                successCallback(updatedCollaborator);\n            },\n            errorCallback,\n        });\n    };\n\n    /**\n     * Updates a task in the new API\n     *\n     * @param {BoxItem} file - The file to which the task is assigned\n     * @param {string} task - The update task payload object\n     * @param {Function} successCallback - the function which will be called on success\n     * @param {Function} errorCallback - the function which will be called on error\n     * @return {void}\n     */\n    updateTaskNew = async (\n        file: BoxItem,\n        task: TaskUpdatePayload,\n        successCallback: () => void = noop,\n        errorCallback: ErrorCallback = noop,\n    ) => {\n        if (!file.id) {\n            throw getBadItemError();\n        }\n\n        let updatedWithoutError = true;\n        let removeAssigneeError;\n\n        this.file = file;\n        this.errorCallback = errorCallback;\n        this.tasksNewAPI = new TasksNewAPI(this.options);\n        this.updateFeedItem({ isPending: true }, task.id);\n\n        try {\n            await Promise.all(task.addedAssignees.map(assignee => this.createTaskCollaborator(file, task, assignee)));\n            await new Promise((resolve, reject) => {\n                this.tasksNewAPI.updateTask({\n                    file,\n                    task,\n                    successCallback: resolve,\n                    errorCallback: reject,\n                });\n            });\n\n            await Promise.all(\n                task.removedAssignees.map(assignee => this.deleteTaskCollaborator(file, task, assignee)),\n            ).catch((e: ElementsXhrError) => {\n                updatedWithoutError = false;\n                removeAssigneeError = e;\n            });\n\n            await new Promise((resolve, reject) => {\n                this.tasksNewAPI.getTask({\n                    file,\n                    id: task.id,\n                    successCallback: (taskData: Task) => {\n                        this.updateFeedItem(\n                            {\n                                ...taskData,\n                                isPending: false,\n                            },\n                            task.id,\n                        );\n\n                        if (!updatedWithoutError) {\n                            this.feedErrorCallback(false, removeAssigneeError, ERROR_CODE_UPDATE_TASK);\n                        }\n\n                        resolve();\n                    },\n                    errorCallback: (e: ElementsXhrError) => {\n                        this.updateFeedItem({ isPending: false }, task.id);\n                        this.feedErrorCallback(false, e, ERROR_CODE_UPDATE_TASK);\n                        reject();\n                    },\n                });\n            });\n\n            // everything succeeded, so call the passed in success callback\n            if (!this.isDestroyed() && updatedWithoutError) {\n                successCallback();\n            }\n        } catch (e) {\n            this.updateFeedItem({ isPending: false }, task.id);\n            this.feedErrorCallback(false, e, ERROR_CODE_UPDATE_TASK);\n        }\n    };\n\n    /**\n     * Deletes a comment.\n     *\n     * @param {BoxItem} file - The file to which the comment belongs to\n     * @param {string} commentId - Comment ID\n     * @param {BoxItemPermission} permissions - Permissions for the comment\n     * @param {Function} successCallback - the function which will be called on success\n     * @param {Function} errorCallback - the function which will be called on error     *\n     * @return {void}\n     */\n    deleteComment = (\n        file: BoxItem,\n        commentId: string,\n        permissions: BoxItemPermission,\n        successCallback: Function,\n        errorCallback: ErrorCallback,\n    ): void => {\n        this.commentsAPI = new CommentsAPI(this.options);\n        if (!file.id) {\n            throw getBadItemError();\n        }\n\n        this.file = file;\n        this.errorCallback = errorCallback;\n        this.updateFeedItem({ isPending: true }, commentId);\n\n        this.commentsAPI.deleteComment({\n            file,\n            commentId,\n            permissions,\n            successCallback: this.deleteFeedItem.bind(this, commentId, successCallback),\n            errorCallback: (e: ElementsXhrError, code: string) => {\n                this.deleteCommentErrorCallback(e, code, commentId);\n            },\n        });\n    };\n\n    /**\n     * Error callback for deleting a comment\n     *\n     * @param {ElementsXhrError} e - the error returned by the API\n     * @param {string} code - the error code\n     * @param {string} commentId - the comment id\n     * @return {void}\n     */\n    deleteCommentErrorCallback = (e: ElementsXhrError, code: string, commentId: string) => {\n        this.updateFeedItem(this.createFeedError(messages.commentDeleteErrorMessage), commentId);\n        this.feedErrorCallback(true, e, code);\n    };\n\n    /**\n     * Creates a task.\n     *\n     * @param {BoxItem} file - The file to which the task is assigned\n     * @param {Object} currentUser - the user who performed the action\n     * @param {string} message - Task text\n     * @param {Array} assignees - List of assignees\n     * @param {number} dueAt - Task's due date\n     * @param {Function} successCallback - the function which will be called on success\n     * @param {Function} errorCallback - the function which will be called on error\n     * @return {void}\n     */\n    createTaskNew = (\n        file: BoxItem,\n        currentUser: User,\n        message: string,\n        assignees: SelectorItems,\n        taskType: TaskType,\n        dueAt: ?string,\n        completionRule: TaskCompletionRule,\n        successCallback: Function,\n        errorCallback: ErrorCallback,\n    ): void => {\n        if (!file.id) {\n            throw getBadItemError();\n        }\n\n        this.file = file;\n        this.errorCallback = errorCallback;\n        const uuid = uniqueId('task_');\n        let dueAtString;\n        if (dueAt) {\n            const dueAtDate: Date = new Date(dueAt);\n            dueAtString = dueAtDate.toISOString();\n        }\n\n        // TODO: make pending task generator a function\n        const pendingTask: TaskNew = {\n            created_by: {\n                type: 'task_collaborator',\n                target: currentUser,\n                id: uniqueId(),\n                role: 'CREATOR',\n                status: TASK_NEW_INITIAL_STATUS,\n            },\n            completion_rule: completionRule,\n            created_at: new Date().toISOString(),\n            due_at: dueAtString,\n            id: uuid,\n            description: message,\n            type: TASK,\n            assigned_to: {\n                entries: assignees.map((assignee: SelectorItem) => ({\n                    id: uniqueId(),\n                    target: { ...assignee, avatar_url: '', type: 'user' },\n                    status: TASK_NEW_INITIAL_STATUS,\n                    permissions: {\n                        can_delete: false,\n                        can_update: false,\n                    },\n                    role: 'ASSIGNEE',\n                    type: 'task_collaborator',\n                })),\n                limit: 10,\n                next_marker: null,\n            },\n            permissions: {\n                can_update: false,\n                can_delete: false,\n                can_create_task_collaborator: false,\n                can_create_task_link: false,\n            },\n            task_links: {\n                entries: [\n                    {\n                        id: uniqueId(),\n                        type: 'task_link',\n                        target: {\n                            type: 'file',\n                            ...file,\n                        },\n                        permissions: {\n                            can_delete: false,\n                            can_update: false,\n                        },\n                    },\n                ],\n                limit: 1,\n                next_marker: null,\n            },\n            task_type: taskType,\n            status: TASK_NEW_NOT_STARTED,\n        };\n\n        const taskPayload: TaskPayload = {\n            description: message,\n            due_at: dueAtString,\n            task_type: taskType,\n            completion_rule: completionRule,\n        };\n\n        this.tasksNewAPI = new TasksNewAPI(this.options);\n        this.tasksNewAPI.createTask({\n            file,\n            task: taskPayload,\n            successCallback: (taskData: Task) => {\n                this.addPendingItem(this.file.id, currentUser, pendingTask);\n                this.createTaskNewSuccessCallback(file, uuid, taskData, assignees, successCallback, errorCallback);\n            },\n            errorCallback: (e: ElementsXhrError, code: string) => {\n                this.feedErrorCallback(false, e, code);\n            },\n        });\n    };\n\n    /**\n     * Callback for successful creation of a Task. Creates a task assignment\n     *\n     * @param {BoxItem} file - The file to which the task is assigned\n     * @param {string} id - ID of the feed item to update with the new task data\n     * @param {Task} task - API returned task\n     * @param {Array} assignees - List of assignees\n     * @param {Function} successCallback - the function which will be called on success\n     * @param {Function} errorCallback - the function which will be called on error     *\n     * @return {void}\n     */\n    async createTaskNewSuccessCallback(\n        file: BoxItem,\n        id: string,\n        task: Task,\n        assignees: SelectorItems,\n        successCallback: Function,\n        errorCallback: ErrorCallback,\n    ) {\n        if (!file) {\n            throw getBadItemError();\n        }\n        this.errorCallback = errorCallback;\n\n        try {\n            const taskLink = await this.createTaskLink(file, task);\n            const taskAssignments: Array<TaskCollabAssignee> = await Promise.all(\n                assignees.map((assignee: SelectorItem) => {\n                    return this.createTaskCollaborator(file, task, assignee);\n                }),\n            );\n\n            this.updateFeedItem(\n                {\n                    ...task,\n                    task_links: {\n                        entries: [taskLink],\n                        next_marker: null,\n                        limit: 1,\n                    },\n                    assigned_to: {\n                        entries: taskAssignments,\n                        next_marker: null,\n                        limit: taskAssignments.length,\n                    },\n                    isPending: false,\n                },\n                id,\n            );\n            successCallback(task);\n        } catch (err) {\n            this.feedErrorCallback(false, err, ERROR_CODE_CREATE_TASK);\n        }\n    }\n\n    /**\n     * Creates a task collaborator via the API.\n     *\n     * @param {BoxItem} file - The file to which the task is assigned\n     * @param {Task|TaskUpdatePayload} task - The newly created or existing task from the API\n     * @param {SelectorItem} assignee - The user assigned to this task\n     * @param {Function} errorCallback - Task create error callback\n     * @return {Promise<TaskAssignment>}\n     */\n    createTaskCollaborator(\n        file: BoxItem,\n        task: Task | TaskUpdatePayload,\n        assignee: SelectorItem,\n    ): Promise<TaskCollabAssignee> {\n        if (!file.id) {\n            throw getBadItemError();\n        }\n\n        this.file = file;\n        return new Promise((resolve, reject) => {\n            const taskCollaboratorsAPI = new TaskCollaboratorsAPI(this.options);\n            this.taskCollaboratorsAPI.push(taskCollaboratorsAPI);\n\n            taskCollaboratorsAPI.createTaskCollaborator({\n                file,\n                task,\n                user: assignee,\n                successCallback: resolve,\n                errorCallback: (e: ElementsXhrError) => {\n                    reject(e);\n                },\n            });\n        });\n    }\n\n    /**\n     * Deletes a task collaborator via the API.\n     *\n     * @param {BoxItem} file - The file to which the task is assigned\n     * @param {Task|TaskUpdatePayload} task - The newly deleted or existing task from the API\n     * @param {TaskCollabAssignee} assignee - The user assigned to this task\n     * @param {Function} errorCallback - Task delete error callback\n     * @return {Promise<TaskAssignment>}\n     */\n    deleteTaskCollaborator(\n        file: BoxItem,\n        task: Task | TaskUpdatePayload,\n        assignee: TaskCollabAssignee,\n    ): Promise<TaskCollabAssignee> {\n        if (!file.id) {\n            throw getBadItemError();\n        }\n\n        this.file.id = file.id;\n        return new Promise((resolve, reject) => {\n            const taskCollaboratorsAPI = new TaskCollaboratorsAPI(this.options);\n            this.taskCollaboratorsAPI.push(taskCollaboratorsAPI);\n\n            taskCollaboratorsAPI.deleteTaskCollaborator({\n                file,\n                task,\n                taskCollaborator: { id: assignee.id },\n                successCallback: resolve,\n                errorCallback: (e: ElementsXhrError) => {\n                    reject(e);\n                },\n            });\n        });\n    }\n\n    /**\n     * Creates a task link via the API.\n     *\n     * @param {BoxItem} file - The file to which the task is assigned\n     * @param {Task} task - The newly created task from the API\n     * @param {Function} errorCallback - Task create error callback\n     * @return {Promise<TaskAssignment}\n     */\n    createTaskLink(file: BoxItem, task: Task): Promise<TaskLink> {\n        if (!file.id) {\n            throw getBadItemError();\n        }\n\n        this.file = file;\n        return new Promise((resolve, reject) => {\n            const taskLinksAPI = new TaskLinksAPI(this.options);\n            this.taskLinksAPI.push(taskLinksAPI);\n\n            taskLinksAPI.createTaskLink({\n                file,\n                task,\n                successCallback: resolve,\n                errorCallback: reject,\n            });\n        });\n    }\n\n    /**\n     * Deletes a task in the new API\n     *\n     * @param {BoxItem} file - The file to which the task is assigned\n     * @param {string} taskId - The task's id\n     * @param {Function} successCallback - the function which will be called on success\n     * @param {Function} errorCallback - the function which will be called on error\n     * @return {void}\n     */\n    deleteTaskNew = (\n        file: BoxItem,\n        task: TaskNew,\n        successCallback: (taskId: string) => void = noop,\n        errorCallback: ErrorCallback = noop,\n    ) => {\n        if (!file.id) {\n            throw getBadItemError();\n        }\n\n        this.file = file;\n        this.errorCallback = errorCallback;\n        this.tasksNewAPI = new TasksNewAPI(this.options);\n        this.updateFeedItem({ isPending: true }, task.id);\n\n        this.tasksNewAPI.deleteTask({\n            file,\n            task,\n            successCallback: this.deleteFeedItem.bind(this, task.id, successCallback),\n            errorCallback: (e: ElementsXhrError, code: string) => {\n                this.updateFeedItem(this.createFeedError(messages.taskDeleteErrorMessage), task.id);\n                this.feedErrorCallback(true, e, code);\n            },\n        });\n    };\n\n    /**\n     * Deletes a feed item from the cache\n     *\n     * @param {string} id - The id of the feed item to be deleted\n     * @param {Function} successCallback - function to be called after the delete\n     */\n    deleteFeedItem = (id: string, successCallback: Function = noop) => {\n        const cachedItems = this.getCachedItems(this.file.id);\n        if (cachedItems) {\n            const feedItems = cachedItems.items.filter(feedItem => feedItem.id !== id);\n            this.setCachedItems(this.file.id, feedItems);\n\n            if (!this.isDestroyed()) {\n                successCallback(id);\n            }\n        }\n    };\n\n    /**\n     * Network error callback\n     *\n     * @param {boolean} hasError - true if the UI should display an error\n     * @param {ElementsXhrError} e - the error returned by the API\n     * @param {string} code - the error code for the error which occured\n     * @return {void}\n     */\n    feedErrorCallback = (hasError: boolean = false, e: ElementsXhrError, code: string): void => {\n        if (hasError) {\n            this.hasError = true;\n        }\n\n        if (!this.isDestroyed() && this.errorCallback) {\n            this.errorCallback(e, code, {\n                error: e,\n                [IS_ERROR_DISPLAYED]: hasError,\n            });\n        }\n\n        console.error(e); // eslint-disable-line no-console\n    };\n\n    /**\n     * Add a placeholder pending feed item.\n     *\n     * @param {string} id - the file id\n     * @param {Object} currentUser - the user who performed the action\n     * @param {Object} itemBase - Base properties for item to be added to the feed as pending.\n     * @return {void}\n     */\n    addPendingItem = (id: string, currentUser: User, itemBase: Object): Comment | Task | TaskNew | BoxItemVersion => {\n        if (!currentUser) {\n            throw getBadUserError();\n        }\n\n        const date = new Date().toISOString();\n        const pendingFeedItem = {\n            created_at: date,\n            created_by: currentUser,\n            modified_at: date,\n            isPending: true,\n            ...itemBase,\n        };\n        const cachedItems = this.getCachedItems(this.file.id);\n        const feedItems = cachedItems ? cachedItems.items : [];\n        const feedItemsWithPendingItem = [...feedItems, pendingFeedItem];\n        this.setCachedItems(id, feedItemsWithPendingItem);\n\n        return pendingFeedItem;\n    };\n\n    /**\n     * Callback for successful creation of a Comment.\n     *\n     * @param {Comment} commentData - API returned Comment\n     * @param {string} id - ID of the feed item to update with the new comment data\n     * @return {void}\n     */\n    createCommentSuccessCallback = (commentData: Comment, id: string, successCallback: Function): void => {\n        const { message = '', tagged_message = '' } = commentData;\n        // Comment component uses tagged_message only\n        commentData.tagged_message = tagged_message || message;\n\n        this.updateFeedItem(\n            {\n                ...commentData,\n                isPending: false,\n            },\n            id,\n        );\n\n        if (!this.isDestroyed()) {\n            successCallback(commentData);\n        }\n    };\n\n    /**\n     * Callback for failed creation of a Comment.\n     *\n     * @param {Object} e - The axios error\n     * @param {string} code - the error code\n     * @param {string} id - ID of the feed item to update\n     * @return {void}\n     */\n    createCommentErrorCallback = (e: ElementsXhrError, code: string, id: string) => {\n        const errorMessage =\n            e.status === HTTP_STATUS_CODE_CONFLICT\n                ? messages.commentCreateConflictMessage\n                : messages.commentCreateErrorMessage;\n        this.updateFeedItem(this.createFeedError(errorMessage), id);\n        this.feedErrorCallback(false, e, code);\n    };\n\n    /**\n     * Constructs an error object that renders to an inline feed error\n     *\n     * @param {string} message - The error message body.\n     * @param {string} title - The error message title.\n     * @return {Object} An error message object\n     */\n    createFeedError(message: MessageDescriptor, title: MessageDescriptor = commonMessages.errorOccured) {\n        return {\n            error: { message, title },\n        };\n    }\n\n    /**\n     * Replace a feed item with new feed item data.\n     *\n     * @param {Object} updates - The new data to be applied to the feed item.\n     * @param {string} id - ID of the feed item to replace.\n     * @return {void}\n     */\n    updateFeedItem = (updates: Object, id: string): ?FeedItems => {\n        if (!this.file.id) {\n            throw getBadItemError();\n        }\n\n        const cachedItems = this.getCachedItems(this.file.id);\n        if (cachedItems) {\n            const updatedFeedItems = cachedItems.items.map((item: FeedItem) => {\n                if (item.id === id) {\n                    return {\n                        ...item,\n                        ...updates,\n                    };\n                }\n\n                return item;\n            });\n\n            this.setCachedItems(this.file.id, updatedFeedItems);\n            return updatedFeedItems;\n        }\n\n        return null;\n    };\n\n    /**\n     * Create a comment, and make a pending item to be replaced once the API is successful.\n     *\n     * @param {BoxItem} file - The file to which the task is assigned\n     * @param {Object} currentUser - the user who performed the action\n     * @param {string} text - the comment text\n     * @param {boolean} hasMention - true if there is an @mention in the text\n     * @param {Function} successCallback - the success callback\n     * @param {Function} errorCallback - the error callback\n     * @return {void}\n     */\n    createComment = (\n        file: BoxItem,\n        currentUser: User,\n        text: string,\n        hasMention: boolean,\n        successCallback: Function,\n        errorCallback: ErrorCallback,\n    ): void => {\n        const uuid = uniqueId('comment_');\n        const commentData = {\n            id: uuid,\n            tagged_message: text,\n            type: 'comment',\n        };\n\n        if (!file.id) {\n            throw getBadItemError();\n        }\n\n        this.file = file;\n        this.errorCallback = errorCallback;\n        this.addPendingItem(this.file.id, currentUser, commentData);\n\n        const message = {};\n        if (hasMention) {\n            message.taggedMessage = text;\n        } else {\n            message.message = text;\n        }\n\n        this.commentsAPI = new CommentsAPI(this.options);\n\n        this.commentsAPI.createComment({\n            file,\n            ...message,\n            successCallback: (comment: Comment) => {\n                this.createCommentSuccessCallback(comment, uuid, successCallback);\n            },\n            errorCallback: (e: ErrorResponseData, code: string) => {\n                this.createCommentErrorCallback(e, code, uuid);\n            },\n        });\n    };\n\n    /**\n     * Update a comment\n     *\n     * @param {BoxItem} file - The file to which the task is assigned\n     * @param {Object} currentUser - the user who performed the action\n     * @param {string} text - the comment text\n     * @param {boolean} hasMention - true if there is an @mention in the text\n     * @param {Function} successCallback - the success callback\n     * @param {Function} errorCallback - the error callback\n     * @return {void}\n     */\n    updateComment = (\n        file: BoxItem,\n        commentId: string,\n        text: string,\n        hasMention: boolean,\n        permissions: BoxItemPermission,\n        successCallback: Function,\n        errorCallback: ErrorCallback,\n    ): void => {\n        const commentData = {\n            tagged_message: text,\n        };\n\n        if (!file.id) {\n            throw getBadItemError();\n        }\n\n        this.file = file;\n        this.errorCallback = errorCallback;\n        this.updateFeedItem({ ...commentData, isPending: true }, commentId);\n\n        const message = {};\n        if (hasMention) {\n            message.tagged_message = text;\n        } else {\n            message.message = text;\n        }\n\n        this.commentsAPI = new CommentsAPI(this.options);\n\n        this.commentsAPI.updateComment({\n            file,\n            commentId,\n            permissions,\n            ...message,\n            successCallback: (comment: Comment) => {\n                // use the request payload instead of response in the\n                // feed item update because response may not contain\n                // the tagged version of the message\n                this.updateFeedItem(\n                    {\n                        ...message,\n                        isPending: false,\n                    },\n                    commentId,\n                );\n                if (!this.isDestroyed()) {\n                    successCallback(comment);\n                }\n            },\n            errorCallback: (e: ErrorResponseData, code: string) => {\n                this.feedErrorCallback(true, e, code);\n            },\n        });\n    };\n\n    destroyTaskCollaborators() {\n        if (Array.isArray(this.taskCollaboratorsAPI)) {\n            this.taskCollaboratorsAPI.forEach(api => api.destroy());\n            this.taskCollaboratorsAPI = [];\n        }\n    }\n\n    destroyTaskLinks() {\n        if (Array.isArray(this.taskLinksAPI)) {\n            this.taskLinksAPI.forEach(api => api.destroy());\n            this.taskLinksAPI = [];\n        }\n    }\n\n    /**\n     * Fetches app activities for a file\n     * @param {BoxItemPermission} permissions - Permissions to attach to the app activity items\n     *\n     * @return {Promise} - the feed items\n     */\n    fetchAppActivity(permissions: BoxItemPermission): Promise<?AppActivityItems> {\n        this.appActivityAPI = new AppActivityAPI(this.options);\n\n        return new Promise(resolve => {\n            this.appActivityAPI.getAppActivity(\n                this.file.id,\n                permissions,\n                resolve,\n                this.fetchFeedItemErrorCallback.bind(this, resolve),\n            );\n        });\n    }\n\n    /**\n     * Deletes an app activity item.\n     *\n     * @param {BoxItem} file - The file to which the app activity belongs to\n     * @param {string} appActivityId - The app activity item id to delete\n     * @param {Function} successCallback - the function which will be called on success\n     * @param {Function} errorCallback - the function which will be called on error\n     * @return {void}\n     */\n    deleteAppActivity = (\n        file: BoxItem,\n        appActivityId: string,\n        successCallback: Function,\n        errorCallback: ErrorCallback,\n    ): void => {\n        const { id } = file;\n        if (!id) {\n            throw getBadItemError();\n        }\n\n        this.appActivityAPI = new AppActivityAPI(this.options);\n\n        this.file = file;\n        this.errorCallback = errorCallback;\n        this.updateFeedItem({ isPending: true }, appActivityId);\n\n        this.appActivityAPI.deleteAppActivity({\n            id,\n            appActivityId,\n            successCallback: this.deleteFeedItem.bind(this, appActivityId, successCallback),\n            errorCallback: (e: ElementsXhrError, code: string) => {\n                this.deleteAppActivityErrorCallback(e, code, appActivityId);\n            },\n        });\n    };\n\n    /**\n     * Error callback for deleting an app activity item\n     *\n     * @param {ElementsXhrError} e - the error returned by the API\n     * @param {string} code - the error code\n     * @param {string} id - the app activity id\n     * @return {void}\n     */\n    deleteAppActivityErrorCallback = (e: ElementsXhrError, code: string, id: string) => {\n        this.updateFeedItem(this.createFeedError(messages.appActivityDeleteErrorMessage), id);\n        this.feedErrorCallback(true, e, code);\n    };\n\n    /**\n     * Destroys all the task feed API's\n     *\n     * @return {void}\n     */\n    destroy() {\n        super.destroy();\n\n        if (this.commentsAPI) {\n            this.commentsAPI.destroy();\n            delete this.commentsAPI;\n        }\n\n        if (this.versionsAPI) {\n            this.versionsAPI.destroy();\n            delete this.versionsAPI;\n        }\n\n        if (this.appActivityAPI) {\n            this.appActivityAPI.destroy();\n            delete this.appActivityAPI;\n        }\n\n        if (this.tasksNewAPI) {\n            this.tasksNewAPI.destroy();\n            delete this.tasksNewAPI;\n        }\n\n        this.destroyTaskCollaborators();\n        this.destroyTaskLinks();\n    }\n}\n\nexport default Feed;\n"],"file":"Feed.js"}