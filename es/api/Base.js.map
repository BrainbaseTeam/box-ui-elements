{"version":3,"sources":["../../src/api/Base.js"],"names":["noop","Xhr","Cache","UploadsReachability","getTypedFileId","getBadItemError","getBadPermissionsError","DEFAULT_HOSTNAME_API","DEFAULT_HOSTNAME_UPLOAD","HTTP_GET","HTTP_POST","HTTP_PUT","HTTP_DELETE","Base","options","data","isDestroyed","successCallback","error","errorCallback","response","errorCode","cache","apiHost","uploadHost","xhr","destroyed","consoleLog","window","console","log","consoleError","uploadsReachability","abort","permissionToCheck","permissions","id","permission","suffix","endsWith","Error","entry","requestData","url","apiUrl","getUrl","makeRequest","method","xhrMethod","toLowerCase","bind","successHandler","errorHandler"],"mappings":"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","sourcesContent":["/**\n * @flow\n * @file Base class with utility methods for API calls\n * @author Box\n */\n\nimport noop from 'lodash/noop';\nimport Xhr from '../utils/Xhr';\nimport Cache from '../utils/Cache';\nimport UploadsReachability from './uploads/UploadsReachability';\nimport { getTypedFileId } from '../utils/file';\nimport { getBadItemError, getBadPermissionsError } from '../utils/error';\nimport {\n    DEFAULT_HOSTNAME_API,\n    DEFAULT_HOSTNAME_UPLOAD,\n    HTTP_GET,\n    HTTP_POST,\n    HTTP_PUT,\n    HTTP_DELETE,\n} from '../constants';\nimport type { ElementsErrorCallback, APIOptions } from '../common/types/api';\nimport type APICache from '../utils/Cache';\n\nclass Base {\n    /**\n     * @property {Cache}\n     */\n    cache: APICache;\n\n    /**\n     * @property {boolean}\n     */\n    destroyed: boolean;\n\n    /**\n     * @property {Xhr}\n     */\n    xhr: Xhr;\n\n    /**\n     * @property {string}\n     */\n    apiHost: string;\n\n    /**\n     * @property {string}\n     */\n    uploadHost: string;\n\n    /**\n     * @property {*}\n     */\n    options: APIOptions;\n\n    /**\n     * @property {Function}\n     */\n    consoleLog: Function;\n\n    /**\n     * @property {Function}\n     */\n    consoleError: Function;\n\n    /**\n     * @property {string}\n     */\n    errorCode: string;\n\n    /**\n     * @property {Function}\n     */\n    successCallback: (data?: Object) => void;\n\n    /**\n     * @property {Function}\n     */\n    errorCallback: ElementsErrorCallback;\n\n    /**\n     * @property {UploadsReachability}\n     */\n    uploadsReachability: UploadsReachability;\n\n    /**\n     * [constructor]\n     *\n     * @param {Object} [options]\n     * @param {string} [options.token] - Auth token\n     * @param {string} [options.sharedLink] - Shared link\n     * @param {string} [options.sharedLinkPassword] - Shared link password\n     * @param {string} [options.apiHost] - Api host\n     * @param {string} [options.uploadHost] - Upload host name\n     * @return {Base} Base instance\n     */\n    constructor(options: APIOptions) {\n        this.cache = options.cache || new Cache();\n        this.apiHost = options.apiHost || DEFAULT_HOSTNAME_API;\n        this.uploadHost = options.uploadHost || DEFAULT_HOSTNAME_UPLOAD;\n        // @TODO: avoid keeping another copy of data in this.options\n        this.options = { ...options, apiHost: this.apiHost, uploadHost: this.uploadHost, cache: this.cache };\n        this.xhr = new Xhr(this.options);\n        this.destroyed = false;\n        this.consoleLog = !!options.consoleLog && !!window.console ? window.console.log || noop : noop;\n        this.consoleError = !!options.consoleError && !!window.console ? window.console.error || noop : noop;\n        this.uploadsReachability = new UploadsReachability();\n    }\n\n    /**\n     * [destructor]\n     *\n     * @return {void}\n     */\n    destroy(): void {\n        this.xhr.abort();\n        this.destroyed = true;\n    }\n\n    /**\n     * Asks the API if its destructor has been called\n     *\n     * @return {void}\n     */\n    isDestroyed(): boolean {\n        return this.destroyed;\n    }\n\n    /**\n     * Checks that our desired API call has sufficient permissions and an item ID\n     *\n     * @param {string} permissionToCheck - Permission to check\n     * @param {Object} permissions - Permissions object\n     * @param {string} id - Item id\n     * @return {void}\n     */\n    checkApiCallValidity(permissionToCheck: string, permissions?: Object, id?: string): void {\n        if (!id || !permissions) {\n            throw getBadItemError();\n        }\n\n        const permission = permissions[permissionToCheck];\n        if (!permission) {\n            throw getBadPermissionsError();\n        }\n    }\n\n    /**\n     * Base URL for api\n     *\n     * @return {string} base url\n     */\n    getBaseApiUrl(): string {\n        const suffix: string = this.apiHost.endsWith('/') ? '2.0' : '/2.0';\n        return `${this.apiHost}${suffix}`;\n    }\n\n    /**\n     * Base URL for api uploads\n     *\n     * @return {string} base url\n     */\n    getBaseUploadUrl(): string {\n        const suffix: string = this.uploadHost.endsWith('/') ? 'api/2.0' : '/api/2.0';\n        return `${this.uploadHost}${suffix}`;\n    }\n\n    /**\n     * Gets the cache instance\n     *\n     * @return {Cache} cache instance\n     */\n    getCache(): APICache {\n        return this.cache;\n    }\n\n    /**\n     * Generic success handler\n     *\n     * @param {Object} data - The response data\n     */\n    successHandler = (data: any): void => {\n        if (!this.isDestroyed() && typeof this.successCallback === 'function') {\n            this.successCallback(data);\n        }\n    };\n\n    /**\n     * Generic error handler\n     *\n     * @param {Object} data - The response data\n     * @param {Function} errorCallback the error callback\n     */\n    errorHandler = (error: $AxiosError<any>): void => {\n        if (!this.isDestroyed() && typeof this.errorCallback === 'function') {\n            const { response } = error;\n\n            if (response && response.data) {\n                this.errorCallback(response.data, this.errorCode);\n            } else {\n                this.errorCallback(error, this.errorCode);\n            }\n        }\n    };\n\n    /**\n     * Gets the URL for the API, meant to be overridden\n     * @param {string} id - The item id\n     */\n    /* eslint-disable no-unused-vars */\n    getUrl(id: string) {\n        /* eslint-enable no-unused-vars */\n        throw new Error('Implement me!');\n    }\n\n    /**\n     * Formats an API entry for use in components\n     * @param {string} entry - an API response entry\n     */\n    /* eslint-disable no-unused-vars */\n    format(entry: Object) {\n        /* eslint-enable no-unused-vars */\n        throw new Error('Implement me!');\n    }\n\n    /**\n     * Generic API GET\n     *\n     * @param {string} id - The file id\n     * @param {Function} successCallback - The success callback\n     * @param {Function} errorCallback - The error callback\n     * @param {Object} requestData - additional request data\n     * @param {string} url - API url\n     * @returns {Promise}\n     */\n    get({\n        id,\n        successCallback,\n        errorCallback,\n        requestData, // Note: this is inconsistent, other methods use `data`\n        url,\n    }: {\n        errorCallback: ElementsErrorCallback,\n        id: string,\n        requestData?: Object,\n        successCallback: Function,\n        url?: string,\n    }): Promise<any> {\n        const apiUrl = url || this.getUrl(id);\n        return this.makeRequest(HTTP_GET, id, apiUrl, successCallback, errorCallback, requestData);\n    }\n\n    /**\n     * Generic API POST\n     *\n     * @param {string} id - The file id\n     * @param {string} url - The url to post to\n     * @param {Object} data - The data to post\n     * @param {Function} successCallback - The success callback\n     * @param {Function} errorCallback - The error callback\n     */\n    post({\n        id,\n        url,\n        data,\n        successCallback,\n        errorCallback,\n    }: {\n        data: Object,\n        errorCallback: ElementsErrorCallback,\n        id: string,\n        successCallback: Function,\n        url: string,\n    }): Promise<any> {\n        return this.makeRequest(HTTP_POST, id, url, successCallback, errorCallback, data);\n    }\n\n    /**\n     * Generic API PUT\n     *\n     * @param {string} id - The file id\n     * @param {string} url - The url to put to\n     * @param {Object} data - The data to put\n     * @param {Function} successCallback - The success callback\n     * @param {Function} errorCallback - The error callback\n     */\n    put({\n        id,\n        url,\n        data,\n        successCallback,\n        errorCallback,\n    }: {\n        data: Object,\n        errorCallback: ElementsErrorCallback,\n        id: string,\n        successCallback: Function,\n        url: string,\n    }): Promise<any> {\n        return this.makeRequest(HTTP_PUT, id, url, successCallback, errorCallback, data);\n    }\n\n    /**\n     * Generic API DELETE\n     *\n     * @param {string} id - The file id\n     * @param {string} url - The url of the item to delete\n     * @param {Function} successCallback - The success callback\n     * @param {Function} errorCallback - The error callback\n     * @param {Object} data optional data to delete\n     */\n    delete({\n        id,\n        url,\n        data,\n        successCallback,\n        errorCallback,\n    }: {\n        data?: Object,\n        errorCallback: ElementsErrorCallback,\n        id: string,\n        successCallback: Function,\n        url: string,\n    }): Promise<any> {\n        return this.makeRequest(HTTP_DELETE, id, url, successCallback, errorCallback, data);\n    }\n\n    /**\n     * Generic API CRUD operations\n     *\n     * @param {string} method - which REST method to execute (GET, POST, PUT, DELETE)\n     * @param {string} id - The file id\n     * @param {string} url - The url of the item to operate on\n     * @param {Function} successCallback - The success callback\n     * @param {Function} errorCallback - The error callback\n     * @param {Object} requestData - Optional info to be added to the API call such as params or request body data\n     */\n    async makeRequest(\n        method: string,\n        id: string,\n        url: string,\n        successCallback: Function,\n        errorCallback: ElementsErrorCallback,\n        requestData: Object = {},\n    ): Promise<void> {\n        if (this.isDestroyed()) {\n            return;\n        }\n\n        this.successCallback = successCallback;\n        this.errorCallback = errorCallback;\n\n        // $FlowFixMe\n        const xhrMethod: Function = this.xhr[method.toLowerCase()].bind(this.xhr);\n        try {\n            const { data } = await xhrMethod({\n                id: getTypedFileId(id),\n                url,\n                ...requestData,\n            });\n            this.successHandler(data);\n        } catch (error) {\n            this.errorHandler(error);\n        }\n    }\n}\n\nexport default Base;\n"],"file":"Base.js"}