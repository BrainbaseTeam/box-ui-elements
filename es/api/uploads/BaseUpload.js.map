{"version":3,"sources":["../../../src/api/uploads/BaseUpload.js"],"names":["Base","DEFAULT_RETRY_DELAY_MS","MS_IN_S","MAX_RETRY","BaseUpload","isDestroyed","url","getBaseApiUrl","fileId","replace","file","size","name","attributes","fileName","parent","id","folderId","xhr","options","data","successHandler","preflightSuccessHandler","errorHandler","preflightErrorHandler","error","errorData","response","retryCount","errorCallback","status","overwrite","conflictFileId","context_info","conflicts","makePreflightRequest","extension","substr","lastIndexOf","Date","now","code","retryAfterMs","headers","retryAfterSec","parseInt","get","Number","isNaN","retryTimeout","setTimeout","message","reader","blob","Promise","resolve","reject","readAsArrayBuffer","onload","buffer","result","readCompleteTimestamp","onerror"],"mappings":"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","sourcesContent":["/**\n * @flow\n * @file Base helper for the Box Upload APIs\n * @author Box\n */\n\nimport Base from '../Base';\nimport { DEFAULT_RETRY_DELAY_MS, MS_IN_S } from '../../constants';\n\nconst MAX_RETRY = 5;\n\nclass BaseUpload extends Base {\n    errorCallback: Function;\n\n    file: File;\n\n    fileId: ?string;\n\n    fileName: string;\n\n    folderId: string;\n\n    overwrite: boolean;\n\n    preflightSuccessHandler: Function;\n\n    retryCount: number = 0;\n\n    retryTimeout: TimeoutID;\n\n    /**\n     * Sends an upload pre-flight request. If a file ID is available,\n     * send a pre-flight request to that file version.\n     *\n     * @private\n     * @return {void}\n     */\n    makePreflightRequest = (): void => {\n        if (this.isDestroyed()) {\n            return;\n        }\n\n        let url = `${this.getBaseApiUrl()}/files/content`;\n        if (this.fileId) {\n            url = url.replace('content', `${this.fileId}/content`);\n        }\n\n        const { size, name } = this.file;\n        const attributes = {\n            name: this.fileName || name,\n            parent: { id: this.folderId },\n            size,\n        };\n\n        this.xhr.options({\n            url,\n            data: attributes,\n            successHandler: this.preflightSuccessHandler,\n            errorHandler: this.preflightErrorHandler,\n        });\n    };\n\n    /**\n     * Handles a preflight error\n     *\n     * @param {Object} error - preflight error\n     * @return {void}\n     */\n    preflightErrorHandler = (error: any): void => {\n        if (this.isDestroyed()) {\n            return;\n        }\n\n        this.fileName = this.file ? this.file.name : '';\n\n        // TODO: Normalize error object and clean up error handling\n        let errorData = error;\n        const { response } = error;\n        if (response && response.data) {\n            errorData = response.data;\n        }\n\n        if (this.retryCount >= MAX_RETRY) {\n            this.errorCallback(errorData);\n            // Automatically handle name conflict errors\n        } else if (errorData && errorData.status === 409) {\n            if (this.overwrite) {\n                const conflictFileId = errorData.context_info.conflicts.id;\n                if (!this.fileId && !!conflictFileId) {\n                    this.fileId = conflictFileId;\n                }\n\n                // Error response contains file ID to upload a new file version for\n                this.makePreflightRequest();\n            } else {\n                // Otherwise, reupload and append timestamp\n                // 'test.jpg' becomes 'test-TIMESTAMP.jpg'\n                const extension = this.fileName.substr(this.fileName.lastIndexOf('.')) || '';\n                this.fileName = `${this.fileName.substr(0, this.fileName.lastIndexOf('.'))}-${Date.now()}${extension}`;\n                this.makePreflightRequest();\n            }\n\n            this.retryCount += 1;\n            // When rate limited, retry after interval defined in header\n        } else if (errorData && (errorData.status === 429 || errorData.code === 'too_many_requests')) {\n            let retryAfterMs = DEFAULT_RETRY_DELAY_MS;\n\n            if (errorData.headers) {\n                const retryAfterSec = parseInt(\n                    errorData.headers['retry-after'] || errorData.headers.get('Retry-After'),\n                    10,\n                );\n\n                if (!Number.isNaN(retryAfterSec)) {\n                    retryAfterMs = retryAfterSec * MS_IN_S;\n                }\n            }\n\n            this.retryTimeout = setTimeout(this.makePreflightRequest, retryAfterMs);\n            this.retryCount += 1;\n\n            // If another error status that isn't name conflict or rate limiting, fail upload\n        } else if (\n            errorData &&\n            (errorData.status || errorData.message === 'Failed to fetch') &&\n            typeof this.errorCallback === 'function'\n        ) {\n            this.errorCallback(errorData);\n            // Retry with exponential backoff for other failures since these are likely to be network errors\n        } else {\n            this.retryTimeout = setTimeout(this.makePreflightRequest, 2 ** this.retryCount * MS_IN_S);\n            this.retryCount += 1;\n        }\n    };\n\n    /**\n     * Read a blob with FileReader\n     *\n     * @param {FileReader} reader\n     * @param {Blob} blob\n     * @return {Promise}\n     */\n    readFile(reader: FileReader, blob: Blob): Promise<any> {\n        return new Promise((resolve, reject) => {\n            reader.readAsArrayBuffer(blob);\n            reader.onload = () => {\n                resolve({\n                    buffer: reader.result,\n                    readCompleteTimestamp: Date.now(),\n                });\n            };\n\n            reader.onerror = reject;\n        });\n    }\n}\n\nexport default BaseUpload;\n"],"file":"BaseUpload.js"}