{"version":3,"sources":["../../../src/api/uploads/BaseUpload.js"],"names":["Base","DEFAULT_RETRY_DELAY_MS","MS_IN_S","DEFAULT_HOSTNAME_UPLOAD","DEFAULT_HOSTNAME_UPLOAD_APP","DEFAULT_HOSTNAME_UPLOAD_GOV","MAX_RETRY","MAX_REACHABILITY_RETRY","BaseUpload","isDestroyed","url","getBaseApiUrl","fileId","replace","isUploadFallbackLogicEnabled","unreachableHostUrls","uploadsReachability","getUnreachableHostsUrls","length","join","file","size","name","attributes","fileName","parent","id","folderId","description","fileDescription","xhr","options","data","successHandler","response","preflightSuccessReachabilityHandler","preflightSuccessHandler","errorHandler","preflightErrorHandler","upload_url","uploadHost","getUploadHostFromUrl","isReachable","isHostReachable","reachabilityRetryCount","makePreflightRequest","error","errorData","retryCount","errorCallback","status","overwrite","conflictFileId","context_info","conflicts","conflictCallback","extension","substr","lastIndexOf","Date","now","code","retryAfterMs","headers","retryAfterSec","parseInt","get","Number","isNaN","retryTimeout","setTimeout","message","reader","blob","Promise","resolve","reject","readAsArrayBuffer","onload","buffer","result","readCompleteTimestamp","onerror","uploadUrl","splitUrl","split"],"mappings":"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","sourcesContent":["/**\n * @flow\n * @file Base helper for the Box Upload APIs\n * @author Box\n */\n\nimport Base from '../Base';\nimport {\n    DEFAULT_RETRY_DELAY_MS,\n    MS_IN_S,\n    DEFAULT_HOSTNAME_UPLOAD,\n    DEFAULT_HOSTNAME_UPLOAD_APP,\n    DEFAULT_HOSTNAME_UPLOAD_GOV,\n} from '../../constants';\n\nconst MAX_RETRY = 5;\n// Note: We may have to change this number if we add a lot more fast upload hosts.\nconst MAX_REACHABILITY_RETRY = 10;\n\nclass BaseUpload extends Base {\n    errorCallback: Function;\n\n    file: File;\n\n    fileId: ?string;\n\n    fileName: string;\n\n    fileDescription: ?string;\n\n    folderId: string;\n\n    overwrite: boolean;\n\n    conflictCallback: ?(fileName: string) => string;\n\n    preflightSuccessHandler: Function;\n\n    retryCount: number = 0;\n\n    reachabilityRetryCount: number = 0;\n\n    retryTimeout: TimeoutID;\n\n    isUploadFallbackLogicEnabled: boolean = false;\n\n    /**\n     * Sends an upload pre-flight request. If a file ID is available,\n     * send a pre-flight request to that file version.\n     *\n     * @private\n     * @return {void}\n     */\n    makePreflightRequest = (): void => {\n        if (this.isDestroyed()) {\n            return;\n        }\n\n        let url = `${this.getBaseApiUrl()}/files/content`;\n        if (this.fileId) {\n            url = url.replace('content', `${this.fileId}/content`);\n        }\n\n        if (this.isUploadFallbackLogicEnabled) {\n            // Add unreachable hosts to url\n            const unreachableHostUrls = this.uploadsReachability.getUnreachableHostsUrls();\n            if (unreachableHostUrls.length !== 0) {\n                url += `?unreachable_hosts=${unreachableHostUrls.join(',')}`;\n            }\n        }\n\n        const { size, name } = this.file;\n        const attributes = {\n            name: this.fileName || name,\n            parent: { id: this.folderId },\n            description: this.fileDescription,\n            size,\n        };\n\n        this.xhr.options({\n            url,\n            data: attributes,\n            successHandler: response => {\n                if (this.isUploadFallbackLogicEnabled) {\n                    this.preflightSuccessReachabilityHandler(response);\n                } else {\n                    this.preflightSuccessHandler(response);\n                }\n            },\n            errorHandler: this.preflightErrorHandler,\n        });\n    };\n\n    /**\n     * Handles successful preflight response.\n     * Performs a upload reachability test before calling preflightSuccessHandler.\n     *\n     * @param {Object} - Request options\n     * @return {Promise} Async function promise\n     */\n    preflightSuccessReachabilityHandler = async ({ data }: { data: { upload_url?: string } }): Promise<any> => {\n        if (this.isDestroyed()) {\n            return;\n        }\n\n        const { upload_url } = data;\n        // If upload_url is not available, don't make reachability test\n        if (!upload_url) {\n            this.preflightSuccessHandler({ data });\n            return;\n        }\n\n        const uploadHost = this.getUploadHostFromUrl(upload_url);\n        // The default upload host should always be reachable\n        // DEFAULT_HOSTNAME_UPLOAD is the original default upload host, while DEFAULT_HOSTNAME_UPLOAD_APP is recent.\n        // Both of these hosts will resolve to the same IP so they are interchangeable.\n        if (\n            uploadHost === `${DEFAULT_HOSTNAME_UPLOAD}/` ||\n            uploadHost === `${DEFAULT_HOSTNAME_UPLOAD_APP}/` ||\n            uploadHost === `${DEFAULT_HOSTNAME_UPLOAD_GOV}/`\n        ) {\n            this.preflightSuccessHandler({ data });\n            return;\n        }\n\n        // If upload host reachable upload file, else make a new preflight request\n        const isHostReachable = await this.uploadsReachability.isReachable(uploadHost);\n        if (isHostReachable) {\n            this.preflightSuccessHandler({ data });\n        } else if (this.reachabilityRetryCount >= MAX_REACHABILITY_RETRY) {\n            this.preflightSuccessHandler({ data: {} });\n        } else {\n            this.reachabilityRetryCount += 1;\n            this.makePreflightRequest();\n        }\n    };\n\n    /**\n     * Handles a preflight error\n     *\n     * @param {Object} error - preflight error\n     * @return {void}\n     */\n    preflightErrorHandler = (error: any): void => {\n        if (this.isDestroyed()) {\n            return;\n        }\n\n        this.fileName = this.file ? this.file.name : '';\n\n        // TODO: Normalize error object and clean up error handling\n        let errorData = error;\n        const { response } = error;\n        if (response && response.data) {\n            errorData = response.data;\n        }\n\n        if (this.retryCount >= MAX_RETRY) {\n            this.errorCallback(errorData);\n            // Automatically handle name conflict errors\n        } else if (errorData && errorData.status === 409) {\n            if (this.overwrite) {\n                // Error response contains file ID to upload a new file version for\n                const conflictFileId = errorData.context_info.conflicts.id;\n                if (!this.fileId && !!conflictFileId) {\n                    this.fileId = conflictFileId;\n                }\n            } else if (this.conflictCallback) {\n                // conflictCallback handler for setting new file name\n                this.fileName = this.conflictCallback(this.fileName);\n            } else {\n                // Otherwise, reupload and append timestamp\n                // 'test.jpg' becomes 'test-TIMESTAMP.jpg'\n                const extension = this.fileName.substr(this.fileName.lastIndexOf('.')) || '';\n                this.fileName = `${this.fileName.substr(0, this.fileName.lastIndexOf('.'))}-${Date.now()}${extension}`;\n            }\n            this.makePreflightRequest();\n            this.retryCount += 1;\n\n            // When rate limited, retry after interval defined in header\n        } else if (errorData && (errorData.status === 429 || errorData.code === 'too_many_requests')) {\n            let retryAfterMs = DEFAULT_RETRY_DELAY_MS;\n\n            if (errorData.headers) {\n                const retryAfterSec = parseInt(\n                    errorData.headers['retry-after'] || errorData.headers.get('Retry-After'),\n                    10,\n                );\n\n                if (!Number.isNaN(retryAfterSec)) {\n                    retryAfterMs = retryAfterSec * MS_IN_S;\n                }\n            }\n\n            this.retryTimeout = setTimeout(this.makePreflightRequest, retryAfterMs);\n            this.retryCount += 1;\n\n            // If another error status that isn't name conflict or rate limiting, fail upload\n        } else if (\n            errorData &&\n            (errorData.status || errorData.message === 'Failed to fetch') &&\n            typeof this.errorCallback === 'function'\n        ) {\n            this.errorCallback(errorData);\n            // Retry with exponential backoff for other failures since these are likely to be network errors\n        } else {\n            this.retryTimeout = setTimeout(this.makePreflightRequest, 2 ** this.retryCount * MS_IN_S);\n            this.retryCount += 1;\n        }\n    };\n\n    /**\n     * Read a blob with FileReader\n     *\n     * @param {FileReader} reader\n     * @param {Blob} blob\n     * @return {Promise}\n     */\n    readFile(reader: FileReader, blob: Blob): Promise<any> {\n        return new Promise((resolve, reject) => {\n            reader.readAsArrayBuffer(blob);\n            reader.onload = () => {\n                resolve({\n                    buffer: reader.result,\n                    readCompleteTimestamp: Date.now(),\n                });\n            };\n\n            reader.onerror = reject;\n        });\n    }\n\n    /**\n     * Parse uploadHost from uploadUrl\n     *\n     * @param uploadUrl - uploadUrl from preflight response\n     * @return {string}\n     */\n    getUploadHostFromUrl(uploadUrl: string): string {\n        const splitUrl = uploadUrl.split('/');\n        const uploadHost = `${splitUrl[0]}//${splitUrl[2]}/`;\n        return uploadHost;\n    }\n}\n\nexport default BaseUpload;\n"],"file":"BaseUpload.js"}