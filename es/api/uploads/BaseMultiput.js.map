{"version":3,"sources":["../../../src/api/uploads/BaseMultiput.js"],"names":["BaseUpload","DEFAULT_MULTIPUT_CONFIG","digestReadahead","initialRetryDelayMs","maxRetryDelayMs","parallelism","requestTimeoutMs","retries","BaseMultiput","options","sessionEndpoints","config","shouldRetry","eventType","eventInfo","data","event_type","event_info","xhr","post","url","logEvent"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;;;;;AAKA,OAAOA,UAAP,MAAuB,cAAvB;AAIA,IAAMC,uBAAuC,GAAG;AAC5CC,EAAAA,eAAe,EAAE,CAD2B;AACxB;AACpBC,EAAAA,mBAAmB,EAAE,IAFuB;AAEjB;AAC3BC,EAAAA,eAAe,EAAE,KAH2B;AAGpB;AACxBC,EAAAA,WAAW,EAAE,CAJ+B;AAI5B;AAChBC,EAAAA,gBAAgB,EAAE,MAL0B;AAKlB;AAC1BC,EAAAA,OAAO,EAAE,CANmC,CAMhC;;AANgC,CAAhD;;IASMC,Y;;;;;AAKF;;;;;;;;AAQA,wBAAYC,OAAZ,EAAiCC,gBAAjC,EAA2DC,MAA3D,EAA0F;AAAA;;AAAA;;AACtF,wGACOF,OADP;AAEIG,MAAAA,WAAW,EAAE,KAFjB,CAEwB;;AAFxB;;AADsF,+DAiB/E,UAACC,SAAD,EAAoBC,SAApB,EAA2C;AAClD,UAAMC,IAGL,GAAG;AACAC,QAAAA,UAAU,EAAEH;AADZ,OAHJ;;AAOA,UAAIC,SAAJ,EAAe;AACXC,QAAAA,IAAI,CAACE,UAAL,GAAkBH,SAAlB;AACH;;AAED,aAAO,MAAKI,GAAL,CAASC,IAAT,CAAc;AACjBC,QAAAA,GAAG,EAAE,MAAKV,gBAAL,CAAsBW,QADV;AAEjBN,QAAAA,IAAI,EAAJA;AAFiB,OAAd,CAAP;AAIH,KAjCyF;;AAMtF,UAAKJ,MAAL,GAAcA,MAAM,IAAIV,uBAAxB;AACA,UAAKS,gBAAL,GAAwBA,gBAAxB;AAPsF;AAQzF;AAED;;;;;;;;;;EAvBuBV,U;;AAiD3B,eAAeQ,YAAf","sourcesContent":["/**\n * @flow\n * @file Multiput upload base class\n * @author Box\n */\nimport BaseUpload from './BaseUpload';\nimport type { MultiputConfig } from '../../common/types/upload';\nimport type { APIOptions } from '../../common/types/api';\n\nconst DEFAULT_MULTIPUT_CONFIG: MultiputConfig = {\n    digestReadahead: 5, // How many parts past those currently uploading to precompute digest for\n    initialRetryDelayMs: 5000, // Base for exponential backoff on retries\n    maxRetryDelayMs: 60000, // Upper bound for time between retries\n    parallelism: 4, // Maximum number of parts to upload at a time\n    requestTimeoutMs: 120000, // Idle timeout on part upload, overall request timeout on other requests\n    retries: 5, // How many times to retry requests such as upload part or commit. Note that total number of attempts will be retries + 1 in worst case where all attempts fail.\n};\n\nclass BaseMultiput extends BaseUpload {\n    config: MultiputConfig;\n\n    sessionEndpoints: Object;\n\n    /**\n     * [constructor]\n     *\n     * @param {Options} options\n     * @param {Object} sessionEndpoints\n     * @param {MultiputConfig} [config]\n     * @return {void}\n     */\n    constructor(options: APIOptions, sessionEndpoints: Object, config?: MultiputConfig): void {\n        super({\n            ...options,\n            shouldRetry: false, // disable XHR retries as there is already retry logic\n        });\n\n        this.config = config || DEFAULT_MULTIPUT_CONFIG;\n        this.sessionEndpoints = sessionEndpoints;\n    }\n\n    /**\n     * POST log event\n     *\n     * @param {string} eventType\n     * @param {string} [eventInfo]\n     * @return {Promise}\n     */\n    logEvent = (eventType: string, eventInfo?: string) => {\n        const data: {\n            event_info?: string,\n            event_type: string,\n        } = {\n            event_type: eventType,\n        };\n\n        if (eventInfo) {\n            data.event_info = eventInfo;\n        }\n\n        return this.xhr.post({\n            url: this.sessionEndpoints.logEvent,\n            data,\n        });\n    };\n}\n\nexport default BaseMultiput;\n"],"file":"BaseMultiput.js"}