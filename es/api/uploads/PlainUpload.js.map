{"version":3,"sources":["../../../src/api/uploads/PlainUpload.js"],"names":["noop","digest","getFileLastModifiedAsISONoMSIfPossible","BaseUpload","CONTENT_MD5_HEADER","PlainUpload","data","entries","isDestroyed","successCallback","event","progressCallback","uploadUrl","upload_url","getBaseUploadUrl","fileId","replace","attributes","JSON","stringify","name","fileName","parent","id","folderId","description","fileDescription","content_modified_at","file","options","url","headers","successHandler","uploadSuccessHandler","errorHandler","preflightErrorHandler","progressHandler","uploadProgressHandler","computeSHA1","sha1","xhr","uploadFile","errorCallback","conflictCallback","overwrite","makePreflightRequest","clearTimeout","retryTimeout","destroy","reader","window","FileReader","readFile","buffer","hashBuffer","hashArray","Array","from","Uint8Array","map","b","toString","slice","join"],"mappings":"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","sourcesContent":["/**\n * @flow\n * @file Helper for the plain Box Upload API\n * @author Box\n */\n\nimport noop from 'lodash/noop';\nimport { digest } from '../../utils/webcrypto';\nimport { getFileLastModifiedAsISONoMSIfPossible } from '../../utils/uploads';\nimport BaseUpload from './BaseUpload';\nimport type { BoxItem } from '../../common/types/core';\n\nconst CONTENT_MD5_HEADER = 'Content-MD5';\n\nclass PlainUpload extends BaseUpload {\n    successCallback: Function;\n\n    progressCallback: Function;\n\n    /**\n     * Handles an upload success response\n     *\n     * @param {Object} data - Upload success data\n     * @return {void}\n     */\n    uploadSuccessHandler = ({ data }: Object): void => {\n        const { entries }: { entries: BoxItem[] } = data;\n        if (this.isDestroyed()) {\n            return;\n        }\n\n        if (typeof this.successCallback === 'function') {\n            // Response entries are the successfully created Box File objects\n            this.successCallback(entries);\n        }\n    };\n\n    /**\n     * Handles an upload progress event\n     *\n     * @param {Object} event - Progress event\n     * @return {void}\n     */\n    uploadProgressHandler = (event: ProgressEvent): void => {\n        if (this.isDestroyed()) {\n            return;\n        }\n\n        if (typeof this.progressCallback === 'function') {\n            this.progressCallback(event);\n        }\n    };\n\n    /**\n     * Uploads a file. If a file ID is supplied, use the Upload File\n     * Version API to replace the file.\n     *\n     * @param {Object} - Request options\n     * @param {boolean} [options.url] - Upload URL to use\n     * @return {Promise} Async function promise\n     */\n    preflightSuccessHandler = async ({ data }: { data: { upload_url?: string } }): Promise<any> => {\n        if (this.isDestroyed()) {\n            return;\n        }\n\n        // Use provided upload URL if passed in, otherwise construct\n        let uploadUrl = data.upload_url;\n        if (!uploadUrl) {\n            uploadUrl = `${this.getBaseUploadUrl()}/files/content`;\n\n            if (this.fileId) {\n                uploadUrl = uploadUrl.replace('content', `${this.fileId}/content`);\n            }\n        }\n\n        const attributes = JSON.stringify({\n            name: this.fileName,\n            parent: { id: this.folderId },\n            description: this.fileDescription,\n            content_modified_at: getFileLastModifiedAsISONoMSIfPossible(this.file),\n        });\n\n        const options = {\n            url: uploadUrl,\n            data: {\n                attributes,\n                file: this.file,\n            },\n            headers: {},\n            successHandler: this.uploadSuccessHandler,\n            errorHandler: this.preflightErrorHandler,\n            progressHandler: this.uploadProgressHandler,\n        };\n\n        // Calculate SHA1 for file consistency check\n        const sha1 = await this.computeSHA1(this.file);\n        if (sha1) {\n            options.headers = {\n                [CONTENT_MD5_HEADER]: sha1,\n            };\n        }\n\n        this.xhr.uploadFile(options);\n    };\n\n    /**\n     * Uploads a file. If there is a conflict and overwrite is true, replace the file.\n     * Otherwise, re-upload with a different name.\n     *\n     * @param {Object} options - Upload options\n     * @param {string} options.folderId - untyped folder id\n     * @param {string} [options.fileId] - Untyped file id (e.g. no \"file_\" prefix)\n     * @param {File} options.file - File blob object\n     * @param {Function} [options.successCallback] - Function to call with response\n     * @param {Function} [options.errorCallback] - Function to call with errors\n     * @param {Function} [options.progressCallback] - Function to call with progress\n     * @param {Function} [options.conflictCallback] - Function to call on conflicting file names\n     * @param {boolean} [overwrite] - Should upload overwrite file with same name\n     * @return {void}\n     */\n    upload({\n        folderId,\n        fileId,\n        file,\n        fileDescription,\n        successCallback = noop,\n        errorCallback = noop,\n        progressCallback = noop,\n        conflictCallback,\n        overwrite = true,\n    }: {\n        conflictCallback?: Function,\n        errorCallback: Function,\n        file: File,\n        fileDescription: ?string,\n        fileId: ?string,\n        folderId: string,\n        overwrite: boolean,\n        progressCallback: Function,\n        successCallback: Function,\n    }): void {\n        if (this.isDestroyed()) {\n            return;\n        }\n\n        // Save references\n        this.folderId = folderId;\n        this.fileId = fileId;\n        this.file = file;\n        this.fileDescription = fileDescription;\n        this.fileName = this.file.name;\n        this.successCallback = successCallback;\n        this.errorCallback = errorCallback;\n        this.progressCallback = progressCallback;\n        this.overwrite = overwrite;\n        this.conflictCallback = conflictCallback;\n\n        this.makePreflightRequest();\n    }\n\n    /**\n     * Cancels upload of a file.\n     *\n     * @return {void}\n     */\n    cancel() {\n        if (this.isDestroyed()) {\n            return;\n        }\n\n        clearTimeout(this.retryTimeout);\n        this.destroy();\n    }\n\n    /**\n     * Calculates SHA1 of a file\n     *\n     * @param {File} file\n     * @return {Promise} Promise that resolves with SHA1 digest\n     */\n    async computeSHA1(file: File): Promise<any> {\n        let sha1 = '';\n\n        try {\n            // Adapted from https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/digest\n            const reader = new window.FileReader();\n            const { buffer } = await this.readFile(reader, file);\n            const hashBuffer: ArrayBuffer = await digest('SHA-1', buffer);\n            const hashArray = Array.from(new Uint8Array(hashBuffer));\n            sha1 = hashArray.map(b => `00${b.toString(16)}`.slice(-2)).join('');\n        } catch (e) {\n            // Return empty sha1 if hashing fails\n        }\n\n        return sha1;\n    }\n}\n\nexport default PlainUpload;\n"],"file":"PlainUpload.js"}