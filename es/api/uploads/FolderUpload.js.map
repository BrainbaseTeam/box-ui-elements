{"version":3,"sources":["../../../src/api/uploads/FolderUpload.js"],"names":["getEntryFromDataTransferItem","getFile","getFileAPIOptions","getDataTransferItem","getDataTransferItemAPIOptions","FolderUploadNode","PATH_DELIMITER","FolderUpload","addFilesToUploadQueue","destinationFolderId","addFolderToUploadQueue","baseAPIOptions","fileList","Array","from","forEach","fileData","file","webkitRelativePath","fileAPIOptions","pathArray","split","slice","length","folder","rootFolderName","createFolderUploadNode","files","push","subTree","folders","pathArryAfterRoot","folderName","index","dataTransferItem","item","apiOptions","entry","name","errorCallback","successCallback","upload","newFolderId","getFolderId","id"],"mappings":"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","sourcesContent":["/**\n * @flow\n * @file Folder upload bootstrapping\n * @author Box\n */\n\nimport {\n    getEntryFromDataTransferItem,\n    getFile,\n    getFileAPIOptions,\n    getDataTransferItem,\n    getDataTransferItemAPIOptions,\n} from '../../utils/uploads';\nimport FolderUploadNode from './FolderUploadNode';\nimport type {\n    UploadDataTransferItemWithAPIOptions,\n    UploadFileWithAPIOptions,\n    UploadFile,\n    FileSystemFileEntry,\n} from '../../common/types/upload';\n\nconst PATH_DELIMITER = '/';\n\nclass FolderUpload {\n    folder: FolderUploadNode;\n\n    files: Array<UploadFile> = [];\n\n    destinationFolderId: string;\n\n    addFilesToUploadQueue: Function;\n\n    addFolderToUploadQueue: Function;\n\n    baseAPIOptions: Object;\n\n    /**\n     * [constructor]\n     *\n     * @param {Function} addFilesToUploadQueue\n     * @param {string} destinationFolderId\n     * @param {Function} addFolderToUploadQueue\n     * @param {Object} baseAPIOptions\n     * @return {void}\n     */\n    constructor(\n        addFilesToUploadQueue: Function,\n        destinationFolderId: string,\n        addFolderToUploadQueue: Function,\n        baseAPIOptions: Object,\n    ): void {\n        this.addFilesToUploadQueue = addFilesToUploadQueue;\n        this.destinationFolderId = destinationFolderId;\n        this.addFolderToUploadQueue = addFolderToUploadQueue;\n        this.baseAPIOptions = baseAPIOptions;\n    }\n\n    /**\n     * Create a folder tree from fileList wekbkitRelativePath\n     *\n     * @public\n     * @param  {Array} Array<UploadFileWithAPIOptions | UploadFile> | FileList\n     * @returns {void}\n     */\n    buildFolderTreeFromWebkitRelativePath(fileList: Array<UploadFileWithAPIOptions | UploadFile> | FileList): void {\n        Array.from(fileList).forEach(fileData => {\n            const file = getFile(fileData);\n            const { webkitRelativePath } = file;\n\n            if (!webkitRelativePath) {\n                return;\n            }\n\n            const fileAPIOptions = getFileAPIOptions(fileData);\n            const pathArray = webkitRelativePath.split(PATH_DELIMITER).slice(0, -1);\n            if (pathArray.length <= 0) {\n                return;\n            }\n\n            // Since only 1 folder tree can be uploaded a time with using webkitRelativePath, the root folder name\n            // of all the files should be the same.\n            if (!this.folder) {\n                const rootFolderName = pathArray[0];\n                this.folder = this.createFolderUploadNode(rootFolderName, fileAPIOptions);\n            }\n\n            // Add file to the root folder\n            if (pathArray.length === 1) {\n                this.folder.files.push(file);\n            }\n\n            let subTree = this.folder.folders;\n            // Walk the path after the root folder\n            const pathArryAfterRoot = pathArray.slice(1);\n            pathArryAfterRoot.forEach((folderName, index) => {\n                // Create new child folder\n                if (!subTree[folderName]) {\n                    subTree[folderName] = this.createFolderUploadNode(folderName, fileAPIOptions);\n                }\n\n                if (index === pathArryAfterRoot.length - 1) {\n                    // end of path, push the file\n                    subTree[folderName].files.push(file);\n                } else {\n                    // walk the tree\n                    subTree = subTree[folderName].folders;\n                }\n            });\n        });\n    }\n\n    /**\n     * Build folder tree from dataTransferItem, which can only represent 1 folder tree\n     *\n     * @param {DataTransferItem | UploadDataTransferItemWithAPIOptions} dataTransferItem\n     * @returns {Promise<any>}\n     */\n    async buildFolderTreeFromDataTransferItem(\n        dataTransferItem: DataTransferItem | UploadDataTransferItemWithAPIOptions,\n    ) {\n        const item = getDataTransferItem(dataTransferItem);\n        const apiOptions = getDataTransferItemAPIOptions(dataTransferItem);\n        const entry = getEntryFromDataTransferItem(item);\n        const { name } = entry;\n\n        this.folder = this.createFolderUploadNode(name, apiOptions, entry);\n    }\n\n    /**\n     * Create a FolderUploadNode instance\n     *\n     * @param {string} name\n     * @param {Object} apiOptions\n     * @param {FileSystemFileEntry} [entry]\n     * @returns {FolderUploadNode}\n     */\n    createFolderUploadNode(name: string, apiOptions: Object, entry?: FileSystemFileEntry): FolderUploadNode {\n        return new FolderUploadNode(\n            name,\n            this.addFilesToUploadQueue,\n            this.addFolderToUploadQueue,\n            apiOptions,\n            {\n                ...this.baseAPIOptions,\n                ...apiOptions,\n            },\n            entry,\n        );\n    }\n\n    /**\n     * Upload folders\n     *\n     * @public\n     * @param {Object} Options\n     * @param {Function} options.errorCallback\n     * @returns {Promise<any>}\n     */\n    async upload({\n        errorCallback,\n        successCallback,\n    }: {\n        errorCallback: Function,\n        successCallback: Function,\n    }): Promise<any> {\n        await this.folder.upload(this.destinationFolderId, errorCallback, true);\n        // If the folder upload failed then a folderID will not be set\n        const newFolderId = this.folder.getFolderId();\n        if (newFolderId) {\n            successCallback([\n                {\n                    id: newFolderId,\n                },\n            ]);\n        }\n    }\n\n    /**\n     * Noop cancel\n     *\n     * @public\n     */\n    cancel() {}\n}\n\nexport default FolderUpload;\n"],"file":"FolderUpload.js"}