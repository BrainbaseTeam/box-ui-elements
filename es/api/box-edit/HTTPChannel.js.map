{"version":3,"sources":["../../../src/api/box-edit/HTTPChannel.js"],"names":["LocalStore","Channel","get","getCookie","set","setCookie","GET","POST","YEAR_MS","DEFAULT_PRIMARY_PORT","DEFAULT_FALLBACK_PORT","CONTENT_TYPE_HEADER","CONTENT_TYPE_VALUE","STATUS_NOT_RUNNING","localStore","shouldUseFallbackFirst","getItem","saveFallbackPortPreference","setItem","clearFallbackPortPreference","removeItem","getPreferredPortOrdering","primary","fallback","HTTPChannel","appName","url","channelName","method","xhr","XMLHttpRequest","window","open","ex","retryCounter","createCORSRequest","Error","timeoutMS","resolve","reject","comServerInstallationPromise","Promise","res","rej","resolveWithValidPort","port","currentPort","comServerInstallationPromiseRejected","portPreferences","primaryPort","fallbackPort","checkInstallStatus","then","bind","catch","err","data","request","setRequestHeader","onload","onerror","timeout","ontimeout","setTimeout","send","sendComServerRequest","response","JSON","parse","responseText","running","bgpId","getComChannel","generateId","comChannelName","aYearFromNow","Date","getTime","getComServerStatusInstallationPromise","browserToComServerTimeoutMS","comServerToApplicationTimeoutSec","results","response_type","message","time","replace","rand","Math","floor","random","toString","setComChannel","sendCount"],"mappings":"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","sourcesContent":["// @flow\nimport LocalStore from '../../utils/LocalStore';\nimport Channel from './Channel';\nimport { get as getCookie, set as setCookie } from './cookies';\n\nconst GET = 'GET';\nconst POST = 'POST';\nconst YEAR_MS = 31536000000;\nconst DEFAULT_PRIMARY_PORT = 17223;\nconst DEFAULT_FALLBACK_PORT = 17224;\nconst CONTENT_TYPE_HEADER = 'Content-Type';\nconst CONTENT_TYPE_VALUE = 'text/plain; charset=UTF-8';\nconst STATUS_NOT_RUNNING = 'notrunning';\n\nconst localStore = new LocalStore();\n\nfunction shouldUseFallbackFirst() {\n    return !!localStore.getItem('comUseFallback');\n}\n\nfunction saveFallbackPortPreference() {\n    localStore.setItem('comUseFallback', 1);\n}\n\nfunction clearFallbackPortPreference() {\n    localStore.removeItem('comUseFallback');\n}\n\nfunction getPreferredPortOrdering() {\n    if (shouldUseFallbackFirst()) {\n        return {\n            primary: DEFAULT_FALLBACK_PORT,\n            fallback: DEFAULT_PRIMARY_PORT,\n        };\n    }\n\n    return {\n        primary: DEFAULT_PRIMARY_PORT,\n        fallback: DEFAULT_FALLBACK_PORT,\n    };\n}\n\nclass HTTPChannel extends Channel {\n    url: string;\n\n    channelName: string;\n\n    comChannelName: string;\n\n    comServerInstallationPromise: ?Promise<any>;\n\n    retryCounter: number;\n\n    sendCount: number;\n\n    currentPort: number;\n\n    comServerInstallationPromiseRejected: boolean;\n\n    window: any;\n\n    constructor(appName: string, url: string, channelName: string) {\n        super(appName);\n        this.url = url;\n        this.comChannelName = this.setComChannel(appName);\n        this.channelName = channelName;\n        this.comServerInstallationPromise = null;\n        this.comServerInstallationPromiseRejected = false;\n        this.retryCounter = 0;\n        this.sendCount = 0;\n        this.currentPort = getPreferredPortOrdering().primary;\n        this.window = window;\n    }\n\n    createCORSRequest = (method: string, url: string): XMLHttpRequest => {\n        let xhr;\n        try {\n            const { XMLHttpRequest } = this.window;\n            xhr = new XMLHttpRequest();\n            xhr.open(method, url, true);\n            return xhr;\n        } catch (ex) {\n            if (this.retryCounter < 3) {\n                this.retryCounter += 1;\n                return this.createCORSRequest(method, url);\n            }\n            throw new Error('could not create xhr');\n        }\n    };\n\n    getComServerStatusInstallationPromise = (timeoutMS: number): Promise<any> => {\n        let resolve;\n        let reject;\n        const comServerInstallationPromise = new Promise((res, rej) => {\n            resolve = res;\n            reject = rej;\n        });\n\n        const resolveWithValidPort = (port, res) => {\n            this.currentPort = port;\n\n            if (port === DEFAULT_PRIMARY_PORT) {\n                clearFallbackPortPreference();\n            } else {\n                saveFallbackPortPreference();\n            }\n\n            this.comServerInstallationPromiseRejected = false;\n            resolve(res);\n        };\n\n        const portPreferences = getPreferredPortOrdering();\n        const primaryPort = portPreferences.primary;\n        const fallbackPort = portPreferences.fallback;\n\n        // Try primary port first\n        this.checkInstallStatus(primaryPort, timeoutMS)\n            .then(resolveWithValidPort.bind(this, primaryPort))\n            .catch(err => {\n                // If com server returned that the port is available but the app is not running, reject\n                if (err === STATUS_NOT_RUNNING) {\n                    this.comServerInstallationPromiseRejected = true;\n                    reject();\n                    return;\n                }\n\n                // Only check secondary, if necessary, otherwise this throws a browser error in console\n                this.checkInstallStatus(fallbackPort, timeoutMS)\n                    .then(resolveWithValidPort.bind(this, fallbackPort))\n                    .catch(() => {\n                        this.comServerInstallationPromiseRejected = true;\n                        reject();\n                    });\n            });\n\n        return comServerInstallationPromise;\n    };\n\n    sendComServerRequest = (method: string, url: string, data: ?Object | string, timeoutMS: number): Promise<any> => {\n        return new Promise((resolve, reject) => {\n            try {\n                const request = this.createCORSRequest(method, url);\n\n                request.setRequestHeader(CONTENT_TYPE_HEADER, CONTENT_TYPE_VALUE);\n                request.onload = () => {\n                    resolve(request);\n                };\n                request.onerror = () => {\n                    reject(request);\n                };\n\n                if (timeoutMS > 0) {\n                    request.timeout = timeoutMS;\n                    request.ontimeout = () => {\n                        reject(request);\n                    };\n                }\n                setTimeout(() => {\n                    request.send(data);\n                }, 0);\n            } catch (err) {\n                reject();\n            }\n        });\n    };\n\n    checkInstallStatus = (port: number, timeoutMS: number): Promise<any> => {\n        return this.sendComServerRequest(GET, `${this.url}${port}/status`, null, timeoutMS).then(request => {\n            const response = JSON.parse(request.responseText);\n            if (response.running) {\n                return response;\n            }\n            this.comServerInstallationPromiseRejected = true;\n            throw new Error(STATUS_NOT_RUNNING);\n        });\n    };\n\n    getComChannel = (appName: string) => getCookie(`${appName}-bgp-id`);\n\n    setComChannel = (appName: string) => {\n        const bgpId = this.getComChannel(appName) || this.generateId();\n        const comChannelName = `bgp-${bgpId}`;\n        const aYearFromNow = new Date().getTime() + YEAR_MS;\n        setCookie(`${appName}-bgp-id`, bgpId, aYearFromNow);\n        setCookie(`bgp-${bgpId}`, 'generic', aYearFromNow);\n        return comChannelName;\n    };\n\n    getComServerStatus = (timeoutMS: number) => {\n        if (!this.comServerInstallationPromise || this.comServerInstallationPromiseRejected) {\n            // Null out the promise and fetch status again (handles the case where user installed box edit within the same page load)\n            this.comServerInstallationPromise = null;\n            this.comServerInstallationPromise = this.getComServerStatusInstallationPromise(timeoutMS);\n            return this.comServerInstallationPromise;\n        }\n        return this.comServerInstallationPromise;\n    };\n\n    sendRequest = (\n        data: Object | string,\n        browserToComServerTimeoutMS: number,\n        comServerToApplicationTimeoutSec: number,\n    ): Promise<any> => {\n        const url = `${this.url}${this.currentPort}/application_request?application=${this.appName}&com=${this.comChannelName}&timeout=${comServerToApplicationTimeoutSec}`;\n        return this.sendComServerRequest(POST, url, data, browserToComServerTimeoutMS).then(results => {\n            // TODO: does the error object need to be richer?\n            const response = JSON.parse(results.responseText);\n            if (response.response_type && response.response_type === 'error') {\n                throw new Error(`Communication error: ${response.message}`);\n            }\n            return response;\n        });\n    };\n\n    sendCommand = (\n        data: Object | string,\n        browserToComServerTimeoutMS: number,\n        comServerToApplicationTimeoutSec: number,\n    ): Promise<any> => {\n        const url = `${this.url}${this.currentPort}/application_command?application=${this.appName}&com=${this.comChannelName}&timeout=${comServerToApplicationTimeoutSec}`;\n        return this.sendComServerRequest(POST, url, data, browserToComServerTimeoutMS).then(results => {\n            return JSON.parse(results.responseText);\n        });\n    };\n\n    generateId = () => {\n        const time = new Date().getTime();\n        return 'xxxxxxxx'.replace(/x/g, () => {\n            // Generate random number between 1 and 16.\n            // Using time for added entropy.\n            const rand = Math.floor((time + Math.random() * 16) % 16);\n            // Convert number to a HEX\n            return rand.toString(16);\n        });\n    };\n}\n\nexport default HTTPChannel;\n"],"file":"HTTPChannel.js"}