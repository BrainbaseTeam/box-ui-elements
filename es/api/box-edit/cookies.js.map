{"version":3,"sources":["../../../src/api/box-edit/cookies.js"],"names":["get","name","window","document","cookies","cookie","split","len","length","pair","i","decodeURIComponent","set","value","expires","path","domain","expiresDate","Date","getTime","setTime","push","encodeURIComponent","toUTCString","join","remove","isEnabled","theCookie"],"mappings":"AAEA;;;;;;AAOA,SAASA,GAAT,CAAaC,IAAb,EAAmC;AAAA,gBACVC,MADU;AAAA,MACvBC,QADuB,WACvBA,QADuB;AAE/B,MAAMC,OAAO,GAAGD,QAAQ,CAACE,MAAT,CAAgBC,KAAhB,CAAsB,IAAtB,CAAhB;AACA,MAAMC,GAAG,GAAGH,OAAO,CAACI,MAApB;AAEA,MAAIC,IAAJ;AACA,MAAIC,CAAJ;;AAEA,OAAKA,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGH,GAAhB,EAAqBG,CAAC,IAAI,CAA1B,EAA6B;AACzBD,IAAAA,IAAI,GAAGL,OAAO,CAACM,CAAD,CAAP,CAAWJ,KAAX,CAAiB,GAAjB,CAAP;;AAEA,QAAIG,IAAI,CAAC,CAAD,CAAJ,KAAYR,IAAhB,EAAsB;AAClB,UAAIQ,IAAI,CAAC,CAAD,CAAR,EAAa;AACT;AACA,eAAOE,kBAAkB,CAACF,IAAI,CAAC,CAAD,CAAL,CAAzB;AACH;;AACD,aAAO,EAAP;AACH;AACJ;;AAED,SAAO,EAAP;AACH;AAED;;;;;;;;;;;;;AAWA,SAASG,GAAT,CAAaX,IAAb,EAA2BY,KAA3B,EAAuCC,OAAvC,EAAiG;AAAA,MAAzCC,IAAyC,uEAA1B,GAA0B;AAAA,MAArBC,MAAqB,uEAAJ,EAAI;AAAA,iBACxEd,MADwE;AAAA,MACrFC,QADqF,YACrFA,QADqF;AAE7F,MAAMc,WAAW,GAAG,IAAIC,IAAJ,EAApB;AACA,MAAMb,MAAM,GAAG,EAAf;;AAEA,MAAI,OAAOS,OAAP,KAAmB,WAAvB,EAAoC;AAChCA,IAAAA,OAAO,GAAGG,WAAW,CAACE,OAAZ,KAAwB,OAAO,IAAP,GAAc,EAAd,GAAmB,EAArD,CADgC,CACyB;AAC5D;;AACDF,EAAAA,WAAW,CAACG,OAAZ,CAAoBN,OAApB;AAEAT,EAAAA,MAAM,CAACgB,IAAP,WAAepB,IAAf,cAAuBqB,kBAAkB,CAACT,KAAD,CAAzC;;AACA,MAAIC,OAAO,KAAK,CAAhB,EAAmB;AACf;AACAT,IAAAA,MAAM,CAACgB,IAAP,qBAAyBJ,WAAW,CAACM,WAAZ,EAAzB;AACH;;AACDlB,EAAAA,MAAM,CAACgB,IAAP,kBAAsBN,IAAtB;;AAEA,MAAIC,MAAJ,EAAY;AACRX,IAAAA,MAAM,CAACgB,IAAP,oBAAwBL,MAAxB;AACH;;AAEDX,EAAAA,MAAM,CAACgB,IAAP,CAAY,UAAZ;AAEAlB,EAAAA,QAAQ,CAACE,MAAT,GAAkBA,MAAM,CAACmB,IAAP,CAAY,EAAZ,CAAlB;AACH;AAED;;;;;;;;AAMA,SAASC,MAAT,CAAgBxB,IAAhB,EAAoC;AAChCW,EAAAA,GAAG,CAACX,IAAD,EAAO,EAAP,EAAW,IAAIiB,IAAJ,CAAS,CAAT,EAAYC,OAAZ,EAAX,CAAH;AACH;AAED;;;;;;;AAKA,SAASO,SAAT,GAA8B;AAAA,iBACLxB,MADK;AAAA,MAClBC,QADkB,YAClBA,QADkB;AAE1B,MAAMwB,SAAS,GAAGxB,QAAQ,CAACE,MAA3B;AACA,SAAO,CAAC,EAAEsB,SAAS,IAAIA,SAAS,CAACnB,MAAV,GAAmB,CAAlC,CAAR;AACH;;AAED,SAASR,GAAT,EAAc0B,SAAd,EAAyBD,MAAzB,EAAiCb,GAAjC","sourcesContent":["// @flow\n\n/**\n * Gets a cookie by name\n *\n * @param {string} name Cookie name.\n * @returns {string} Cookie value\n */\n\nfunction get(name: string): string {\n    const { document } = window;\n    const cookies = document.cookie.split('; ');\n    const len = cookies.length;\n\n    let pair;\n    let i;\n\n    for (i = 0; i < len; i += 1) {\n        pair = cookies[i].split('=');\n\n        if (pair[0] === name) {\n            if (pair[1]) {\n                // Internet Explorer doesn't set a = on empty cookie values, therefore pair[1] is undefined\n                return decodeURIComponent(pair[1]);\n            }\n            return '';\n        }\n    }\n\n    return '';\n}\n\n/**\n * Sets a cookie. The name and value are required, and all other params have default values.\n * It is recommended to use the default values unless you have a specific reason to override them.\n *\n * @param {string} name - Cookie name.\n * @param {mixed} value - Cookie value.\n * @param {int} expires - (Optional) Expiration date in UNIX time. Defaults to 2 months in the future. 0 for session cookies.\n * @param {string} path - (Optional) Cookie path. Defaults to the root path '/'.\n * @param {string} domain - (Optional) Cookie domain. Defaults to the cookie_domain used server-side.\n * @returns {void}\n */\nfunction set(name: string, value: any, expires: number, path: string = '/', domain: string = '') {\n    const { document } = window;\n    const expiresDate = new Date();\n    const cookie = [];\n\n    if (typeof expires === 'undefined') {\n        expires = expiresDate.getTime() + 1000 * 3600 * 24 * 60; // two months;\n    }\n    expiresDate.setTime(expires);\n\n    cookie.push(`${name}=${encodeURIComponent(value)}`);\n    if (expires !== 0) {\n        // do not add \"expires\" when creating a session cookie\n        cookie.push(`; expires=${expiresDate.toUTCString()}`);\n    }\n    cookie.push(`; path=${path}`);\n\n    if (domain) {\n        cookie.push(`; domain=${domain}`);\n    }\n\n    cookie.push('; secure');\n\n    document.cookie = cookie.join('');\n}\n\n/**\n * Deletes a cookie by name.\n *\n * @param {string} name Cookie name.\n * @returns {void}\n */\nfunction remove(name: string): void {\n    set(name, '', new Date(0).getTime());\n}\n\n/**\n * Checks if cookies are enabled for this browser\n * This is useful when treating Box as a 3rd party (iframed)\n * @returns {boolean} True if cookies are enabled, false if not.\n */\nfunction isEnabled(): boolean {\n    const { document } = window;\n    const theCookie = document.cookie;\n    return !!(theCookie && theCookie.length > 0);\n}\n\nexport { get, isEnabled, remove, set };\n"],"file":"cookies.js"}