{"version":3,"sources":["../../../src/api/box-edit/BoxEdit.js"],"names":["Browser","ComServerClient","CONSTANTS","TIMEOUT_MS","EXTENSION_CHECK_DEBOUNCE_TIME","extensionRequestTimeout","createRequestData","extensions","JSON","stringify","request_type","extension","createExecuteData","fileId","token","authCode","tokenScope","execData","auth_code","auth_token","browser_type","getName","command_type","file_id","toString","token_scope","isBlacklistedExtension","EXTENSION_BLACKLIST","uppercaseExt","toUpperCase","charAt","substr","BoxEditInstance","BoxEdit","extensionRequestQueue","Map","has","queueItem","get","Error","promise","extensionRequest","appNameRequestPromise","Promise","resolve","reject","set","getBoxEditAvailability","client","BOX_EDIT_APP_NAME","getComServerStatus","all","map","ext","getAppForExtension","appName","result","extensionToAppTuples","resultMap","forEach","tuple","fileID","executeDataAsString","data","sendCommand","applicationSupportRequest","queueGetNativeAppNameFromLocal","setTimeout","processExtensionRequestQueue","err","copyQueue","value","key","push","clear","requestData","sendRequest","then","default_application_name","defaultApplicationName","Object","prototype","call","extensionAppObj","keys","decodeURIComponent","delete"],"mappings":"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","sourcesContent":["// @flow\n\nimport Browser from './BrowserUtils';\nimport ComServerClient from './ComServerClient';\nimport CONSTANTS from './constants';\n\ntype stringTuple = [string, string];\ntype extensionRequestQueueItem = {\n    promise: Promise<string>,\n    reject: Function,\n    resolve: Function,\n};\n\nconst TIMEOUT_MS = 5000;\nconst EXTENSION_CHECK_DEBOUNCE_TIME = 100;\n\nlet extensionRequestTimeout: ?TimeoutID;\n\nfunction createRequestData(extensions: Array<string>): string {\n    return JSON.stringify({\n        request_type: 'get_default_application',\n        extension: extensions,\n    });\n}\n\nfunction createExecuteData(fileId, token, authCode, tokenScope): string {\n    const execData = JSON.stringify({\n        auth_code: authCode,\n        auth_token: token,\n        browser_type: Browser.getName(),\n        command_type: 'launch_application',\n        file_id: fileId.toString(),\n        token_scope: tokenScope,\n    });\n    return execData;\n}\n\nfunction isBlacklistedExtension(extension): boolean {\n    const { EXTENSION_BLACKLIST } = CONSTANTS;\n    let uppercaseExt = extension.toUpperCase();\n\n    // if ext has a leading ., strip it\n    if (uppercaseExt.charAt(0) === '.') {\n        uppercaseExt = uppercaseExt.substr(1);\n    }\n\n    return uppercaseExt in EXTENSION_BLACKLIST;\n}\n\nlet BoxEditInstance = null;\n\nclass BoxEdit {\n    client: ComServerClient;\n\n    extensionRequestQueue: Map<string, extensionRequestQueueItem>;\n\n    constructor() {\n        if (!(BoxEditInstance instanceof BoxEdit)) {\n            BoxEditInstance = this;\n        }\n        this.extensionRequestQueue = new Map();\n        return BoxEditInstance;\n    }\n\n    queueGetNativeAppNameFromLocal(extension: string): Promise<string> {\n        // There's already a pending or fulfilled request for the appname\n        if (this.extensionRequestQueue.has(extension)) {\n            const queueItem = this.extensionRequestQueue.get(extension);\n            if (!queueItem) {\n                throw new Error('Race condition re: queueGetNativeAppNameFromLocal');\n            }\n            return queueItem.promise;\n        }\n\n        const extensionRequest = {};\n        const appNameRequestPromise = new Promise((resolve, reject) => {\n            extensionRequest.resolve = resolve;\n            extensionRequest.reject = reject;\n        });\n        extensionRequest.promise = appNameRequestPromise;\n        this.extensionRequestQueue.set(extension, extensionRequest);\n\n        return appNameRequestPromise;\n    }\n\n    checkBoxEditAvailability(): Promise<any> {\n        return this.getBoxEditAvailability();\n    }\n\n    getBoxEditAvailability(): Promise<any> {\n        this.client = new ComServerClient(CONSTANTS.BOX_EDIT_APP_NAME);\n\n        return this.client.getComServerStatus();\n    }\n\n    async canOpenWithBoxEdit(extensions: string[]): Promise<any> {\n        const extensionToAppTuples: Array<stringTuple> = await Promise.all(\n            extensions.map(async ext => {\n                try {\n                    const appName = await this.getAppForExtension(ext);\n                    const result: stringTuple = [ext, appName];\n                    return result;\n                } catch (err) {\n                    const result: stringTuple = [ext, ''];\n                    return result;\n                }\n            }),\n        );\n\n        const resultMap: Map<string, string> = new Map();\n        extensionToAppTuples.forEach(tuple => resultMap.set(...tuple));\n\n        return Promise.resolve(resultMap);\n    }\n\n    openFile(fileID: string, token: Object): Promise<any> {\n        // @NOTE. canOpenWithBoxEdit, create token taken care of higher levels\n        // therefore not ported into React library\n\n        // TODO is token the right name?\n        const executeDataAsString = createExecuteData(\n            fileID,\n            token.data.token,\n            token.data.auth_code,\n            token.data.token_scope,\n        );\n\n        return this.client.sendCommand(executeDataAsString, TIMEOUT_MS);\n    }\n\n    getAppForExtension(extension: string): Promise<any> {\n        try {\n            if (isBlacklistedExtension(extension)) {\n                throw new Error('blacklisted');\n            }\n\n            const applicationSupportRequest = this.queueGetNativeAppNameFromLocal(extension);\n\n            if (!extensionRequestTimeout) {\n                extensionRequestTimeout = setTimeout(() => {\n                    this.processExtensionRequestQueue();\n                }, EXTENSION_CHECK_DEBOUNCE_TIME);\n            }\n\n            return applicationSupportRequest;\n        } catch (err) {\n            return Promise.reject();\n        }\n    }\n\n    processExtensionRequestQueue(): void {\n        const copyQueue = new Map();\n\n        const extensions = [];\n        this.extensionRequestQueue.forEach((value, key) => {\n            copyQueue.set(key, value);\n            extensions.push(key);\n        });\n\n        this.extensionRequestQueue.clear();\n\n        extensionRequestTimeout = null;\n\n        const requestData = createRequestData(extensions);\n\n        return this.client.sendRequest(requestData).then(data => {\n            if (data && data.default_application_name) {\n                let defaultApplicationName = data.default_application_name;\n\n                // @TODO. Reassess.\n                // This is an odd construction that may not be necessary.\n                if (Object.prototype.toString.call(defaultApplicationName) === '[object Object]') {\n                    defaultApplicationName = [defaultApplicationName];\n                }\n\n                defaultApplicationName.forEach(extensionAppObj => {\n                    const extension = Object.keys(extensionAppObj)[0];\n                    const appName = decodeURIComponent(extensionAppObj[extension]);\n                    if (appName) {\n                        const queueItem = copyQueue.get(extension);\n                        if (queueItem) {\n                            queueItem.resolve(appName);\n                            copyQueue.delete(extension);\n                        }\n                    }\n                });\n            }\n\n            // Reject all remaining items in the queue\n            extensions.forEach(extension => {\n                const queueItem = copyQueue.get(extension);\n                if (queueItem) {\n                    queueItem.reject();\n                }\n            });\n        });\n    }\n}\n\nexport default BoxEdit;\n"],"file":"BoxEdit.js"}