{"version":3,"sources":["../../src/api/WebLink.js"],"names":["Item","CACHE_PREFIX_WEBLINK","ERROR_CODE_FETCH_WEBLINK","findMissingProperties","WebLink","id","suffix","getBaseApiUrl","successCallback","errorCallback","fields","isDestroyed","cache","getCache","key","getCacheKey","errorCode","has","missingFields","get","length","xhrOptions","url","getUrl","params","toString","xhr","data","merge","set","successHandler","errorHandler"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;AAMA,OAAOA,IAAP,MAAiB,QAAjB;AACA,SAASC,oBAAT,EAA+BC,wBAA/B,QAA+D,cAA/D;AACA,SAASC,qBAAT,QAAsC,iBAAtC;;IAKMC,O;;;;;;;;;;;;;;AACF;;;;;;gCAMYC,E,EAAoB;AAC5B,uBAAUJ,oBAAV,SAAiCI,EAAjC;AACH;AAED;;;;;;;;;2BAMOA,E,EAAoB;AACvB,UAAMC,MAAc,GAAGD,EAAE,cAAOA,EAAP,IAAc,EAAvC;AACA,uBAAU,KAAKE,aAAL,EAAV,uBAA2CD,MAA3C;AACH;AAED;;;;;;;;;;;;;;;+CAUID,E,EACAG,e,EACAC,a;;;;;;;;;;;;;;;+EAC6B,E,EAA3BC,M,QAAAA,M;;qBAEE,KAAKC,WAAL,E;;;;;;;;AAIEC,gBAAAA,K,GAAkB,KAAKC,QAAL,E;AAClBC,gBAAAA,G,GAAc,KAAKC,WAAL,CAAiBV,EAAjB,C;AACpB,qBAAKW,SAAL,GAAiBd,wBAAjB;AACA,qBAAKM,eAAL,GAAuBA,eAAvB;AACA,qBAAKC,aAAL,GAAqBA,aAArB;;qBAEIG,KAAK,CAACK,GAAN,CAAUH,GAAV,C;;;;;AACMI,gBAAAA,a,GAA+Bf,qBAAqB,CAACS,KAAK,CAACO,GAAN,CAAUL,GAAV,CAAD,EAAiBJ,MAAjB,C;;sBACtDQ,aAAa,CAACE,MAAd,KAAyB,C;;;;;AACzBZ,gBAAAA,eAAe,CAACI,KAAK,CAACO,GAAN,CAAUL,GAAV,CAAD,CAAf;;;;AAKFO,gBAAAA,U,GAAqB;AACvBC,kBAAAA,GAAG,EAAE,KAAKC,MAAL,CAAYlB,EAAZ;AADkB,iB;;AAI3B,oBAAIK,MAAJ,EAAY;AACRW,kBAAAA,UAAU,CAACG,MAAX,GAAoB;AAChBd,oBAAAA,MAAM,EAAEA,MAAM,CAACe,QAAP;AADQ,mBAApB;AAGH;;;;uBAG0B,KAAKC,GAAL,CAASP,GAAT,CAAaE,UAAb,C;;;;AAAfM,gBAAAA,I,SAAAA,I;;qBAEJ,KAAKhB,WAAL,E;;;;;;;;AAIJ;AACA,oBAAIC,KAAK,CAACK,GAAN,CAAUH,GAAV,CAAJ,EAAoB;AAChBF,kBAAAA,KAAK,CAACgB,KAAN,CAAYd,GAAZ,EAAiBa,IAAjB;AACH,iBAFD,MAEO;AACH;AACAf,kBAAAA,KAAK,CAACiB,GAAN,CAAUf,GAAV,EAAea,IAAf;AACH;;AAED,qBAAKG,cAAL,CAAoBlB,KAAK,CAACO,GAAN,CAAUL,GAAV,CAApB;;;;;;;AAEA,qBAAKiB,YAAL;;;;;;;;;;;;;;;;;;;EAlFU/B,I;;AAuFtB,eAAeI,OAAf","sourcesContent":["/**\n * @flow\n * @file Helper for the box web link api\n * @author Box\n */\n\nimport Item from './Item';\nimport { CACHE_PREFIX_WEBLINK, ERROR_CODE_FETCH_WEBLINK } from '../constants';\nimport { findMissingProperties } from '../utils/fields';\nimport type { RequestOptions } from '../common/types/api';\nimport type { BoxItem } from '../common/types/core';\nimport type APICache from '../utils/Cache';\n\nclass WebLink extends Item {\n    /**\n     * Creates a key for the cache\n     *\n     * @param {string} id folder id\n     * @return {string} key\n     */\n    getCacheKey(id: string): string {\n        return `${CACHE_PREFIX_WEBLINK}${id}`;\n    }\n\n    /**\n     * URL for weblink api\n     *\n     * @param {string} [id] optional file id\n     * @return {string} base url for files\n     */\n    getUrl(id: string): string {\n        const suffix: string = id ? `/${id}` : '';\n        return `${this.getBaseApiUrl()}/web_links${suffix}`;\n    }\n\n    /**\n     * Gets a Box weblink\n     *\n     * @param {string} id - Weblink id\n     * @param {(newItem: BoxItem) => void} successCallback - Function to call with results\n     * @param {Function} errorCallback - Function to call with errors\n     * @param {Array<String>} fields - Array of field strings\n     * @returns {Promise}\n     */\n    async getWeblink(\n        id: string,\n        successCallback: (newItem: BoxItem) => void,\n        errorCallback: Function,\n        { fields }: RequestOptions = {},\n    ): Promise<void> {\n        if (this.isDestroyed()) {\n            return;\n        }\n\n        const cache: APICache = this.getCache();\n        const key: string = this.getCacheKey(id);\n        this.errorCode = ERROR_CODE_FETCH_WEBLINK;\n        this.successCallback = successCallback;\n        this.errorCallback = errorCallback;\n\n        if (cache.has(key)) {\n            const missingFields: Array<string> = findMissingProperties(cache.get(key), fields);\n            if (missingFields.length === 0) {\n                successCallback(cache.get(key));\n                return;\n            }\n        }\n\n        const xhrOptions: Object = {\n            url: this.getUrl(id),\n        };\n\n        if (fields) {\n            xhrOptions.params = {\n                fields: fields.toString(),\n            };\n        }\n\n        try {\n            const { data } = await this.xhr.get(xhrOptions);\n\n            if (this.isDestroyed()) {\n                return;\n            }\n\n            // Cache check is again done since this code is executed async\n            if (cache.has(key)) {\n                cache.merge(key, data);\n            } else {\n                // If there was nothing in the cache\n                cache.set(key, data);\n            }\n\n            this.successHandler(cache.get(key));\n        } catch (e) {\n            this.errorHandler(e);\n        }\n    }\n}\n\nexport default WebLink;\n"],"file":"WebLink.js"}