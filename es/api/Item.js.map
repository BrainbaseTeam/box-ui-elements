{"version":3,"sources":["../../src/api/Item.js"],"names":["noop","setProp","getBadItemError","getBadPermissionsError","fillMissingProperties","Base","ACCESS_NONE","CACHE_PREFIX_SEARCH","CACHE_PREFIX_FOLDER","TYPE_FOLDER","ERROR_CODE_DELETE_ITEM","ERROR_CODE_RENAME_ITEM","ERROR_CODE_SHARE_ITEM","Item","isDestroyed","parentKey","getParentCacheKey","parentId","folder","getCache","get","postDeleteCleanup","item_collection","entries","total_count","Array","isArray","childKey","getCacheKey","id","oldCount","length","newEntries","filter","entry","newCount","updatedObject","merge","successCallback","data","unsetAll","name","fields","dataWithMissingFields","cache","key","has","set","cacheKey","value","item","errorCallback","Promise","reject","errorCode","permissions","parent","type","can_delete","url","getUrl","xhr","delete","then","deleteSuccessHandler","catch","e","errorHandler","can_rename","put","renameSuccessHandler","itemID","itemPermissions","can_share","can_set_share_access","access","options","validateRequest","requestData","shared_link","params","toString","shareSuccessHandler","sharedLinkParams"],"mappings":"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","sourcesContent":["/**\n * @flow\n * @file Helper for the box item API\n * @author Box\n */\n\nimport noop from 'lodash/noop';\nimport setProp from 'lodash/set';\nimport { getBadItemError, getBadPermissionsError } from '../utils/error';\nimport { fillMissingProperties } from '../utils/fields';\nimport Base from './Base';\nimport {\n    ACCESS_NONE,\n    CACHE_PREFIX_SEARCH,\n    CACHE_PREFIX_FOLDER,\n    TYPE_FOLDER,\n    ERROR_CODE_DELETE_ITEM,\n    ERROR_CODE_RENAME_ITEM,\n    ERROR_CODE_SHARE_ITEM,\n} from '../constants';\nimport type { ElementsErrorCallback, RequestData, RequestOptions } from '../common/types/api';\nimport type {\n    BoxItem,\n    BoxItemPermission,\n    FlattenedBoxItem,\n    FlattenedBoxItemCollection,\n    SharedLink,\n} from '../common/types/core';\nimport type APICache from '../utils/Cache';\n\nclass Item extends Base {\n    /**\n     * @property {string}\n     */\n    id: string;\n\n    /**\n     * @property {string}\n     */\n    parentId: string;\n\n    /**\n     * @property {Function}\n     */\n    successCallback: Function;\n\n    /**\n     * @property {Function}\n     */\n    errorCallback: ElementsErrorCallback;\n\n    /**\n     * Creates a key for the item's parent\n     * This is always a folder\n     *\n     * @param {string} Id - folder id\n     * @return {string} Key\n     */\n    getParentCacheKey(id: string): string {\n        return `${CACHE_PREFIX_FOLDER}${id}`;\n    }\n\n    /**\n     * Creates a key for the cache\n     *\n     * @param {string} Id - Folder id\n     * @return {string} Key\n     */\n    getCacheKey(id: string): string {\n        return `getCacheKey(${id}) should be overriden`;\n    }\n\n    /**\n     * API URL for items\n     *\n     * @param {string} id - Item id\n     * @protected\n     * @return {string} Base url for files\n     */\n    getUrl(id: string): string {\n        return `getUrl(${id}) should be overriden`;\n    }\n\n    /**\n     * Merges new data with old data and returns new data\n     *\n     * @param {String} cacheKey - The cache key of item to merge\n     * @param {String} key - The attribute to merge\n     * @param {Object} value - The value to merge\n     * @return {BoxItem} The newly updated object from the cache\n     */\n    merge(cacheKey: string, key: string, value: any): BoxItem {\n        const cache: APICache = this.getCache();\n        cache.merge(cacheKey, setProp({}, key, value));\n        return cache.get(cacheKey);\n    }\n\n    /**\n     * Steps to do after deletion\n     *\n     * @return {void}\n     */\n    postDeleteCleanup(): void {\n        if (this.isDestroyed()) {\n            return;\n        }\n\n        // Get rid of all searches\n        this.getCache().unsetAll(CACHE_PREFIX_SEARCH);\n        this.successCallback();\n    }\n\n    /**\n     * Handles response for deletion\n     *\n     * @return {void}\n     */\n    deleteSuccessHandler = (): void => {\n        if (this.isDestroyed()) {\n            return;\n        }\n\n        // When fetching the parent folder from the cache\n        // we have no guarantees that it will be there since\n        // search results happen across folders and we only\n        // add those folders to cache that have been navigated to.\n        const parentKey: string = this.getParentCacheKey(this.parentId);\n        const folder: ?FlattenedBoxItem = this.getCache().get(parentKey);\n        if (!folder) {\n            this.postDeleteCleanup();\n            return;\n        }\n\n        // Same logic as above but in this case we may have the parent\n        // folders meta data in cache but not its contents.\n        const { item_collection }: FlattenedBoxItem = folder;\n        if (!item_collection) {\n            this.postDeleteCleanup();\n            return;\n        }\n\n        const { entries, total_count }: FlattenedBoxItemCollection = item_collection;\n        if (!Array.isArray(entries) || typeof total_count !== 'number') {\n            throw getBadItemError();\n        }\n\n        const childKey: string = this.getCacheKey(this.id);\n        const oldCount: number = entries.length;\n        const newEntries: string[] = entries.filter((entry: string) => entry !== childKey);\n        const newCount: number = newEntries.length;\n\n        const updatedObject: BoxItem = this.merge(\n            parentKey,\n            'item_collection',\n            Object.assign(item_collection, {\n                entries: newEntries,\n                total_count: total_count - (oldCount - newCount),\n            }),\n        );\n\n        this.successCallback(updatedObject);\n        this.postDeleteCleanup();\n    };\n\n    /**\n     * API to delete an Item\n     *\n     * @param {Object} item - Item to delete\n     * @param {Function} successCallback - Success callback\n     * @param {Function} errorCallback - Error callback\n     * @return {void}\n     */\n    deleteItem(item: BoxItem, successCallback: Function, errorCallback: ElementsErrorCallback = noop): Promise<void> {\n        if (this.isDestroyed()) {\n            return Promise.reject();\n        }\n\n        this.errorCode = ERROR_CODE_DELETE_ITEM;\n        const { id, permissions, parent, type }: BoxItem = item;\n        if (!id || !permissions || !parent || !type) {\n            errorCallback(getBadItemError(), this.errorCode);\n            return Promise.reject();\n        }\n\n        const { id: parentId } = parent;\n        const { can_delete }: BoxItemPermission = permissions;\n        if (!can_delete || !parentId) {\n            errorCallback(getBadPermissionsError(), this.errorCode);\n            return Promise.reject();\n        }\n\n        this.id = id;\n        this.parentId = parentId;\n        this.successCallback = successCallback;\n        this.errorCallback = errorCallback;\n\n        const url = `${this.getUrl(id)}${type === TYPE_FOLDER ? '?recursive=true' : ''}`;\n        return this.xhr\n            .delete({ url })\n            .then(this.deleteSuccessHandler)\n            .catch((e: $AxiosError<any>) => {\n                this.errorHandler(e);\n            });\n    }\n\n    /**\n     * Handles response for rename\n     *\n     * @param {BoxItem} data - The updated item\n     * @return {void}\n     */\n    renameSuccessHandler = ({ data }: { data: BoxItem }): void => {\n        if (!this.isDestroyed()) {\n            // Get rid of all searches\n            this.getCache().unsetAll(CACHE_PREFIX_SEARCH);\n            const updatedObject: BoxItem = this.merge(this.getCacheKey(this.id), 'name', data.name);\n            this.successCallback(updatedObject);\n        }\n    };\n\n    /**\n     * API to rename an Item\n     *\n     * @param {Object} item - Item to rename\n     * @param {string} name - Item new name\n     * @param {Function} successCallback - Success callback\n     * @param {Function} errorCallback - Error callback\n     * @return {void}\n     */\n    rename(\n        item: BoxItem,\n        name: string,\n        successCallback: Function,\n        errorCallback: ElementsErrorCallback = noop,\n    ): Promise<void> {\n        if (this.isDestroyed()) {\n            return Promise.reject();\n        }\n\n        this.errorCode = ERROR_CODE_RENAME_ITEM;\n        const { id, permissions }: BoxItem = item;\n        if (!id || !permissions) {\n            errorCallback(getBadItemError(), this.errorCode);\n            return Promise.reject();\n        }\n\n        const { can_rename }: BoxItemPermission = permissions;\n        if (!can_rename) {\n            errorCallback(getBadPermissionsError(), this.errorCode);\n            return Promise.reject();\n        }\n\n        this.id = id;\n        this.successCallback = successCallback;\n        this.errorCallback = errorCallback;\n\n        return this.xhr\n            .put({ url: `${this.getUrl(id)}`, data: { name } })\n            .then(this.renameSuccessHandler)\n            .catch((e: $AxiosError<any>) => {\n                this.errorHandler(e);\n            });\n    }\n\n    /**\n     * Handles response for shared link\n     *\n     * @param {BoxItem} data - The updated item\n     * @param {Array<string>} [fields] - Optional fields from request\n     * @return {void}\n     */\n    shareSuccessHandler = (data: BoxItem, fields?: Array<string>): void => {\n        if (!this.isDestroyed()) {\n            // Add fields that were requested but not returned\n            const dataWithMissingFields = fields ? fillMissingProperties(data, fields) : data;\n            const cache: APICache = this.getCache();\n            const key = this.getCacheKey(this.id);\n\n            if (cache.has(key)) {\n                cache.merge(key, dataWithMissingFields);\n            } else {\n                cache.set(key, dataWithMissingFields);\n            }\n            this.successCallback(cache.get(key));\n        }\n    };\n\n    /**\n     * Validate an item update request\n     *\n     * @param {string|void} itemID - ID of item to share\n     * @param {BoxItemPermission|void} itemPermissions - Permissions for item\n     * @throws {Error}\n     * @return {void}\n     */\n    validateRequest(itemID: ?string, itemPermissions: ?BoxItemPermission) {\n        if (!itemID || !itemPermissions) {\n            this.errorCode = ERROR_CODE_SHARE_ITEM;\n            throw getBadItemError();\n        }\n\n        const { can_share, can_set_share_access }: BoxItemPermission = itemPermissions;\n        if (!can_share || !can_set_share_access) {\n            this.errorCode = ERROR_CODE_SHARE_ITEM;\n            throw getBadPermissionsError();\n        }\n    }\n\n    /**\n     * API to create or remove a shared link\n     *\n     * @param {Object} item - Item to share\n     * @param {string} access - Shared access level\n     * @param {Function} successCallback - Success callback\n     * @param {Function|void} errorCallback - Error callback\n     * @param {Array<string>|void} [options.fields] - Optionally include specific fields\n     * @return {Promise<void>}\n     */\n    async share(\n        item: BoxItem,\n        access: ?string, // if \"access\" is undefined, the backend will set the default access level for the shared link\n        successCallback: Function,\n        errorCallback: ElementsErrorCallback = noop,\n        options: RequestOptions = {},\n    ): Promise<void> {\n        if (this.isDestroyed()) {\n            return Promise.reject();\n        }\n\n        try {\n            const { id, permissions }: BoxItem = item;\n            this.id = id;\n            this.successCallback = successCallback;\n            this.errorCallback = errorCallback;\n\n            this.validateRequest(id, permissions);\n\n            const { fields } = options;\n            const requestData: RequestData = {\n                url: this.getUrl(this.id),\n                data: {\n                    shared_link: access === ACCESS_NONE ? null : { access },\n                },\n            };\n            if (fields) {\n                requestData.params = { fields: fields.toString() };\n            }\n\n            const { data } = await this.xhr.put(requestData);\n            return this.shareSuccessHandler(data, fields);\n        } catch (e) {\n            return this.errorHandler(e);\n        }\n    }\n\n    /**\n     * API to update a shared link\n     *\n     * @param {BoxItem} item - Item to update\n     * @param {$Shape<SharedLink>} sharedLinkParams - New shared link parameters\n     * @param {Function} successCallback - Success callback\n     * @param {Function|void} errorCallback - Error callback\n     * @param {Array<string>|void} [options.fields] - Optionally include specific fields\n     * @return {Promise<void>}\n     */\n    async updateSharedLink(\n        item: BoxItem,\n        sharedLinkParams: $Shape<SharedLink>,\n        successCallback: Function,\n        errorCallback: ElementsErrorCallback = noop,\n        options: RequestOptions = {},\n    ): Promise<void> {\n        if (this.isDestroyed()) {\n            return Promise.reject();\n        }\n\n        try {\n            const { id, permissions }: BoxItem = item;\n            this.id = id;\n            this.successCallback = successCallback;\n            this.errorCallback = errorCallback;\n\n            this.validateRequest(id, permissions);\n\n            const { fields } = options;\n            const requestData: RequestData = {\n                url: this.getUrl(this.id),\n                data: {\n                    shared_link: sharedLinkParams,\n                },\n            };\n            if (fields) {\n                requestData.params = { fields: fields.toString() };\n            }\n\n            const { data } = await this.xhr.put(requestData);\n            return this.shareSuccessHandler(data, fields);\n        } catch (e) {\n            return this.errorHandler(e);\n        }\n    }\n}\n\nexport default Item;\n"],"file":"Item.js"}