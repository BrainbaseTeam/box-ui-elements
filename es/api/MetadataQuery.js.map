{"version":3,"sources":["../../src/api/MetadataQuery.js"],"names":["Base","CACHE_PREFIX_METADATA_QUERY","ERROR_CODE_METADATA_QUERY","MetadataQuery","data","cache","getCache","set","key","finish","id","getBaseApiUrl","has","isDestroyed","metadataQueryData","get","successCallback","query","errorCode","xhr","post","url","getUrl","then","queryMetadataSuccessHandler","catch","errorHandler","errorCallback","options","context","getCacheKey","forceFetch","unset","isLoaded","queryMetadataRequest"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;;;;;AAMA,OAAOA,IAAP,MAAiB,QAAjB;AACA,SAASC,2BAAT,EAAsCC,yBAAtC,QAAuE,cAAvE;;IAKMC,a;;;;;;;;;;;;;;;;;;kFA8D4B,gBAAyD;AAAA,UAAtDC,IAAsD,QAAtDA,IAAsD;;AACnF,UAAMC,KAAe,GAAG,MAAKC,QAAL,EAAxB;;AACAD,MAAAA,KAAK,CAACE,GAAN,CAAU,MAAKC,GAAf,EAAoBJ,IAApB;;AACA,YAAKK,MAAL;AACH,K;;;;;;;;AAjED;;;;AAKA;;;;AAKA;;;;AAKA;;;;;;gCAMYC,E,EAAoB;AAC5B,uBAAUT,2BAAV,SAAwCS,EAAxC;AACH;AAED;;;;;;;6BAIiB;AACb,uBAAU,KAAKC,aAAL,EAAV;AACH;AAED;;;;;;;;+BAKoB;AAChB,UAAMN,KAAe,GAAG,KAAKC,QAAL,EAAxB;AACA,aAAOD,KAAK,CAACO,GAAN,CAAU,KAAKJ,GAAf,CAAP;AACH;AAED;;;;;;;;6BAKe;AACX,UAAI,KAAKK,WAAL,EAAJ,EAAwB;AACpB;AACH;;AAED,UAAMR,KAAe,GAAG,KAAKC,QAAL,EAAxB;AACA,UAAMQ,iBAAiB,GAAGT,KAAK,CAACU,GAAN,CAAU,KAAKP,GAAf,CAA1B;AACA,WAAKQ,eAAL,CAAqBF,iBAArB;AACH;AAED;;;;;;;AASA;;;;;yCAKqBG,K,EAAgC;AACjD,UAAI,KAAKJ,WAAL,EAAJ,EAAwB;AACpB;AACH;;AAED,WAAKK,SAAL,GAAiBhB,yBAAjB;AACA,WAAKiB,GAAL,CACKC,IADL,CACU;AACFC,QAAAA,GAAG,EAAE,KAAKC,MAAL,EADH;AAEFlB,QAAAA,IAAI,EAAEa;AAFJ,OADV,EAKKM,IALL,CAKU,KAAKC,2BALf,EAMKC,KANL,CAMW,KAAKC,YANhB;AAOH;AAED;;;;;;;;;;;kCASIT,K,EACAD,e,EACAW,a,EAEI;AAAA,UADJC,OACI,uEADc,EACd;;AACJ,UAAI,KAAKf,WAAL,EAAJ,EAAwB;AACpB;AACH;;AAHG,6BAKqBe,OALrB,CAKIC,OALJ;AAAA,UAKIA,OALJ,iCAKc,EALd;AAMJ,WAAKrB,GAAL,GAAW,KAAKsB,WAAL,CAAiBD,OAAO,CAACnB,EAAzB,CAAX;AACA,WAAKM,eAAL,GAAuBA,eAAvB;AACA,WAAKW,aAAL,GAAqBA,aAArB,CARI,CAUJ;;AACA,UAAIC,OAAO,CAACG,UAAZ,EAAwB;AACpB,aAAKzB,QAAL,GAAgB0B,KAAhB,CAAsB,KAAKxB,GAA3B;AACH,OAbG,CAeJ;;;AACA,UAAI,KAAKyB,QAAL,EAAJ,EAAqB;AACjB,aAAKxB,MAAL;AACA;AACH,OAnBG,CAqBJ;;;AACA,WAAKyB,oBAAL,CAA0BjB,KAA1B;AACH;;;;EA5HuBjB,I;;AA+H5B,eAAeG,aAAf","sourcesContent":["/**\n * @flow\n * @file Helper for the box metadata query API\n * @author Box\n */\n\nimport Base from './Base';\nimport { CACHE_PREFIX_METADATA_QUERY, ERROR_CODE_METADATA_QUERY } from '../constants';\nimport type { ElementsErrorCallback } from '../common/types/api';\nimport type { MetadataQuery as MetadataQueryType, MetadataQueryResponseData } from '../common/types/metadataQueries';\nimport type APICache from '../utils/Cache';\n\nclass MetadataQuery extends Base {\n    /**\n     * @property {string}\n     */\n    key: string;\n\n    /**\n     * @property {Function}\n     */\n    successCallback: Function;\n\n    /**\n     * @property {Function}\n     */\n    errorCallback: ElementsErrorCallback;\n\n    /**\n     * Creates a key for the metadata cache\n     *\n     * @param {string} id - metadata template\n     * @return {string} key\n     */\n    getCacheKey(id: string): string {\n        return `${CACHE_PREFIX_METADATA_QUERY}${id}`;\n    }\n\n    /**\n     * API URL for metadata query\n     * @return {string} base url for files\n     */\n    getUrl(): string {\n        return `${this.getBaseApiUrl()}/metadata_queries/execute_read`;\n    }\n\n    /**\n     * Returns true for cache hit for metadata query results\n     *\n     * @return {boolean} if query results are loaded\n     */\n    isLoaded(): boolean {\n        const cache: APICache = this.getCache();\n        return cache.has(this.key);\n    }\n\n    /**\n     * Returns the results using successCallback\n     *\n     * @return {void}\n     */\n    finish(): void {\n        if (this.isDestroyed()) {\n            return;\n        }\n\n        const cache: APICache = this.getCache();\n        const metadataQueryData = cache.get(this.key);\n        this.successCallback(metadataQueryData);\n    }\n\n    /**\n     * @param {Object} response\n     */\n    queryMetadataSuccessHandler = ({ data }: { data: MetadataQueryResponseData }): void => {\n        const cache: APICache = this.getCache();\n        cache.set(this.key, data);\n        this.finish();\n    };\n\n    /**\n     * Does the network request to metadata query API\n     * @param {Object} query query object with SQL Clauses like properties\n     * @return {void}\n     */\n    queryMetadataRequest(query: MetadataQueryType): void {\n        if (this.isDestroyed()) {\n            return;\n        }\n\n        this.errorCode = ERROR_CODE_METADATA_QUERY;\n        this.xhr\n            .post({\n                url: this.getUrl(),\n                data: query,\n            })\n            .then(this.queryMetadataSuccessHandler)\n            .catch(this.errorHandler);\n    }\n\n    /**\n     * API for querying enterprise metadata\n     * @param {Object} query - metadata query object\n     * @param {Function} successCallback - Function to call with results\n     * @param {Function} errorCallback - Function to call with errors\n     * @param {boolean|void} [options.forceFetch] - Bypasses the cache\n     * @return {void}\n     */\n    queryMetadata(\n        query: MetadataQueryType,\n        successCallback: Function,\n        errorCallback: ElementsErrorCallback,\n        options: Object = {},\n    ): void {\n        if (this.isDestroyed()) {\n            return;\n        }\n\n        const { context = {} } = options;\n        this.key = this.getCacheKey(context.id);\n        this.successCallback = successCallback;\n        this.errorCallback = errorCallback;\n\n        // Clear the cache if needed\n        if (options.forceFetch) {\n            this.getCache().unset(this.key);\n        }\n\n        // Return the Cache value if it exists\n        if (this.isLoaded()) {\n            this.finish();\n            return;\n        }\n\n        // Make the XHR request\n        this.queryMetadataRequest(query);\n    }\n}\n\nexport default MetadataQuery;\n"],"file":"MetadataQuery.js"}