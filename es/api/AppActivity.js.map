{"version":3,"sources":["../../src/api/AppActivity.js"],"names":["MarkerBasedAPI","ERROR_CODE_DELETE_APP_ACTIVITY","HTTP_STATUS_CODE_NOT_FOUND","APP_ACTIVITY_FIELDS_TO_FETCH","AppActivity","item","activity_template","app","created_by","id","occurred_at","rendered_text","type","can_delete","permissions","created_at","entries","isDestroyed","successCallback","activityEntries","map","mapAppActivityItem","total_count","length","error","errorCallback","response","status","successHandler","getBaseApiUrl","Error","getUrl","requestData","item_id","item_type","fields","toString","markerGet","appActivityId","errorCode","delete","url","getDeleteUrl"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;;;;;AAKA,OAAOA,cAAP,MAA2B,kBAA3B;AACA,SAASC,8BAAT,EAAyCC,0BAAzC,QAA2E,cAA3E;AACA,SAASC,4BAAT,QAA6C,iBAA7C;;IAKMC,W;;;;;;;;;;;;;;;;;;kEAE+B,E;;yEAWZ,UAACC,IAAD,EAA+C;AAAA,UACxDC,iBADwD,GACqBD,IADrB,CACxDC,iBADwD;AAAA,UACrCC,GADqC,GACqBF,IADrB,CACrCE,GADqC;AAAA,UAChCC,UADgC,GACqBH,IADrB,CAChCG,UADgC;AAAA,UACpBC,EADoB,GACqBJ,IADrB,CACpBI,EADoB;AAAA,UAChBC,WADgB,GACqBL,IADrB,CAChBK,WADgB;AAAA,UACHC,aADG,GACqBN,IADrB,CACHM,aADG;AAAA,UACYC,IADZ,GACqBP,IADrB,CACYO,IADZ;AAAA,UAExDC,UAFwD,GAEzC,MAAKC,WAFoC,CAExDD,UAFwD;AAIhE,aAAO;AACHP,QAAAA,iBAAiB,EAAjBA,iBADG;AAEHC,QAAAA,GAAG,EAAHA,GAFG;AAGHQ,QAAAA,UAAU,EAAEL,WAHT;AAIHF,QAAAA,UAAU,EAAVA,UAJG;AAKHC,QAAAA,EAAE,EAAFA,EALG;AAMHK,QAAAA,WAAW,EAAE;AACTD,UAAAA,UAAU,EAAVA;AADS,SANV;AASHF,QAAAA,aAAa,EAAbA,aATG;AAUHC,QAAAA,IAAI,EAAJA;AAVG,OAAP;AAYH,K;;qEA8BgB,gBAAiD;AAAA,8BAA9CI,OAA8C;AAAA,UAA9CA,OAA8C,6BAApC,EAAoC;;AAC9D,UAAI,MAAKC,WAAL,MAAsB,OAAO,MAAKC,eAAZ,KAAgC,UAA1D,EAAsE;AAClE;AACH;;AAED,UAAMC,eAAe,GAAGH,OAAO,CAACI,GAAR,CAAY,MAAKC,kBAAjB,CAAxB;;AACA,YAAKH,eAAL,CAAqB;AAAEF,QAAAA,OAAO,EAAEG,eAAX;AAA4BG,QAAAA,WAAW,EAAEH,eAAe,CAACI;AAAzD,OAArB;AACH,K;;mEAOc,UAACC,KAAD,EAAmC;AAC9C,UAAI,MAAKP,WAAL,MAAsB,OAAO,MAAKQ,aAAZ,KAA8B,UAAxD,EAAoE;AAChE;AACH;;AAH6C,UAKtCC,QALsC,GAKzBF,KALyB,CAKtCE,QALsC,EAO9C;AACA;;AACA,UAAIA,QAAQ,CAACC,MAAT,KAAoBzB,0BAAxB,EAAoD;AAChD,cAAK0B,cAAL,CAAoB;AAChBZ,UAAAA,OAAO,EAAE,EADO;AAEhBM,UAAAA,WAAW,EAAE;AAFG,SAApB;AAIH,OALD,MAKO;AACH,cAAKG,aAAL,CAAmBD,KAAnB,EAA0BE,QAAQ,CAACC,MAAnC;AACH;AACJ,K;;;;;;;;AA3DD;;;;;6BAKiB;AACb,uBAAU,KAAKE,aAAL,EAAV;AACH;AAED;;;;;;;;;iCAMapB,E,EAAoB;AAC7B,UAAI,CAACA,EAAL,EAAS;AACL,cAAM,IAAIqB,KAAJ,CAAU,kBAAV,CAAN;AACH;;AAED,uBAAU,KAAKC,MAAL,EAAV,cAA2BtB,EAA3B;AACH;AAED;;;;;;;;;AAsCA;;;;;;;;;;;mCAYIA,E,EACAK,W,EACAI,e,EACAO,a,EACI;AACJ,UAAMO,WAAW,GAAG;AAChBC,QAAAA,OAAO,EAAExB,EADO;AAEhByB,QAAAA,SAAS,EAAE,MAFK;AAGhBC,QAAAA,MAAM,EAAEhC,4BAA4B,CAACiC,QAA7B;AAHQ,OAApB;AAMA,WAAKtB,WAAL,GAAmBA,WAAnB;AAEA,WAAKuB,SAAL,CAAe;AACX5B,QAAAA,EAAE,EAAFA,EADW;AAEXS,QAAAA,eAAe,EAAfA,eAFW;AAGXO,QAAAA,aAAa,EAAbA,aAHW;AAIXO,QAAAA,WAAW,EAAXA;AAJW,OAAf;AAMH;AAED;;;;;;;;;;;6CAkBS;AAAA,UATLvB,EASK,SATLA,EASK;AAAA,UARL6B,aAQK,SARLA,aAQK;AAAA,UAPLpB,eAOK,SAPLA,eAOK;AAAA,UANLO,aAMK,SANLA,aAMK;AACL,WAAKc,SAAL,GAAiBtC,8BAAjB;AAEA,WAAKuC,MAAL,CAAY;AACR/B,QAAAA,EAAE,EAAFA,EADQ;AAERgC,QAAAA,GAAG,EAAE,KAAKC,YAAL,CAAkBJ,aAAlB,CAFG;AAGRpB,QAAAA,eAAe,EAAfA,eAHQ;AAIRO,QAAAA,aAAa,EAAbA;AAJQ,OAAZ;AAMH;;;;EAxJqBzB,c;;AA2J1B,eAAeI,WAAf","sourcesContent":["/**\n * @flow\n * @file Helper for the box App Activity API\n * @author Box\n */\nimport MarkerBasedAPI from './MarkerBasedAPI';\nimport { ERROR_CODE_DELETE_APP_ACTIVITY, HTTP_STATUS_CODE_NOT_FOUND } from '../constants';\nimport { APP_ACTIVITY_FIELDS_TO_FETCH } from '../utils/fields';\nimport type { ElementsErrorCallback } from '../common/types/api';\nimport type { AppActivityAPIItem, AppActivityAPIItems, AppActivityItem } from '../common/types/feed';\nimport type { BoxItemPermission } from '../common/types/core';\n\nclass AppActivity extends MarkerBasedAPI {\n    /** @property {BoxItemPermission} - Placeholder permissions object to determine if app activity can be deleted */\n    permissions: BoxItemPermission = {};\n\n    /**\n     * Map an entry from the AppActivityAPIItem to an AppActivityItem.\n     * occurred_at -> created_at\n     * Adds permissions to item\n     *\n     * @param {AppActivityAPIItem} item - A single entry in the AppActivity API entries list\n     *\n     * @return {AppActivityItem}\n     */\n    mapAppActivityItem = (item: AppActivityAPIItem): AppActivityItem => {\n        const { activity_template, app, created_by, id, occurred_at, rendered_text, type } = item;\n        const { can_delete } = this.permissions;\n\n        return {\n            activity_template,\n            app,\n            created_at: occurred_at,\n            created_by,\n            id,\n            permissions: {\n                can_delete,\n            },\n            rendered_text,\n            type,\n        };\n    };\n\n    /**\n     * API URL for getting App Activity on a file\n     *\n     * @return {string} Url for all app activity on a file\n     */\n    getUrl(): string {\n        return `${this.getBaseApiUrl()}/app_activities`;\n    }\n\n    /**\n     * API URL for deleting app activity from a file\n     *\n     * @param id - ID of an app activity item\n     * @return {string} - URL to delete app activity\n     */\n    getDeleteUrl(id: string): string {\n        if (!id) {\n            throw new Error('Missing file id!');\n        }\n\n        return `${this.getUrl()}/${id}`;\n    }\n\n    /**\n     * Generic success handler\n     *\n     * @param {AppActivityAPIItems} data - the response data\n     */\n    successHandler = ({ entries = [] }: AppActivityAPIItems): void => {\n        if (this.isDestroyed() || typeof this.successCallback !== 'function') {\n            return;\n        }\n\n        const activityEntries = entries.map(this.mapAppActivityItem);\n        this.successCallback({ entries: activityEntries, total_count: activityEntries.length });\n    };\n\n    /**\n     * Generic error handler\n     *\n     * @param {AxiosError} error - the error response\n     */\n    errorHandler = (error: $AxiosError<any>): void => {\n        if (this.isDestroyed() && typeof this.errorCallback !== 'function') {\n            return;\n        }\n\n        const { response } = error;\n\n        // In the case of a 404, the enterprise does not have App Activities enabled.\n        // Show no App Activity\n        if (response.status === HTTP_STATUS_CODE_NOT_FOUND) {\n            this.successHandler({\n                entries: [],\n                total_count: 0,\n            });\n        } else {\n            this.errorCallback(error, response.status);\n        }\n    };\n\n    /**\n     * API for fetching App Activity on a file\n     *\n     * @param {string} id - the file id\n     * @param {BoxItemPermission} permissions - Permissions to attach to the app activity items. Determines if it can be deleted.\n     * @param {Function} successCallback - the success callback\n     * @param {Function} errorCallback - the error callback\n     * @param {number} [limit] - the max number of app activity items to return.\n     *\n     * @returns {void}\n     */\n    getAppActivity(\n        id: string,\n        permissions: BoxItemPermission,\n        successCallback: Function,\n        errorCallback: ElementsErrorCallback,\n    ): void {\n        const requestData = {\n            item_id: id,\n            item_type: 'file',\n            fields: APP_ACTIVITY_FIELDS_TO_FETCH.toString(),\n        };\n\n        this.permissions = permissions;\n\n        this.markerGet({\n            id,\n            successCallback,\n            errorCallback,\n            requestData,\n        });\n    }\n\n    /**\n     * Delete an app activity item\n     *\n     * @param {string} id - The ID of the Box file that App Activity is on\n     * @param {string} appActivityId - An AppActivity item id\n     * @param {Function} successCallback - The success callback\n     * @param {Function} errorCallback - The error callback\n     */\n    deleteAppActivity({\n        id,\n        appActivityId,\n        successCallback,\n        errorCallback,\n    }: {\n        appActivityId: string,\n        errorCallback: Function,\n        id: string,\n        successCallback: Function,\n    }): void {\n        this.errorCode = ERROR_CODE_DELETE_APP_ACTIVITY;\n\n        this.delete({\n            id,\n            url: this.getDeleteUrl(appActivityId),\n            successCallback,\n            errorCallback,\n        });\n    }\n}\n\nexport default AppActivity;\n"],"file":"AppActivity.js"}