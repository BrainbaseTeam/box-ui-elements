{"version":3,"sources":["../../src/api/OpenWith.js"],"names":["Base","ERROR_CODE_FETCH_INTEGRATIONS","BOX_EDIT_INTEGRATION_ID","BOX_EDIT_SFC_INTEGRATION_ID","OpenWith","id","Error","getBaseApiUrl","fileId","successCallback","errorCallback","errorCode","get","openWithIntegrations","formattedOpenWithData","formatOpenWithData","consolidatedOpenWithIntegrations","consolidateBoxEditIntegrations","integrations","consolidatedIntegrations","boxEditIntegration","some","item","appIntegrationId","filter","items","defaultIntegration","default_app_integration","map","app_integration","disabled_reasons","display_name","display_description","display_order","is_disabled","should_show_consent_popup","type","displayDescription","disabledReasons","displayOrder","isDefault","isDisabled","displayName","requiresConsent","sort","integrationA","integrationB"],"mappings":"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","sourcesContent":["/**\n * @flow\n * @file Helper for the open_with_integrations API endpoint\n * @author Box\n */\n\nimport Base from './Base';\nimport { ERROR_CODE_FETCH_INTEGRATIONS, BOX_EDIT_INTEGRATION_ID, BOX_EDIT_SFC_INTEGRATION_ID } from '../constants';\nimport type { ElementsErrorCallback } from '../common/types/api';\nimport type { Integration, OpenWithAPI } from '../common/types/integrations';\n\nclass OpenWith extends Base {\n    /**\n     * API URL for Open With\n     *\n     * @param {string} [id] - a box file id\n     * @return {string} base url for files\n     */\n    getUrl(id: string): string {\n        if (!id) {\n            throw new Error('Missing file id!');\n        }\n\n        return `${this.getBaseApiUrl()}/files/${id}/open_with_integrations`;\n    }\n\n    /**\n     * Gets Open With integration data\n     *\n     * @param {string} fileId - Box file ID\n     * @param {Function} successCallback - Success callback\n     * @param {Function} errorCallback - Error callback\n     * @return {void}\n     */\n    getOpenWithIntegrations(fileId: string, successCallback: Function, errorCallback: ElementsErrorCallback) {\n        this.errorCode = ERROR_CODE_FETCH_INTEGRATIONS;\n\n        this.get({\n            id: fileId,\n            successCallback: openWithIntegrations => {\n                const formattedOpenWithData = this.formatOpenWithData(openWithIntegrations);\n                const consolidatedOpenWithIntegrations = this.consolidateBoxEditIntegrations(formattedOpenWithData);\n                successCallback(consolidatedOpenWithIntegrations);\n            },\n            errorCallback,\n        });\n    }\n\n    /**\n     * Removes the Box Edit SFC integration if the higher scoped Box Edit integration is present.\n     * Box Edit and SFC Box Edit are considered separate integrations by the API. We only want to show one,\n     * even if both are enabled and returned from the API.\n     *\n     * @param {Array<Integration>} integrations - List of integrations\n     * @return {Array<Integration>} Integrations with only one Box Edit integration\n     */\n    consolidateBoxEditIntegrations(integrations: Array<Integration>): Array<Integration> {\n        let consolidatedIntegrations = [...integrations];\n        const boxEditIntegration = integrations.some(item => item.appIntegrationId === BOX_EDIT_INTEGRATION_ID);\n\n        if (boxEditIntegration) {\n            consolidatedIntegrations = integrations.filter(\n                item => item.appIntegrationId !== BOX_EDIT_SFC_INTEGRATION_ID,\n            );\n        }\n\n        return consolidatedIntegrations;\n    }\n\n    /**\n     * Formats Open With data conveniently for the client\n     *\n     * @param {Array<Object>} openWithIntegrations - The modified Open With integration objects\n     * @return {Array<Integration>} formatted Open With integrations\n     */\n    formatOpenWithData(openWithIntegrations: OpenWithAPI): Array<Integration> {\n        const { items, default_app_integration: defaultIntegration } = openWithIntegrations;\n        const integrations: Array<Integration> = items.map(\n            ({\n                app_integration,\n                disabled_reasons,\n                display_name,\n                display_description,\n                display_order,\n                is_disabled,\n                should_show_consent_popup,\n            }: Object) => {\n                const { id, type } = app_integration;\n\n                return {\n                    appIntegrationId: id,\n                    displayDescription: display_description,\n                    disabledReasons: disabled_reasons || [],\n                    displayOrder: display_order,\n                    isDefault: !!defaultIntegration && id === defaultIntegration.id,\n                    isDisabled: is_disabled,\n                    displayName: display_name,\n                    requiresConsent: should_show_consent_popup,\n                    type,\n                };\n            },\n        );\n\n        // Sort integrations by displayOrder\n        return integrations.sort(\n            (integrationA: Integration, integrationB: Integration) =>\n                integrationA.displayOrder - integrationB.displayOrder,\n        );\n    }\n}\n\nexport default OpenWith;\n"],"file":"OpenWith.js"}