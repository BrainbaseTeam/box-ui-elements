{"version":3,"sources":["../../src/api/Versions.js"],"names":["getProp","FILE_VERSIONS_FIELDS_TO_FETCH","OffsetBasedAPI","DEFAULT_FETCH_END","DEFAULT_FETCH_START","ERROR_CODE_DELETE_VERSION","ERROR_CODE_FETCH_VERSION","ERROR_CODE_FETCH_VERSIONS","ERROR_CODE_PROMOTE_VERSION","ERROR_CODE_RESTORE_VERSION","PERMISSION_CAN_DELETE","PERMISSION_CAN_UPLOAD","Versions","data","isDestroyed","successCallback","id","Error","getBaseApiUrl","versionId","getUrl","versions","file","entries","total_count","can_upload","map","permissions","version","errorCallback","fileId","errorCode","checkApiCallValidity","e","delete","url","getVersionUrl","offset","limit","fields","shouldFetchAll","offsetGet","fileVersionId","get","requestData","params","toString","currentVersion","promotedFromId","promotedVersion","find","version_promoted","version_number","post","type","put","trashed_at"],"mappings":"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","sourcesContent":["/**\n * @flow\n * @file Helper for the box versions API\n * @author Box\n */\n\nimport getProp from 'lodash/get';\nimport { FILE_VERSIONS_FIELDS_TO_FETCH } from '../utils/fields';\nimport OffsetBasedAPI from './OffsetBasedAPI';\nimport {\n    DEFAULT_FETCH_END,\n    DEFAULT_FETCH_START,\n    ERROR_CODE_DELETE_VERSION,\n    ERROR_CODE_FETCH_VERSION,\n    ERROR_CODE_FETCH_VERSIONS,\n    ERROR_CODE_PROMOTE_VERSION,\n    ERROR_CODE_RESTORE_VERSION,\n    PERMISSION_CAN_DELETE,\n    PERMISSION_CAN_UPLOAD,\n} from '../constants';\nimport type { ElementsErrorCallback } from '../common/types/api';\nimport type { BoxItem, FileVersions, BoxItemVersionPermission, BoxItemVersion } from '../common/types/core';\n\nclass Versions extends OffsetBasedAPI {\n    /**\n     * API URL for file versions\n     *\n     * @param {string} id - a box file id\n     * @return {string} base url for file versions\n     */\n    getUrl(id: string): string {\n        if (!id) {\n            throw new Error('Missing file id!');\n        }\n\n        return `${this.getBaseApiUrl()}/files/${id}/versions`;\n    }\n\n    /**\n     * API URL for version info endpoint\n     *\n     * @param {string} id - a box file id\n     * @param {string} versionId - a box file version id\n     * @return {string} url for version info\n     */\n    getVersionUrl(id: string, versionId: string): string {\n        if (!versionId) {\n            throw new Error('Missing version id!');\n        }\n\n        return `${this.getUrl(id)}/${versionId}`;\n    }\n\n    /**\n     * Returns the versions api response data\n     * @param {Object} data the api response data\n     */\n    successHandler = (data: FileVersions): void => {\n        if (this.isDestroyed() || typeof this.successCallback !== 'function') {\n            return;\n        }\n\n        this.successCallback(data);\n    };\n\n    /**\n     * Helper to add associated permissions from the file to the version objects\n     *\n     * @param {FileVersions} versions - API returned file versions for this file\n     * @param {BoxItem} file - The parent file object\n     * @return {FileVersions} modified versions array including associated file permissions\n     */\n    addPermissions(versions: ?FileVersions, file: BoxItem): ?FileVersions {\n        if (!versions) {\n            return versions;\n        }\n\n        // Versions defer to the parent file for upload (promote) permissions\n        const { entries, total_count } = versions;\n        const can_upload = getProp(file, ['permissions', PERMISSION_CAN_UPLOAD], false);\n\n        return {\n            entries: entries.map(({ permissions, ...version }) => ({\n                ...version,\n                permissions: { can_upload, ...permissions },\n            })),\n            total_count,\n        };\n    }\n\n    /**\n     * API for deleting a version of a file\n     *\n     * @param {Object} options - the request options\n     * @param {string} options.fileId - a box file id\n     * @param {string} options.versionId - a box file version id\n     * @param {BoxItemVersionPermission} options.permissions - the permissions for the file\n     * @param {Function} options.successCallback - the success callback\n     * @param {Function} options.errorCallback - the error callback\n     * @returns {void}\n     */\n    deleteVersion({\n        errorCallback,\n        fileId,\n        permissions,\n        successCallback,\n        versionId,\n    }: {\n        errorCallback: ElementsErrorCallback,\n        fileId: string,\n        permissions: BoxItemVersionPermission,\n        successCallback: null => any,\n        versionId: string,\n    }): void {\n        this.errorCode = ERROR_CODE_DELETE_VERSION;\n\n        try {\n            this.checkApiCallValidity(PERMISSION_CAN_DELETE, permissions, fileId);\n        } catch (e) {\n            errorCallback(e, this.errorCode);\n            return;\n        }\n\n        this.delete({\n            id: fileId,\n            url: this.getVersionUrl(fileId, versionId),\n            successCallback,\n            errorCallback,\n        });\n    }\n\n    /**\n     * API for fetching versions on a file\n     *\n     * @param {string} fileId - a box file id\n     * @param {Function} successCallback - the success callback\n     * @param {Function} errorCallback - the error callback\n     * @param {number} offset - the offset of the starting version index\n     * @param {number} limit - the max number of versions to fetch\n     * @param {Array} fields - the fields to fetch\n     * @param {boolean} shouldFetchAll - true if all versions should be fetched\n     * @returns {void}\n     */\n    getVersions(\n        fileId: string,\n        successCallback: FileVersions => any,\n        errorCallback: ElementsErrorCallback,\n        offset: number = DEFAULT_FETCH_START,\n        limit: number = DEFAULT_FETCH_END,\n        fields: Array<string> = FILE_VERSIONS_FIELDS_TO_FETCH,\n        shouldFetchAll: boolean = true,\n    ): void {\n        this.errorCode = ERROR_CODE_FETCH_VERSIONS;\n        this.offsetGet(fileId, successCallback, errorCallback, offset, limit, fields, shouldFetchAll);\n    }\n\n    /**\n     * API for fetching a certain version for a file\n     *\n     * @param {string} fileId - a box file id\n     * @param {string} fileVersionId - a box file version id\n     * @param {Function} successCallback - the success callback\n     * @param {Function} errorCallback - the error callback\n     * @returns {void}\n     */\n    getVersion(\n        fileId: string,\n        fileVersionId: string,\n        successCallback: BoxItemVersion => void,\n        errorCallback: ElementsErrorCallback,\n    ): void {\n        this.errorCode = ERROR_CODE_FETCH_VERSION;\n\n        this.get({\n            id: fileId,\n            successCallback,\n            errorCallback,\n            url: this.getVersionUrl(fileId, fileVersionId),\n            requestData: {\n                params: {\n                    fields: FILE_VERSIONS_FIELDS_TO_FETCH.toString(),\n                },\n            },\n        });\n    }\n\n    /**\n     * Decorates the current version and adds it to an existing FileVersions object\n     *\n     * @param {BoxItemVersion} currentVersion - a box version\n     * @param {FileVersions} versions - versions response\n     * @param {BoxItem} file - a box file\n     * @returns {FileVersions} - a FileVersions object containing the decorated current version\n     */\n    addCurrentVersion(currentVersion: ?BoxItemVersion, versions: ?FileVersions, file: BoxItem): FileVersions {\n        if (!currentVersion) {\n            return versions || { entries: [], total_count: 0 };\n        }\n\n        if (!versions) {\n            return { entries: [currentVersion], total_count: 1 };\n        }\n\n        const promotedFromId = getProp(file, 'restored_from.id');\n        const promotedVersion = versions.entries.find(version => version.id === promotedFromId);\n\n        if (promotedVersion) {\n            currentVersion.version_promoted = promotedVersion.version_number;\n        }\n\n        return { entries: [...versions.entries, currentVersion], total_count: versions.total_count + 1 };\n    }\n\n    /**\n     * API for promoting a version of a file to current\n     *\n     * @param {Object} options - the request options\n     * @param {string} options.fileId - a box file id\n     * @param {string} options.versionId - a box file version id\n     * @param {BoxItemVersionPermission} options.permissions - the permissions for the file\n     * @param {Function} options.successCallback - the success callback\n     * @param {Function} options.errorCallback - the error callback\n     * @returns {void}\n     */\n    promoteVersion({\n        errorCallback,\n        fileId,\n        permissions,\n        successCallback,\n        versionId,\n    }: {\n        errorCallback: ElementsErrorCallback,\n        fileId: string,\n        permissions: BoxItemVersionPermission,\n        successCallback: BoxItemVersion => any,\n        versionId: string,\n    }): void {\n        this.errorCode = ERROR_CODE_PROMOTE_VERSION;\n\n        try {\n            this.checkApiCallValidity(PERMISSION_CAN_UPLOAD, permissions, fileId);\n        } catch (e) {\n            errorCallback(e, this.errorCode);\n            return;\n        }\n\n        this.post({\n            id: fileId,\n            data: {\n                data: {\n                    id: versionId,\n                    type: 'file_version',\n                },\n            },\n            url: this.getVersionUrl(fileId, 'current'),\n            successCallback,\n            errorCallback,\n        });\n    }\n\n    /**\n     * API for restoring a deleted version of a file\n     *\n     * @param {Object} options - the request options\n     * @param {string} options.fileId - a box file id\n     * @param {string} options.versionId - a box file version id\n     * @param {BoxItemVersionPermission} options.permissions - the permissions for the file\n     * @param {Function} options.successCallback - the success callback\n     * @param {Function} options.errorCallback - the error callback\n     * @returns {void}\n     */\n    restoreVersion({\n        errorCallback,\n        fileId,\n        permissions,\n        successCallback,\n        versionId,\n    }: {\n        errorCallback: ElementsErrorCallback,\n        fileId: string,\n        permissions: BoxItemVersionPermission,\n        successCallback: BoxItemVersion => any,\n        versionId: string,\n    }): void {\n        this.errorCode = ERROR_CODE_RESTORE_VERSION;\n\n        try {\n            this.checkApiCallValidity(PERMISSION_CAN_DELETE, permissions, fileId);\n        } catch (e) {\n            errorCallback(e, this.errorCode);\n            return;\n        }\n\n        this.put({\n            id: fileId,\n            data: {\n                data: {\n                    trashed_at: null,\n                },\n            },\n            url: this.getVersionUrl(fileId, versionId),\n            successCallback,\n            errorCallback,\n        });\n    }\n}\n\nexport default Versions;\n"],"file":"Versions.js"}