{"version":3,"sources":["../../src/api/OffsetBasedAPI.js"],"names":["getTypedFileId","Base","DEFAULT_FETCH_START","DEFAULT_FETCH_END","OffsetBasedApi","offset","limit","fields","queryParams","length","toString","totalCount","undefined","id","shouldFetchAll","isDestroyed","params","getQueryParameters","url","getUrl","xhr","get","data","entries","concat","total_count","nextOffset","hasMoreItems","offsetGetRequest","successHandler","errorHandler","successCallback","errorCallback"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;AAKA,SAASA,cAAT,QAA+B,eAA/B;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,SAASC,mBAAT,EAA8BC,iBAA9B,QAAuD,cAAvD;;IAcMC,c;;;;;;;;;;;;;;AACF;;;;AAKA;;;;;;;;uCAQmBC,M,EAAgBC,K,EAAeC,M,EAAgC;AAC9E,UAAMC,WAAmB,GAAG;AACxBH,QAAAA,MAAM,EAANA,MADwB;AAExBC,QAAAA,KAAK,EAALA;AAFwB,OAA5B;;AAKA,UAAIC,MAAM,IAAIA,MAAM,CAACE,MAAP,GAAgB,CAA9B,EAAiC;AAC7BD,QAAAA,WAAW,CAACD,MAAZ,GAAqBA,MAAM,CAACG,QAAP,EAArB;AACH;;AAED,aAAOF,WAAP;AACH;AAED;;;;;;;;;;iCAOaH,M,EAAgBM,U,EAA8B;AACvD,aAAOA,UAAU,KAAKC,SAAf,IAA4BP,MAAM,GAAGM,UAA5C;AACH;AAED;;;;;;;;;;;;;;;;+CAWIE,E,EACAR,M,EACAC,K,EACAQ,c,EACAP,M;;;;;;;qBAEI,KAAKQ,WAAL,E;;;;;;;;;AAMMC,gBAAAA,M,GAAS,KAAKC,kBAAL,CAAwBZ,MAAxB,EAAgCC,KAAhC,EAAuCC,MAAvC,C;AACTW,gBAAAA,G,GAAM,KAAKC,MAAL,CAAYN,EAAZ,C;;uBAE2B,KAAKO,GAAL,CAASC,GAAT,CAAa;AAChDH,kBAAAA,GAAG,EAAHA,GADgD;AAEhDL,kBAAAA,EAAE,EAAEb,cAAc,CAACa,EAAD,CAF8B;AAGhDG,kBAAAA,MAAM,EAANA;AAHgD,iBAAb,C;;;;AAA/BM,gBAAAA,I,QAAAA,I;AAMFC,gBAAAA,O,GAAU,KAAKD,IAAL,GAAY,KAAKA,IAAL,CAAUC,OAAtB,GAAgC,E;AAChD,qBAAKD,IAAL,qBACOA,IADP;AAEIC,kBAAAA,OAAO,EAAEA,OAAO,CAACC,MAAR,CAAeF,IAAI,CAACC,OAApB;AAFb;AAIMZ,gBAAAA,U,GAAaW,IAAI,CAACG,W;AAClBC,gBAAAA,U,GAAarB,MAAM,GAAGC,K;;sBACxBQ,cAAc,IAAI,KAAKa,YAAL,CAAkBD,UAAlB,EAA8Bf,UAA9B,C;;;;;AAClB,qBAAKiB,gBAAL,CAAsBf,EAAtB,EAA0Ba,UAA1B,EAAsCpB,KAAtC,EAA6CQ,cAA7C,EAA6DP,MAA7D;;;;AAIJ,qBAAKsB,cAAL,CAAoB,KAAKP,IAAzB;;;;;;;AAEA,qBAAKQ,YAAL;;;;;;;;;;;;;;;;AAIR;;;;;;;;;;;;;;;;;gDAYIjB,E,EACAkB,e,EACAC,a;;;;;;;;;;AACA3B,gBAAAA,M,8DAAiBH,mB;AACjBI,gBAAAA,K,8DAAgBH,iB;AAChBI,gBAAAA,M;AACAO,gBAAAA,c,8DAA0B,I;AAE1B,qBAAKiB,eAAL,GAAuBA,eAAvB;AACA,qBAAKC,aAAL,GAAqBA,aAArB;kDAEO,KAAKJ,gBAAL,CAAsBf,EAAtB,EAA0BR,MAA1B,EAAkCC,KAAlC,EAAyCQ,cAAzC,EAAyDP,MAAzD,C;;;;;;;;;;;;;;;;;;;EA/GcN,I;;AAmH7B,eAAeG,cAAf","sourcesContent":["/**\n * @flow\n * @file class for Box offset based API's to inherit common functionality from\n * @author Box\n */\nimport { getTypedFileId } from '../utils/file';\nimport Base from './Base';\nimport { DEFAULT_FETCH_START, DEFAULT_FETCH_END } from '../constants';\nimport type { ElementsErrorCallback } from '../common/types/api';\n\ntype Params = {\n    fields?: string,\n    limit: number,\n    offset: number,\n};\n\ntype Data = {\n    entries: Array<any>,\n    total_count: number,\n};\n\nclass OffsetBasedApi extends Base {\n    /**\n     * @property {Data}\n     */\n    data: Data;\n\n    /**\n     * Gets query params for the API\n     *\n     * @param {number} offset the offset from the start to start fetching at\n     * @param {number} limit the number of items to fetch\n     * @param {array} fields the fields to fetch\n     * @return the query params object\n     */\n    getQueryParameters(offset: number, limit: number, fields?: Array<string>): Object {\n        const queryParams: Params = {\n            offset,\n            limit,\n        };\n\n        if (fields && fields.length > 0) {\n            queryParams.fields = fields.toString();\n        }\n\n        return queryParams;\n    }\n\n    /**\n     * Determines if the API has more items to fetch\n     *\n     * @param {number} offset the offset from the start to start fetching at\n     * @param {number} totalCount the total number of items\n     * @return {boolean} true if there are more items\n     */\n    hasMoreItems(offset: number, totalCount?: number): boolean {\n        return totalCount === undefined || offset < totalCount;\n    }\n\n    /**\n     * Helper for get\n     *\n     * @param {string} id the file id\n     * @param {number} offset the offset from the start to start fetching at\n     * @param {number} limit the number of items to fetch\n     * @param {array} fields the fields to fetch\n     * @param {boolean} shouldFetchAll true if should get all the pages before calling the sucessCallback\n     * @private\n     */\n    async offsetGetRequest(\n        id: string,\n        offset: number,\n        limit: number,\n        shouldFetchAll: boolean,\n        fields?: Array<string>,\n    ): Promise<void> {\n        if (this.isDestroyed()) {\n            return;\n        }\n\n        // Make the XHR request\n        try {\n            const params = this.getQueryParameters(offset, limit, fields);\n            const url = this.getUrl(id);\n\n            const { data }: { data: Data } = await this.xhr.get({\n                url,\n                id: getTypedFileId(id),\n                params,\n            });\n\n            const entries = this.data ? this.data.entries : [];\n            this.data = {\n                ...data,\n                entries: entries.concat(data.entries),\n            };\n            const totalCount = data.total_count;\n            const nextOffset = offset + limit;\n            if (shouldFetchAll && this.hasMoreItems(nextOffset, totalCount)) {\n                this.offsetGetRequest(id, nextOffset, limit, shouldFetchAll, fields);\n                return;\n            }\n\n            this.successHandler(this.data);\n        } catch (error) {\n            this.errorHandler(error);\n        }\n    }\n\n    /**\n     * Offset based API get\n     *\n     * @param {string} id the file id\n     * @param {Function} successCallback the success callback\n     * @param {Function} errorCallback the error callback\n     * @param {number} offset the offset from the start to start fetching at\n     * @param {number} limit the number of items to fetch\n     * @param {array} fields the fields to fetch\n     * @param {boolean} shouldFetchAll true if should get all the pages before calling the sucessCallback\n     */\n    async offsetGet(\n        id: string,\n        successCallback: Function,\n        errorCallback: ElementsErrorCallback,\n        offset: number = DEFAULT_FETCH_START,\n        limit: number = DEFAULT_FETCH_END,\n        fields?: Array<string>,\n        shouldFetchAll: boolean = true,\n    ): Promise<void> {\n        this.successCallback = successCallback;\n        this.errorCallback = errorCallback;\n\n        return this.offsetGetRequest(id, offset, limit, shouldFetchAll, fields);\n    }\n}\n\nexport default OffsetBasedApi;\n"],"file":"OffsetBasedAPI.js"}