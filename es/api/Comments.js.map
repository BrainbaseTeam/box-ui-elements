{"version":3,"sources":["../../src/api/Comments.js"],"names":["COMMENTS_FIELDS_TO_FETCH","OffsetBasedAPI","PERMISSION_CAN_COMMENT","PERMISSION_CAN_DELETE","PERMISSION_CAN_EDIT","ERROR_CODE_CREATE_COMMENT","ERROR_CODE_UPDATE_COMMENT","ERROR_CODE_DELETE_COMMENT","ERROR_CODE_FETCH_COMMENTS","Comments","data","isDestroyed","successCallback","entries","format","comments","map","id","Error","getBaseApiUrl","baseUrl","comment","tagged_message","message","file","taggedMessage","errorCallback","errorCode","permissions","checkApiCallValidity","e","requestData","item","type","params","fields","toString","post","url","commentsUrl","commentId","put","delete","fileId","offset","limit","shouldFetchAll","offsetGet"],"mappings":"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","sourcesContent":["/**\n * @flow\n * @file Helper for the box comments API\n * @author Box\n */\n\nimport { COMMENTS_FIELDS_TO_FETCH } from '../utils/fields';\nimport OffsetBasedAPI from './OffsetBasedAPI';\nimport {\n    PERMISSION_CAN_COMMENT,\n    PERMISSION_CAN_DELETE,\n    PERMISSION_CAN_EDIT,\n    ERROR_CODE_CREATE_COMMENT,\n    ERROR_CODE_UPDATE_COMMENT,\n    ERROR_CODE_DELETE_COMMENT,\n    ERROR_CODE_FETCH_COMMENTS,\n} from '../constants';\nimport type { ElementsXhrError, ElementsErrorCallback } from '../common/types/api';\nimport type { BoxItem, BoxItemPermission } from '../common/types/core';\n\nclass Comments extends OffsetBasedAPI {\n    /**\n     * API URL for comments on a file\n     *\n     * @param {string} id - A box file id\n     * @return {string} base url for files\n     */\n    getUrl(id?: string): string {\n        if (!id) {\n            throw new Error('Missing file id!');\n        }\n\n        return `${this.getBaseApiUrl()}/files/${id}/comments`;\n    }\n\n    /**\n     * API URL for comments endpoint\n     *\n     * @param {string} [id] - A box comment id\n     * @return {string} base url for comments\n     */\n    commentsUrl(id?: string): string {\n        const baseUrl = `${this.getBaseApiUrl()}/comments`;\n        return id ? `${baseUrl}/${id}` : baseUrl;\n    }\n\n    /**\n     * Formats comment data for use in components.\n     *\n     * @param {string} [id] - An individual comment entry from the API\n     * @return {Task} A task\n     */\n    format(comment: Object): Comment {\n        return {\n            ...comment,\n            tagged_message: comment.tagged_message !== '' ? comment.tagged_message : comment.message,\n        };\n    }\n\n    /**\n     * Formats the comments api response to usable data\n     * @param {Object} data the api response data\n     */\n    successHandler = (data: Object): void => {\n        if (this.isDestroyed() || typeof this.successCallback !== 'function') {\n            return;\n        }\n\n        // There is no response data when deleting a comment\n        if (!data) {\n            this.successCallback();\n            return;\n        }\n\n        // We don't have entries when updating/creating a comment\n        if (!data.entries) {\n            this.successCallback(this.format(data));\n            return;\n        }\n\n        const comments = data.entries.map(this.format);\n        this.successCallback({ ...data, entries: comments });\n    };\n\n    /**\n     * API for creating a comment on a file\n     *\n     * @param {BoxItem} file - File object for which we are creating a comment\n     * @param {string} message - Comment message\n     * @param {string} taggedMessage - Comment message with @mentions\n     * @param {Function} successCallback - Success callback\n     * @param {Function} errorCallback - Error callback\n     * @return {void}\n     */\n    createComment({\n        file,\n        message,\n        taggedMessage,\n        successCallback,\n        errorCallback,\n    }: {\n        errorCallback: ElementsErrorCallback,\n        file: BoxItem,\n        message?: string,\n        successCallback: Function,\n        taggedMessage?: string,\n    }): void {\n        this.errorCode = ERROR_CODE_CREATE_COMMENT;\n        const { id = '', permissions } = file;\n\n        try {\n            this.checkApiCallValidity(PERMISSION_CAN_COMMENT, permissions, id);\n        } catch (e) {\n            errorCallback(e, this.errorCode);\n            return;\n        }\n\n        const requestData = {\n            data: {\n                item: {\n                    id,\n                    type: 'file',\n                },\n                message,\n                tagged_message: taggedMessage,\n            },\n            params: {\n                fields: COMMENTS_FIELDS_TO_FETCH.toString(),\n            },\n        };\n\n        this.post({\n            id,\n            url: this.commentsUrl(),\n            data: requestData,\n            successCallback,\n            errorCallback,\n        });\n    }\n\n    /**\n     * API for updating a comment on a file\n     *\n     * @param {BoxItem} file - File object for which we are updating a comment\n     * @param {string} commentId - Comment to be edited\n     * @param {string} message - Comment message\n     * @param {BoxItemPermission} permissions - The known permissions of the comment we're updating\n     * @param {Function} successCallback - Success callback\n     * @param {Function} errorCallback - Error callback\n     * @return {void}\n     */\n    updateComment({\n        file,\n        commentId,\n        message,\n        tagged_message,\n        permissions,\n        successCallback,\n        errorCallback,\n    }: {\n        commentId: string,\n        errorCallback: ElementsErrorCallback,\n        file: BoxItem,\n        message: string,\n        permissions: BoxItemPermission,\n        successCallback: Function,\n        tagged_message?: string,\n    }): void {\n        this.errorCode = ERROR_CODE_UPDATE_COMMENT;\n        const { id = '' } = file;\n\n        try {\n            this.checkApiCallValidity(PERMISSION_CAN_EDIT, permissions, id);\n        } catch (e) {\n            errorCallback(e, this.errorCode);\n            return;\n        }\n\n        const requestData = {\n            data: { message, tagged_message },\n        };\n\n        this.put({\n            id,\n            url: this.commentsUrl(commentId),\n            data: requestData,\n            successCallback,\n            errorCallback,\n        });\n    }\n\n    /**\n     * API for deleting a comment on a file\n     *\n     * @param {BoxItem} file - File object for which we are deleting a comment\n     * @param {string} commentId - Id of the comment we are deleting\n     * @param {BoxItemPermission} permissions - The known permissions of the comment we're deleting\n     * @param {Function} successCallback - Success callback\n     * @param {Function} errorCallback - Error callback\n     * @return {void}\n     */\n    deleteComment({\n        file,\n        commentId,\n        permissions,\n        successCallback,\n        errorCallback,\n    }: {\n        commentId: string,\n        errorCallback: ElementsErrorCallback,\n        file: BoxItem,\n        permissions: BoxItemPermission,\n        successCallback: Function,\n    }): void {\n        this.errorCode = ERROR_CODE_DELETE_COMMENT;\n        const { id = '' } = file;\n\n        try {\n            this.checkApiCallValidity(PERMISSION_CAN_DELETE, permissions, id);\n        } catch (e) {\n            errorCallback(e, this.errorCode);\n            return;\n        }\n\n        this.delete({\n            id,\n            url: this.commentsUrl(commentId),\n            successCallback,\n            errorCallback,\n        });\n    }\n\n    /**\n     * API for fetching comments on a file\n     *\n     * @param {string} fileId - the file id\n     * @param {BoxItemPermission} permissions - the permissions for the file\n     * @param {Function} successCallback - the success callback\n     * @param {Function} errorCallback - the error callback\n     * @param {array} fields - the fields to fetch\n     * @param {number} offset - the offset from the start to start fetching at\n     * @param {number} limit - the number of items to fetch\n     * @param {boolean} shouldFetchAll - true if should get all the pages before calling the sucessCallback\n     * @returns {void}\n     */\n    getComments(\n        fileId: string,\n        permissions: BoxItemPermission,\n        successCallback: Function,\n        errorCallback: (e: ElementsXhrError, code: string) => void,\n        fields: Array<string> = COMMENTS_FIELDS_TO_FETCH,\n        offset?: number,\n        limit?: number,\n        shouldFetchAll?: boolean,\n    ): void {\n        this.errorCode = ERROR_CODE_FETCH_COMMENTS;\n        try {\n            this.checkApiCallValidity(PERMISSION_CAN_COMMENT, permissions, fileId);\n        } catch (e) {\n            errorCallback(e, this.errorCode);\n            return;\n        }\n\n        this.offsetGet(fileId, successCallback, errorCallback, offset, limit, fields, shouldFetchAll);\n    }\n}\n\nexport default Comments;\n"],"file":"Comments.js"}