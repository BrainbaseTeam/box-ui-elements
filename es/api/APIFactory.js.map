{"version":3,"sources":["../../src/api/APIFactory.js"],"names":["Cache","ChunkedUploadAPI","PlainUploadAPI","FolderAPI","FileAPI","WebLinkAPI","SearchAPI","RecentsAPI","VersionsAPI","CommentsAPI","TasksNewAPI","TaskCollaboratorsAPI","TaskLinksAPI","FileAccessStatsAPI","UsersAPI","MetadataAPI","FileCollaboratorsAPI","FeedAPI","AppIntegrationsAPI","OpenWithAPI","MetadataQueryAPI","BoxEditAPI","DEFAULT_HOSTNAME_API","DEFAULT_HOSTNAME_UPLOAD","TYPE_FOLDER","TYPE_FILE","TYPE_WEBLINK","APIFactory","options","apiHost","uploadHost","cache","language","destroyCache","fileAPI","destroy","weblinkAPI","plainUploadAPI","chunkedUploadAPI","folderAPI","searchAPI","recentsAPI","versionsAPI","fileAccessStatsAPI","tasksNewAPI","taskCollaboratorsAPI","taskLinksAPI","commentsAPI","usersAPI","metadataAPI","fileCollaboratorsAPI","appIntegrationsAPI","metadataQueryAPI","openWithAPI","type","api","getFolderAPI","getFileAPI","getWebLinkAPI","Error","shouldDestroy","feedItemsAPI","boxEditAPI"],"mappings":"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","sourcesContent":["/**\n * @flow\n * @file Main entry point for the box api\n * @author Box\n */\n\nimport Cache from '../utils/Cache';\nimport ChunkedUploadAPI from './uploads/MultiputUpload';\nimport PlainUploadAPI from './uploads/PlainUpload';\nimport FolderAPI from './Folder';\nimport FileAPI from './File';\nimport WebLinkAPI from './WebLink';\nimport SearchAPI from './Search';\nimport RecentsAPI from './Recents';\nimport VersionsAPI from './Versions';\nimport CommentsAPI from './Comments';\nimport TasksNewAPI from './tasks/TasksNew';\nimport TaskCollaboratorsAPI from './tasks/TaskCollaborators';\nimport TaskLinksAPI from './tasks/TaskLinks';\nimport FileAccessStatsAPI from './FileAccessStats';\nimport UsersAPI from './Users';\nimport MetadataAPI from './Metadata';\nimport FileCollaboratorsAPI from './FileCollaborators';\nimport FeedAPI from './Feed';\nimport AppIntegrationsAPI from './AppIntegrations';\nimport OpenWithAPI from './OpenWith';\nimport MetadataQueryAPI from './MetadataQuery';\nimport BoxEditAPI from './box-edit';\nimport { DEFAULT_HOSTNAME_API, DEFAULT_HOSTNAME_UPLOAD, TYPE_FOLDER, TYPE_FILE, TYPE_WEBLINK } from '../constants';\n\nclass APIFactory {\n    /**\n     * @property {*}\n     */\n    options: Options;\n\n    /**\n     * @property {FileAPI}\n     */\n    fileAPI: FileAPI;\n\n    /**\n     * @property {WebLink}\n     */\n    weblinkAPI: WebLinkAPI;\n\n    /**\n     * @property {FolderAPI}\n     */\n    folderAPI: FolderAPI;\n\n    /**\n     * @property {PlainUploadAPI}\n     */\n    plainUploadAPI: PlainUploadAPI;\n\n    /**\n     * @property {ChunkedUploadAPI}\n     */\n    chunkedUploadAPI: ChunkedUploadAPI;\n\n    /**\n     * @property {SearchAPI}\n     */\n    searchAPI: SearchAPI;\n\n    /**\n     * @property {RecentsAPI}\n     */\n    recentsAPI: RecentsAPI;\n\n    /**\n     * @property {VersionsAPI}\n     */\n    versionsAPI: VersionsAPI;\n\n    /**\n     * @property {CommentsAPI}\n     */\n    commentsAPI: CommentsAPI;\n\n    /**\n     * @property {TasksNewAPI}\n     */\n    tasksNewAPI: TasksNewAPI;\n\n    /**\n     * @property {TaskCollaboratorsAPI}\n     */\n    taskCollaboratorsAPI: TaskCollaboratorsAPI;\n\n    /**\n     * @property {TaskLinksAPI}\n     */\n    taskLinksAPI: TaskLinksAPI;\n\n    /*\n     * @property {FileAccessStatsAPI}\n     */\n    fileAccessStatsAPI: FileAccessStatsAPI;\n\n    /*\n     * @property {UsersAPI}\n     */\n    usersAPI: UsersAPI;\n\n    /*\n     * @property {MetadataAPI}\n     */\n    metadataAPI: MetadataAPI;\n\n    /**\n     * @property {FileCollaboratorsAPI}\n     */\n    fileCollaboratorsAPI: FileCollaboratorsAPI;\n\n    /**\n     * @property {FeedAPI}\n     */\n    feedItemsAPI: FeedAPI;\n\n    /**\n     * @property {OpenWithAPI}\n     */\n    openWithAPI: OpenWithAPI;\n\n    /**\n     * @property {AppIntegrationsAPI}\n     */\n    appIntegrationsAPI: AppIntegrationsAPI;\n\n    /**\n     * @property {MetadataQueryAPI}\n     */\n    metadataQueryAPI: MetadataQueryAPI;\n\n    /** @property {BoxEditAPI}\n     *\n     */\n    boxEditAPI: BoxEditAPI;\n\n    /**\n     * [constructor]\n     *\n     * @param {Object} options\n     * @param {string} options.id - item id\n     * @param {string|function} options.token - Auth token\n     * @param {string} [options.sharedLink] - Shared link\n     * @param {string} [options.sharedLinkPassword] - Shared link password\n     * @param {string} [options.apiHost] - Api host\n     * @param {string} [options.uploadHost] - Upload host name\n     * @return {API} Api instance\n     */\n    constructor(options: Options) {\n        this.options = {\n            ...options,\n            apiHost: options.apiHost || DEFAULT_HOSTNAME_API,\n            uploadHost: options.uploadHost || DEFAULT_HOSTNAME_UPLOAD,\n            cache: options.cache || new Cache(),\n            language: options.language,\n        };\n    }\n\n    /**\n     * [destructor]\n     *\n     * @param {boolean} destroyCache - true to destroy cache\n     * @return {void}\n     */\n    destroy(destroyCache: boolean = false) {\n        if (this.fileAPI) {\n            this.fileAPI.destroy();\n            delete this.fileAPI;\n        }\n\n        if (this.weblinkAPI) {\n            this.weblinkAPI.destroy();\n            delete this.weblinkAPI;\n        }\n\n        if (this.plainUploadAPI) {\n            this.plainUploadAPI.destroy();\n            delete this.plainUploadAPI;\n        }\n\n        if (this.chunkedUploadAPI) {\n            this.chunkedUploadAPI.destroy();\n            delete this.chunkedUploadAPI;\n        }\n\n        if (this.folderAPI) {\n            this.folderAPI.destroy();\n            delete this.folderAPI;\n        }\n\n        if (this.searchAPI) {\n            this.searchAPI.destroy();\n            delete this.searchAPI;\n        }\n\n        if (this.recentsAPI) {\n            this.recentsAPI.destroy();\n            delete this.recentsAPI;\n        }\n\n        if (this.versionsAPI) {\n            this.versionsAPI.destroy();\n            delete this.versionsAPI;\n        }\n\n        if (this.fileAccessStatsAPI) {\n            this.fileAccessStatsAPI.destroy();\n            delete this.fileAccessStatsAPI;\n        }\n\n        if (this.tasksNewAPI) {\n            this.tasksNewAPI.destroy();\n            delete this.tasksNewAPI;\n        }\n\n        if (this.taskCollaboratorsAPI) {\n            this.taskCollaboratorsAPI.destroy();\n            delete this.taskCollaboratorsAPI;\n        }\n\n        if (this.taskLinksAPI) {\n            this.taskLinksAPI.destroy();\n            delete this.taskLinksAPI;\n        }\n\n        if (this.commentsAPI) {\n            this.commentsAPI.destroy();\n            delete this.commentsAPI;\n        }\n\n        if (this.usersAPI) {\n            this.usersAPI.destroy();\n            delete this.usersAPI;\n        }\n\n        if (this.metadataAPI) {\n            this.metadataAPI.destroy();\n            delete this.metadataAPI;\n        }\n\n        if (this.fileCollaboratorsAPI) {\n            this.fileCollaboratorsAPI.destroy();\n            delete this.fileCollaboratorsAPI;\n        }\n\n        if (this.appIntegrationsAPI) {\n            this.appIntegrationsAPI.destroy();\n            delete this.appIntegrationsAPI;\n        }\n\n        if (this.metadataQueryAPI) {\n            this.metadataQueryAPI.destroy();\n            delete this.metadataQueryAPI;\n        }\n\n        if (this.openWithAPI) {\n            this.openWithAPI.destroy();\n            delete this.openWithAPI;\n        }\n\n        if (destroyCache) {\n            this.options.cache = new Cache();\n        }\n    }\n\n    /**\n     * Gets the cache instance\n     *\n     * @return {Cache} cache instance\n     */\n    getCache(): APICache {\n        return ((this.options.cache: any): APICache);\n    }\n\n    /**\n     * Returns the API based on type of item\n     *\n     * @private\n     * @param {String} type - item type\n     * @return {ItemAPI} api\n     */\n    getAPI(type: ItemType): ItemAPI {\n        let api: ItemAPI;\n\n        switch (type) {\n            case TYPE_FOLDER:\n                api = this.getFolderAPI();\n                break;\n            case TYPE_FILE:\n                api = this.getFileAPI();\n                break;\n            case TYPE_WEBLINK:\n                api = this.getWebLinkAPI();\n                break;\n            default:\n                throw new Error('Unknown Type!');\n        }\n\n        return api;\n    }\n\n    /**\n     * API for file\n     *\n     * @return {FileAPI} FileAPI instance\n     */\n    getFileAPI(shouldDestroy: boolean = true): FileAPI {\n        if (shouldDestroy) {\n            this.destroy();\n        }\n        this.fileAPI = new FileAPI(this.options);\n        return this.fileAPI;\n    }\n\n    /**\n     * API for web links\n     *\n     * @return {WebLinkAPI} WebLinkAPI instance\n     */\n    getWebLinkAPI(): WebLinkAPI {\n        this.destroy();\n        this.weblinkAPI = new WebLinkAPI(this.options);\n        return this.weblinkAPI;\n    }\n\n    /**\n     * API for plain uploads\n     *\n     * @return {UploadAPI} UploadAPI instance\n     */\n    getPlainUploadAPI(): PlainUploadAPI {\n        this.destroy();\n        this.plainUploadAPI = new PlainUploadAPI(this.options);\n        return this.plainUploadAPI;\n    }\n\n    /**\n     * API for chunked uploads\n     *\n     * @return {UploadAPI} UploadAPI instance\n     */\n    getChunkedUploadAPI(): ChunkedUploadAPI {\n        this.destroy();\n        this.chunkedUploadAPI = new ChunkedUploadAPI(this.options);\n        return this.chunkedUploadAPI;\n    }\n\n    /**\n     * API for folder\n     *\n     * @return {FolderAPI} FolderAPI instance\n     */\n    getFolderAPI(): FolderAPI {\n        this.destroy();\n        this.folderAPI = new FolderAPI(this.options);\n        return this.folderAPI;\n    }\n\n    /**\n     * API for search\n     *\n     * @return {SearchAPI} SearchAPI instance\n     */\n    getSearchAPI(): SearchAPI {\n        this.destroy();\n        this.searchAPI = new SearchAPI(this.options);\n        return this.searchAPI;\n    }\n\n    /**\n     * API for recents\n     *\n     * @return {RecentsAPI} RecentsAPI instance\n     */\n    getRecentsAPI(): RecentsAPI {\n        this.destroy();\n        this.recentsAPI = new RecentsAPI(this.options);\n        return this.recentsAPI;\n    }\n\n    /**\n     * API for metadata\n     *\n     * @param {boolean} shouldDestroy - true if the factory should destroy before returning the call\n     * @return {MetadataAPI} MetadataAPI instance\n     */\n    getMetadataAPI(shouldDestroy: boolean): MetadataAPI {\n        if (shouldDestroy) {\n            this.destroy();\n        }\n\n        this.metadataAPI = new MetadataAPI(this.options);\n        return this.metadataAPI;\n    }\n\n    /**\n     * API for versions\n     *\n     * @param {boolean} shouldDestroy - true if the factory should destroy before returning the call\n     * @return {VersionsAPI} VersionsAPI instance\n     */\n    getVersionsAPI(shouldDestroy: boolean): VersionsAPI {\n        if (shouldDestroy) {\n            this.destroy();\n        }\n\n        this.versionsAPI = new VersionsAPI(this.options);\n        return this.versionsAPI;\n    }\n\n    /**\n     * API for comments\n     *\n     * @param {boolean} shouldDestroy - true if the factory should destroy before returning the call\n     * @return {CommentsAPI} CommentsAPI instance\n     */\n    getCommentsAPI(shouldDestroy: boolean): CommentsAPI {\n        if (shouldDestroy) {\n            this.destroy();\n        }\n\n        this.commentsAPI = new CommentsAPI(this.options);\n        return this.commentsAPI;\n    }\n\n    /**\n     * API for tasks\n     *\n     * @param {boolean} shouldDestroy - true if the factory should destroy before returning the call\n     * @return {TasksAPI} TaskAssignmentsAPI instance\n     */\n    getTasksNewAPI(shouldDestroy: boolean): TasksNewAPI {\n        if (shouldDestroy) {\n            this.destroy();\n        }\n\n        this.tasksNewAPI = new TasksNewAPI(this.options);\n        return this.tasksNewAPI;\n    }\n\n    /**\n     * API for taskCollaborators\n     *\n     * @param {boolean} shouldDestroy - true if the factory should destroy before returning the call\n     * @return {TaskCollaboratorsAPI} TaskCollaboratorsAPI instance\n     */\n    getTaskCollaboratorsAPI(shouldDestroy: boolean): TaskCollaboratorsAPI {\n        if (shouldDestroy) {\n            this.destroy();\n        }\n\n        this.taskCollaboratorsAPI = new TaskCollaboratorsAPI(this.options);\n        return this.taskCollaboratorsAPI;\n    }\n\n    /**\n     * API for taskLinks\n     *\n     * @param {boolean} shouldDestroy - true if the factory should destroy before returning the call\n     * @return {TasksAPI} TaskLinksAPI instance\n     */\n    getTaskLinksAPI(shouldDestroy: boolean): TaskLinksAPI {\n        if (shouldDestroy) {\n            this.destroy();\n        }\n\n        this.taskLinksAPI = new TaskLinksAPI(this.options);\n        return this.taskLinksAPI;\n    }\n\n    /**\n     * API for file access stats\n     *\n     * @param {boolean} shouldDestroy - true if the factory should destroy before returning the call\n     * @return {FileAccessStatsAPI} FileAccessStatsAPI instance\n     */\n    getFileAccessStatsAPI(shouldDestroy: boolean): FileAccessStatsAPI {\n        if (shouldDestroy) {\n            this.destroy();\n        }\n\n        this.fileAccessStatsAPI = new FileAccessStatsAPI(this.options);\n        return this.fileAccessStatsAPI;\n    }\n\n    /**\n     * API for file collaborators\n     *\n     * @param {boolean} shouldDestroy - true if the factory should destroy before returning the call\n     * @return {FileCollaboratorsAPI} FileCollaboratorsAPI instance\n     */\n    getFileCollaboratorsAPI(shouldDestroy: boolean): FileCollaboratorsAPI {\n        if (shouldDestroy) {\n            this.destroy();\n        }\n\n        this.fileCollaboratorsAPI = new FileCollaboratorsAPI(this.options);\n        return this.fileCollaboratorsAPI;\n    }\n\n    /**\n     * API for Users\n     *\n     * @param {boolean} shouldDestroy - true if the factory should destroy before returning the call\n     * @return {UsersAPI} UsersAPI instance\n     */\n    getUsersAPI(shouldDestroy: boolean): UsersAPI {\n        if (shouldDestroy) {\n            this.destroy();\n        }\n\n        this.usersAPI = new UsersAPI(this.options);\n        return this.usersAPI;\n    }\n\n    /**\n     * API for Feed Items\n     *\n     * @param {boolean} shouldDestroy - true if the factory should destroy before returning the call\n     * @return {FeedAPI} FeedAPI instance\n     */\n    getFeedAPI(shouldDestroy: boolean): FeedAPI {\n        if (shouldDestroy) {\n            this.destroy();\n        }\n\n        this.feedItemsAPI = new FeedAPI(this.options);\n        return this.feedItemsAPI;\n    }\n\n    /**\n     * API for Open With\n     *\n     * @param {boolean} shouldDestroy - true if the factory should destroy before returning the call\n     * @return {OpenWithAPI} OpenWithAPI instance\n     */\n    getOpenWithAPI(shouldDestroy: boolean): OpenWithAPI {\n        if (shouldDestroy) {\n            this.destroy();\n        }\n\n        this.openWithAPI = new OpenWithAPI(this.options);\n        return this.openWithAPI;\n    }\n\n    /**\n     * API for the App Integrations endpoint\n     *\n     * @param {boolean} shouldDestroy - true if the factory should destroy before returning the call\n     * @return {AppIntegrationsAPI} AppIntegrationsAPI instance\n     */\n    getAppIntegrationsAPI(shouldDestroy: boolean): AppIntegrationsAPI {\n        if (shouldDestroy) {\n            this.destroy();\n        }\n\n        this.appIntegrationsAPI = new AppIntegrationsAPI(this.options);\n        return this.appIntegrationsAPI;\n    }\n\n    /**\n     * API for Metadata Query\n     *\n     * @param {boolean} shouldDestroy - true if the factory should destroy before returning the call\n     * @return {MetadataQuery} MetadataQuery instance\n     */\n    getMetadataQueryAPI(shouldDestroy: boolean = false): MetadataQueryAPI {\n        if (shouldDestroy) {\n            this.destroy();\n        }\n\n        this.metadataQueryAPI = new MetadataQueryAPI(this.options);\n        return this.metadataQueryAPI;\n    }\n\n    /**\n     * API for Box Edit\n     *\n     * @return {BoxEditAPI} BoxEditAPI instance\n     */\n    getBoxEditAPI(): BoxEditAPI {\n        this.boxEditAPI = new BoxEditAPI();\n        return this.boxEditAPI;\n    }\n}\n\nexport default APIFactory;\n"],"file":"APIFactory.js"}