{"version":3,"sources":["../../src/api/FileCollaborators.js"],"names":["MarkerBasedAPI","DEFAULT_MAX_COLLABORATORS","FileCollaborators","data","isDestroyed","successCallback","collaboratorSelectorItems","entries","map","collab","item","type","email","login","id","name","Error","getBaseApiUrl","errorCallback","requestData","limit","markerGet"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;AAMA,OAAOA,cAAP,MAA2B,kBAA3B;AACA,SAASC,yBAAT,QAA0C,cAA1C;;IASMC,iB;;;;;;;;;;;;;;;;;;qEAoBe,UAACC,IAAD,EAA0C;AACvD,UAAI,MAAKC,WAAL,MAAsB,OAAO,MAAKC,eAAZ,KAAgC,UAA1D,EAAsE;AAClE;AACH,OAHsD,CAKvD;;;AACA,UAAMC,yBAA8D,GAAGH,IAAI,CAACI,OAAL,CAAaC,GAAb,CACnE,UAACC,MAAD,EAAkC;AAC9B,YAAIC,IAAJ;;AACA,YAAID,MAAM,CAACE,IAAP,KAAgB,OAApB,EAA6B;AACzBD,UAAAA,IAAI,GAAGD,MAAP,CADyB,CACV;AAClB,SAFD,MAEO;AACHC,UAAAA,IAAI,GAAGD,MAAP;AACAC,UAAAA,IAAI,CAACE,KAAL,GAAaF,IAAI,CAACG,KAAlB,CAFG,CAEsB;AAC5B;;AACD,eAAO;AACHC,UAAAA,EAAE,EAAEL,MAAM,CAACK,EADR;AAEHC,UAAAA,IAAI,EAAEN,MAAM,CAACM,IAFV;AAGHL,UAAAA,IAAI,EAAJA;AAHG,SAAP;AAKH,OAdkE,CAAvE;;AAiBA,YAAKL,eAAL,mBAA0BF,IAA1B;AAAgCI,QAAAA,OAAO,EAAED;AAAzC;AACH,K;;;;;;;;AA3CD;;;;;;2BAMOQ,E,EAAoB;AACvB,UAAI,CAACA,EAAL,EAAS;AACL,cAAM,IAAIE,KAAJ,CAAU,kBAAV,CAAN;AACH;;AAED,uBAAU,KAAKC,aAAL,EAAV,oBAAwCH,EAAxC;AACH;AAED;;;;;;;;;AA+BA;;;;;;;;;;yCAWIA,E,EACAT,e,EACAa,a,EAGI;AAAA,UAFJC,WAEI,uEAFkB,EAElB;AAAA,UADJC,KACI,uEADYnB,yBACZ;AACJ;AACA;AACA,WAAKoB,SAAL,CAAe;AACXP,QAAAA,EAAE,EAAFA,EADW;AAEXM,QAAAA,KAAK,EAALA,KAFW;AAGXf,QAAAA,eAAe,EAAfA,eAHW;AAIXa,QAAAA,aAAa,EAAbA,aAJW;AAKXC,QAAAA,WAAW,EAAXA;AALW,OAAf;AAOH;;;;EAxE2BnB,c;;AA2EhC,eAAeE,iBAAf","sourcesContent":["/**\n * @flow\n * @file Helper for the box collaborators API\n * @author Box\n */\n\nimport MarkerBasedAPI from './MarkerBasedAPI';\nimport { DEFAULT_MAX_COLLABORATORS } from '../constants';\nimport type { ElementsErrorCallback } from '../common/types/api';\nimport type { SelectorItem, SelectorItems, UserMini, GroupMini } from '../common/types/core';\n\ntype CollaboratorsAPIResponse = {\n    entries: Array<GroupMini | UserMini>,\n    next_marker: ?string,\n};\n\nclass FileCollaborators extends MarkerBasedAPI {\n    /**\n     * API URL for comments\n     *\n     * @param {string} [id] - a box file id\n     * @return {string} base url for files\n     */\n    getUrl(id: string): string {\n        if (!id) {\n            throw new Error('Missing file id!');\n        }\n\n        return `${this.getBaseApiUrl()}/files/${id}/collaborators`;\n    }\n\n    /**\n     * Transform result of API response\n     *\n     * @param {Object} data the response data\n     */\n    successHandler = (data: CollaboratorsAPIResponse): void => {\n        if (this.isDestroyed() || typeof this.successCallback !== 'function') {\n            return;\n        }\n\n        // Transform into \"mention selector\" format:\n        const collaboratorSelectorItems: SelectorItems<UserMini | GroupMini> = data.entries.map(\n            (collab: UserMini | GroupMini) => {\n                let item;\n                if (collab.type === 'group') {\n                    item = collab; // flow needs assignment to happen after type refinement\n                } else {\n                    item = collab;\n                    item.email = item.login; // transform user object\n                }\n                return {\n                    id: collab.id,\n                    name: collab.name,\n                    item,\n                };\n            },\n        );\n\n        this.successCallback({ ...data, entries: collaboratorSelectorItems });\n    };\n\n    /**\n     * API for fetching collaborators on a file\n     *\n     * @param {string} id - the file id\n     * @param {Function} successCallback - the success callback\n     * @param {Function} errorCallback - the error callback\n     * @param {Object} requestData - any additional request data\n     * @param {number} limit - the max number of collaborators to return\n     * @returns {void}\n     */\n    getFileCollaborators(\n        id: string,\n        successCallback: ({ entries: Array<SelectorItem<UserMini | GroupMini>>, next_marker: ?string }) => void,\n        errorCallback: ElementsErrorCallback,\n        requestData: Object = {},\n        limit: number = DEFAULT_MAX_COLLABORATORS,\n    ): void {\n        // NOTE: successCallback is called with the result\n        // of this.successHandler, not the API response!\n        this.markerGet({\n            id,\n            limit,\n            successCallback,\n            errorCallback,\n            requestData,\n        });\n    }\n}\n\nexport default FileCollaborators;\n"],"file":"FileCollaborators.js"}