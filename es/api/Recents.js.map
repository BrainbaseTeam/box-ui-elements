{"version":3,"sources":["../../src/api/Recents.js"],"names":["flatten","getBadItemError","FOLDER_FIELDS_TO_FETCH","Base","FileAPI","FolderAPI","WebLinkAPI","DEFAULT_ROOT","CACHE_PREFIX_RECENTS","ERROR_CODE_FETCH_RECENTS","FIELD_DATE","FIELD_REPRESENTATIONS","X_REP_HINT_HEADER_DIMENSIONS_DEFAULT","SORT_DESC","Recents","data","isDestroyed","entries","order","by","direction","items","forEach","item","interacted_at","path_collection","shouldInclude","id","findIndex","crumb","push","flattenedItems","options","getCache","set","key","item_collection","finish","error","errorCallback","errorCode","getBaseApiUrl","cache","recents","get","Array","isArray","collection","map","percentLoaded","sortBy","sortDirection","successCallback","Promise","reject","fields","requestFields","xhr","url","getUrl","params","toString","headers","includes","then","recentsSuccessHandler","catch","recentsErrorHandler","getCacheKey","forceFetch","unset","has","recentsRequest"],"mappings":"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","sourcesContent":["/**\n * @flow\n * @file Helper for the box recents api\n * @author Box\n */\n\nimport flatten from '../utils/flatten';\nimport { getBadItemError } from '../utils/error';\nimport { FOLDER_FIELDS_TO_FETCH } from '../utils/fields';\nimport Base from './Base';\nimport FileAPI from './File';\nimport FolderAPI from './Folder';\nimport WebLinkAPI from './WebLink';\nimport {\n    DEFAULT_ROOT,\n    CACHE_PREFIX_RECENTS,\n    ERROR_CODE_FETCH_RECENTS,\n    FIELD_DATE,\n    FIELD_REPRESENTATIONS,\n    X_REP_HINT_HEADER_DIMENSIONS_DEFAULT,\n    SORT_DESC,\n} from '../constants';\nimport type { RequestOptions, ElementsErrorCallback } from '../common/types/api';\nimport type {\n    BoxItem,\n    FlattenedBoxItem,\n    FlattenedBoxItemCollection,\n    Collection,\n    Recent,\n    RecentCollection,\n    Crumb,\n} from '../common/types/core';\nimport type APICache from '../utils/Cache';\n\nclass Recents extends Base {\n    /**\n     * @property {string}\n     */\n    key: string;\n\n    /**\n     * @property {string}\n     */\n    id: string;\n\n    /**\n     * @property {Function}\n     */\n    successCallback: Function;\n\n    /**\n     * @property {Function}\n     */\n    errorCallback: ElementsErrorCallback;\n\n    /**\n     * Creates a key for the cache\n     *\n     * @param {string} id folder id\n     * @return {string} key\n     */\n    getCacheKey(id: string): string {\n        return `${CACHE_PREFIX_RECENTS}${id}`;\n    }\n\n    /**\n     * URL for recents api\n     *\n     * @return {string} base url for files\n     */\n    getUrl(): string {\n        return `${this.getBaseApiUrl()}/recent_items`;\n    }\n\n    /**\n     * Returns the results\n     *\n     * @return {void}\n     */\n    finish(): void {\n        if (this.isDestroyed()) {\n            return;\n        }\n\n        const cache: APICache = this.getCache();\n        const recents: FlattenedBoxItem = cache.get(this.key);\n        const { item_collection }: FlattenedBoxItem = recents;\n        if (!item_collection) {\n            throw getBadItemError();\n        }\n\n        const { entries }: FlattenedBoxItemCollection = item_collection;\n        if (!Array.isArray(entries)) {\n            throw getBadItemError();\n        }\n\n        const collection: Collection = {\n            id: this.id,\n            items: entries.map((key: string) => cache.get(key)),\n            percentLoaded: 100,\n            sortBy: FIELD_DATE, // Results are always sorted by date\n            sortDirection: SORT_DESC, // Results are always sorted descending\n        };\n        this.successCallback(collection);\n    }\n\n    /**\n     * Handles the folder Recents response\n     *\n     * @param {Object} response\n     * @return {void}\n     */\n    recentsSuccessHandler = ({ data }: { data: RecentCollection }): void => {\n        if (this.isDestroyed()) {\n            return;\n        }\n\n        const {\n            entries,\n            order: { by, direction },\n        }: RecentCollection = data;\n        const items: BoxItem[] = [];\n\n        entries.forEach(({ item, interacted_at }: Recent) => {\n            const { path_collection }: BoxItem = item;\n            const shouldInclude =\n                this.id === DEFAULT_ROOT ||\n                (!!path_collection && path_collection.entries.findIndex((crumb: Crumb) => crumb.id === this.id) !== -1);\n            if (shouldInclude) {\n                items.push(Object.assign(item, { interacted_at }));\n            }\n        });\n\n        const flattenedItems: string[] = flatten(\n            items,\n            new FolderAPI(this.options),\n            new FileAPI(this.options),\n            new WebLinkAPI(this.options),\n        );\n\n        this.getCache().set(this.key, {\n            item_collection: {\n                entries: flattenedItems,\n                order: [\n                    {\n                        by,\n                        direction,\n                    },\n                ],\n            },\n        });\n        this.finish();\n    };\n\n    /**\n     * Handles the Recents error\n     *\n     * @param {Error} error fetch error\n     * @return {void}\n     */\n    recentsErrorHandler = (error: Error): void => {\n        if (this.isDestroyed()) {\n            return;\n        }\n\n        this.errorCallback(error, this.errorCode);\n    };\n\n    /**\n     * Does the network request\n     *\n     * @param {RequestOptions} options - options for request\n     * @return {Promise}\n     */\n    recentsRequest(options: RequestOptions = {}): Promise<void> {\n        if (this.isDestroyed()) {\n            return Promise.reject();\n        }\n\n        const { fields } = options;\n        const requestFields = fields || FOLDER_FIELDS_TO_FETCH;\n\n        this.errorCode = ERROR_CODE_FETCH_RECENTS;\n        return this.xhr\n            .get({\n                url: this.getUrl(),\n                params: {\n                    fields: requestFields.toString(),\n                },\n                headers: requestFields.includes(FIELD_REPRESENTATIONS)\n                    ? {\n                          'X-Rep-Hints': X_REP_HINT_HEADER_DIMENSIONS_DEFAULT,\n                      }\n                    : {},\n            })\n            .then(this.recentsSuccessHandler)\n            .catch(this.recentsErrorHandler);\n    }\n\n    /**\n     * Gets recent files\n     *\n     * @param {string} id - parent folder id\n     * @param {Function} successCallback - Function to call with results\n     * @param {Function} errorCallback - Function to call with errors\n     * @param {boolean|void} [options.forceFetch] - Bypasses the cache\n     * @return {void}\n     */\n    recents(id: string, successCallback: Function, errorCallback: ElementsErrorCallback, options: Object = {}): void {\n        if (this.isDestroyed()) {\n            return;\n        }\n\n        // Save references\n        this.id = id;\n        this.successCallback = successCallback;\n        this.errorCallback = errorCallback;\n\n        const cache: APICache = this.getCache();\n        this.key = this.getCacheKey(this.id);\n\n        // Clear the cache if needed\n        if (options.forceFetch) {\n            cache.unset(this.key);\n        }\n\n        // Return the Cache value if it exists\n        if (cache.has(this.key)) {\n            this.finish();\n            return;\n        }\n\n        // Make the XHR request\n        this.recentsRequest(options);\n    }\n}\n\nexport default Recents;\n"],"file":"Recents.js"}