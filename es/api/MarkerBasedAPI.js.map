{"version":3,"sources":["../../src/api/MarkerBasedAPI.js"],"names":["getTypedFileId","Base","MarkerBasedApi","marker","id","limit","shouldFetchAll","requestData","isDestroyed","url","getUrl","queryParams","xhr","get","params","data","entries","concat","nextMarker","next_marker","hasMoreItems","markerGetRequest","successHandler","errorHandler","successCallback","errorCallback"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;AAKA,SAASA,cAAT,QAA+B,eAA/B;AACA,OAAOC,IAAP,MAAiB,QAAjB;;IAcMC,c;;;;;;;;;;;;;;AACF;;;;AAKA;;;;;;iCAMaC,M,EAAyB;AAClC,aAAOA,MAAM,KAAK,IAAX,IAAmBA,MAAM,KAAK,EAArC;AACH;AAED;;;;;;;;;;;;;;;;+CAWIC,E,EACAD,M,EACAE,K,EACAC,c;;;;;;;;;;;;;;AACAC,gBAAAA,W,2DAAsB,E;;qBAElB,KAAKC,WAAL,E;;;;;;;;;AAMMC,gBAAAA,G,GAAM,KAAKC,MAAL,CAAYN,EAAZ,C;AACNO,gBAAAA,W,qBACCJ,W;AACHJ,kBAAAA,MAAM,EAANA,M;AACAE,kBAAAA,KAAK,EAALA;;;uBAGmC,KAAKO,GAAL,CAASC,GAAT,CAAa;AAChDJ,kBAAAA,GAAG,EAAHA,GADgD;AAEhDL,kBAAAA,EAAE,EAAEJ,cAAc,CAACI,EAAD,CAF8B;AAGhDU,kBAAAA,MAAM,EAAEH;AAHwC,iBAAb,C;;;;AAA/BI,gBAAAA,I,QAAAA,I;AAMFC,gBAAAA,O,GAAU,KAAKD,IAAL,GAAY,KAAKA,IAAL,CAAUC,OAAtB,GAAgC,E;AAChD,qBAAKD,IAAL,qBACOA,IADP;AAEIC,kBAAAA,OAAO,EAAEA,OAAO,CAACC,MAAR,CAAeF,IAAI,CAACC,OAApB;AAFb;AAIME,gBAAAA,U,GAAaH,IAAI,CAACI,W;;sBACpBb,cAAc,IAAI,KAAKc,YAAL,CAAkBF,UAAlB,C;;;;;AAClB,qBAAKG,gBAAL,CAAsBjB,EAAtB,EAA0Bc,UAA1B,EAAsCb,KAAtC,EAA6CC,cAA7C,EAA6DC,WAA7D;;;;AAIJ,qBAAKe,cAAL,CAAoB,KAAKP,IAAzB;;;;;;;AAEA,qBAAKQ,YAAL;;;;;;;;;;;;;;;;AAIR;;;;;;;;;;;;;;;;;;;;;;;;AAYInB,gBAAAA,E,SAAAA,E,EACAoB,e,SAAAA,e,EACAC,a,SAAAA,a,uBACAtB,M,EAAAA,M,6BAAS,E,qCACTE,K,EAAAA,K,4BAAQ,I,gBACRE,W,SAAAA,W,+BACAD,c,EAAAA,c,qCAAiB,I;AAUjB,qBAAKkB,eAAL,GAAuBA,eAAvB;AACA,qBAAKC,aAAL,GAAqBA,aAArB;kDAEO,KAAKJ,gBAAL,CAAsBjB,EAAtB,EAA0BD,MAA1B,EAAkCE,KAAlC,EAAyCC,cAAzC,EAAyDC,WAAzD,C;;;;;;;;;;;;;;;;;;;EApGcN,I;;AAwG7B,eAAeC,cAAf","sourcesContent":["/**\n * @flow\n * @file class for Box marker based API's to inherit common functionality from\n * @author Box\n */\nimport { getTypedFileId } from '../utils/file';\nimport Base from './Base';\nimport type { ElementsErrorCallback } from '../common/types/api';\n\ntype Params = {\n    limit: number,\n    marker: string,\n};\n\ntype Data = {\n    entries: Array<any>,\n    limit: number,\n    next_marker: string,\n};\n\nclass MarkerBasedApi extends Base {\n    /**\n     * @property {Data}\n     */\n    data: Data;\n\n    /**\n     * Determines if the API has more items to fetch\n     *\n     * @param {string} marker the marker from the start to start fetching at\n     * @return {boolean} true if there are more items\n     */\n    hasMoreItems(marker: string): boolean {\n        return marker !== null && marker !== '';\n    }\n\n    /**\n     * Helper for get\n     *\n     * @param {string} id the file id\n     * @param {string} marker the marker from the start to start fetching at\n     * @param {number} limit the number of items to fetch\n     * @param {Object} requestData the request query params\n     * @param {boolean} shouldFetchAll true if should get all the pages before calling\n     * @private\n     */\n    async markerGetRequest(\n        id: string,\n        marker: string,\n        limit: number,\n        shouldFetchAll: boolean,\n        requestData: Object = {},\n    ): Promise<void> {\n        if (this.isDestroyed()) {\n            return;\n        }\n\n        // Make the XHR request\n        try {\n            const url = this.getUrl(id);\n            const queryParams: Params = {\n                ...requestData,\n                marker,\n                limit,\n            };\n\n            const { data }: { data: Data } = await this.xhr.get({\n                url,\n                id: getTypedFileId(id),\n                params: queryParams,\n            });\n\n            const entries = this.data ? this.data.entries : [];\n            this.data = {\n                ...data,\n                entries: entries.concat(data.entries),\n            };\n            const nextMarker = data.next_marker;\n            if (shouldFetchAll && this.hasMoreItems(nextMarker)) {\n                this.markerGetRequest(id, nextMarker, limit, shouldFetchAll, requestData);\n                return;\n            }\n\n            this.successHandler(this.data);\n        } catch (error) {\n            this.errorHandler(error);\n        }\n    }\n\n    /**\n     * Marker based API get\n     * @param {Object} options\n     * @param {string} options.id the file id\n     * @param {Function} options.successCallback the success callback\n     * @param {Function} options.errorCallback the error callback\n     * @param {string} [options.marker] the marker from the start to start fetching at\n     * @param {number} [options.limit] the number of items to fetch\n     * @param {Object} options.requestData the request query params\n     * @param {boolean} [options.shouldFetchAll] true if should get all the pages before calling the sucessCallback\n     */\n    async markerGet({\n        id,\n        successCallback,\n        errorCallback,\n        marker = '',\n        limit = 1000,\n        requestData,\n        shouldFetchAll = true,\n    }: {\n        errorCallback: ElementsErrorCallback,\n        id: string,\n        limit?: number,\n        marker?: string,\n        requestData?: Object,\n        shouldFetchAll?: boolean,\n        successCallback: Function,\n    }): Promise<void> {\n        this.successCallback = successCallback;\n        this.errorCallback = errorCallback;\n\n        return this.markerGetRequest(id, marker, limit, shouldFetchAll, requestData);\n    }\n}\n\nexport default MarkerBasedApi;\n"],"file":"MarkerBasedAPI.js"}