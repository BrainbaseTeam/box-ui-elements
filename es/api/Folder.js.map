{"version":3,"sources":["../../src/api/Folder.js"],"names":["noop","flatten","FOLDER_FIELDS_TO_FETCH","getBadItemError","Item","FileAPI","WebLinkAPI","CACHE_PREFIX_FOLDER","ERROR_CODE_FETCH_FOLDER","ERROR_CODE_CREATE_FOLDER","FIELD_REPRESENTATIONS","X_REP_HINT_HEADER_DIMENSIONS_DEFAULT","Folder","data","isDestroyed","item_collection","entries","total_count","limit","offset","Array","isArray","flattened","options","itemCache","concat","getCache","set","key","finish","cachedEntry","get","updatedCacheEntry","successCallback","childId","id","childKey","getCacheKey","cache","parent","suffix","getBaseApiUrl","has","folder","name","permissions","path_collection","collection","percentLoaded","boxItem","breadcrumbs","items","map","sortBy","sortDirection","totalCount","fields","noPagination","successHandler","folderSuccessHandler","Promise","reject","requestFields","errorCode","params","toString","direction","toLowerCase","sort","xhr","url","getUrl","headers","includes","then","catch","errorHandler","errorCallback","folderRequest","folderDetailsSuccessHandler","forceFetch","unset","isLoaded","post","createSuccessHandler","folderCreateRequest"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;AAMA,OAAOA,IAAP,MAAiB,aAAjB;AACA,OAAOC,OAAP,MAAoB,kBAApB;AACA,SAASC,sBAAT,QAAuC,iBAAvC;AACA,SAASC,eAAT,QAAgC,gBAAhC;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,OAAP,MAAoB,QAApB;AACA,OAAOC,UAAP,MAAuB,WAAvB;AACA,SACIC,mBADJ,EAEIC,uBAFJ,EAGIC,wBAHJ,EAIIC,qBAJJ,EAKIC,oCALJ,QAMO,cANP;;IAmBMC,M;;;;;;;;;;;;;;;;;;2EAyHqB,gBAAuC;AAAA,UAApCC,IAAoC,QAApCA,IAAoC;;AAC1D,UAAI,MAAKC,WAAL,EAAJ,EAAwB;AACpB;AACH;;AAHyD,UAKlDC,eALkD,GAKrBF,IALqB,CAKlDE,eALkD;;AAM1D,UAAI,CAACA,eAAL,EAAsB;AAClB,cAAMZ,eAAe,EAArB;AACH;;AARyD,UAUlDa,OAVkD,GAUSD,eAVT,CAUlDC,OAVkD;AAAA,UAUzCC,WAVyC,GAUSF,eAVT,CAUzCE,WAVyC;AAAA,UAU5BC,KAV4B,GAUSH,eAVT,CAU5BG,KAV4B;AAAA,UAUrBC,MAVqB,GAUSJ,eAVT,CAUrBI,MAVqB;;AAW1D,UACI,CAACC,KAAK,CAACC,OAAN,CAAcL,OAAd,CAAD,IACA,OAAOC,WAAP,KAAuB,QADvB,IAEA,OAAOC,KAAP,KAAiB,QAFjB,IAGA,OAAOC,MAAP,KAAkB,QAJtB,EAKE;AACE,cAAMhB,eAAe,EAArB;AACH;;AAED,UAAMmB,SAAmB,GAAGrB,OAAO,CAC/Be,OAD+B,EAE/B,IAAIJ,MAAJ,CAAW,MAAKW,OAAhB,CAF+B,EAG/B,IAAIlB,OAAJ,CAAY,MAAKkB,OAAjB,CAH+B,EAI/B,IAAIjB,UAAJ,CAAe,MAAKiB,OAApB,CAJ+B,CAAnC;AAMA,YAAKC,SAAL,GAAiB,CAAC,MAAKA,SAAL,IAAkB,EAAnB,EAAuBC,MAAvB,CAA8BH,SAA9B,CAAjB;;AAEA,YAAKI,QAAL,GAAgBC,GAAhB,CAAoB,MAAKC,GAAzB,oBACOf,IADP;AAEIE,QAAAA,eAAe,oBAAOA,eAAP;AAAwBC,UAAAA,OAAO,EAAE,MAAKQ;AAAtC;AAFnB;;AAKA,YAAKK,MAAL;AACH,K;;kFAQ6B,iBAAuC;AAAA,UAApChB,IAAoC,SAApCA,IAAoC;;AACjE,UAAI,MAAKC,WAAL,EAAJ,EAAwB;AACpB;AACH;;AAED,UAAMgB,WAAW,GAAG,MAAKJ,QAAL,GAAgBK,GAAhB,CAAoB,MAAKH,GAAzB,CAApB;;AACA,UAAMI,iBAAiB,qBAAQF,WAAR,MAAwBjB,IAAxB,CAAvB;;AAEA,YAAKa,QAAL,GAAgBC,GAAhB,CAAoB,MAAKC,GAAzB,EAA8BI,iBAA9B;;AACA,YAAKC,eAAL,CAAqBD,iBAArB;AACH,K;;2EAwIsB,iBAAuC;AAAA,UAApCnB,IAAoC,SAApCA,IAAoC;AAAA,UAC9CqB,OAD8C,GAClCrB,IADkC,CAClDsB,EADkD;;AAE1D,UAAI,MAAKrB,WAAL,MAAsB,CAACoB,OAA3B,EAAoC;AAChC;AACH;;AAED,UAAME,QAAgB,GAAG,MAAKC,WAAL,CAAiBH,OAAjB,CAAzB;;AACA,UAAMI,KAAe,GAAG,MAAKZ,QAAL,EAAxB;;AACA,UAAMa,MAAwB,GAAGD,KAAK,CAACP,GAAN,CAAU,MAAKH,GAAf,CAAjC;;AAEA,UAAI,CAACW,MAAL,EAAa;AACT,cAAKN,eAAL,CAAqBpB,IAArB;;AACA;AACH;;AAbyD,UAelDE,eAfkD,GAeZwB,MAfY,CAelDxB,eAfkD;;AAgB1D,UAAI,CAACA,eAAL,EAAsB;AAClB,cAAMZ,eAAe,EAArB;AACH;;AAlByD,UAoBlDc,WApBkD,GAoBGF,eApBH,CAoBlDE,WApBkD;AAAA,UAoBrCD,OApBqC,GAoBGD,eApBH,CAoBrCC,OApBqC;;AAqB1D,UAAI,CAACI,KAAK,CAACC,OAAN,CAAcL,OAAd,CAAD,IAA2B,OAAOC,WAAP,KAAuB,QAAtD,EAAgE;AAC5D,cAAMd,eAAe,EAArB;AACH;;AAEDmC,MAAAA,KAAK,CAACX,GAAN,CAAUS,QAAV,EAAoBvB,IAApB;AACAE,MAAAA,eAAe,CAACC,OAAhB,GAA0B,CAACoB,QAAD,EAAWX,MAAX,CAAkBT,OAAlB,CAA1B;AACAD,MAAAA,eAAe,CAACE,WAAhB,GAA8BA,WAAW,GAAG,CAA5C;;AACA,YAAKgB,eAAL,CAAqBpB,IAArB;AACH,K;;;;;;;;AAjVD;;;;AAKA;;;;AAKA;;;;AAKA;;;;AAKA;;;;AAKA;;;;AAKA;;;;AAKA;;;;AAKA;;;;AAKA;;;;;;gCAMYsB,E,EAAoB;AAC5B,uBAAU5B,mBAAV,SAAgC4B,EAAhC;AACH;AAED;;;;;;;;;2BAMOA,E,EAAqB;AACxB,UAAMK,MAAc,GAAGL,EAAE,cAAOA,EAAP,IAAc,EAAvC;AACA,uBAAU,KAAKM,aAAL,EAAV,qBAAyCD,MAAzC;AACH;AAED;;;;;;;;+BAKoB;AAChB,UAAMF,KAAe,GAAG,KAAKZ,QAAL,EAAxB;AACA,aAAOY,KAAK,CAACI,GAAN,CAAU,KAAKd,GAAf,CAAP;AACH;AAED;;;;;;;;6BAKe;AACX,UAAI,KAAKd,WAAL,EAAJ,EAAwB;AACpB;AACH;;AAED,UAAMwB,KAAe,GAAG,KAAKZ,QAAL,EAAxB;AACA,UAAMiB,MAAwB,GAAGL,KAAK,CAACP,GAAN,CAAU,KAAKH,GAAf,CAAjC;AANW,UAOHO,EAPG,GAO2EQ,MAP3E,CAOHR,EAPG;AAAA,UAOCS,IAPD,GAO2ED,MAP3E,CAOCC,IAPD;AAAA,UAOOC,WAPP,GAO2EF,MAP3E,CAOOE,WAPP;AAAA,UAOoBC,eAPpB,GAO2EH,MAP3E,CAOoBG,eAPpB;AAAA,UAOqC/B,eAPrC,GAO2E4B,MAP3E,CAOqC5B,eAPrC;;AAQX,UAAI,CAACA,eAAD,IAAoB,CAAC+B,eAAzB,EAA0C;AACtC,cAAM3C,eAAe,EAArB;AACH;;AAVU,UAYHa,OAZG,GAY0DD,eAZ1D,CAYHC,OAZG;AAAA,UAYMG,MAZN,GAY0DJ,eAZ1D,CAYMI,MAZN;AAAA,UAYcF,WAZd,GAY0DF,eAZ1D,CAYcE,WAZd;;AAaX,UAAI,CAACG,KAAK,CAACC,OAAN,CAAcL,OAAd,CAAD,IAA2B,OAAOC,WAAP,KAAuB,QAAtD,EAAgE;AAC5D,cAAMd,eAAe,EAArB;AACH;;AAED,UAAM4C,UAAsB,GAAG;AAC3BZ,QAAAA,EAAE,EAAFA,EAD2B;AAE3BS,QAAAA,IAAI,EAAJA,IAF2B;AAG3BzB,QAAAA,MAAM,EAANA,MAH2B;AAI3B6B,QAAAA,aAAa,EAAE,GAJY;AAK3BH,QAAAA,WAAW,EAAXA,WAL2B;AAM3BI,QAAAA,OAAO,EAAEN,MANkB;AAO3BO,QAAAA,WAAW,EAAEJ,eAAe,CAAC9B,OAPF;AAQ3BmC,QAAAA,KAAK,EAAEnC,OAAO,CAACoC,GAAR,CAAY,UAACxB,GAAD;AAAA,iBAAiBU,KAAK,CAACP,GAAN,CAAUH,GAAV,CAAjB;AAAA,SAAZ,CARoB;AAS3ByB,QAAAA,MAAM,EAAE,KAAKA,MATc;AAU3BC,QAAAA,aAAa,EAAE,KAAKA,aAVO;AAW3BC,QAAAA,UAAU,EAAEtC;AAXe,OAA/B;AAaA,WAAKgB,eAAL,CAAqBc,UAArB;AACH;AAED;;;;;;;;;;AA4DA;;;;;;oCASgB;AAAA,sFAF+B,EAE/B;AAAA,UAFVS,MAEU,SAFVA,MAEU;AAAA,UAFFC,YAEE,SAFFA,YAEE;;AAAA,UADZC,cACY,uEADgB,KAAKC,oBACrB;;AACZ,UAAI,KAAK7C,WAAL,EAAJ,EAAwB;AACpB,eAAO8C,OAAO,CAACC,MAAR,EAAP;AACH;;AAED,UAAMC,aAAa,GAAGN,MAAM,IAAItD,sBAAhC;AAEA,WAAK6D,SAAL,GAAiBvD,uBAAjB;AACA,UAAIwD,MAAM,GAAG;AAAER,QAAAA,MAAM,EAAEM,aAAa,CAACG,QAAd;AAAV,OAAb;;AACA,UAAI,CAACR,YAAL,EAAmB;AACfO,QAAAA,MAAM,qBACCA,MADD;AAEFE,UAAAA,SAAS,EAAE,KAAKZ,aAAL,CAAmBa,WAAnB,EAFT;AAGFjD,UAAAA,KAAK,EAAE,KAAKA,KAHV;AAIFC,UAAAA,MAAM,EAAE,KAAKA,MAJX;AAKFqC,UAAAA,MAAM,EAAEM,aAAa,CAACG,QAAd,EALN;AAMFG,UAAAA,IAAI,EAAE,KAAKf,MAAL,CAAYc,WAAZ;AANJ,UAAN;AAQH;;AAED,aAAO,KAAKE,GAAL,CACFtC,GADE,CACE;AACDuC,QAAAA,GAAG,EAAE,KAAKC,MAAL,CAAY,KAAKpC,EAAjB,CADJ;AAED6B,QAAAA,MAAM,EAANA,MAFC;AAGDQ,QAAAA,OAAO,EAAEV,aAAa,CAACW,QAAd,CAAuB/D,qBAAvB,IACH;AACI,yBAAeC;AADnB,SADG,GAIH;AAPL,OADF,EAUF+D,IAVE,CAUGhB,cAVH,EAWFiB,KAXE,CAWI,KAAKC,YAXT,CAAP;AAYH;AAED;;;;;;;;;;;;oCAUIzC,E,EACAF,e,EACA4C,a,EAEI;AAAA,UADJtD,OACI,uEADsB,EACtB;;AACJ,UAAI,KAAKT,WAAL,EAAJ,EAAwB;AACpB;AACH,OAHG,CAKJ;;;AACA,WAAKqB,EAAL,GAAUA,EAAV;AACA,WAAKP,GAAL,GAAW,KAAKS,WAAL,CAAiBF,EAAjB,CAAX;AACA,WAAKF,eAAL,GAAuBA,eAAvB;AACA,WAAK4C,aAAL,GAAqBA,aAArB;AAEA,WAAKC,aAAL,mBAAwBvD,OAAxB;AAAiCkC,QAAAA,YAAY,EAAE;AAA/C,UAAuD,KAAKsB,2BAA5D;AACH;AAED;;;;;;;;;;;;;;;;;;8BAgBI5C,E,EACAjB,K,EACAC,M,EACAkC,M,EACAC,a,EACArB,e,EACA4C,a,EAEI;AAAA,UADJtD,OACI,uEADsB,EACtB;;AACJ,UAAI,KAAKT,WAAL,EAAJ,EAAwB;AACpB;AACH,OAHG,CAKJ;;;AACA,WAAKqB,EAAL,GAAUA,EAAV;AACA,WAAKP,GAAL,GAAW,KAAKS,WAAL,CAAiBF,EAAjB,CAAX;AACA,WAAKjB,KAAL,GAAaA,KAAb;AACA,WAAKC,MAAL,GAAcA,MAAd;AACA,WAAKkC,MAAL,GAAcA,MAAd;AACA,WAAKC,aAAL,GAAqBA,aAArB;AACA,WAAKrB,eAAL,GAAuBA,eAAvB;AACA,WAAK4C,aAAL,GAAqBA,aAArB,CAbI,CAeJ;;AACA,UAAItD,OAAO,CAACyD,UAAZ,EAAwB;AACpB,aAAKtD,QAAL,GAAgBuD,KAAhB,CAAsB,KAAKrD,GAA3B;AACH,OAlBG,CAoBJ;;;AACA,UAAI,KAAKsD,QAAL,EAAJ,EAAqB;AACjB,aAAKrD,MAAL;AACA;AACH,OAxBG,CA0BJ;;;AACA,WAAKiD,aAAL,CAAmBvD,OAAnB;AACH;AAED;;;;;;;;;;;;;AAwCA;;;;;wCAKoBqB,I,EAA6B;AAC7C,UAAI,KAAK9B,WAAL,EAAJ,EAAwB;AACpB,eAAO8C,OAAO,CAACC,MAAR,EAAP;AACH;;AAED,WAAKE,SAAL,GAAiBtD,wBAAjB;AACA,UAAM6D,GAAG,aAAM,KAAKC,MAAL,EAAN,qBAA8BrE,sBAAsB,CAAC+D,QAAvB,EAA9B,CAAT;AACA,aAAO,KAAKI,GAAL,CACFc,IADE,CACG;AACFb,QAAAA,GAAG,EAAHA,GADE;AAEFzD,QAAAA,IAAI,EAAE;AACF+B,UAAAA,IAAI,EAAJA,IADE;AAEFL,UAAAA,MAAM,EAAE;AACJJ,YAAAA,EAAE,EAAE,KAAKA;AADL;AAFN;AAFJ,OADH,EAUFuC,IAVE,CAUG,KAAKU,oBAVR,EAWFT,KAXE,CAWI,KAAKC,YAXT,CAAP;AAYH;AAED;;;;;;;;;;;;2BASOzC,E,EAAYS,I,EAAcX,e,EAAiE;AAAA,UAAtC4C,aAAsC,uEAAZ7E,IAAY;;AAC9F,UAAI,KAAKc,WAAL,EAAJ,EAAwB;AACpB;AACH;;AAED,WAAKqB,EAAL,GAAUA,EAAV;AACA,WAAKP,GAAL,GAAW,KAAKS,WAAL,CAAiBF,EAAjB,CAAX;AACA,WAAKF,eAAL,GAAuBA,eAAvB;AACA,WAAK4C,aAAL,GAAqBA,aAArB;AACA,WAAKQ,mBAAL,CAAyBzC,IAAzB;AACH;;;;EAjYgBxC,I;;AAoYrB,eAAeQ,MAAf","sourcesContent":["/**\n * @flow\n * @file Helper for the box folder api\n * @author Box\n */\n\nimport noop from 'lodash/noop';\nimport flatten from '../utils/flatten';\nimport { FOLDER_FIELDS_TO_FETCH } from '../utils/fields';\nimport { getBadItemError } from '../utils/error';\nimport Item from './Item';\nimport FileAPI from './File';\nimport WebLinkAPI from './WebLink';\nimport {\n    CACHE_PREFIX_FOLDER,\n    ERROR_CODE_FETCH_FOLDER,\n    ERROR_CODE_CREATE_FOLDER,\n    FIELD_REPRESENTATIONS,\n    X_REP_HINT_HEADER_DIMENSIONS_DEFAULT,\n} from '../constants';\nimport type { RequestOptions, ElementsErrorCallback } from '../common/types/api';\nimport type {\n    SortBy,\n    SortDirection,\n    FlattenedBoxItem,\n    FlattenedBoxItemCollection,\n    Collection,\n    BoxItem,\n    BoxItemCollection,\n} from '../common/types/core';\nimport type APICache from '../utils/Cache';\n\nclass Folder extends Item {\n    /**\n     * @property {string}\n     */\n    id: string;\n\n    /**\n     * @property {string}\n     */\n    key: string;\n\n    /**\n     * @property {number}\n     */\n    limit: number;\n\n    /**\n     * @property {number}\n     */\n    offset: number;\n\n    /**\n     * @property {string}\n     */\n    sortBy: SortBy;\n\n    /**\n     * @property {string}\n     */\n    sortDirection: SortDirection;\n\n    /**\n     * @property {Array}\n     */\n    itemCache: string[];\n\n    /**\n     * @property {Function}\n     */\n    successCallback: Function;\n\n    /**\n     * @property {Function}\n     */\n    errorCallback: ElementsErrorCallback;\n\n    /**\n     * Creates a key for the cache\n     *\n     * @param {string} id folder id\n     * @return {string} key\n     */\n    getCacheKey(id: string): string {\n        return `${CACHE_PREFIX_FOLDER}${id}`;\n    }\n\n    /**\n     * Base URL for folder api\n     *\n     * @param {string} [id] optional file id\n     * @return {string} base url for files\n     */\n    getUrl(id?: string): string {\n        const suffix: string = id ? `/${id}` : '';\n        return `${this.getBaseApiUrl()}/folders${suffix}`;\n    }\n\n    /**\n     * Tells if a folder has its items all loaded\n     *\n     * @return {boolean} if items are loaded\n     */\n    isLoaded(): boolean {\n        const cache: APICache = this.getCache();\n        return cache.has(this.key);\n    }\n\n    /**\n     * Composes and returns the results\n     *\n     * @return {void}\n     */\n    finish(): void {\n        if (this.isDestroyed()) {\n            return;\n        }\n\n        const cache: APICache = this.getCache();\n        const folder: FlattenedBoxItem = cache.get(this.key);\n        const { id, name, permissions, path_collection, item_collection }: FlattenedBoxItem = folder;\n        if (!item_collection || !path_collection) {\n            throw getBadItemError();\n        }\n\n        const { entries, offset, total_count }: FlattenedBoxItemCollection = item_collection;\n        if (!Array.isArray(entries) || typeof total_count !== 'number') {\n            throw getBadItemError();\n        }\n\n        const collection: Collection = {\n            id,\n            name,\n            offset,\n            percentLoaded: 100,\n            permissions,\n            boxItem: folder,\n            breadcrumbs: path_collection.entries,\n            items: entries.map((key: string) => cache.get(key)),\n            sortBy: this.sortBy,\n            sortDirection: this.sortDirection,\n            totalCount: total_count,\n        };\n        this.successCallback(collection);\n    }\n\n    /**\n     * Handles the folder fetch response\n     *\n     * @param {Object} response\n     * @return {void}\n     */\n    folderSuccessHandler = ({ data }: { data: BoxItem }): void => {\n        if (this.isDestroyed()) {\n            return;\n        }\n\n        const { item_collection }: BoxItem = data;\n        if (!item_collection) {\n            throw getBadItemError();\n        }\n\n        const { entries, total_count, limit, offset }: BoxItemCollection = item_collection;\n        if (\n            !Array.isArray(entries) ||\n            typeof total_count !== 'number' ||\n            typeof limit !== 'number' ||\n            typeof offset !== 'number'\n        ) {\n            throw getBadItemError();\n        }\n\n        const flattened: string[] = flatten(\n            entries,\n            new Folder(this.options),\n            new FileAPI(this.options),\n            new WebLinkAPI(this.options),\n        );\n        this.itemCache = (this.itemCache || []).concat(flattened);\n\n        this.getCache().set(this.key, {\n            ...data,\n            item_collection: { ...item_collection, entries: this.itemCache },\n        });\n\n        this.finish();\n    };\n\n    /**\n     * Handles a request for folder details\n     *\n     * @param {Object} data - XHR response data\n     * @returns {void}\n     */\n    folderDetailsSuccessHandler = ({ data }: { data: BoxItem }): void => {\n        if (this.isDestroyed()) {\n            return;\n        }\n\n        const cachedEntry = this.getCache().get(this.key);\n        const updatedCacheEntry = { ...cachedEntry, ...data };\n\n        this.getCache().set(this.key, updatedCacheEntry);\n        this.successCallback(updatedCacheEntry);\n    };\n\n    /**\n     * Does the network request for fetching a folder\n     *\n     * @param {Array<String>} fields Array of field strings\n     * @return {Promise}\n     */\n    folderRequest(\n        { fields, noPagination }: RequestOptions = {},\n        successHandler?: Function = this.folderSuccessHandler,\n    ): Promise<any> {\n        if (this.isDestroyed()) {\n            return Promise.reject();\n        }\n\n        const requestFields = fields || FOLDER_FIELDS_TO_FETCH;\n\n        this.errorCode = ERROR_CODE_FETCH_FOLDER;\n        let params = { fields: requestFields.toString() };\n        if (!noPagination) {\n            params = {\n                ...params,\n                direction: this.sortDirection.toLowerCase(),\n                limit: this.limit,\n                offset: this.offset,\n                fields: requestFields.toString(),\n                sort: this.sortBy.toLowerCase(),\n            };\n        }\n\n        return this.xhr\n            .get({\n                url: this.getUrl(this.id),\n                params,\n                headers: requestFields.includes(FIELD_REPRESENTATIONS)\n                    ? {\n                          'X-Rep-Hints': X_REP_HINT_HEADER_DIMENSIONS_DEFAULT,\n                      }\n                    : {},\n            })\n            .then(successHandler)\n            .catch(this.errorHandler);\n    }\n\n    /**\n     * Gets a box folder properties. If you want to get the items, you should use `getFolder`\n     *\n     * @param {string} id - Folder id\n     * @param {Function} successCallback - Function to call with results\n     * @param {Function} errorCallback - Function to call with errors\n     * @param {Object} options - Options\n     * @returns {void}\n     */\n    getFolderFields(\n        id: string,\n        successCallback: Function,\n        errorCallback: Function,\n        options: RequestOptions = {},\n    ): void {\n        if (this.isDestroyed()) {\n            return;\n        }\n\n        // Save references\n        this.id = id;\n        this.key = this.getCacheKey(id);\n        this.successCallback = successCallback;\n        this.errorCallback = errorCallback;\n\n        this.folderRequest({ ...options, noPagination: true }, this.folderDetailsSuccessHandler);\n    }\n\n    /**\n     * Gets a box folder and its items\n     *\n     * @param {string} id - Folder id\n     * @param {number} limit - maximum number of items to retrieve\n     * @param {number} offset - starting index from which to retrieve items\n     * @param {string} sortBy - sort by field\n     * @param {string} sortDirection - sort direction\n     * @param {Function} successCallback - Function to call with results\n     * @param {Function} errorCallback - Function to call with errors\n     * @param {boolean|void} [options.fields] - Optionally include specific fields\n     * @param {boolean|void} [options.forceFetch] - Optionally Bypasses the cache\n     * @param {boolean|void} [options.refreshCache] - Optionally Updates the cache\n     * @return {void}\n     */\n    getFolder(\n        id: string,\n        limit: number,\n        offset: number,\n        sortBy: SortBy,\n        sortDirection: SortDirection,\n        successCallback: Function,\n        errorCallback: Function,\n        options: RequestOptions = {},\n    ): void {\n        if (this.isDestroyed()) {\n            return;\n        }\n\n        // Save references\n        this.id = id;\n        this.key = this.getCacheKey(id);\n        this.limit = limit;\n        this.offset = offset;\n        this.sortBy = sortBy;\n        this.sortDirection = sortDirection;\n        this.successCallback = successCallback;\n        this.errorCallback = errorCallback;\n\n        // Clear the cache if needed\n        if (options.forceFetch) {\n            this.getCache().unset(this.key);\n        }\n\n        // Return the Cache value if it exists\n        if (this.isLoaded()) {\n            this.finish();\n            return;\n        }\n\n        // Make the XHR request\n        this.folderRequest(options);\n    }\n\n    /**\n     * API to rename an Item\n     *\n     * @param {string} id - parent folder id\n     * @param {string} name - new folder name\n     * @param {Function} successCallback - success callback\n     * @param {Function} errorCallback - error callback\n     * @return {void}\n     */\n    createSuccessHandler = ({ data }: { data: BoxItem }): void => {\n        const { id: childId } = data;\n        if (this.isDestroyed() || !childId) {\n            return;\n        }\n\n        const childKey: string = this.getCacheKey(childId);\n        const cache: APICache = this.getCache();\n        const parent: FlattenedBoxItem = cache.get(this.key);\n\n        if (!parent) {\n            this.successCallback(data);\n            return;\n        }\n\n        const { item_collection }: FlattenedBoxItem = parent;\n        if (!item_collection) {\n            throw getBadItemError();\n        }\n\n        const { total_count, entries }: FlattenedBoxItemCollection = item_collection;\n        if (!Array.isArray(entries) || typeof total_count !== 'number') {\n            throw getBadItemError();\n        }\n\n        cache.set(childKey, data);\n        item_collection.entries = [childKey].concat(entries);\n        item_collection.total_count = total_count + 1;\n        this.successCallback(data);\n    };\n\n    /**\n     * Does the network request for fetching a folder\n     *\n     * @return {void}\n     */\n    folderCreateRequest(name: string): Promise<void> {\n        if (this.isDestroyed()) {\n            return Promise.reject();\n        }\n\n        this.errorCode = ERROR_CODE_CREATE_FOLDER;\n        const url = `${this.getUrl()}?fields=${FOLDER_FIELDS_TO_FETCH.toString()}`;\n        return this.xhr\n            .post({\n                url,\n                data: {\n                    name,\n                    parent: {\n                        id: this.id,\n                    },\n                },\n            })\n            .then(this.createSuccessHandler)\n            .catch(this.errorHandler);\n    }\n\n    /**\n     * API to create a folder\n     *\n     * @param {string} id - parent folder id\n     * @param {string} name - new folder name\n     * @param {Function} successCallback - success callback\n     * @param {Function} errorCallback - error callback\n     * @return {void}\n     */\n    create(id: string, name: string, successCallback: Function, errorCallback: Function = noop): void {\n        if (this.isDestroyed()) {\n            return;\n        }\n\n        this.id = id;\n        this.key = this.getCacheKey(id);\n        this.successCallback = successCallback;\n        this.errorCallback = errorCallback;\n        this.folderCreateRequest(name);\n    }\n}\n\nexport default Folder;\n"],"file":"Folder.js"}