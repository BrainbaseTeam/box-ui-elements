{"version":3,"sources":["../../../../../src/elements/content-sidebar/activity-feed/task-form/TaskForm.js"],"names":["React","noop","getProp","classNames","FormattedMessage","injectIntl","commonMessages","messages","commentFormMessages","Form","ContactDatalistItem","TextArea","DatePicker","Checkbox","PillSelectorDropdown","Button","FeatureFlag","PrimaryButton","TASK_COMPLETION_RULE_ANY","TASK_COMPLETION_RULE_ALL","TASK_EDIT_MODE_CREATE","TASK_EDIT_MODE_EDIT","ACTIVITY_TARGETS","INTERACTION_TARGET","TaskError","convertAssigneesToSelectorItems","approvers","map","target","newSelectorItem","item","value","id","text","name","TaskForm","getInitialFormState","only","setState","state","intl","props","message","approverTextInput","assigneeFieldMissingError","code","formatMessage","requiredFieldError","assigneeFieldInvalidError","invalidUserError","messageFieldError","formValidityState","taskAssignees","length","taskName","taskDueDate","isValid","Object","values","every","val","fieldName","validateForm","onSubmitSuccess","clearForm","isLoading","e","onSubmitError","taskType","editMode","dueDate","addedAssignees","getAddedAssignees","removedAssignees","getRemovedAssignees","assignee","getTime","currentApprovers","approverIds","approver","filter","currentApprover","indexOf","currentApproverIds","createTask","editTask","completionRule","dueDateString","toISOString","completion_rule","description","due_at","handleSubmitSuccess","handleSubmitError","date","dateValue","Date","setHours","event","checked","getApproverWithQuery","pills","concat","pill","type","role","status","permissions","can_delete","can_update","option","index","splice","persist","currentTarget","onCancel","approverSelectorContacts","className","error","isDisabled","inputContainerClassNames","isCreateEditMode","renderApprovers","approverOptions","find","pillSelectorOverlayClasses","scrollable","submitButtonMessage","tasksAddTaskFormSubmitLabel","tasksEditTaskFormSubmitLabel","shouldShowCompletionRule","isCompletionRuleCheckboxDisabled","isCompletionRuleCheckboxChecked","isForbiddenErrorOnEdit","handleInvalidSubmit","handleValidSubmit","getErrorByFieldname","tasksAddTaskFormSelectAssigneesLabel","handleApproverSelectorInput","handleApproverSelectorRemove","handleApproverSelectorSelect","approvalAddAssignee","email","taskAnyCheckboxLabel","taskAnyInfoTooltip","handleCompletionRuleChange","tasksAddTaskFormMessageLabel","handleChangeMessage","commentWrite","TASK_DATE_PICKER","tasksAddTaskFormDueDateLabel","handleDueDateChange","approvalSelectDate","undefined","APPROVAL_FORM_CANCEL","handleCancelClick","addResinInfo","tasksAddTaskFormCancelLabel","APPROVAL_FORM_POST","Component","TaskFormUnwrapped"],"mappings":"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","sourcesContent":["/**\n * @flow\n * @file Component for Approval comment form\n */\n\nimport * as React from 'react';\nimport noop from 'lodash/noop';\nimport getProp from 'lodash/get';\nimport classNames from 'classnames';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport commonMessages from '../../../../common/messages';\nimport messages from './messages';\nimport commentFormMessages from '../comment-form/messages';\nimport Form from '../../../../components/form-elements/form/Form';\nimport ContactDatalistItem from '../../../../components/contact-datalist-item/ContactDatalistItem';\nimport TextArea from '../../../../components/text-area';\nimport DatePicker from '../../../../components/date-picker/DatePicker';\nimport Checkbox from '../../../../components/checkbox';\nimport PillSelectorDropdown from '../../../../components/pill-selector-dropdown/PillSelectorDropdown';\nimport Button from '../../../../components/button/Button';\nimport { FeatureFlag } from '../../../common/feature-checking';\nimport PrimaryButton from '../../../../components/primary-button/PrimaryButton';\nimport {\n    TASK_COMPLETION_RULE_ANY,\n    TASK_COMPLETION_RULE_ALL,\n    TASK_EDIT_MODE_CREATE,\n    TASK_EDIT_MODE_EDIT,\n} from '../../../../constants';\nimport { ACTIVITY_TARGETS, INTERACTION_TARGET } from '../../../common/interactionTargets';\nimport type {\n    TaskCompletionRule,\n    TaskCollabAssignee,\n    TaskType,\n    TaskEditMode,\n    TaskUpdatePayload,\n} from '../../../../common/types/tasks';\nimport TaskError from './TaskError';\n\nimport './TaskForm.scss';\n\ntype TaskFormProps = {|\n    error?: { status: number }, // TODO: update to ElementsXhrError once API supports it\n    isDisabled?: boolean,\n    onCancel: () => any,\n    onSubmitError: (e: ElementsXhrError) => any,\n    onSubmitSuccess: () => any,\n    taskType: TaskType,\n|};\n\ntype TaskFormFieldProps = {|\n    approvers: Array<TaskCollabAssignee>,\n    completionRule: TaskCompletionRule,\n    dueDate?: ?string,\n    id: string,\n    message: string,\n|};\n\ntype TaskFormConsumerProps = {|\n    ...TaskFormFieldProps,\n    approverSelectorContacts: SelectorItems,\n    className?: string,\n    createTask: (\n        text: string,\n        approvers: SelectorItems,\n        taskType: TaskType,\n        dueDate: ?string,\n        completionRule: TaskCompletionRule,\n        onSuccess: ?Function,\n        onError: ?Function,\n    ) => any,\n    editMode?: TaskEditMode,\n    editTask?: (task: TaskUpdatePayload, onSuccess: ?Function, onError: ?Function) => any,\n    getApproverWithQuery?: Function,\n    getAvatarUrl: GetAvatarUrlCallback,\n|};\n\ntype Props = TaskFormProps & TaskFormConsumerProps & InjectIntlProvidedProps;\n\ntype TaskFormFieldName = 'taskName' | 'taskAssignees' | 'taskDueDate';\n\ntype State = {|\n    approverTextInput: string, // partial text input value for approver field before autocomplete/select\n    approvers: Array<TaskCollabAssignee>,\n    completionRule: TaskCompletionRule,\n    dueDate?: ?Date,\n    formValidityState: { [key: TaskFormFieldName]: ?{ code: string, message: string } },\n    id: string,\n    isLoading: boolean,\n    isValid: ?boolean,\n    message: string,\n|};\n\nfunction convertAssigneesToSelectorItems(approvers: Array<TaskCollabAssignee>): SelectorItems {\n    return approvers.map(({ target }) => {\n        const newSelectorItem: SelectorItem = {\n            ...target,\n            item: {},\n            value: target.id,\n            text: target.name,\n        };\n\n        return newSelectorItem;\n    });\n}\n\nclass TaskForm extends React.Component<Props, State> {\n    static defaultProps = {\n        approvers: [],\n        approverSelectorContacts: [],\n        editMode: TASK_EDIT_MODE_CREATE,\n        id: '',\n        message: '',\n    };\n\n    state = this.getInitialFormState();\n\n    getInitialFormState() {\n        const { dueDate, id, message, approvers, completionRule } = this.props;\n        return {\n            id,\n            completionRule: completionRule || TASK_COMPLETION_RULE_ALL,\n            approvers,\n            approverTextInput: '',\n            dueDate: dueDate ? new Date(dueDate) : null,\n            formValidityState: {},\n            message,\n            isLoading: false,\n            isValid: null,\n        };\n    }\n\n    validateForm = (only?: TaskFormFieldName) => {\n        this.setState(state => {\n            const { intl } = this.props;\n            const { approvers, message, approverTextInput } = state;\n            const assigneeFieldMissingError = {\n                code: 'required',\n                message: intl.formatMessage(commonMessages.requiredFieldError),\n            };\n            const assigneeFieldInvalidError = {\n                code: 'invalid',\n                message: intl.formatMessage(commonMessages.invalidUserError),\n            };\n            const messageFieldError = {\n                code: 'required',\n                message: intl.formatMessage(commonMessages.requiredFieldError),\n            };\n            const formValidityState = {\n                taskAssignees:\n                    (approverTextInput.length ? assigneeFieldInvalidError : null) ||\n                    (approvers.length ? null : assigneeFieldMissingError),\n                taskName: message ? null : messageFieldError,\n                taskDueDate: null,\n            };\n            const isValid = Object.values(formValidityState).every(val => val == null);\n            return {\n                isValid,\n                formValidityState: only\n                    ? { ...state.formValidityState, [only]: formValidityState[only] }\n                    : formValidityState,\n            };\n        });\n    };\n\n    getErrorByFieldname = (fieldName: TaskFormFieldName) => {\n        const { formValidityState } = this.state;\n        return formValidityState[fieldName] ? formValidityState[fieldName].message : null;\n    };\n\n    clearForm = () => this.setState(this.getInitialFormState());\n\n    handleInvalidSubmit = () => {\n        this.validateForm();\n    };\n\n    handleSubmitSuccess = () => {\n        const { onSubmitSuccess } = this.props;\n        if (onSubmitSuccess) {\n            onSubmitSuccess();\n        }\n\n        this.clearForm();\n        this.setState({ isLoading: false });\n    };\n\n    handleSubmitError = (e: ElementsXhrError) => {\n        const { onSubmitError } = this.props;\n        onSubmitError(e);\n        this.setState({ isLoading: false });\n    };\n\n    addResinInfo = (): Object => {\n        const { id, taskType, editMode } = this.props;\n        const { dueDate } = this.state;\n        const addedAssignees = this.getAddedAssignees();\n        const removedAssignees = this.getRemovedAssignees();\n\n        return {\n            'data-resin-taskid': id,\n            'data-resin-tasktype': taskType,\n            'data-resin-isediting': editMode === TASK_EDIT_MODE_EDIT,\n            'data-resin-numassigneesadded': addedAssignees.length,\n            'data-resin-numassigneesremoved': removedAssignees.length,\n            'data-resin-assigneesadded': addedAssignees.map(assignee => assignee.target.id),\n            'data-resin-assigneesremoved': removedAssignees.map(assignee => assignee.target.id),\n            'data-resin-duedate': dueDate && dueDate.getTime(),\n        };\n    };\n\n    getAddedAssignees = (): Array<TaskCollabAssignee> => {\n        // Added assignees are the ones in state that weren't in the prop\n        const { approvers } = this.props;\n        const { approvers: currentApprovers } = this.state;\n        const approverIds = approvers.map(approver => approver.id);\n        return currentApprovers.filter(currentApprover => approverIds.indexOf(currentApprover.id) === -1);\n    };\n\n    getRemovedAssignees = (): Array<TaskCollabAssignee> => {\n        // Assignees to remove are the ones in the prop that cannot be found in state\n        const { approvers } = this.props;\n        const { approvers: currentApprovers } = this.state;\n        const currentApproverIds = currentApprovers.map(currentApprover => currentApprover.id);\n        return approvers.filter(approver => currentApproverIds.indexOf(approver.id) === -1);\n    };\n\n    handleValidSubmit = (): void => {\n        const { id, createTask, editTask, editMode, taskType } = this.props;\n        const { message, approvers: currentApprovers, dueDate, completionRule, isValid } = this.state;\n        const dueDateString = dueDate && dueDate.toISOString();\n\n        if (!isValid) return;\n\n        this.setState({ isLoading: true });\n\n        if (editMode === TASK_EDIT_MODE_EDIT && editTask) {\n            editTask(\n                {\n                    id,\n                    completion_rule: completionRule,\n                    description: message,\n                    due_at: dueDateString,\n                    addedAssignees: convertAssigneesToSelectorItems(this.getAddedAssignees()),\n                    removedAssignees: this.getRemovedAssignees(),\n                },\n                this.handleSubmitSuccess,\n                this.handleSubmitError,\n            );\n        } else {\n            createTask(\n                message,\n                convertAssigneesToSelectorItems(currentApprovers),\n                taskType,\n                dueDateString,\n                completionRule,\n                this.handleSubmitSuccess,\n                this.handleSubmitError,\n            );\n        }\n    };\n\n    handleDueDateChange = (date: ?string): void => {\n        let dateValue = null;\n        if (date) {\n            dateValue = new Date(date);\n            // The date given to us is midnight of the date selected.\n            // Modify date to be the end of day (minus 1 millisecond) for the given due date\n            dateValue.setHours(23, 59, 59, 999);\n        }\n\n        this.setState({ dueDate: dateValue });\n        this.validateForm('taskDueDate');\n    };\n\n    handleCompletionRuleChange = (event: SyntheticInputEvent<HTMLInputElement>) => {\n        this.setState({ completionRule: event.target.checked ? TASK_COMPLETION_RULE_ANY : TASK_COMPLETION_RULE_ALL });\n    };\n\n    handleApproverSelectorInput = (value: any): void => {\n        const { getApproverWithQuery = noop } = this.props;\n        this.setState({ approverTextInput: value });\n        getApproverWithQuery(value);\n    };\n\n    handleApproverSelectorSelect = (pills: Array<any>): void => {\n        this.setState({\n            approvers: this.state.approvers.concat(\n                pills.map(pill => {\n                    return {\n                        id: '',\n                        target: {\n                            id: pill.id,\n                            name: pill.text,\n                            type: 'user',\n                        },\n                        role: 'ASSIGNEE',\n                        type: 'task_collaborator',\n                        status: 'NOT_STARTED',\n                        permissions: { can_delete: false, can_update: false },\n                    };\n                }),\n            ),\n            approverTextInput: '',\n        });\n\n        this.validateForm('taskAssignees');\n    };\n\n    handleApproverSelectorRemove = (option: any, index: number): void => {\n        const approvers = [...this.state.approvers];\n        approvers.splice(index, 1);\n        this.setState({ approvers });\n        this.validateForm('taskAssignees');\n    };\n\n    handleChangeMessage = (e: SyntheticInputEvent<HTMLTextAreaElement>) => {\n        e.persist();\n        this.setState({ message: e.currentTarget.value });\n        this.validateForm('taskName');\n    };\n\n    handleCancelClick = () => {\n        this.props.onCancel();\n    };\n\n    render() {\n        const { approverSelectorContacts, className, error, isDisabled, intl, editMode, taskType } = this.props;\n        const { dueDate, approvers, message, formValidityState, isLoading, completionRule } = this.state;\n        const inputContainerClassNames = classNames('bcs-task-input-container', 'bcs-task-input-is-open', className);\n        const isCreateEditMode = editMode === TASK_EDIT_MODE_CREATE;\n        const renderApprovers = convertAssigneesToSelectorItems(approvers);\n\n        // filter out selected approvers\n        // map to datalist item format\n        const approverOptions = approverSelectorContacts\n            .filter(({ id }) => !renderApprovers.find(({ value }) => value === id))\n            .map(({ id, item }) => ({ ...item, text: item.name, value: id }));\n\n        const pillSelectorOverlayClasses = classNames({\n            scrollable: approverOptions.length > 4,\n        });\n\n        const submitButtonMessage = isCreateEditMode\n            ? messages.tasksAddTaskFormSubmitLabel\n            : messages.tasksEditTaskFormSubmitLabel;\n        const shouldShowCompletionRule = approvers.length > 0;\n        const isCompletionRuleCheckboxDisabled = approvers.length <= 1;\n        const isCompletionRuleCheckboxChecked = completionRule === TASK_COMPLETION_RULE_ANY;\n        const isForbiddenErrorOnEdit = isLoading || (getProp(error, 'status') === 403 && !isCreateEditMode);\n\n        return (\n            <div className={inputContainerClassNames} data-resin-component=\"taskform\">\n                <div className=\"bcs-task-input-form-container\">\n                    <TaskError editMode={editMode} error={error} taskType={taskType} />\n                    <Form\n                        formValidityState={formValidityState}\n                        onInvalidSubmit={this.handleInvalidSubmit}\n                        onValidSubmit={this.handleValidSubmit}\n                    >\n                        <PillSelectorDropdown\n                            className={pillSelectorOverlayClasses}\n                            error={this.getErrorByFieldname('taskAssignees')}\n                            disabled={isForbiddenErrorOnEdit}\n                            inputProps={{ 'data-testid': 'task-form-assignee-input' }}\n                            isRequired\n                            label={<FormattedMessage {...messages.tasksAddTaskFormSelectAssigneesLabel} />}\n                            name=\"taskAssignees\"\n                            onBlur={() => this.validateForm('taskAssignees')}\n                            onInput={this.handleApproverSelectorInput}\n                            onRemove={this.handleApproverSelectorRemove}\n                            onSelect={this.handleApproverSelectorSelect}\n                            placeholder={intl.formatMessage(commentFormMessages.approvalAddAssignee)}\n                            selectedOptions={renderApprovers}\n                            selectorOptions={approverOptions}\n                            shouldSetActiveItemOnOpen\n                            shouldClearUnmatchedInput\n                            validateForError={() => this.validateForm('taskAssignees')}\n                        >\n                            {approverOptions.map(({ id, name, email }) => (\n                                <ContactDatalistItem\n                                    key={id}\n                                    data-testid=\"task-assignee-option\"\n                                    name={name}\n                                    subtitle={email}\n                                />\n                            ))}\n                        </PillSelectorDropdown>\n\n                        {shouldShowCompletionRule && (\n                            <FeatureFlag feature=\"activityFeed.tasks.anyTask\">\n                                <Checkbox\n                                    data-testid=\"task-form-completion-rule-checkbox\"\n                                    isChecked={isCompletionRuleCheckboxChecked}\n                                    isDisabled={isCompletionRuleCheckboxDisabled || isForbiddenErrorOnEdit}\n                                    label={<FormattedMessage {...messages.taskAnyCheckboxLabel} />}\n                                    tooltip={intl.formatMessage(messages.taskAnyInfoTooltip)}\n                                    name=\"completionRule\"\n                                    onChange={this.handleCompletionRuleChange}\n                                />\n                            </FeatureFlag>\n                        )}\n\n                        <TextArea\n                            className=\"bcs-task-name-input\"\n                            data-testid=\"task-form-name-input\"\n                            disabled={isDisabled || isForbiddenErrorOnEdit}\n                            error={this.getErrorByFieldname('taskName')}\n                            isRequired\n                            label={<FormattedMessage {...messages.tasksAddTaskFormMessageLabel} />}\n                            name=\"taskName\"\n                            onBlur={() => this.validateForm('taskName')}\n                            onChange={this.handleChangeMessage}\n                            placeholder={intl.formatMessage(commentFormMessages.commentWrite)}\n                            value={message}\n                        />\n                        <DatePicker\n                            className=\"bcs-task-add-due-date-input\"\n                            error={this.getErrorByFieldname('taskDueDate')}\n                            inputProps={{\n                                [INTERACTION_TARGET]: ACTIVITY_TARGETS.TASK_DATE_PICKER,\n                                'data-testid': 'task-form-date-input',\n                            }}\n                            isDisabled={isForbiddenErrorOnEdit}\n                            isRequired={false}\n                            label={<FormattedMessage {...messages.tasksAddTaskFormDueDateLabel} />}\n                            minDate={new Date()}\n                            name=\"taskDueDate\"\n                            onChange={this.handleDueDateChange}\n                            placeholder={intl.formatMessage(commentFormMessages.approvalSelectDate)}\n                            value={dueDate || undefined}\n                        />\n                        <div className=\"bcs-task-input-controls\">\n                            <Button\n                                className=\"bcs-task-input-cancel-btn\"\n                                data-resin-target={ACTIVITY_TARGETS.APPROVAL_FORM_CANCEL}\n                                data-testid=\"task-form-cancel-button\"\n                                onClick={this.handleCancelClick}\n                                isDisabled={isLoading}\n                                type=\"button\"\n                                {...this.addResinInfo()}\n                            >\n                                <FormattedMessage {...messages.tasksAddTaskFormCancelLabel} />\n                            </Button>\n                            <PrimaryButton\n                                className=\"bcs-task-input-submit-btn\"\n                                data-resin-target={ACTIVITY_TARGETS.APPROVAL_FORM_POST}\n                                data-testid=\"task-form-submit-button\"\n                                isDisabled={isForbiddenErrorOnEdit}\n                                isLoading={isLoading}\n                                {...this.addResinInfo()}\n                            >\n                                <FormattedMessage {...submitButtonMessage} />\n                            </PrimaryButton>\n                        </div>\n                    </Form>\n                </div>\n            </div>\n        );\n    }\n}\n\n// For testing only\nexport { TaskForm as TaskFormUnwrapped };\nexport type { TaskFormConsumerProps as TaskFormProps };\n\nexport default injectIntl(TaskForm);\n"],"file":"TaskForm.js"}