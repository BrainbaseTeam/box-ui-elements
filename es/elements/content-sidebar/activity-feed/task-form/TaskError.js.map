{"version":3,"sources":["../../../../../src/elements/content-sidebar/activity-feed/task-form/TaskError.js"],"names":["React","FormattedMessage","getProp","messages","apiMessages","TASK_EDIT_MODE_EDIT","TASK_MAX_GROUP_ASSIGNEES","ERROR_CODE_GROUP_EXCEEDS_LIMIT","InlineNotice","TaskError","editMode","error","taskType","isEditMode","isForbiddenErrorOnEdit","taskGroupExceedsError","errorTitle","taskEditWarningTitle","taskCreateErrorTitle","errorMessage","taskUpdateErrorMessage","taskCreateErrorMessage","taskGeneralAssigneeRemovalWarningMessage","taskApprovalAssigneeRemovalWarningMessage","taskGroupExceedsLimitWarningTitle","taskGroupExceedsLimitWarningMessage","max"],"mappings":";;AAAA;;;;AAKA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,gBAAT,QAAiC,YAAjC;AACA,OAAOC,OAAP,MAAoB,YAApB;AAEA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,WAAP,MAAwB,0BAAxB;AACA,SAASC,mBAAT,EAA8BC,wBAA9B,EAAwDC,8BAAxD,QAA8F,uBAA9F;AACA,OAAOC,YAAP,MAAyB,mDAAzB;;AASA,IAAMC,SAAS,GAAG,SAAZA,SAAY,OAA0C;AAAA,MAAvCC,QAAuC,QAAvCA,QAAuC;AAAA,MAA7BC,KAA6B,QAA7BA,KAA6B;AAAA,MAAtBC,QAAsB,QAAtBA,QAAsB;AACxD,MAAMC,UAAU,GAAGH,QAAQ,KAAKL,mBAAhC;AACA,MAAMS,sBAAsB,GAAGZ,OAAO,CAACS,KAAD,EAAQ,QAAR,CAAP,KAA6B,GAA7B,IAAoCE,UAAnE;AACA,MAAME,qBAAqB,GAAGb,OAAO,CAACS,KAAD,EAAQ,MAAR,CAAP,KAA2BJ,8BAAzD;AAEA,MAAMS,UAAU,GAAGF,sBAAsB,GAAGX,QAAQ,CAACc,oBAAZ,GAAmCd,QAAQ,CAACe,oBAArF;AACA,MAAIC,YAAY,GAAGN,UAAU,GAAGV,QAAQ,CAACiB,sBAAZ,GAAqChB,WAAW,CAACiB,sBAA9E;;AACA,MAAI,CAACV,KAAL,EAAY;AACR,WAAO,IAAP;AACH,GATuD,CAWxD;;;AACA,MAAIG,sBAAJ,EAA4B;AACxB,YAAQF,QAAR;AACI,WAAK,SAAL;AACIO,QAAAA,YAAY,GAAGhB,QAAQ,CAACmB,wCAAxB;AACA;;AACJ,WAAK,UAAL;AACIH,QAAAA,YAAY,GAAGhB,QAAQ,CAACoB,yCAAxB;AACA;;AACJ;AACI,eAAO,IAAP;AARR;AAUH;;AAED,SAAOR,qBAAqB,GACxB,oBAAC,YAAD;AAAc,IAAA,IAAI,EAAC,SAAnB;AAA6B,IAAA,KAAK,EAAE,oBAAC,gBAAD,EAAsBZ,QAAQ,CAACqB,iCAA/B;AAApC,KACI,oBAAC,gBAAD,eACQpB,WAAW,CAACqB,mCADpB;AAEI,IAAA,MAAM,EAAE;AAAEC,MAAAA,GAAG,EAAEpB;AAAP;AAFZ,KADJ,CADwB,GAQxB,oBAAC,YAAD;AAAc,IAAA,IAAI,EAAC,OAAnB;AAA2B,IAAA,KAAK,EAAE,oBAAC,gBAAD,EAAsBU,UAAtB;AAAlC,KACI,oBAAC,gBAAD,EAAsBG,YAAtB,CADJ,CARJ;AAYH,CArCD;;AAuCA,eAAeV,SAAf","sourcesContent":["/**\n * @flow\n * @file Component for in-modal error messages for tasks\n */\n\nimport * as React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport getProp from 'lodash/get';\n\nimport messages from './messages';\nimport apiMessages from '../../../../api/messages';\nimport { TASK_EDIT_MODE_EDIT, TASK_MAX_GROUP_ASSIGNEES, ERROR_CODE_GROUP_EXCEEDS_LIMIT } from '../../../../constants';\nimport InlineNotice from '../../../../components/inline-notice/InlineNotice';\n\nimport type { TaskType, TaskEditMode } from '../../../../common/types/tasks';\n\ntype Props = {\n    editMode?: TaskEditMode,\n    error?: { status: number }, // TODO: update to ElementXhrError once API supports it\n    taskType: TaskType,\n};\nconst TaskError = ({ editMode, error, taskType }: Props) => {\n    const isEditMode = editMode === TASK_EDIT_MODE_EDIT;\n    const isForbiddenErrorOnEdit = getProp(error, 'status') === 403 && isEditMode;\n    const taskGroupExceedsError = getProp(error, 'code') === ERROR_CODE_GROUP_EXCEEDS_LIMIT;\n\n    const errorTitle = isForbiddenErrorOnEdit ? messages.taskEditWarningTitle : messages.taskCreateErrorTitle;\n    let errorMessage = isEditMode ? messages.taskUpdateErrorMessage : apiMessages.taskCreateErrorMessage;\n    if (!error) {\n        return null;\n    }\n\n    // error message changes when a forbidden operation occurs while editing a task\n    if (isForbiddenErrorOnEdit) {\n        switch (taskType) {\n            case 'GENERAL':\n                errorMessage = messages.taskGeneralAssigneeRemovalWarningMessage;\n                break;\n            case 'APPROVAL':\n                errorMessage = messages.taskApprovalAssigneeRemovalWarningMessage;\n                break;\n            default:\n                return null;\n        }\n    }\n\n    return taskGroupExceedsError ? (\n        <InlineNotice type=\"warning\" title={<FormattedMessage {...messages.taskGroupExceedsLimitWarningTitle} />}>\n            <FormattedMessage\n                {...apiMessages.taskGroupExceedsLimitWarningMessage}\n                values={{ max: TASK_MAX_GROUP_ASSIGNEES }}\n            />\n        </InlineNotice>\n    ) : (\n        <InlineNotice type=\"error\" title={<FormattedMessage {...errorTitle} />}>\n            <FormattedMessage {...errorMessage} />\n        </InlineNotice>\n    );\n};\n\nexport default TaskError;\n"],"file":"TaskError.js"}