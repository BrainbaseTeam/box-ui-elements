{"version":3,"sources":["../../../../../src/elements/content-sidebar/activity-feed/task-form/TaskError.js"],"names":["React","FormattedMessage","getProp","messages","apiMessages","TASK_EDIT_MODE_EDIT","InlineNotice","TaskError","editMode","error","taskType","isEditMode","isForbiddenErrorOnEdit","errorTitle","taskEditWarningTitle","taskCreateErrorTitle","errorMessage","taskUpdateErrorMessage","taskCreateErrorMessage","taskGeneralAssigneeRemovalWarningMessage","taskApprovalAssigneeRemovalWarningMessage"],"mappings":"AAAA;;;;AAKA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,gBAAT,QAAiC,YAAjC;AACA,OAAOC,OAAP,MAAoB,YAApB;AAEA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,WAAP,MAAwB,0BAAxB;AACA,SAASC,mBAAT,QAAoC,uBAApC;AACA,OAAOC,YAAP,MAAyB,mDAAzB;;AAUA,IAAMC,SAAS,GAAG,SAAZA,SAAY,OAA0C;AAAA,MAAvCC,QAAuC,QAAvCA,QAAuC;AAAA,MAA7BC,KAA6B,QAA7BA,KAA6B;AAAA,MAAtBC,QAAsB,QAAtBA,QAAsB;AACxD,MAAMC,UAAU,GAAGH,QAAQ,KAAKH,mBAAhC;AACA,MAAMO,sBAAsB,GAAGV,OAAO,CAACO,KAAD,EAAQ,QAAR,CAAP,KAA6B,GAA7B,IAAoCE,UAAnE;AACA,MAAME,UAAU,GAAGD,sBAAsB,GAAGT,QAAQ,CAACW,oBAAZ,GAAmCX,QAAQ,CAACY,oBAArF;AACA,MAAIC,YAAY,GAAGL,UAAU,GAAGR,QAAQ,CAACc,sBAAZ,GAAqCb,WAAW,CAACc,sBAA9E;;AAEA,MAAI,CAACT,KAAL,EAAY;AACR,WAAO,IAAP;AACH,GARuD,CAUxD;;;AACA,MAAIG,sBAAJ,EAA4B;AACxB,YAAQF,QAAR;AACI,WAAK,SAAL;AACIM,QAAAA,YAAY,GAAGb,QAAQ,CAACgB,wCAAxB;AACA;;AACJ,WAAK,UAAL;AACIH,QAAAA,YAAY,GAAGb,QAAQ,CAACiB,yCAAxB;AACA;;AACJ;AACI,eAAO,IAAP;AARR;AAUH;;AAED,sBACI,oBAAC,YAAD;AAAc,IAAA,IAAI,EAAC,OAAnB;AAA2B,IAAA,KAAK,eAAE,oBAAC,gBAAD,EAAsBP,UAAtB;AAAlC,kBACI,oBAAC,gBAAD,EAAsBG,YAAtB,CADJ,CADJ;AAKH,CA7BD;;AA+BA,eAAeT,SAAf","sourcesContent":["/**\n * @flow\n * @file Component for in-modal error messages for tasks\n */\n\nimport * as React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport getProp from 'lodash/get';\n\nimport messages from './messages';\nimport apiMessages from '../../../../api/messages';\nimport { TASK_EDIT_MODE_EDIT } from '../../../../constants';\nimport InlineNotice from '../../../../components/inline-notice/InlineNotice';\n\nimport type { TaskType, TaskEditMode } from '../../../../common/types/tasks';\n\ntype Props = {\n    editMode?: TaskEditMode,\n    error?: { status: number },\n    taskType: TaskType,\n};\n\nconst TaskError = ({ editMode, error, taskType }: Props) => {\n    const isEditMode = editMode === TASK_EDIT_MODE_EDIT;\n    const isForbiddenErrorOnEdit = getProp(error, 'status') === 403 && isEditMode;\n    const errorTitle = isForbiddenErrorOnEdit ? messages.taskEditWarningTitle : messages.taskCreateErrorTitle;\n    let errorMessage = isEditMode ? messages.taskUpdateErrorMessage : apiMessages.taskCreateErrorMessage;\n\n    if (!error) {\n        return null;\n    }\n\n    // error message changes when a forbidden operation occurs while editing a task\n    if (isForbiddenErrorOnEdit) {\n        switch (taskType) {\n            case 'GENERAL':\n                errorMessage = messages.taskGeneralAssigneeRemovalWarningMessage;\n                break;\n            case 'APPROVAL':\n                errorMessage = messages.taskApprovalAssigneeRemovalWarningMessage;\n                break;\n            default:\n                return null;\n        }\n    }\n\n    return (\n        <InlineNotice type=\"error\" title={<FormattedMessage {...errorTitle} />}>\n            <FormattedMessage {...errorMessage} />\n        </InlineNotice>\n    );\n};\n\nexport default TaskError;\n"],"file":"TaskError.js"}