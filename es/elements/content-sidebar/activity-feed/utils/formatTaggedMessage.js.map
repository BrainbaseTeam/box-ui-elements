{"version":3,"sources":["../../../../../src/elements/content-sidebar/activity-feed/utils/formatTaggedMessage.js"],"names":["React","Link","ACTIVITY_TARGETS","UserLink","splitRegex","formatTaggedMessage","tagged_message","itemID","shouldReturnString","getUserProfileUrl","contentItems","split","map","text","contentIndex","contentKey","mentionMatch","match","trigger","id","name","MENTION","urlMatch","url","join"],"mappings":";;;;;;;;AAAA;;;;AAKA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,IAAT,QAAqB,6BAArB;AACA,SAASC,gBAAT,QAAiC,oCAAjC;AACA,OAAOC,QAAP,MAAqB,qBAArB,C,CAEA;AACA;AACA;AACA;AACA;;AACA,IAAMC,UAAU,GAAG,4HAAnB;AAEA;;;;;;;;;;;;AAWA,IAAMC,mBAAmB,GAAG,SAAtBA,mBAAsB,CACxBC,cADwB,EAExBC,MAFwB,EAGxBC,kBAHwB,EAIxBC,iBAJwB,EAKF;AACtB,MAAMC,YAAY,GAAGJ,cAAc,CAACK,KAAf,CAAqBP,UAArB,EAAiCQ,GAAjC,CAAqC,UAACC,IAAD,EAAeC,YAAf,EAAwC;AAC9F,QAAMC,UAAU,aAAMD,YAAN,cAAsBP,MAAtB,CAAhB,CAD8F,CAE9F;;AACA,QAAMS,YAAY,GAAGH,IAAI,CAACI,KAAL,CAAW,8BAAX,CAArB;;AACA,QAAID,YAAJ,EAAkB;AAAA,yCACgBA,YADhB;AAAA,UACLE,OADK;AAAA,UACIC,EADJ;AAAA,UACQC,IADR;;AAEd,UAAIZ,kBAAJ,EAAwB;AACpB,yBAAUU,OAAV,SAAoBE,IAApB;AACH;;AAED,aACI,oBAAC,QAAD;AACI,QAAA,GAAG,EAAEL,UADT;AAEI,QAAA,SAAS,EAAC,qBAFd;AAGI,6BAAmBb,gBAAgB,CAACmB,OAHxC;AAII,QAAA,iBAAiB,EAAEZ,iBAJvB;AAKI,QAAA,EAAE,EAAEU,EALR;AAMI,QAAA,IAAI,YAAKD,OAAL,SAAeE,IAAf;AANR,QADJ;AAUH;;AAED,QAAI,CAACZ,kBAAL,EAAyB;AACrB;AACA;AACA,UAAMc,QAAQ,GAAGT,IAAI,CAACI,KAAL,EACb;AACA,gGAFa,CAAjB;;AAIA,UAAIK,QAAJ,EAAc;AAAA,uCACMA,QADN;AAAA,YACDC,GADC;;AAEV,eACI,oBAAC,IAAD;AAAM,UAAA,GAAG,EAAER,UAAX;AAAuB,UAAA,IAAI,EAAEQ;AAA7B,WACKA,GADL,CADJ;AAKH;AACJ;;AAED,WAAOV,IAAP;AACH,GAxCoB,CAArB;AA0CA,SAAOL,kBAAkB,GAAGE,YAAY,CAACc,IAAb,CAAkB,EAAlB,CAAH,GAA2Bd,YAApD;AACH,CAjDD;;AAmDA,eAAeL,mBAAf","sourcesContent":["/**\n * @flow\n * @file Util for formatting tagged messages\n */\n\nimport * as React from 'react';\nimport { Link } from '../../../../components/link';\nimport { ACTIVITY_TARGETS } from '../../../common/interactionTargets';\nimport UserLink from '../common/user-link';\n\n// this regex matches one of the following regular expressions:\n// mentions: ([@＠﹫]\\[[0-9]+:[^\\]]+])\n// urls: (?:\\b)((?:(?:ht|f)tps?:\\/\\/)[\\w\\._\\-]+(:\\d+)?(\\/[\\w\\-_\\.~\\+\\/#\\?&%=:\\[\\]@!$'\\(\\)\\*;,]*)?)\n// NOTE: There are useless escapes in the regex below, should probably remove them when safe\n// eslint-disable-next-line\nconst splitRegex = /((?:[@＠﹫]\\[[0-9]+:[^\\]]+])|(?:\\b(?:(?:ht|f)tps?:\\/\\/)[\\w\\._\\-]+(?::\\d+)?(?:\\/[\\w\\-_\\.~\\+\\/#\\?&%=:\\[\\]@!$'\\(\\)\\*;,]*)?))/gim;\n\n/**\n * Formats a message a string and replaces the following:\n * - all occurrence of mention patterns with a UserLink component\n * - all occurrence of urls with a Link component\n * Ex mention format: @[123:Hello World]\n * @param {String} tagged_message The message string to format\n * @param {String} itemID The id of the tagged message\n * @param {Boolean} shouldReturnString The boolean value whether it should return string\n * @param {Function} [getUserProfileUrl] The method to generate a user profile url\n * @returns {String|React.Node}\n */\nconst formatTaggedMessage = (\n    tagged_message: string,\n    itemID: string,\n    shouldReturnString: boolean,\n    getUserProfileUrl?: Function,\n): React.Node | string => {\n    const contentItems = tagged_message.split(splitRegex).map((text: string, contentIndex: number) => {\n        const contentKey = `${contentIndex}-${itemID}`;\n        // attempt mention match\n        const mentionMatch = text.match(/([@＠﹫])\\[([0-9]+):([^\\]]+)]/i);\n        if (mentionMatch) {\n            const [, trigger, id, name] = mentionMatch;\n            if (shouldReturnString) {\n                return `${trigger}${name}`;\n            }\n\n            return (\n                <UserLink\n                    key={contentKey}\n                    className=\"bcs-comment-mention\"\n                    data-resin-target={ACTIVITY_TARGETS.MENTION}\n                    getUserProfileUrl={getUserProfileUrl}\n                    id={id}\n                    name={`${trigger}${name}`}\n                />\n            );\n        }\n\n        if (!shouldReturnString) {\n            // attempt url match\n            // NOTE: There are useless escapes in the regex below, should probably remove them when safe\n            const urlMatch = text.match(\n                // eslint-disable-next-line no-useless-escape\n                /((?:(?:ht|f)tps?:\\/\\/)[\\w\\._\\-]+(?::\\d+)?(?:\\/[\\w\\-_\\.~\\+\\/#\\?&%=:\\[\\]@!$'\\(\\)\\*;,]*)?)/i,\n            );\n            if (urlMatch) {\n                const [, url] = urlMatch;\n                return (\n                    <Link key={contentKey} href={url}>\n                        {url}\n                    </Link>\n                );\n            }\n        }\n\n        return text;\n    });\n\n    return shouldReturnString ? contentItems.join('') : contentItems;\n};\n\nexport default formatTaggedMessage;\n"],"file":"formatTaggedMessage.js"}