{"version":3,"sources":["../../../../src/elements/content-sidebar/activity-feed/Avatar.js"],"names":["React","AvatarComponent","Avatar","avatarUrl","setState","props","user","getAvatarUrl","avatar_url","id","avatarPromise","Promise","resolve","then","getAvatarUrlHandler","className","state","name","PureComponent"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;AAKA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,eAAP,MAA4B,4BAA5B;;IAYMC,M;;;;;;;;;;;;;;;;4DACM;AACJC,MAAAA,SAAS,EAAE;AADP,K;;0EASc,UAACA,SAAD,EAAwB;AAC1C,YAAKC,QAAL,CAAc;AACVD,QAAAA,SAAS,EAATA;AADU,OAAd;AAGH,K;;;;;;;;AAED;;;;;mCAKiC;AAAA,wBACc,KAAKE,KADnB;AAAA,yCACrBC,IADqB;AAAA,UACrBA,IADqB,iCACd,EADc;AAAA,UACVC,YADU,eACVA,YADU;AAAA,6BAEKD,IAFL,CAErBE,UAFqB;AAAA,UAErBA,UAFqB,iCAER,IAFQ;AAAA,UAEFC,EAFE,GAEKH,IAFL,CAEFG,EAFE;AAI7B,UAAMC,aAAa,GAAGD,EAAE,IAAIF,YAAN,GAAqBA,YAAY,WAAIE,EAAJ,EAAjC,GAA6CE,OAAO,CAACC,OAAR,CAAgBJ,UAAhB,CAAnE;AACA,aAAOE,aAAa,CAACG,IAAd,CAAmB,KAAKC,mBAAxB,CAAP;AACH;;;wCAEmB;AAChB,WAAKP,YAAL;AACH;;;6BAEQ;AAAA,yBAC8B,KAAKF,KADnC;AAAA,UACGC,IADH,gBACGA,IADH;AAAA,UACSS,SADT,gBACSA,SADT;AAAA,UAEGZ,SAFH,GAEwB,KAAKa,KAF7B,CAEGb,SAFH;AAAA,UAGGM,EAHH,GAGgBH,IAHhB,CAGGG,EAHH;AAAA,UAGOQ,IAHP,GAGgBX,IAHhB,CAGOW,IAHP;AAKL,0BAAO,oBAAC,eAAD;AAAiB,QAAA,SAAS,EAAEd,SAA5B;AAAuC,QAAA,SAAS,EAAEY,SAAlD;AAA6D,QAAA,EAAE,EAAEN,EAAjE;AAAqE,QAAA,IAAI,EAAEQ;AAA3E,QAAP;AACH;;;;EAvCgBjB,KAAK,CAACkB,a;;AA0C3B,eAAehB,MAAf","sourcesContent":["/**\n * @flow\n * @file avatar component\n * @author Box\n */\nimport * as React from 'react';\nimport AvatarComponent from '../../../components/avatar';\n\ntype Props = {\n    className?: string,\n    getAvatarUrl?: GetAvatarUrlCallback,\n    user: User,\n};\n\ntype State = {\n    avatarUrl?: ?string,\n};\n\nclass Avatar extends React.PureComponent<Props, State> {\n    state = {\n        avatarUrl: null,\n    };\n\n    /**\n     * Success handler for getting avatar url\n     *\n     * @param {string} avatarUrl the user avatar url\n     */\n    getAvatarUrlHandler = (avatarUrl: ?string) => {\n        this.setState({\n            avatarUrl,\n        });\n    };\n\n    /**\n     * Gets the avatar URL for the user from the getAvatarUrl prop\n     *\n     * @return {Promise<?string>} Promise which resolve with the avatar url string\n     */\n    getAvatarUrl(): Promise<?string> {\n        const { user = {}, getAvatarUrl }: Props = this.props;\n        const { avatar_url = null, id } = user;\n\n        const avatarPromise = id && getAvatarUrl ? getAvatarUrl(`${id}`) : Promise.resolve(avatar_url);\n        return avatarPromise.then(this.getAvatarUrlHandler);\n    }\n\n    componentDidMount() {\n        this.getAvatarUrl();\n    }\n\n    render() {\n        const { user, className }: Props = this.props;\n        const { avatarUrl }: State = this.state;\n        const { id, name } = user;\n\n        return <AvatarComponent avatarUrl={avatarUrl} className={className} id={id} name={name} />;\n    }\n}\n\nexport default Avatar;\n"],"file":"Avatar.js"}