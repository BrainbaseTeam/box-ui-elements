{"version":3,"sources":["../../../../../src/elements/content-sidebar/activity-feed/comment-form/CommentForm.js"],"names":["React","noop","classNames","FormattedMessage","injectIntl","Avatar","CommentFormControls","DraftJSMentionSelector","createMentionSelectorState","Form","Media","messages","CommentForm","commentEditorState","props","tagged_message","createComment","updateComment","onSubmit","entityId","getFormattedCommentText","text","hasMention","id","setState","nextEditorState","state","contentState","getCurrentContent","blockMap","getBlockMap","resultStringArr","forEach","block","getText","blockMapStringArr","findEntityRanges","start","end","entityKey","getEntityAt","entity","getEntity","stringToAdd","getData","substring","push","join","prevIsOpen","isOpen","className","getMentionWithQuery","formatMessage","intl","isDisabled","mentionSelectorContacts","onCancel","onFocus","user","isEditing","getAvatarUrl","inputContainerClassNames","onFormValidSubmitHandler","onMentionSelectorChangeHandler","undefined","commentWrite","atMentionTip","Component","CommentFormUnwrapped"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AAKA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,IAAP,MAAiB,aAAjB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,SAASC,gBAAT,EAA2BC,UAA3B,QAA6C,YAA7C;AACA,OAAOC,MAAP,MAAmB,WAAnB;AACA,OAAOC,mBAAP,MAAgC,uBAAhC;AACA,OAAOC,sBAAP,IACIC,0BADJ,QAEO,gEAFP;AAGA,OAAOC,IAAP,MAAiB,gDAAjB;AACA,OAAOC,KAAP,MAAkB,8BAAlB;AACA,OAAOC,QAAP,MAAqB,YAArB;AAEA,OAAO,oBAAP;;IAwBMC,W;;;;;;;;;;;;;;;;4DAKM;AACJC,MAAAA,kBAAkB,EAAEL,0BAA0B,CAAC,MAAKM,KAAL,CAAWC,cAAZ;AAD1C,K;;+EAcmB,YAAY;AAAA,wBACwC,MAAKD,KAD7C;AAAA,8CAC3BE,aAD2B;AAAA,UAC3BA,aAD2B,sCACXf,IADW;AAAA,8CACLgB,aADK;AAAA,UACLA,aADK,sCACWhB,IADX;AAAA,UACiBiB,QADjB,eACiBA,QADjB;AAAA,UAC2BC,QAD3B,eAC2BA,QAD3B;;AAAA,kCAGN,MAAKC,uBAAL,EAHM;AAAA,UAG3BC,IAH2B,yBAG3BA,IAH2B;AAAA,UAGrBC,UAHqB,yBAGrBA,UAHqB;;AAKnC,UAAI,CAACD,IAAL,EAAW;AACP;AACH;;AAED,UAAIF,QAAJ,EAAc;AACVF,QAAAA,aAAa,CAAC;AAAEM,UAAAA,EAAE,EAAEJ,QAAN;AAAgBE,UAAAA,IAAI,EAAJA,IAAhB;AAAsBC,UAAAA,UAAU,EAAVA;AAAtB,SAAD,CAAb;AACH,OAFD,MAEO;AACHN,QAAAA,aAAa,CAAC;AAAEK,UAAAA,IAAI,EAAJA,IAAF;AAAQC,UAAAA,UAAU,EAAVA;AAAR,SAAD,CAAb;AACH;;AAED,UAAIJ,QAAJ,EAAc;AACVA,QAAAA,QAAQ;AACX;;AAED,YAAKM,QAAL,CAAc;AACVX,QAAAA,kBAAkB,EAAEL,0BAA0B;AADpC,OAAd;AAGH,K;;qFAEgC,UAACiB,eAAD;AAAA,aAC7B,MAAKD,QAAL,CAAc;AAAEX,QAAAA,kBAAkB,EAAEY;AAAtB,OAAd,CAD6B;AAAA,K;;8EAQP,YAA6C;AAAA,UAC3DZ,kBAD2D,GACpC,MAAKa,KAD+B,CAC3Db,kBAD2D;AAGnE,UAAMc,YAAY,GAAGd,kBAAkB,CAACe,iBAAnB,EAArB;AACA,UAAMC,QAAQ,GAAGF,YAAY,CAACG,WAAb,EAAjB;AAEA,UAAMC,eAAe,GAAG,EAAxB,CANmE,CAQnE;;AACA,UAAIT,UAAU,GAAG,KAAjB,CATmE,CAWnE;;AACAO,MAAAA,QAAQ,CAACG,OAAT,CAAiB,UAAAC,KAAK,EAAI;AACtB,YAAMZ,IAAI,GAAGY,KAAK,CAACC,OAAN,EAAb;AACA,YAAMC,iBAAiB,GAAG,EAA1B,CAFsB,CAItB;;AACAF,QAAAA,KAAK,CAACG,gBAAN,CACI;AAAA,iBAAM,IAAN;AAAA,SADJ,EAEI,UAACC,KAAD,EAAQC,GAAR,EAAgB;AACZ,cAAMC,SAAS,GAAGN,KAAK,CAACO,WAAN,CAAkBH,KAAlB,CAAlB,CADY,CAEZ;AACA;;AACA,cAAIE,SAAJ,EAAe;AACX,gBAAME,MAAM,GAAGd,YAAY,CAACe,SAAb,CAAuBH,SAAvB,CAAf;AACA,gBAAMI,WAAW,eAAQF,MAAM,CAACG,OAAP,GAAiBrB,EAAzB,cAA+BF,IAAI,CAACwB,SAAL,CAAeR,KAAK,GAAG,CAAvB,EAA0BC,GAA1B,CAA/B,MAAjB;AACAH,YAAAA,iBAAiB,CAACW,IAAlB,CAAuBH,WAAvB;AACArB,YAAAA,UAAU,GAAG,IAAb;AACH,WALD,MAKO;AACHa,YAAAA,iBAAiB,CAACW,IAAlB,CAAuBzB,IAAI,CAACwB,SAAL,CAAeR,KAAf,EAAsBC,GAAtB,CAAvB;AACH;AACJ,SAdL;AAgBAP,QAAAA,eAAe,CAACe,IAAhB,CAAqBX,iBAAiB,CAACY,IAAlB,CAAuB,EAAvB,CAArB;AACH,OAtBD,EAZmE,CAoCnE;AACA;;AACA,aAAO;AAAE1B,QAAAA,IAAI,EAAEU,eAAe,CAACgB,IAAhB,CAAqB,IAArB,CAAR;AAAoCzB,QAAAA,UAAU,EAAVA;AAApC,OAAP;AACH,K;;;;;;;6CAjFuD;AAAA,UAA3B0B,UAA2B,QAAnCC,MAAmC;AAAA,UAC5CA,MAD4C,GACjC,KAAKnC,KAD4B,CAC5CmC,MAD4C;;AAGpD,UAAIA,MAAM,KAAKD,UAAX,IAAyB,CAACC,MAA9B,EAAsC;AAClC,aAAKzB,QAAL,CAAc;AACVX,UAAAA,kBAAkB,EAAEL,0BAA0B;AADpC,SAAd;AAGH;AACJ;;;6BA2EoB;AAAA,yBAcb,KAAKM,KAdQ;AAAA,UAEboC,SAFa,gBAEbA,SAFa;AAAA,UAGbC,mBAHa,gBAGbA,mBAHa;AAAA,UAILC,aAJK,gBAIbC,IAJa,CAILD,aAJK;AAAA,UAKbE,UALa,gBAKbA,UALa;AAAA,UAMbL,MANa,gBAMbA,MANa;AAAA,+CAObM,uBAPa;AAAA,UAObA,uBAPa,sCAOa,EAPb;AAAA,UAQbC,QARa,gBAQbA,QARa;AAAA,UASbC,OATa,gBASbA,OATa;AAAA,UAUbC,IAVa,gBAUbA,IAVa;AAAA,UAWbC,SAXa,gBAWbA,SAXa;AAAA,UAYb5C,cAZa,gBAYbA,cAZa;AAAA,UAab6C,YAba,gBAabA,YAba;AAAA,UAeT/C,kBAfS,GAec,KAAKa,KAfnB,CAeTb,kBAfS;AAgBjB,UAAMgD,wBAAwB,GAAG3D,UAAU,CAAC,iBAAD,EAAoBgD,SAApB,EAA+B;AACtE,uBAAeD;AADuD,OAA/B,CAA3C;AAIA,0BACI,oBAAC,KAAD;AAAO,QAAA,SAAS,EAAEY;AAAlB,SACK,CAACF,SAAD,iBACG,oBAAC,KAAD,CAAO,MAAP;AAAc,QAAA,SAAS,EAAC;AAAxB,sBACI,oBAAC,MAAD;AAAQ,QAAA,YAAY,EAAEC,YAAtB;AAAoC,QAAA,IAAI,EAAEF;AAA1C,QADJ,CAFR,eAOI,oBAAC,KAAD,CAAO,IAAP;AAAY,QAAA,SAAS,EAAC;AAAtB,sBACI,oBAAC,IAAD;AAAM,QAAA,aAAa,EAAE,KAAKI;AAA1B,sBACI,oBAAC,sBAAD;AACI,QAAA,SAAS,EAAC,uBADd;AAEI,QAAA,QAAQ,EAAEb,MAAM,GAAGM,uBAAH,GAA6B,EAFjD;AAGI,QAAA,WAAW,EAAE1C,kBAHjB;AAII,QAAA,SAAS,MAJb;AAKI,QAAA,UAAU,EAAEyC,UALhB;AAMI,QAAA,UAAU,EAAEL,MANhB;AAOI,QAAA,IAAI,EAAC,aAPT;AAQI,QAAA,KAAK,EAAC,SARV;AASI,QAAA,QAAQ,EAAE,KAAKc,8BATnB;AAUI,QAAA,OAAO,EAAEN,OAVb;AAWI,QAAA,SAAS,EAAEN,mBAXf;AAYI,QAAA,WAAW,EAAEpC,cAAc,GAAGiD,SAAH,GAAeZ,aAAa,CAACzC,QAAQ,CAACsD,YAAV,CAZ3D;AAaI,QAAA,cAAc,EAAE;AAbpB,QADJ,eAgBI;AAAO,QAAA,SAAS,EAAC;AAAjB,sBACI,oBAAC,gBAAD,EAAsBtD,QAAQ,CAACuD,YAA/B,CADJ,CAhBJ,EAoBKjB,MAAM,iBAAI,oBAAC,mBAAD;AAAqB,QAAA,QAAQ,EAAEO;AAA/B,QApBf,CADJ,CAPJ,CADJ;AAkCH;;;;EAlJqBxD,KAAK,CAACmE,S,GAqJhC;;;gBArJMvD,W,kBACoB;AAClBqC,EAAAA,MAAM,EAAE;AADU,C;;AAqJ1B,SAASrC,WAAW,IAAIwD,oBAAxB;AACA,eAAehE,UAAU,CAACQ,WAAD,CAAzB","sourcesContent":["/**\n * @flow\n * @file Component for Approval comment form\n */\n\nimport * as React from 'react';\nimport noop from 'lodash/noop';\nimport classNames from 'classnames';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport Avatar from '../Avatar';\nimport CommentFormControls from './CommentFormControls';\nimport DraftJSMentionSelector, {\n    createMentionSelectorState,\n} from '../../../../components/form-elements/draft-js-mention-selector';\nimport Form from '../../../../components/form-elements/form/Form';\nimport Media from '../../../../components/media';\nimport messages from './messages';\n\nimport './CommentForm.scss';\n\ntype Props = {\n    className: string,\n    createComment?: Function,\n    entityId?: string,\n    getAvatarUrl: GetAvatarUrlCallback,\n    getMentionWithQuery?: Function,\n    isDisabled?: boolean,\n    isEditing?: boolean,\n    isOpen: boolean,\n    mentionSelectorContacts?: SelectorItems,\n    onCancel: Function,\n    onFocus: Function,\n    onSubmit: Function,\n    tagged_message?: string,\n    updateComment?: Function,\n    user: User,\n} & InjectIntlProvidedProps;\n\ntype State = {\n    commentEditorState: any,\n};\n\nclass CommentForm extends React.Component<Props, State> {\n    static defaultProps = {\n        isOpen: false,\n    };\n\n    state = {\n        commentEditorState: createMentionSelectorState(this.props.tagged_message),\n    };\n\n    componentDidUpdate({ isOpen: prevIsOpen }: Props): void {\n        const { isOpen } = this.props;\n\n        if (isOpen !== prevIsOpen && !isOpen) {\n            this.setState({\n                commentEditorState: createMentionSelectorState(),\n            });\n        }\n    }\n\n    onFormValidSubmitHandler = (): void => {\n        const { createComment = noop, updateComment = noop, onSubmit, entityId } = this.props;\n\n        const { text, hasMention } = this.getFormattedCommentText();\n\n        if (!text) {\n            return;\n        }\n\n        if (entityId) {\n            updateComment({ id: entityId, text, hasMention });\n        } else {\n            createComment({ text, hasMention });\n        }\n\n        if (onSubmit) {\n            onSubmit();\n        }\n\n        this.setState({\n            commentEditorState: createMentionSelectorState(),\n        });\n    };\n\n    onMentionSelectorChangeHandler = (nextEditorState: any): void =>\n        this.setState({ commentEditorState: nextEditorState });\n\n    /**\n     * Formats the comment editor's text such that it will be accepted by the server.\n     *\n     * @returns {Object}\n     */\n    getFormattedCommentText = (): { hasMention: boolean, text: string } => {\n        const { commentEditorState } = this.state;\n\n        const contentState = commentEditorState.getCurrentContent();\n        const blockMap = contentState.getBlockMap();\n\n        const resultStringArr = [];\n\n        // The API needs to explicitly know if a message contains a mention.\n        let hasMention = false;\n\n        // For all ContentBlocks in the ContentState:\n        blockMap.forEach(block => {\n            const text = block.getText();\n            const blockMapStringArr = [];\n\n            // Break down the ContentBlock into ranges\n            block.findEntityRanges(\n                () => true,\n                (start, end) => {\n                    const entityKey = block.getEntityAt(start);\n                    // If the range is an Entity, format its text eg \"@[1:Username]\"\n                    // Otherwise append its text to the block result as-is\n                    if (entityKey) {\n                        const entity = contentState.getEntity(entityKey);\n                        const stringToAdd = `@[${entity.getData().id}:${text.substring(start + 1, end)}]`;\n                        blockMapStringArr.push(stringToAdd);\n                        hasMention = true;\n                    } else {\n                        blockMapStringArr.push(text.substring(start, end));\n                    }\n                },\n            );\n            resultStringArr.push(blockMapStringArr.join(''));\n        });\n\n        // Concatenate the array of block strings with newlines\n        // (Each block represents a paragraph)\n        return { text: resultStringArr.join('\\n'), hasMention };\n    };\n\n    render(): React.Node {\n        const {\n            className,\n            getMentionWithQuery,\n            intl: { formatMessage },\n            isDisabled,\n            isOpen,\n            mentionSelectorContacts = [],\n            onCancel,\n            onFocus,\n            user,\n            isEditing,\n            tagged_message,\n            getAvatarUrl,\n        } = this.props;\n        const { commentEditorState } = this.state;\n        const inputContainerClassNames = classNames('bcs-CommentForm', className, {\n            'bcs-is-open': isOpen,\n        });\n\n        return (\n            <Media className={inputContainerClassNames}>\n                {!isEditing && (\n                    <Media.Figure className=\"bcs-CommentForm-avatar\">\n                        <Avatar getAvatarUrl={getAvatarUrl} user={user} />\n                    </Media.Figure>\n                )}\n\n                <Media.Body className=\"bcs-CommentForm-body\" data-testid=\"bcs-CommentForm-body\">\n                    <Form onValidSubmit={this.onFormValidSubmitHandler}>\n                        <DraftJSMentionSelector\n                            className=\"bcs-CommentForm-input\"\n                            contacts={isOpen ? mentionSelectorContacts : []}\n                            editorState={commentEditorState}\n                            hideLabel\n                            isDisabled={isDisabled}\n                            isRequired={isOpen}\n                            name=\"commentText\"\n                            label=\"Comment\"\n                            onChange={this.onMentionSelectorChangeHandler}\n                            onFocus={onFocus}\n                            onMention={getMentionWithQuery}\n                            placeholder={tagged_message ? undefined : formatMessage(messages.commentWrite)}\n                            validateOnBlur={false}\n                        />\n                        <aside className=\"bcs-CommentForm-tip\">\n                            <FormattedMessage {...messages.atMentionTip} />\n                        </aside>\n\n                        {isOpen && <CommentFormControls onCancel={onCancel} />}\n                    </Form>\n                </Media.Body>\n            </Media>\n        );\n    }\n}\n\n// For testing only\nexport { CommentForm as CommentFormUnwrapped };\nexport default injectIntl(CommentForm);\n"],"file":"CommentForm.js"}