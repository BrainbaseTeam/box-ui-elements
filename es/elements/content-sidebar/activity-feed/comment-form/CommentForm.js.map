{"version":3,"sources":["../../../../../src/elements/content-sidebar/activity-feed/comment-form/CommentForm.js"],"names":["React","noop","classNames","FormattedMessage","injectIntl","Avatar","CommentFormControls","DraftJSMentionSelector","createMentionSelectorState","getFormattedCommentText","Form","Media","messages","CommentForm","commentEditorState","props","tagged_message","createComment","updateComment","onSubmit","entityId","text","hasMention","id","setState","nextEditorState","state","prevIsOpen","isOpen","className","getMentionWithQuery","formatMessage","intl","isDisabled","mentionSelectorContacts","contactsLoaded","onCancel","onFocus","user","isEditing","getAvatarUrl","showTip","inputContainerClassNames","onFormValidSubmitHandler","commentLabel","atMentionTipDescription","onMentionSelectorChangeHandler","undefined","commentWrite","atMentionTip","Component","CommentFormUnwrapped"],"mappings":"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","sourcesContent":["/**\n * @flow\n * @file Component for Approval comment form\n */\n\nimport * as React from 'react';\nimport noop from 'lodash/noop';\nimport classNames from 'classnames';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport type { InjectIntlProvidedProps } from 'react-intl';\nimport Avatar from '../Avatar';\nimport CommentFormControls from './CommentFormControls';\nimport DraftJSMentionSelector, {\n    createMentionSelectorState,\n    getFormattedCommentText,\n} from '../../../../components/form-elements/draft-js-mention-selector';\nimport Form from '../../../../components/form-elements/form/Form';\nimport Media from '../../../../components/media';\nimport messages from './messages';\nimport type { GetAvatarUrlCallback } from '../../../common/flowTypes';\nimport type { SelectorItems, User } from '../../../../common/types/core';\n\nimport './CommentForm.scss';\n\ntype Props = {\n    className: string,\n    contactsLoaded?: boolean,\n    createComment?: Function,\n    entityId?: string,\n    getAvatarUrl: GetAvatarUrlCallback,\n    getMentionWithQuery?: Function,\n    isDisabled?: boolean,\n    isEditing?: boolean,\n    isOpen: boolean,\n    mentionSelectorContacts?: SelectorItems<>,\n    onCancel: Function,\n    onFocus?: Function,\n    onSubmit?: Function,\n    showTip?: boolean,\n    tagged_message?: string,\n    updateComment?: Function,\n    user: User,\n} & InjectIntlProvidedProps;\n\ntype State = {\n    commentEditorState: any,\n};\n\nclass CommentForm extends React.Component<Props, State> {\n    static defaultProps = {\n        isOpen: false,\n    };\n\n    state = {\n        commentEditorState: createMentionSelectorState(this.props.tagged_message),\n    };\n\n    componentDidUpdate({ isOpen: prevIsOpen }: Props): void {\n        const { isOpen } = this.props;\n\n        if (isOpen !== prevIsOpen && !isOpen) {\n            this.setState({\n                commentEditorState: createMentionSelectorState(),\n            });\n        }\n    }\n\n    onFormValidSubmitHandler = (): void => {\n        const { createComment = noop, updateComment = noop, onSubmit, entityId } = this.props;\n\n        const { text, hasMention } = this.getFormattedCommentText();\n\n        if (!text) {\n            return;\n        }\n\n        if (entityId) {\n            updateComment({ id: entityId, text, hasMention });\n        } else {\n            createComment({ text, hasMention });\n        }\n\n        if (onSubmit) {\n            onSubmit();\n        }\n\n        this.setState({\n            commentEditorState: createMentionSelectorState(),\n        });\n    };\n\n    onMentionSelectorChangeHandler = (nextEditorState: any): void =>\n        this.setState({ commentEditorState: nextEditorState });\n\n    /**\n     * Formats the comment editor's text such that it will be accepted by the server.\n     *\n     * @returns {Object}\n     */\n    getFormattedCommentText = (): { hasMention: boolean, text: string } => {\n        const { commentEditorState } = this.state;\n\n        return getFormattedCommentText(commentEditorState);\n    };\n\n    render(): React.Node {\n        const {\n            className,\n            getMentionWithQuery,\n            intl: { formatMessage },\n            isDisabled,\n            isOpen,\n            mentionSelectorContacts = [],\n            contactsLoaded,\n            onCancel,\n            onFocus,\n            user,\n            isEditing,\n            tagged_message,\n            getAvatarUrl,\n            showTip = true,\n        } = this.props;\n        const { commentEditorState } = this.state;\n        const inputContainerClassNames = classNames('bcs-CommentForm', className, {\n            'bcs-is-open': isOpen,\n        });\n\n        return (\n            <Media className={inputContainerClassNames}>\n                {!isEditing && (\n                    <Media.Figure className=\"bcs-CommentForm-avatar\">\n                        <Avatar getAvatarUrl={getAvatarUrl} user={user} />\n                    </Media.Figure>\n                )}\n\n                <Media.Body className=\"bcs-CommentForm-body\" data-testid=\"bcs-CommentForm-body\">\n                    <Form onValidSubmit={this.onFormValidSubmitHandler}>\n                        <DraftJSMentionSelector\n                            className=\"bcs-CommentForm-input\"\n                            contacts={isOpen ? mentionSelectorContacts : []}\n                            contactsLoaded={contactsLoaded}\n                            editorState={commentEditorState}\n                            hideLabel\n                            isDisabled={isDisabled}\n                            isRequired={isOpen}\n                            name=\"commentText\"\n                            label={formatMessage(messages.commentLabel)}\n                            description={formatMessage(messages.atMentionTipDescription)}\n                            onChange={this.onMentionSelectorChangeHandler}\n                            onFocus={onFocus}\n                            onMention={getMentionWithQuery}\n                            placeholder={tagged_message ? undefined : formatMessage(messages.commentWrite)}\n                            validateOnBlur={false}\n                        />\n                        {showTip && (\n                            <aside className=\"bcs-CommentForm-tip\">\n                                <FormattedMessage {...messages.atMentionTip} />\n                            </aside>\n                        )}\n\n                        {isOpen && <CommentFormControls onCancel={onCancel} />}\n                    </Form>\n                </Media.Body>\n            </Media>\n        );\n    }\n}\n\n// For testing only\nexport { CommentForm as CommentFormUnwrapped };\nexport default injectIntl(CommentForm);\n"],"file":"CommentForm.js"}