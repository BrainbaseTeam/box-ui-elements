{"version":3,"sources":["../../../../../src/elements/content-sidebar/activity-feed/task-new/Task.js"],"names":["React","noop","flow","get","FormattedMessage","classNames","TetherComponent","withFeatureConsumer","getFeatureConfig","withAPIContext","Avatar","Media","MenuItem","ActivityCard","ActivityError","ActivityMessage","ActivityTimestamp","DeleteConfirmation","IconTaskApproval","IconTaskGeneral","IconTrash","IconPencil","UserLink","API","TASK_COMPLETION_RULE_ALL","TASK_NEW_APPROVED","TASK_NEW_REJECTED","TASK_NEW_NOT_STARTED","TASK_NEW_IN_PROGRESS","TASK_NEW_COMPLETED","TASK_TYPE_APPROVAL","PLACEHOLDER_USER","TASK_EDIT_MODE_EDIT","ACTIVITY_TARGETS","bdlGray80","TaskActions","TaskCompletionRuleIcon","TaskDueDate","TaskStatus","AssigneeList","TaskModal","TaskMultiFileIcon","commonMessages","messages","Task","loadCollabError","undefined","assignedToFull","props","assigned_to","modalError","isEditing","isLoading","isAssigneeListOpen","isConfirmingDelete","getAllTaskCollaborators","setState","id","onDelete","permissions","onModalClose","error","onSuccess","api","task_links","errorOccured","taskCollaboratorLoadErrorMessage","next_marker","fileId","getTaskCollaboratorsAPI","getTaskCollaborators","task","file","errorCallback","message","title","successCallback","taskId","assignmentId","taskStatus","onAssignmentUpdate","approverSelectorContacts","completion_rule","created_at","created_by","currentUser","due_at","features","getApproverWithQuery","getAvatarUrl","getUserProfileUrl","isPending","description","onEdit","onView","status","task_type","translatedTaggedMessage","translations","state","inlineError","assignments","entries","currentUserAssignment","find","target","createdByUser","createdAtTimestamp","Date","getTime","isTaskCompleted","isCreator","isMultiFile","length","shouldShowActions","can_update","TaskTypeIcon","isMenuVisible","can_delete","to","attachment","TASK_OPTIONS","TASK_OPTIONS_EDIT","handleEditClick","taskEditMenuItem","TASK_OPTIONS_DELETE","handleDeleteClick","taskDeleteMenuItem","taskDeletePrompt","handleDeleteCancel","handleDeleteConfirm","PROFILE","handleAssigneeListCollapse","handleAssigneeListExpand","handleTaskAction","feedbackUrl","handleEditSubmitError","handleEditModalClose","approvers","completionRule","createTask","editTask","dueDate","Component","TaskComponent"],"mappings":"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","sourcesContent":["// @flow\nimport * as React from 'react';\nimport noop from 'lodash/noop';\nimport flow from 'lodash/flow';\nimport get from 'lodash/get';\nimport { FormattedMessage } from 'react-intl';\nimport classNames from 'classnames';\nimport TetherComponent from 'react-tether';\nimport { withFeatureConsumer, getFeatureConfig } from '../../../common/feature-checking';\nimport { withAPIContext } from '../../../common/api-context';\nimport Avatar from '../Avatar';\nimport Media from '../../../../components/media';\nimport { MenuItem } from '../../../../components/menu';\nimport ActivityCard from '../ActivityCard';\nimport ActivityError from '../common/activity-error';\nimport ActivityMessage from '../common/activity-message';\nimport ActivityTimestamp from '../common/activity-timestamp';\nimport DeleteConfirmation from '../common/delete-confirmation';\nimport IconTaskApproval from '../../../../icons/two-toned/IconTaskApproval';\nimport IconTaskGeneral from '../../../../icons/two-toned/IconTaskGeneral';\nimport IconTrash from '../../../../icons/general/IconTrash';\nimport IconPencil from '../../../../icons/general/IconPencil';\nimport UserLink from '../common/user-link';\nimport API from '../../../../api/APIFactory';\nimport {\n    TASK_COMPLETION_RULE_ALL,\n    TASK_NEW_APPROVED,\n    TASK_NEW_REJECTED,\n    TASK_NEW_NOT_STARTED,\n    TASK_NEW_IN_PROGRESS,\n    TASK_NEW_COMPLETED,\n    TASK_TYPE_APPROVAL,\n    PLACEHOLDER_USER,\n    TASK_EDIT_MODE_EDIT,\n} from '../../../../constants';\nimport type { TaskAssigneeCollection, TaskNew } from '../../../../common/types/tasks';\nimport { ACTIVITY_TARGETS } from '../../../common/interactionTargets';\nimport { bdlGray80 } from '../../../../styles/variables';\nimport TaskActions from './TaskActions';\nimport TaskCompletionRuleIcon from './TaskCompletionRuleIcon';\nimport TaskDueDate from './TaskDueDate';\nimport TaskStatus from './TaskStatus';\nimport AssigneeList from './AssigneeList';\nimport TaskModal from '../../TaskModal';\nimport TaskMultiFileIcon from './TaskMultiFileIcon';\nimport commonMessages from '../../../common/messages';\nimport messages from './messages';\nimport type { GetAvatarUrlCallback, GetProfileUrlCallback } from '../../../common/flowTypes';\nimport type { ElementsXhrError } from '../../../../common/types/api';\nimport type { SelectorItems, User } from '../../../../common/types/core';\nimport type { ActionItemError } from '../../../../common/types/feed';\nimport type { Translations } from '../../flowTypes';\nimport type { FeatureConfig } from '../../../common/feature-checking';\n\nimport './Task.scss';\n\ntype Props = {|\n    ...TaskNew,\n    api: API,\n    approverSelectorContacts: SelectorItems<>,\n    currentUser: User,\n    error?: ActionItemError,\n    features?: FeatureConfig,\n    getApproverWithQuery?: Function,\n    getAvatarUrl: GetAvatarUrlCallback,\n    getMentionWithQuery?: Function,\n    getUserProfileUrl?: GetProfileUrlCallback,\n    isPending?: boolean,\n    onAssignmentUpdate: Function,\n    onDelete?: Function,\n    onEdit?: Function,\n    onModalClose?: Function,\n    onView?: Function,\n    translatedTaggedMessage?: string,\n    translations?: Translations,\n|};\n\ntype State = {\n    // the complete list of assignees (when task.assigned_to is truncated)\n    assignedToFull: TaskAssigneeCollection,\n    isAssigneeListOpen: boolean,\n    isConfirmingDelete: boolean,\n    isEditing: boolean,\n    isLoading: boolean,\n    loadCollabError: ?ActionItemError,\n    modalError: ?ElementsXhrError,\n};\n\nclass Task extends React.Component<Props, State> {\n    static defaultProps = {\n        completion_rule: TASK_COMPLETION_RULE_ALL,\n    };\n\n    state = {\n        loadCollabError: undefined,\n        assignedToFull: this.props.assigned_to,\n        modalError: undefined,\n        isEditing: false,\n        isLoading: false,\n        isAssigneeListOpen: false,\n        isConfirmingDelete: false,\n    };\n\n    handleAssigneeListExpand = () => {\n        this.getAllTaskCollaborators(() => {\n            this.setState({ isAssigneeListOpen: true });\n        });\n    };\n\n    handleAssigneeListCollapse = () => {\n        this.setState({ isAssigneeListOpen: false });\n    };\n\n    handleEditClick = () => {\n        this.getAllTaskCollaborators(() => {\n            this.setState({ isEditing: true });\n        });\n    };\n\n    handleDeleteClick = () => {\n        this.setState({ isConfirmingDelete: true });\n    };\n\n    handleDeleteConfirm = (): void => {\n        const { id, onDelete, permissions } = this.props;\n\n        if (onDelete) {\n            onDelete({ id, permissions });\n        }\n    };\n\n    handleDeleteCancel = (): void => {\n        this.setState({ isConfirmingDelete: false });\n    };\n\n    handleEditModalClose = () => {\n        const { onModalClose } = this.props;\n        this.setState({ isEditing: false, modalError: undefined });\n\n        if (onModalClose) {\n            onModalClose();\n        }\n    };\n\n    handleEditSubmitError = (error: ElementsXhrError) => {\n        this.setState({ modalError: error });\n    };\n\n    getAllTaskCollaborators = (onSuccess: () => any) => {\n        const { id, api, task_links, assigned_to } = this.props;\n        const { errorOccured } = commonMessages;\n        const { taskCollaboratorLoadErrorMessage } = messages;\n\n        // skip fetch when there are no additional collaborators\n        if (!assigned_to.next_marker) {\n            this.setState({ assignedToFull: assigned_to });\n            onSuccess();\n            return;\n        }\n\n        // fileid is required for api calls, check for presence\n        const fileId = get(task_links, 'entries[0].target.id');\n        if (!fileId) {\n            return;\n        }\n\n        this.setState({ isLoading: true });\n        api.getTaskCollaboratorsAPI(false).getTaskCollaborators({\n            task: { id },\n            file: { id: fileId },\n            errorCallback: () => {\n                this.setState({\n                    isLoading: false,\n                    loadCollabError: {\n                        message: taskCollaboratorLoadErrorMessage,\n                        title: errorOccured,\n                    },\n                });\n            },\n            successCallback: assignedToFull => {\n                this.setState({ assignedToFull, isLoading: false });\n                onSuccess();\n            },\n        });\n    };\n\n    handleTaskAction = (taskId: string, assignmentId: string, taskStatus: string) => {\n        const { onAssignmentUpdate } = this.props;\n\n        this.setState({ isAssigneeListOpen: false });\n\n        onAssignmentUpdate(taskId, assignmentId, taskStatus);\n    };\n\n    render() {\n        const {\n            approverSelectorContacts,\n            assigned_to,\n            completion_rule,\n            created_at,\n            created_by,\n            currentUser,\n            due_at,\n            error,\n            features,\n            getApproverWithQuery,\n            getAvatarUrl,\n            getUserProfileUrl,\n            id,\n            isPending,\n            description,\n            onEdit,\n            onView,\n            permissions,\n            status,\n            task_links,\n            task_type,\n            translatedTaggedMessage,\n            translations,\n        } = this.props;\n\n        const {\n            assignedToFull,\n            modalError,\n            isEditing,\n            isLoading,\n            loadCollabError,\n            isAssigneeListOpen,\n            isConfirmingDelete,\n        } = this.state;\n\n        const inlineError = loadCollabError || error;\n\n        const assignments = assigned_to && assigned_to.entries;\n\n        const currentUserAssignment = assignments && assignments.find(({ target }) => target.id === currentUser.id);\n\n        const createdByUser = created_by.target || PLACEHOLDER_USER;\n\n        const createdAtTimestamp = new Date(created_at).getTime();\n\n        const isTaskCompleted = !(status === TASK_NEW_NOT_STARTED || status === TASK_NEW_IN_PROGRESS);\n\n        const isCreator = created_by.target.id === currentUser.id;\n\n        const isMultiFile = task_links.entries.length > 1;\n\n        let shouldShowActions;\n        if (isTaskCompleted) {\n            shouldShowActions = false;\n        } else if (isMultiFile && isCreator) {\n            shouldShowActions = true;\n        } else {\n            shouldShowActions =\n                currentUserAssignment &&\n                currentUserAssignment.permissions &&\n                currentUserAssignment.permissions.can_update &&\n                currentUserAssignment.status === TASK_NEW_NOT_STARTED;\n        }\n\n        const TaskTypeIcon = task_type === TASK_TYPE_APPROVAL ? IconTaskApproval : IconTaskGeneral;\n\n        const isMenuVisible = (permissions.can_delete || permissions.can_update) && !isPending;\n\n        return (\n            <ActivityCard\n                className=\"bcs-Task\"\n                data-resin-feature=\"tasks\"\n                data-resin-taskid={id}\n                data-resin-tasktype={task_type}\n                data-resin-numassignees={assignments && assignments.length}\n            >\n                {/* $FlowFixMe */}\n                {inlineError ? <ActivityError {...inlineError} /> : null}\n                <Media\n                    className={classNames('bcs-Task-media', {\n                        'bcs-is-pending': isPending || isLoading,\n                    })}\n                    data-testid=\"task-card\"\n                >\n                    <Media.Figure className=\"bcs-Task-avatar\">\n                        <Avatar getAvatarUrl={getAvatarUrl} user={createdByUser} />\n                        <TaskTypeIcon width={20} height={20} className=\"bcs-Task-avatarBadge\" />\n                    </Media.Figure>\n                    <Media.Body>\n                        {isMenuVisible && (\n                            <TetherComponent\n                                attachment=\"top right\"\n                                className=\"bcs-Task-deleteConfirmationModal\"\n                                constraints={[{ to: 'scrollParent', attachment: 'together' }]}\n                                targetAttachment=\"bottom right\"\n                            >\n                                <Media.Menu\n                                    isDisabled={isConfirmingDelete}\n                                    data-testid=\"task-actions-menu\"\n                                    menuProps={{\n                                        'data-resin-component': ACTIVITY_TARGETS.TASK_OPTIONS,\n                                    }}\n                                >\n                                    {permissions.can_update && (\n                                        <MenuItem\n                                            data-resin-target={ACTIVITY_TARGETS.TASK_OPTIONS_EDIT}\n                                            data-testid=\"edit-task\"\n                                            onClick={this.handleEditClick}\n                                        >\n                                            <IconPencil color={bdlGray80} />\n                                            <FormattedMessage {...messages.taskEditMenuItem} />\n                                        </MenuItem>\n                                    )}\n                                    {permissions.can_delete && (\n                                        <MenuItem\n                                            data-resin-target={ACTIVITY_TARGETS.TASK_OPTIONS_DELETE}\n                                            data-testid=\"delete-task\"\n                                            onClick={this.handleDeleteClick}\n                                        >\n                                            <IconTrash color={bdlGray80} />\n                                            <FormattedMessage {...messages.taskDeleteMenuItem} />\n                                        </MenuItem>\n                                    )}\n                                </Media.Menu>\n                                {isConfirmingDelete && (\n                                    <DeleteConfirmation\n                                        data-resin-component={ACTIVITY_TARGETS.TASK_OPTIONS}\n                                        isOpen={isConfirmingDelete}\n                                        message={messages.taskDeletePrompt}\n                                        onDeleteCancel={this.handleDeleteCancel}\n                                        onDeleteConfirm={this.handleDeleteConfirm}\n                                    />\n                                )}\n                            </TetherComponent>\n                        )}\n                        <div className=\"bcs-Task-headline\">\n                            <UserLink\n                                {...createdByUser}\n                                data-resin-target={ACTIVITY_TARGETS.PROFILE}\n                                getUserProfileUrl={getUserProfileUrl}\n                            />\n                        </div>\n                        <div>\n                            <ActivityTimestamp date={createdAtTimestamp} />\n                        </div>\n                        <div className=\"bcs-Task-status\">\n                            <TaskStatus status={status} />\n                            <TaskMultiFileIcon isMultiFile={isMultiFile} />\n                            <TaskCompletionRuleIcon completionRule={completion_rule} />\n                        </div>\n                        <div className=\"bcs-Task-dueDate\">\n                            {!!due_at && <TaskDueDate dueDate={due_at} status={status} />}\n                        </div>\n                        <div>\n                            <ActivityMessage\n                                id={id}\n                                tagged_message={description}\n                                translatedTaggedMessage={translatedTaggedMessage}\n                                {...translations}\n                                translationFailed={error ? true : null}\n                                getUserProfileUrl={getUserProfileUrl}\n                            />\n                        </div>\n                        <div className=\"bcs-Task-assigneeListContainer\">\n                            <AssigneeList\n                                isOpen={isAssigneeListOpen}\n                                onCollapse={this.handleAssigneeListCollapse}\n                                onExpand={this.handleAssigneeListExpand}\n                                getAvatarUrl={getAvatarUrl}\n                                initialAssigneeCount={3}\n                                users={isAssigneeListOpen ? assignedToFull : assigned_to}\n                            />\n                        </div>\n                        {shouldShowActions && (\n                            <div className=\"bcs-Task-actionsContainer\" data-testid=\"action-container\">\n                                <TaskActions\n                                    isMultiFile={isMultiFile}\n                                    taskType={task_type}\n                                    onTaskApproval={\n                                        isPending\n                                            ? noop\n                                            : () =>\n                                                  // $FlowFixMe checked by shouldShowActions\n                                                  this.handleTaskAction(id, currentUserAssignment.id, TASK_NEW_APPROVED)\n                                    }\n                                    onTaskReject={\n                                        isPending\n                                            ? noop\n                                            : () =>\n                                                  // $FlowFixMe checked by shouldShowActions\n                                                  this.handleTaskAction(id, currentUserAssignment.id, TASK_NEW_REJECTED)\n                                    }\n                                    onTaskComplete={\n                                        isPending\n                                            ? noop\n                                            : () =>\n                                                  this.handleTaskAction(\n                                                      id,\n                                                      // $FlowFixMe checked by shouldShowActions\n                                                      currentUserAssignment.id,\n                                                      TASK_NEW_COMPLETED,\n                                                  )\n                                    }\n                                    onTaskView={onView && (() => onView(id, isCreator))}\n                                />\n                            </div>\n                        )}\n                    </Media.Body>\n                </Media>\n                <TaskModal\n                    editMode={TASK_EDIT_MODE_EDIT}\n                    error={modalError}\n                    feedbackUrl={getFeatureConfig(features, 'activityFeed.tasks').feedbackUrl || ''}\n                    onSubmitError={this.handleEditSubmitError}\n                    onSubmitSuccess={this.handleEditModalClose}\n                    onModalClose={this.handleEditModalClose}\n                    isTaskFormOpen={isEditing}\n                    taskFormProps={{\n                        id,\n                        approvers: assignedToFull.entries,\n                        approverSelectorContacts,\n                        completionRule: completion_rule,\n                        getApproverWithQuery,\n                        getAvatarUrl,\n                        createTask: () => {},\n                        editTask: onEdit,\n                        dueDate: due_at,\n                        message: description,\n                    }}\n                    taskType={task_type}\n                />\n            </ActivityCard>\n        );\n    }\n}\n\nexport { Task as TaskComponent };\nexport default flow([withFeatureConsumer, withAPIContext])(Task);\n"],"file":"Task.js"}