{"version":3,"sources":["../../../../../src/elements/content-sidebar/activity-feed/task-new/AssigneeDetails.js"],"names":["React","FormattedMessage","classNames","ReadableTime","commonMessages","messages","TASK_NEW_APPROVED","TASK_NEW_REJECTED","TASK_NEW_COMPLETED","TASK_NEW_NOT_STARTED","statusMessages","tasksFeedStatusApproved","tasksFeedStatusRejected","tasksFeedStatusCompleted","Datestamp","date","Date","getTime","AvatarDetails","memo","user","status","completedAt","className","statusMessage","name","priorCollaborator","dateTime"],"mappings":";;;;;;AACA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,gBAAT,QAAiC,YAAjC;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,OAAOC,YAAP,MAAyB,0CAAzB;AACA,OAAOC,cAAP,MAA2B,0BAA3B;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,SAASC,iBAAT,EAA4BC,iBAA5B,EAA+CC,kBAA/C,EAAmEC,oBAAnE,QAA+F,uBAA/F;AAGA,OAAO,wBAAP;AAEA,IAAMC,cAAc,2DACfJ,iBADe,EACKD,QAAQ,CAACM,uBADd,oCAEfJ,iBAFe,EAEKF,QAAQ,CAACO,uBAFd,oCAGfJ,kBAHe,EAGMH,QAAQ,CAACQ,wBAHf,oCAIfJ,oBAJe,EAIQ,IAJR,mBAApB;;AAOA,IAAMK,SAAS,GAAG,SAAZA,SAAY,OAAwC;AAAA,MAArCC,IAAqC,QAArCA,IAAqC;AACtD,sBAAO,oBAAC,YAAD;AAAc,IAAA,SAAS,EAAE,IAAIC,IAAJ,CAASD,IAAT,EAAeE,OAAf,EAAzB;AAAmD,IAAA,cAAc,MAAjE;AAAkE,IAAA,iBAAiB,EAAE;AAArF,IAAP;AACH,CAFD;;AAWA,IAAMC,aAAa,gBAAGlB,KAAK,CAACmB,IAAN,CAAkB,iBAAqD;AAAA,MAAlDC,IAAkD,SAAlDA,IAAkD;AAAA,MAA5CC,MAA4C,SAA5CA,MAA4C;AAAA,MAApCC,WAAoC,SAApCA,WAAoC;AAAA,MAAvBC,SAAuB,SAAvBA,SAAuB;AACzF,MAAMC,aAAa,GAAGd,cAAc,CAACW,MAAD,CAAd,IAA0B,IAAhD;AACA,sBACI;AAAK,IAAA,SAAS,EAAEnB,UAAU,CAACqB,SAAD,EAAY,qBAAZ;AAA1B,kBACI;AAAK,IAAA,SAAS,EAAC;AAAf,KACKH,IAAI,CAACK,IAAL,GAAYL,IAAI,CAACK,IAAjB,gBAAwB,oBAAC,gBAAD,EAAsBrB,cAAc,CAACsB,iBAArC,CAD7B,CADJ,EAIKF,aAAa,IAAIF,WAAjB,iBACG;AAAK,IAAA,SAAS,EAAC;AAAf,kBACI,oBAAC,gBAAD,eAAsBE,aAAtB;AAAqC,IAAA,MAAM,EAAE;AAAEG,MAAAA,QAAQ,eAAE,oBAAC,SAAD;AAAW,QAAA,IAAI,EAAEL;AAAjB;AAAZ;AAA7C,KADJ,CALR,CADJ;AAYH,CAdqB,CAAtB;AAgBA,eAAeJ,aAAf","sourcesContent":["// @flow strict\nimport * as React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport classNames from 'classnames';\nimport ReadableTime from '../../../../components/time/ReadableTime';\nimport commonMessages from '../../../common/messages';\nimport messages from './messages';\nimport { TASK_NEW_APPROVED, TASK_NEW_REJECTED, TASK_NEW_COMPLETED, TASK_NEW_NOT_STARTED } from '../../../../constants';\nimport type { ISODate } from '../../../../common/types/core';\n\nimport './AssigneeDetails.scss';\n\nconst statusMessages = {\n    [TASK_NEW_APPROVED]: messages.tasksFeedStatusApproved,\n    [TASK_NEW_REJECTED]: messages.tasksFeedStatusRejected,\n    [TASK_NEW_COMPLETED]: messages.tasksFeedStatusCompleted,\n    [TASK_NEW_NOT_STARTED]: null,\n};\n\nconst Datestamp = ({ date }: { date: ISODate | Date }) => {\n    return <ReadableTime timestamp={new Date(date).getTime()} alwaysShowTime relativeThreshold={0} />;\n};\n\ntype Props = {\n    className?: string,\n    completedAt?: ?ISODate | Date,\n    status: $Keys<typeof statusMessages>,\n    user: { name: string },\n};\n\nconst AvatarDetails = React.memo<Props>(({ user, status, completedAt, className }: Props) => {\n    const statusMessage = statusMessages[status] || null;\n    return (\n        <div className={classNames(className, 'bcs-AssigneeDetails')}>\n            <div className=\"bcs-AssigneeDetails-name\">\n                {user.name ? user.name : <FormattedMessage {...commonMessages.priorCollaborator} />}\n            </div>\n            {statusMessage && completedAt && (\n                <div className=\"bcs-AssigneeDetails-status\">\n                    <FormattedMessage {...statusMessage} values={{ dateTime: <Datestamp date={completedAt} /> }} />\n                </div>\n            )}\n        </div>\n    );\n});\n\nexport default AvatarDetails;\n"],"file":"AssigneeDetails.js"}