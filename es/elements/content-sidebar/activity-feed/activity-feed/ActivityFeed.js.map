{"version":3,"sources":["../../../../../src/elements/content-sidebar/activity-feed/activity-feed/ActivityFeed.js"],"names":["React","getProp","noop","FormattedMessage","classNames","ActiveState","CommentForm","EmptyState","InlineError","LoadingIndicator","messages","collapseFeedState","ItemTypes","PERMISSION_CAN_CREATE_ANNOTATIONS","scrollIntoView","ActivityFeed","isInputOpen","createRef","props","feedItems","undefined","length","type","fileVersion","prevCurrentUser","prevFeedItems","currentUser","feedContainer","scrollTop","scrollHeight","event","nativeEvent","stopImmediatePropagation","resetFeedScroll","setState","text","hasMention","onCommentCreate","commentFormSubmitHandler","assignees","dueAt","onTaskCreate","data","versionInfoHandler","onVersionHistoryClick","prevProps","prevState","prevActiveFeedEntryId","activeFeedEntryId","currFeedItems","prevIsInputOpen","currIsInputOpen","state","hasLoaded","hasMoreItems","didLoadFeedItems","hasInputOpened","hasActiveFeedEntryIdChanged","scrollToActiveFeedItemOrErrorMessage","activeFeedItemRef","current","activeFeedEntryType","activityFeedError","approverSelectorContacts","file","getApproverWithQuery","getAvatarUrl","getMentionWithQuery","getUserProfileUrl","isDisabled","mentionSelectorContacts","contactsLoaded","onAnnotationDelete","onAnnotationEdit","onAnnotationSelect","onAppActivityDelete","onCommentDelete","onCommentUpdate","onTaskAssignmentUpdate","onTaskDelete","onTaskModalClose","onTaskUpdate","onTaskView","translations","hasAnnotationCreatePermission","hasCommentPermission","showCommentForm","isEmpty","isLoading","activeEntry","Array","isArray","find","id","errorMessageByEntryType","annotation","annotationMissingError","comment","commentMissingError","task","taskMissingError","inlineFeedItemErrorMessage","isInlineFeedItemErrorVisible","currentFileVersionId","onKeyDown","ref","openVersionHistoryPopup","feedInlineErrorTitle","commentFormCancelHandler","commentFormFocusHandler","Component"],"mappings":"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","sourcesContent":["/**\n * @flow\n * @file Component for Activity feed\n */\n\nimport * as React from 'react';\nimport getProp from 'lodash/get';\nimport noop from 'lodash/noop';\nimport { FormattedMessage } from 'react-intl';\nimport classNames from 'classnames';\nimport ActiveState from './ActiveState';\nimport CommentForm from '../comment-form';\nimport EmptyState from './EmptyState';\nimport InlineError from '../../../../components/inline-error/InlineError';\nimport LoadingIndicator from '../../../../components/loading-indicator/LoadingIndicator';\nimport messages from './messages';\nimport { collapseFeedState, ItemTypes } from './activityFeedUtils';\nimport { PERMISSION_CAN_CREATE_ANNOTATIONS } from '../../../../constants';\nimport { scrollIntoView } from '../../../../utils/dom';\nimport type { Annotation, AnnotationPermission, FocusableFeedItemType, FeedItems } from '../../../../common/types/feed';\nimport type { SelectorItems, User, GroupMini, BoxItem } from '../../../../common/types/core';\nimport type { GetAvatarUrlCallback, GetProfileUrlCallback } from '../../../common/flowTypes';\nimport type { Translations, Errors } from '../../flowTypes';\nimport './ActivityFeed.scss';\n\ntype Props = {\n    activeFeedEntryId?: string,\n    activeFeedEntryType?: FocusableFeedItemType,\n    activityFeedError: ?Errors,\n    approverSelectorContacts?: SelectorItems<User | GroupMini>,\n    contactsLoaded?: boolean,\n    currentUser?: User,\n    feedItems?: FeedItems,\n    file: BoxItem,\n    getApproverWithQuery?: Function,\n    getAvatarUrl: GetAvatarUrlCallback,\n    getMentionWithQuery?: Function,\n    getUserProfileUrl?: GetProfileUrlCallback,\n    isDisabled?: boolean,\n    mentionSelectorContacts?: SelectorItems<User>,\n    onAnnotationDelete?: ({ id: string, permissions: AnnotationPermission }) => void,\n    onAnnotationEdit?: (id: string, text: string, permissions: AnnotationPermission) => void,\n    onAnnotationSelect?: (annotation: Annotation) => void,\n    onAppActivityDelete?: Function,\n    onCommentCreate?: Function,\n    onCommentDelete?: Function,\n    onCommentUpdate?: Function,\n    onTaskAssignmentUpdate?: Function,\n    onTaskCreate?: Function,\n    onTaskDelete?: Function,\n    onTaskModalClose?: Function,\n    onTaskUpdate?: Function,\n    onTaskView?: Function,\n    onVersionHistoryClick?: Function,\n    translations?: Translations,\n};\n\ntype State = {\n    isInputOpen: boolean,\n};\n\nclass ActivityFeed extends React.Component<Props, State> {\n    state = {\n        isInputOpen: false,\n    };\n\n    activeFeedItemRef = React.createRef<null | HTMLElement>();\n\n    feedContainer: null | HTMLElement;\n\n    componentDidMount() {\n        this.resetFeedScroll();\n    }\n\n    componentDidUpdate(prevProps: Props, prevState: State) {\n        const {\n            activeFeedEntryId: prevActiveFeedEntryId,\n            currentUser: prevCurrentUser,\n            feedItems: prevFeedItems,\n        } = prevProps;\n        const { feedItems: currFeedItems, activeFeedEntryId } = this.props;\n        const { isInputOpen: prevIsInputOpen } = prevState;\n        const { isInputOpen: currIsInputOpen } = this.state;\n\n        const hasLoaded = this.hasLoaded(prevCurrentUser, prevFeedItems);\n        const hasMoreItems = prevFeedItems && currFeedItems && prevFeedItems.length < currFeedItems.length;\n        const didLoadFeedItems = prevFeedItems === undefined && currFeedItems !== undefined;\n        const hasInputOpened = currIsInputOpen !== prevIsInputOpen;\n        const hasActiveFeedEntryIdChanged = activeFeedEntryId !== prevActiveFeedEntryId;\n\n        if ((hasLoaded || hasMoreItems || didLoadFeedItems || hasInputOpened) && activeFeedEntryId === undefined) {\n            this.resetFeedScroll();\n        }\n\n        if (didLoadFeedItems || hasActiveFeedEntryIdChanged) {\n            this.scrollToActiveFeedItemOrErrorMessage();\n        }\n    }\n\n    scrollToActiveFeedItemOrErrorMessage() {\n        const { current: activeFeedItemRef } = this.activeFeedItemRef;\n        const { activeFeedEntryId } = this.props;\n\n        // if there is no active item, do not scroll\n        if (!activeFeedEntryId) {\n            return;\n        }\n\n        // if there was supposed to be an active feed item but the feed item does not exist\n        // scroll to the bottom to show the inline error message\n        if (activeFeedItemRef === null) {\n            this.resetFeedScroll();\n            return;\n        }\n\n        scrollIntoView(activeFeedItemRef);\n    }\n\n    /**\n     * Detects whether or not the empty state should be shown.\n     * @param {object} currentUser - The user that is logged into the account\n     * @param {object} feedItems - Items in the activity feed\n     */\n    isEmpty = ({ feedItems }: Props = this.props): boolean => {\n        if (feedItems === undefined) {\n            return false;\n        }\n        return feedItems.length === 0 || (feedItems.length === 1 && feedItems[0].type === ItemTypes.fileVersion);\n    };\n\n    /**\n     * Determines whether currentUser and feedItems have loaded.\n     * @param prevCurrentUser - The previous value of the currentUser prop\n     * @param prevFeedItems - The previous value of the feedItems prop\n     * @returns {boolean}\n     */\n    hasLoaded = (prevCurrentUser?: User, prevFeedItems?: FeedItems): boolean => {\n        const { currentUser, feedItems } = this.props;\n        return currentUser !== undefined && feedItems !== undefined && (!prevCurrentUser || !prevFeedItems);\n    };\n\n    /**\n     * Scrolls the container to the bottom\n     */\n    resetFeedScroll = () => {\n        if (this.feedContainer) {\n            this.feedContainer.scrollTop = this.feedContainer.scrollHeight;\n        }\n    };\n\n    onKeyDown = (event: SyntheticKeyboardEvent<>): void => {\n        const { nativeEvent } = event;\n        nativeEvent.stopImmediatePropagation();\n    };\n\n    commentFormFocusHandler = (): void => {\n        this.resetFeedScroll();\n        this.setState({ isInputOpen: true });\n    };\n\n    commentFormCancelHandler = (): void => this.setState({ isInputOpen: false });\n\n    commentFormSubmitHandler = (): void => this.setState({ isInputOpen: false });\n\n    onCommentCreate = ({ text, hasMention }: { hasMention: boolean, text: string }) => {\n        const { onCommentCreate = noop } = this.props;\n        onCommentCreate(text, hasMention);\n        this.commentFormSubmitHandler();\n    };\n\n    /**\n     * Creates a task.\n     *\n     * @param {string} text - Task text\n     * @param {Array} assignees - List of assignees\n     * @param {number} dueAt - Task's due date\n     * @return {void}\n     */\n    onTaskCreate = ({ text, assignees, dueAt }: { assignees: SelectorItems<>, dueAt: string, text: string }): void => {\n        const { onTaskCreate = noop } = this.props;\n        onTaskCreate(text, assignees, dueAt);\n        this.commentFormSubmitHandler();\n    };\n\n    /**\n     * Invokes version history popup handler.\n     *\n     * @param {Object} data - Version history data\n     * @return {void}\n     */\n    openVersionHistoryPopup = (data: any): void => {\n        const versionInfoHandler = this.props.onVersionHistoryClick || noop;\n        versionInfoHandler(data);\n    };\n\n    render(): React.Node {\n        const {\n            activeFeedEntryId,\n            activeFeedEntryType,\n            activityFeedError,\n            approverSelectorContacts,\n            currentUser,\n            feedItems,\n            file,\n            getApproverWithQuery,\n            getAvatarUrl,\n            getMentionWithQuery,\n            getUserProfileUrl,\n            isDisabled,\n            mentionSelectorContacts,\n            contactsLoaded,\n            onAnnotationDelete,\n            onAnnotationEdit,\n            onAnnotationSelect,\n            onAppActivityDelete,\n            onCommentCreate,\n            onCommentDelete,\n            onCommentUpdate,\n            onTaskAssignmentUpdate,\n            onTaskDelete,\n            onTaskModalClose,\n            onTaskUpdate,\n            onTaskView,\n            onVersionHistoryClick,\n            translations,\n        } = this.props;\n        const { isInputOpen } = this.state;\n        const hasAnnotationCreatePermission = getProp(file, ['permissions', PERMISSION_CAN_CREATE_ANNOTATIONS], false);\n        const hasCommentPermission = getProp(file, 'permissions.can_comment', false);\n        const showCommentForm = !!(currentUser && hasCommentPermission && onCommentCreate && feedItems);\n\n        const isEmpty = this.isEmpty(this.props);\n        const isLoading = !this.hasLoaded();\n\n        const activeEntry =\n            Array.isArray(feedItems) &&\n            feedItems.find(({ id, type }) => id === activeFeedEntryId && type === activeFeedEntryType);\n\n        const errorMessageByEntryType = {\n            annotation: messages.annotationMissingError,\n            comment: messages.commentMissingError,\n            task: messages.taskMissingError,\n        };\n\n        const inlineFeedItemErrorMessage = activeFeedEntryType\n            ? errorMessageByEntryType[activeFeedEntryType]\n            : undefined;\n\n        const isInlineFeedItemErrorVisible = !isLoading && activeFeedEntryType && !activeEntry;\n        const currentFileVersionId = getProp(file, 'file_version.id');\n\n        return (\n            // eslint-disable-next-line\n            <div className=\"bcs-activity-feed\" data-testid=\"activityfeed\" onKeyDown={this.onKeyDown}>\n                <div\n                    ref={ref => {\n                        this.feedContainer = ref;\n                    }}\n                    className=\"bcs-activity-feed-items-container\"\n                >\n                    {isLoading && (\n                        <div className=\"bcs-activity-feed-loading-state\">\n                            <LoadingIndicator />\n                        </div>\n                    )}\n\n                    {isEmpty && !isLoading && (\n                        <EmptyState\n                            showAnnotationMessage={hasAnnotationCreatePermission}\n                            showCommentMessage={showCommentForm}\n                        />\n                    )}\n                    {!isEmpty && !isLoading && (\n                        <ActiveState\n                            {...activityFeedError}\n                            items={collapseFeedState(feedItems)}\n                            isDisabled={isDisabled}\n                            currentUser={currentUser}\n                            currentFileVersionId={currentFileVersionId}\n                            onTaskAssignmentUpdate={onTaskAssignmentUpdate}\n                            onAnnotationDelete={onAnnotationDelete}\n                            onAnnotationEdit={onAnnotationEdit}\n                            onAnnotationSelect={onAnnotationSelect}\n                            onAppActivityDelete={onAppActivityDelete}\n                            onCommentDelete={hasCommentPermission ? onCommentDelete : noop}\n                            onCommentEdit={hasCommentPermission ? onCommentUpdate : noop}\n                            onTaskDelete={onTaskDelete}\n                            onTaskEdit={onTaskUpdate}\n                            onTaskView={onTaskView}\n                            onTaskModalClose={onTaskModalClose}\n                            onVersionInfo={onVersionHistoryClick ? this.openVersionHistoryPopup : null}\n                            translations={translations}\n                            getAvatarUrl={getAvatarUrl}\n                            getUserProfileUrl={getUserProfileUrl}\n                            mentionSelectorContacts={mentionSelectorContacts}\n                            getMentionWithQuery={getMentionWithQuery}\n                            approverSelectorContacts={approverSelectorContacts}\n                            getApproverWithQuery={getApproverWithQuery}\n                            activeFeedEntryId={activeFeedEntryId}\n                            activeFeedEntryType={activeFeedEntryType}\n                            activeFeedItemRef={this.activeFeedItemRef}\n                        />\n                    )}\n                    {isInlineFeedItemErrorVisible && inlineFeedItemErrorMessage && (\n                        <InlineError\n                            title={<FormattedMessage {...messages.feedInlineErrorTitle} />}\n                            className=\"bcs-feedItemInlineError\"\n                        >\n                            <FormattedMessage {...inlineFeedItemErrorMessage} />\n                        </InlineError>\n                    )}\n                </div>\n\n                {showCommentForm ? (\n                    <CommentForm\n                        onSubmit={this.resetFeedScroll}\n                        isDisabled={isDisabled}\n                        mentionSelectorContacts={mentionSelectorContacts}\n                        contactsLoaded={contactsLoaded}\n                        className={classNames('bcs-activity-feed-comment-input', {\n                            'bcs-is-disabled': isDisabled,\n                        })}\n                        createComment={hasCommentPermission ? this.onCommentCreate : noop}\n                        getMentionWithQuery={getMentionWithQuery}\n                        isOpen={isInputOpen}\n                        // $FlowFixMe\n                        user={currentUser}\n                        onCancel={this.commentFormCancelHandler}\n                        onFocus={this.commentFormFocusHandler}\n                        getAvatarUrl={getAvatarUrl}\n                    />\n                ) : null}\n            </div>\n        );\n    }\n}\n\nexport default ActivityFeed;\n"],"file":"ActivityFeed.js"}