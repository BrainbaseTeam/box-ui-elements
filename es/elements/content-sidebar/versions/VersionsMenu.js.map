{"version":3,"sources":["../../../../src/elements/content-sidebar/versions/VersionsMenu.js"],"names":["React","last","injectIntl","util","messages","VersionsGroup","getHeading","intl","version","createdAt","created_at","currentDate","Date","currentDay","getDay","currentSunday","getDate","createdAtDate","convertToDate","heading","isToday","formatMessage","versionsToday","isYesterday","versionsYesterday","isCurrentYear","formatDate","year","isCurrentMonth","month","versionsThisMonth","versionsPriorWeek","weekday","VersionsMenu","memo","versions","rest","currentId","id","versionGroups","reduce","groups","currentGroup","groupHeading","push","groupVersions","map"],"mappings":"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","sourcesContent":["/**\n * @flow\n * @file Versions Menu component\n * @author Box\n */\n\nimport React from 'react';\nimport last from 'lodash/last';\nimport { injectIntl } from 'react-intl';\nimport * as util from '../../../utils/datetime';\nimport messages from './messages';\nimport VersionsGroup from './VersionsGroup';\nimport type { BoxItemVersion } from '../../../common/types/core';\nimport './VersionsMenu.scss';\n\ntype Props = {\n    fileId: string,\n    intl: any,\n    versionCount: number,\n    versionLimit: number,\n    versions: Array<BoxItemVersion>,\n};\n\ntype VersionGroups = Array<{ groupHeading: string, groupVersions: Array<BoxItemVersion> }>;\n\nconst getHeading = ({ intl, version }: { intl: any, version: BoxItemVersion }): string => {\n    const { created_at: createdAt } = version;\n    const currentDate = new Date();\n    const currentDay = currentDate.getDay();\n    const currentSunday = currentDate.getDate() - currentDay;\n    const createdAtDate = util.convertToDate(createdAt);\n    let heading;\n\n    if (util.isToday(createdAtDate)) {\n        heading = intl.formatMessage(messages.versionsToday); // Today\n    } else if (util.isYesterday(createdAtDate)) {\n        heading = intl.formatMessage(messages.versionsYesterday); // Yesterday\n    } else if (!util.isCurrentYear(createdAtDate)) {\n        heading = intl.formatDate(createdAt, { year: 'numeric' }); // 2018\n    } else if (!util.isCurrentMonth(createdAtDate)) {\n        heading = intl.formatDate(createdAt, { month: 'long' }); // January\n    } else if (createdAtDate.getDate() <= currentSunday - 7) {\n        heading = intl.formatMessage(messages.versionsThisMonth); // This Month\n    } else if (createdAtDate.getDate() <= currentSunday) {\n        heading = intl.formatMessage(messages.versionsPriorWeek); // Last Week\n    } else {\n        heading = intl.formatDate(createdAt, { weekday: 'long' }); // Monday\n    }\n\n    return heading;\n};\n\nconst VersionsMenu = React.memo<Props>(({ intl, versions, ...rest }: Props) => {\n    const { id: currentId } = versions[0] || {};\n\n    // Build an ordered set of groups with headings based on the original order of the versions array\n    const versionGroups = versions.reduce((groups: VersionGroups, version: BoxItemVersion): VersionGroups => {\n        const currentGroup = last(groups);\n        const groupHeading = getHeading({ intl, version });\n\n        // Push a new group if there are no groups or if the heading has changed\n        if (!currentGroup || currentGroup.groupHeading !== groupHeading) {\n            groups.push({\n                groupHeading,\n                groupVersions: [],\n            });\n        }\n\n        // Push the sorted version to the newest group's versions collection\n        last(groups).groupVersions.push(version);\n        return groups;\n    }, []);\n\n    return (\n        <ul className=\"bcs-VersionsMenu\">\n            {versionGroups.map(({ groupHeading, groupVersions }) => (\n                <li className=\"bcs-VersionsMenu-item\" key={groupHeading}>\n                    <VersionsGroup currentId={currentId} heading={groupHeading} versions={groupVersions} {...rest} />\n                </li>\n            ))}\n        </ul>\n    );\n});\n\nexport default injectIntl(VersionsMenu);\n"],"file":"VersionsMenu.js"}