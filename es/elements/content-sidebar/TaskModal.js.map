{"version":3,"sources":["../../../src/elements/content-sidebar/TaskModal.js"],"names":["React","FormattedMessage","Modal","TaskForm","messages","TASK_EDIT_MODE_CREATE","TASK_TYPE_APPROVAL","TASK_TYPE_GENERAL","getMessageForModalTitle","taskType","mode","tasksCreateGeneralTaskFormTitle","tasksEditGeneralTaskFormTitle","tasksCreateApprovalTaskFormTitle","tasksEditApprovalTaskFormTitle","focusTargetSelector","TaskModal","props","editMode","error","onSubmitError","onSubmitSuccess","onModalClose","isTaskFormOpen","taskFormProps"],"mappings":";;AACA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,gBAAT,QAAiC,YAAjC;AAEA,OAAOC,KAAP,MAAkB,8BAAlB;AACA,OAAOC,QAAP,MAAqB,2BAArB;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,SAASC,qBAAT,EAAgCC,kBAAhC,EAAoDC,iBAApD,QAA6E,iBAA7E;;AAgBA,SAASC,uBAAT,CAAiCC,QAAjC,EAAqDC,IAArD,EAA4F;AACxF,UAAQD,QAAR;AACI,SAAKF,iBAAL;AACI,aAAOG,IAAI,KAAKL,qBAAT,GACDD,QAAQ,CAACO,+BADR,GAEDP,QAAQ,CAACQ,6BAFf;;AAGJ,SAAKN,kBAAL;AACA;AACI,aAAOI,IAAI,KAAKL,qBAAT,GACDD,QAAQ,CAACS,gCADR,GAEDT,QAAQ,CAACU,8BAFf;AAPR;AAWH;;AAED,IAAMC,mBAA2B,GAAG,yCAApC;;AAEA,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAACC,KAAD,EAA2B;AAAA,wBAUrCA,KAVqC,CAErCC,QAFqC;AAAA,MAErCA,QAFqC,gCAE1Bb,qBAF0B;AAAA,MAGrCc,KAHqC,GAUrCF,KAVqC,CAGrCE,KAHqC;AAAA,MAIrCC,aAJqC,GAUrCH,KAVqC,CAIrCG,aAJqC;AAAA,MAKrCC,eALqC,GAUrCJ,KAVqC,CAKrCI,eALqC;AAAA,MAMrCC,YANqC,GAUrCL,KAVqC,CAMrCK,YANqC;AAAA,MAOrCb,QAPqC,GAUrCQ,KAVqC,CAOrCR,QAPqC;AAAA,MAQrCc,cARqC,GAUrCN,KAVqC,CAQrCM,cARqC;AAAA,MASrCC,aATqC,GAUrCP,KAVqC,CASrCO,aATqC,EAWzC;;AACA,SACI,oBAAC,KAAD;AACI,IAAA,SAAS,EAAC,qBADd;AAEI,mBAAY,mBAFhB;AAGI,IAAA,oBAAoB,EAAET,mBAH1B;AAII,IAAA,MAAM,EAAEQ,cAJZ;AAKI,IAAA,cAAc,EAAED,YALpB;AAMI,IAAA,KAAK,EAAE,oBAAC,gBAAD,EAAsBd,uBAAuB,CAACC,QAAD,EAAWS,QAAX,CAA7C;AANX,KAQI;AAAK,IAAA,SAAS,EAAC;AAAf,KACI,oBAAC,QAAD;AACI,IAAA,QAAQ,EAAEA,QADd,CAEI;AAFJ;AAGI,IAAA,KAAK,EAAEC,KAHX;AAII,IAAA,QAAQ,EAAEG,YAJd;AAKI,IAAA,aAAa,EAAEF,aALnB;AAMI,IAAA,eAAe,EAAEC,eANrB;AAOI,IAAA,QAAQ,EAAEZ;AAPd,KAQQe,aARR,EADJ,CARJ,CADJ;AAuBH,CAnCD;;AAqCA,eAAeR,SAAf","sourcesContent":["// @flow\nimport * as React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport type { MessageDescriptor } from 'react-intl';\nimport Modal from '../../components/modal/Modal';\nimport TaskForm from './activity-feed/task-form';\nimport messages from './messages';\nimport { TASK_EDIT_MODE_CREATE, TASK_TYPE_APPROVAL, TASK_TYPE_GENERAL } from '../../constants';\nimport type { TaskFormProps } from './activity-feed/task-form/TaskForm';\nimport type { TaskType, TaskEditMode } from '../../common/types/tasks';\nimport type { ElementsXhrError } from '../../common/types/api';\n\ntype TaskModalProps = {\n    editMode?: TaskEditMode,\n    error: ?ElementsXhrError,\n    isTaskFormOpen: boolean,\n    onModalClose: () => void,\n    onSubmitError: (e: ElementsXhrError) => void,\n    onSubmitSuccess: () => any,\n    taskFormProps: TaskFormProps,\n    taskType: TaskType,\n};\n\nfunction getMessageForModalTitle(taskType: TaskType, mode: TaskEditMode): MessageDescriptor {\n    switch (taskType) {\n        case TASK_TYPE_GENERAL:\n            return mode === TASK_EDIT_MODE_CREATE\n                ? messages.tasksCreateGeneralTaskFormTitle\n                : messages.tasksEditGeneralTaskFormTitle;\n        case TASK_TYPE_APPROVAL:\n        default:\n            return mode === TASK_EDIT_MODE_CREATE\n                ? messages.tasksCreateApprovalTaskFormTitle\n                : messages.tasksEditApprovalTaskFormTitle;\n    }\n}\n\nconst focusTargetSelector: string = '.task-modal textarea, .task-modal input';\n\nconst TaskModal = (props: TaskModalProps) => {\n    const {\n        editMode = TASK_EDIT_MODE_CREATE,\n        error,\n        onSubmitError,\n        onSubmitSuccess,\n        onModalClose,\n        taskType,\n        isTaskFormOpen,\n        taskFormProps,\n    } = props;\n    // Note: Modal throws an error if this fails to find an element!\n    return (\n        <Modal\n            className=\"be-modal task-modal\"\n            data-testid=\"create-task-modal\"\n            focusElementSelector={focusTargetSelector}\n            isOpen={isTaskFormOpen}\n            onRequestClose={onModalClose}\n            title={<FormattedMessage {...getMessageForModalTitle(taskType, editMode)} />}\n        >\n            <div className=\"be\">\n                <TaskForm\n                    editMode={editMode}\n                    // $FlowFixMe\n                    error={error}\n                    onCancel={onModalClose}\n                    onSubmitError={onSubmitError}\n                    onSubmitSuccess={onSubmitSuccess}\n                    taskType={taskType}\n                    {...taskFormProps}\n                />\n            </div>\n        </Modal>\n    );\n};\n\nexport default TaskModal;\n"],"file":"TaskModal.js"}