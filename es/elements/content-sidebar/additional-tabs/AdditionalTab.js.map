{"version":3,"sources":["../../../../src/elements/content-sidebar/additional-tabs/AdditionalTab.js"],"names":["React","classNames","FormattedMessage","bdlGray50","PlainButton","IconEllipsis","AdditionalTabTooltip","AdditionalTabPlaceholder","messages","BLOCKED_BY_SHEILD","AdditionalTab","isErrored","props","onImageLoad","setState","status","reason","blockedByShieldAccessPolicy","id","iconUrl","title","state","TabIcon","onImageError","callbackFn","callback","isLoading","ftuxTooltipData","rest","isDisabled","className","tooltipText","getDisabledReason","callbackData","getTabIcon","PureComponent"],"mappings":"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","sourcesContent":["/**\n * @flow\n * @file Sidebar Additional Tab component\n * @author Box\n */\n\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport { FormattedMessage } from 'react-intl';\n\nimport { bdlGray50 } from '../../../styles/variables';\nimport PlainButton from '../../../components/plain-button/PlainButton';\nimport IconEllipsis from '../../../icons/general/IconEllipsis';\nimport AdditionalTabTooltip from './AdditionalTabTooltip';\nimport AdditionalTabPlaceholder from './AdditionalTabPlaceholder';\nimport messages from './messages';\nimport type { AdditionalSidebarTab, AdditionalSidebarTabFtuxData } from '../flowTypes';\n\nimport './AdditionalTab.scss';\n\ntype Props = {\n    ftuxTooltipData?: AdditionalSidebarTabFtuxData,\n    isLoading: boolean,\n    onImageLoad: () => void,\n    status?: string,\n} & AdditionalSidebarTab;\n\ntype State = {\n    isErrored: boolean,\n};\n\nconst BLOCKED_BY_SHEILD = 'BLOCKED_BY_SHIELD_ACCESS_POLICY';\n\nclass AdditionalTab extends React.PureComponent<Props, State> {\n    state = {\n        isErrored: false,\n    };\n\n    onImageError = () => {\n        this.props.onImageLoad();\n        this.setState({ isErrored: true });\n    };\n\n    isDisabled() {\n        const { status } = this.props;\n        return status === BLOCKED_BY_SHEILD;\n    }\n\n    getDisabledReason() {\n        let reason = '';\n        const { status } = this.props;\n        switch (status) {\n            case BLOCKED_BY_SHEILD:\n                reason = <FormattedMessage {...messages.blockedByShieldAccessPolicy} />;\n                break;\n            default:\n            // noop\n        }\n        return reason;\n    }\n\n    getTabIcon() {\n        const { id, iconUrl, onImageLoad, title } = this.props;\n        const { isErrored } = this.state;\n\n        let TabIcon;\n\n        if (isErrored) {\n            TabIcon = <AdditionalTabPlaceholder isLoading={false} />;\n        } else if (id && id > 0) {\n            TabIcon = (\n                <img\n                    className=\"bdl-AdditionalTab-icon\"\n                    src={iconUrl}\n                    onError={this.onImageError}\n                    onLoad={onImageLoad}\n                    alt={title}\n                />\n            );\n        } else {\n            TabIcon = <IconEllipsis color={bdlGray50} />;\n        }\n\n        return TabIcon;\n    }\n\n    render() {\n        const {\n            callback: callbackFn,\n            id,\n            isLoading,\n            iconUrl,\n            ftuxTooltipData,\n            onImageLoad,\n            title,\n            ...rest\n        } = this.props;\n\n        const isDisabled = this.isDisabled();\n\n        const className = classNames('bdl-AdditionalTab', {\n            'bdl-is-hidden': isLoading,\n            'bdl-is-disabled': isDisabled,\n        });\n\n        const tooltipText = isDisabled ? this.getDisabledReason() : title;\n\n        return (\n            <AdditionalTabTooltip\n                defaultTooltipText={tooltipText}\n                ftuxTooltipData={ftuxTooltipData}\n                isFtuxVisible={!isLoading}\n            >\n                <PlainButton\n                    className={className}\n                    data-testid=\"additionaltab\"\n                    type=\"button\"\n                    isDisabled={isDisabled}\n                    onClick={() => callbackFn({ id, callbackData: rest })}\n                >\n                    {this.getTabIcon()}\n                </PlainButton>\n            </AdditionalTabTooltip>\n        );\n    }\n}\n\nexport default AdditionalTab;\n"],"file":"AdditionalTab.js"}