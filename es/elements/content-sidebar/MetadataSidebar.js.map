{"version":3,"sources":["../../../src/elements/content-sidebar/MetadataSidebar.js"],"names":["React","flow","getProp","noop","FormattedMessage","API","EmptyContent","InlineError","Instances","LoadingIndicator","LoadingIndicatorWrapper","messages","SidebarContent","TemplateDropdown","normalizeTemplates","EVENT_JS_READY","isUserCorrectableError","mark","withAPIContext","withErrorBoundary","withLogger","FIELD_IS_EXTERNALLY_OWNED","FIELD_PERMISSIONS","FIELD_PERMISSIONS_CAN_UPLOAD","IS_ERROR_DISPLAYED","ORIGIN_METADATA_SIDEBAR","SIDEBAR_VIEW_METADATA","MARK_NAME_JS_READY","MetadataSidebar","props","isLoading","error","code","newState","onError","status","isValidError","setState","sidebarMetadataEditingErrorContent","id","api","file","state","editor","getEditor","getMetadataAPI","deleteMetadata","template","onRemoveSuccessHandler","onApiError","editors","clone","slice","push","createMetadata","onAddSuccessHandler","ops","oldEditor","updateMetadata","newEditor","replaceEditor","onSaveErrorHandler","isDirty","e","undefined","sidebarMetadataFetchingErrorContent","templates","selectedTemplateKey","templateFilters","sidebarFileFetchingErrorContent","currentFile","currentCanUpload","newCanUpload","shouldFetchMetadata","callback","fetchMetadata","logger","onReadyMetric","endMarkName","fetchFile","find","instance","splice","indexOf","hasError","isFeatureEnabled","getMetadata","fetchMetadataSuccessCallback","fetchMetadataErrorCallback","refreshCache","fileId","getFileAPI","getFile","fetchFileSuccessCallback","fetchFileErrorCallback","fields","elementId","showEditor","showLoadingIndicator","canEdit","showTemplateDropdown","showEmptyContent","length","onAdd","map","sidebarMetadataTitle","onModification","onRemove","onSave","PureComponent","MetadataSidebarComponent"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;AAMA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,IAAP,MAAiB,aAAjB;AACA,OAAOC,OAAP,MAAoB,YAApB;AACA,OAAOC,IAAP,MAAiB,aAAjB;AACA,SAASC,gBAAT,QAAiC,YAAjC;AAEA,OAAOC,GAAP,MAAgB,WAAhB;AACA,OAAOC,YAAP,MAAyB,sDAAzB;AACA,OAAOC,WAAP,MAAwB,2CAAxB;AACA,OAAOC,SAAP,MAAsB,mDAAtB;AACA,OAAOC,gBAAP,MAA6B,qDAA7B;AACA,OAAOC,uBAAP,MAAoC,4DAApC;AACA,OAAOC,QAAP,MAAqB,oBAArB;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,OAAOC,gBAAP,MAA6B,0DAA7B;AACA,SAASC,kBAAT,QAAmC,sDAAnC;AACA,SAASC,cAAT,QAA+B,4BAA/B;AACA,SAASC,sBAAT,QAAuC,mBAAvC;AACA,SAASC,IAAT,QAAqB,yBAArB;AACA,SAASC,cAAT,QAA+B,uBAA/B;AACA,SAASC,iBAAT,QAAkC,0BAAlC;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,SACIC,yBADJ,EAEIC,iBAFJ,EAGIC,4BAHJ,EAIIC,kBAJJ,EAKIC,uBALJ,EAMIC,qBANJ,QAOO,iBAPP;AAYA,OAAO,wBAAP;AA4BA,IAAMC,kBAAkB,aAAMF,uBAAN,cAAiCV,cAAjC,CAAxB;AAEAE,IAAI,CAACU,kBAAD,CAAJ;;IAEMC,e;;;;;AAOF,2BAAYC,KAAZ,EAA0B;AAAA;;AAAA;;AACtB,yFAAMA,KAAN;;AADsB,4DANlB;AAAEC,MAAAA,SAAS,EAAE;AAAb,KAMkB;;AAAA,iEAoBb,UAACC,KAAD,EAA0BC,IAA1B,EAAkE;AAAA,UAA1BC,QAA0B,uEAAP,EAAO;AAAA,UACnEC,OADmE,GAChD,MAAKL,KAD2C,CACnEK,OADmE;AAAA,UAEnEC,MAFmE,GAExDJ,KAFwD,CAEnEI,MAFmE;AAG3E,UAAMC,YAAY,GAAGpB,sBAAsB,CAACmB,MAAD,CAA3C;;AACA,YAAKE,QAAL;AACIN,QAAAA,KAAK,EAAEpB,QAAQ,CAAC2B,kCADpB;AAEIR,QAAAA,SAAS,EAAE;AAFf,SAGOG,QAHP;;AAKAC,MAAAA,OAAO,CAACH,KAAD,EAAQC,IAAR;AACHD,QAAAA,KAAK,EAALA;AADG,SAEFP,kBAFE,EAEmBY,YAFnB,EAAP;AAIH,KAjCyB;;AAAA,+DA2Ef,UAACG,EAAD,EAAsB;AAAA,UACrBC,GADqB,GACN,MAAKX,KADC,CACrBW,GADqB;AAAA,UAErBC,IAFqB,GAEL,MAAKC,KAFA,CAErBD,IAFqB;;AAG7B,UAAME,MAAM,GAAG,MAAKC,SAAL,CAAeL,EAAf,CAAf;;AAEA,UAAI,CAACI,MAAD,IAAW,CAACF,IAAhB,EAAsB;AAClB;AACH;;AAEDD,MAAAA,GAAG,CAACK,cAAJ,CAAmB,KAAnB,EAA0BC,cAA1B,CACIL,IADJ,EAEIE,MAAM,CAACI,QAFX,EAGI;AAAA,eAAM,MAAKC,sBAAL,CAA4BL,MAA5B,CAAN;AAAA,OAHJ,EAII,MAAKM,UAJT;AAMH,KA1FyB;;AAAA,0EAkGJ,UAACN,MAAD,EAAkC;AAAA,gCACpB,MAAKD,KADe,CAC5CQ,OAD4C;AAAA,UAC5CA,OAD4C,oCAClC,EADkC;AAEpD,UAAMC,KAAK,GAAGD,OAAO,CAACE,KAAR,CAAc,CAAd,CAAd;AACAD,MAAAA,KAAK,CAACE,IAAN,CAAWV,MAAX;;AACA,YAAKN,QAAL,CAAc;AAAEa,QAAAA,OAAO,EAAEC,KAAX;AAAkBrB,QAAAA,SAAS,EAAE;AAA7B,OAAd;AACH,KAvGyB;;AAAA,4DA+GlB,UAACiB,QAAD,EAAgC;AAAA,UAC5BP,GAD4B,GACb,MAAKX,KADQ,CAC5BW,GAD4B;AAAA,UAE5BC,IAF4B,GAEZ,MAAKC,KAFO,CAE5BD,IAF4B;;AAIpC,UAAI,CAACA,IAAL,EAAW;AACP;AACH;;AAED,YAAKJ,QAAL,CAAc;AAAEP,QAAAA,SAAS,EAAE;AAAb,OAAd;;AACAU,MAAAA,GAAG,CAACK,cAAJ,CAAmB,KAAnB,EAA0BS,cAA1B,CAAyCb,IAAzC,EAA+CM,QAA/C,EAAyD,MAAKQ,mBAA9D,EAAmF,MAAKN,UAAxF;AACH,KAzHyB;;AAAA,6DA8JjB,UAACV,EAAD,EAAaiB,GAAb,EAAgD;AAAA,UAC7ChB,GAD6C,GAC9B,MAAKX,KADyB,CAC7CW,GAD6C;AAAA,UAE7CC,IAF6C,GAE7B,MAAKC,KAFwB,CAE7CD,IAF6C;;AAGrD,UAAMgB,SAAS,GAAG,MAAKb,SAAL,CAAeL,EAAf,CAAlB;;AAEA,UAAI,CAACkB,SAAD,IAAc,CAAChB,IAAnB,EAAyB;AACrB;AACH;;AAEDD,MAAAA,GAAG,CAACK,cAAJ,CAAmB,KAAnB,EAA0Ba,cAA1B,CACIjB,IADJ,EAEIgB,SAAS,CAACV,QAFd,EAGIS,GAHJ,EAII,UAACG,SAAD,EAA+B;AAC3B,cAAKC,aAAL,CAAmBH,SAAnB,EAA8BE,SAA9B;AACH,OANL,EAOI,UAAC5B,KAAD,EAA0BC,IAA1B,EAA2C;AACvC,cAAK6B,kBAAL,CAAwBJ,SAAxB,EAAmC1B,KAAnC,EAA0CC,IAA1C;AACH,OATL;AAWH,KAlLyB;;AAAA,qEA2LT,UAACO,EAAD,EAAauB,OAAb,EAAkC;AAC/C,UAAML,SAAS,GAAG,MAAKb,SAAL,CAAeL,EAAf,CAAlB;;AACA,UAAI,CAACkB,SAAL,EAAgB;AACZ;AACH;;AACD,UAAME,SAAS,qBAAQF,SAAR;AAAmBK,QAAAA,OAAO,EAAPA;AAAnB,QAAf,CAL+C,CAKF;;;AAC7C,YAAKF,aAAL,CAAmBH,SAAnB,EAA8BE,SAA9B;AACH,KAlMyB;;AAAA,iFA4MG,UAACI,CAAD,EAAsB/B,IAAtB,EAAuC;AAChE,YAAKiB,UAAL,CAAgBc,CAAhB,EAAmB/B,IAAnB,EAAyB;AACrBkB,QAAAA,OAAO,EAAEc,SADY;AAErBjC,QAAAA,KAAK,EAAEpB,QAAQ,CAACsD,mCAFK;AAGrBC,QAAAA,SAAS,EAAEF;AAHU,OAAzB;AAKH,KAlNyB;;AAAA,mFA0NK,gBAMzB;AAAA,UALFd,OAKE,QALFA,OAKE;AAAA,UAJFgB,SAIE,QAJFA,SAIE;AAAA,wBAC+C,MAAKrC,KADpD;AAAA,UACMsC,mBADN,eACMA,mBADN;AAAA,UAC2BC,eAD3B,eAC2BA,eAD3B;;AAEF,YAAK/B,QAAL,CAAc;AACVa,QAAAA,OAAO,EAAEA,OAAO,CAACE,KAAR,CAAc,CAAd,CADC;AACiB;AAC3BrB,QAAAA,KAAK,EAAEiC,SAFG;AAGVlC,QAAAA,SAAS,EAAE,KAHD;AAIVoC,QAAAA,SAAS,EAAEpD,kBAAkB,CAACoD,SAAD,EAAYC,mBAAZ,EAAiCC,eAAjC;AAJnB,OAAd;AAMH,KAxOyB;;AAAA,6EAwQD,UAACL,CAAD,EAAsB/B,IAAtB,EAAuC;AAC5D,YAAKiB,UAAL,CAAgBc,CAAhB,EAAmB/B,IAAnB,EAAyB;AAAED,QAAAA,KAAK,EAAEpB,QAAQ,CAAC0D,+BAAlB;AAAmD5B,QAAAA,IAAI,EAAEuB;AAAzD,OAAzB;AACH,KA1QyB;;AAAA,+EAsRC,UAACvB,IAAD,EAAmB;AAAA,UAC5B6B,WAD4B,GACL,MAAK5B,KADA,CAClCD,IADkC;AAE1C,UAAM8B,gBAAgB,GAAGrE,OAAO,CAACoE,WAAD,EAAc/C,4BAAd,EAA4C,KAA5C,CAAhC;AACA,UAAMiD,YAAY,GAAGtE,OAAO,CAACuC,IAAD,EAAOlB,4BAAP,EAAqC,KAArC,CAA5B;AACA,UAAMkD,mBAAmB,GAAG,CAACH,WAAD,IAAgBC,gBAAgB,KAAKC,YAAjE;AACA,UAAME,QAAQ,GAAGD,mBAAmB,GAAG,MAAKE,aAAR,GAAwBxE,IAA5D;;AACA,YAAKkC,QAAL,CAAc;AAAEI,QAAAA,IAAI,EAAJA;AAAF,OAAd,EAAwBiC,QAAxB;AACH,KA7RyB;;AAAA,QAEdE,MAFc,GAEH,MAAK/C,KAFF,CAEd+C,MAFc;AAGtBA,IAAAA,MAAM,CAACC,aAAP,CAAqB;AACjBC,MAAAA,WAAW,EAAEnD;AADI,KAArB;AAHsB;AAMzB;;;;wCAEmB;AAChB,WAAKoD,SAAL;AACH;AAED;;;;;;;;;;;;AAuBA;;;;;8BAKmB;AAAA,UACPtC,IADO,GACS,KAAKC,KADd,CACPD,IADO;AAEf,aAAOvC,OAAO,CAACuC,IAAD,EAAOlB,4BAAP,EAAqC,KAArC,CAAd;AACH;AAED;;;;;;;;;8BAMUgB,E,EAA6B;AAAA,iCACH,KAAKG,KADF,CAC3BQ,OAD2B;AAAA,UAC3BA,OAD2B,qCACjB,EADiB;AAEnC,aAAOA,OAAO,CAAC8B,IAAR,CAAa;AAAA,YAAGC,QAAH,SAAGA,QAAH;AAAA,eAAkBA,QAAQ,CAAC1C,EAAT,KAAgBA,EAAlC;AAAA,OAAb,CAAP;AACH;AAED;;;;;;;;;2CAMuBI,M,EAA8B;AAAA,iCACjB,KAAKD,KADY,CACzCQ,OADyC;AAAA,UACzCA,OADyC,qCAC/B,EAD+B;AAEjD,UAAMC,KAAK,GAAGD,OAAO,CAACE,KAAR,CAAc,CAAd,CAAd;AACAD,MAAAA,KAAK,CAAC+B,MAAN,CAAahC,OAAO,CAACiC,OAAR,CAAgBxC,MAAhB,CAAb,EAAsC,CAAtC;AACA,WAAKN,QAAL,CAAc;AAAEa,QAAAA,OAAO,EAAEC;AAAX,OAAd;AACH;AAED;;;;;;;;;;AAsDA;;;;;;;kCAOcM,S,EAA2BE,S,EAAiC;AAAA,iCACtC,KAAKjB,KADiC,CAC9DQ,OAD8D;AAAA,UAC9DA,OAD8D,qCACpD,EADoD;AAEtE,UAAMC,KAAK,GAAGD,OAAO,CAACE,KAAR,CAAc,CAAd,CAAd;AACAD,MAAAA,KAAK,CAAC+B,MAAN,CAAahC,OAAO,CAACiC,OAAR,CAAgB1B,SAAhB,CAAb,EAAyC,CAAzC,EAA4CE,SAA5C;AACA,WAAKtB,QAAL,CAAc;AAAEa,QAAAA,OAAO,EAAEC;AAAX,OAAd;AACH;AAED;;;;;;;;;;;uCAQmBM,S,EAA2B1B,K,EAAyBC,I,EAAoB;AACvF,UAAMmB,KAAqB,qBAAQM,SAAR;AAAmB2B,QAAAA,QAAQ,EAAE;AAA7B,QAA3B,CADuF,CACvB;;;AAChE,WAAKxB,aAAL,CAAmBH,SAAnB,EAA8BN,KAA9B;AACA,WAAKF,UAAL,CAAgBlB,KAAhB,EAAuBC,IAAvB;AACH;AAED;;;;;;;;;;;AAmFA;;;;;oCAKsB;AAAA,yBACuB,KAAKH,KAD5B;AAAA,UACVW,GADU,gBACVA,GADU;AAAA,UACL6C,gBADK,gBACLA,gBADK;AAAA,UAEV5C,IAFU,GAEM,KAAKC,KAFX,CAEVD,IAFU;;AAIlB,UAAI,CAACA,IAAL,EAAW;AACP;AACH;;AAEDD,MAAAA,GAAG,CAACK,cAAJ,CAAmB,KAAnB,EAA0ByC,WAA1B,CACI7C,IADJ,EAEI,KAAK8C,4BAFT,EAGI,KAAKC,0BAHT,EAIIH,gBAJJ,EAKI;AAAEI,QAAAA,YAAY,EAAE;AAAhB,OALJ;AAOH;AAED;;;;;;;;;;;;AA+BA;;;;;gCAKkB;AAAA,yBACiB,KAAK5D,KADtB;AAAA,UACNW,GADM,gBACNA,GADM;AAAA,UACDkD,MADC,gBACDA,MADC;AAEdlD,MAAAA,GAAG,CAACmD,UAAJ,GAAiBC,OAAjB,CAAyBF,MAAzB,EAAiC,KAAKG,wBAAtC,EAAgE,KAAKC,sBAArE,EAA6F;AACzFC,QAAAA,MAAM,EAAE,CAAC1E,yBAAD,EAA4BC,iBAA5B,CADiF;AAEzFmE,QAAAA,YAAY,EAAE,IAF2E,CAErE;;AAFqE,OAA7F;AAIH;;;8BAEe;AACZ,WAAKd,aAAL;AACH;;;6BAEQ;AAAA,wBACyD,KAAKjC,KAD9D;AAAA,UACGQ,OADH,eACGA,OADH;AAAA,UACYT,IADZ,eACYA,IADZ;AAAA,UACkBV,KADlB,eACkBA,KADlB;AAAA,UACyBD,SADzB,eACyBA,SADzB;AAAA,UACoCoC,SADpC,eACoCA,SADpC;AAAA,yBAE6C,KAAKrC,KAFlD;AAAA,UAEGmE,SAFH,gBAEGA,SAFH;AAAA,UAEc7B,mBAFd,gBAEcA,mBAFd;AAGL,UAAM8B,UAAU,GAAG,CAAC,CAACxD,IAAF,IAAU,CAAC,CAACyB,SAAZ,IAAyB,CAAC,CAAChB,OAA9C;AACA,UAAMgD,oBAAoB,GAAG,CAACnE,KAAD,IAAU,CAACkE,UAAxC;AACA,UAAME,OAAO,GAAG,KAAKA,OAAL,EAAhB;AACA,UAAMC,oBAAoB,GAAGH,UAAU,IAAIE,OAA3C;AACA,UAAME,gBAAgB,GAAGJ,UAAU,IAAM/C,OAAF,CAAwCoD,MAAxC,KAAmD,CAA1F;AAEA,aACI,oBAAC,cAAD;AACI,QAAA,OAAO,EACHF,oBAAoB,GAChB,oBAAC,gBAAD;AACI,UAAA,YAAY,EAAElC,SAAS,IAAIA,SAAS,CAACoC,MAAV,KAAqB,CADpD;AAEI,UAAA,cAAc,EAAE,KAFpB;AAGI,UAAA,KAAK,EAAE,KAAKC,KAHhB,CAII;AAJJ;AAKI,UAAA,SAAS,EAAErC,SALf,CAMI;AANJ;AAOI,UAAA,aAAa,EAAEhB,OAAO,CAACsD,GAAR,CAAY,UAAA7D,MAAM;AAAA,mBAAIA,MAAM,CAACI,QAAX;AAAA,WAAlB;AAPnB,UADgB,GAUhB,IAZZ;AAcI,QAAA,SAAS,EAAC,cAdd;AAeI,QAAA,SAAS,EAAEiD,SAff;AAgBI,QAAA,WAAW,EAAEtE,qBAhBjB;AAiBI,QAAA,KAAK,EAAE,oBAAC,gBAAD,EAAsBf,QAAQ,CAAC8F,oBAA/B;AAjBX,SAmBK1E,KAAK,IACF,oBAAC,WAAD;AAAa,QAAA,KAAK,EAAE,oBAAC,gBAAD,EAAsBpB,QAAQ,CAACoB,KAA/B;AAApB,SACI,oBAAC,gBAAD,EAAsBA,KAAtB,CADJ,CApBR,EAwBKmE,oBAAoB,IAAI,oBAAC,gBAAD,OAxB7B,EAyBKD,UAAU,IACP,oBAAC,uBAAD;AAAyB,QAAA,SAAS,EAAC,0BAAnC;AAA8D,QAAA,SAAS,EAAEnE;AAAzE,SACKuE,gBAAgB,GACb,oBAAC,YAAD;AAAc,QAAA,MAAM,EAAEF;AAAtB,QADa,GAGb,oBAAC,SAAD;AACI,QAAA,OAAO,EAAEjD,OADb;AAEI,QAAA,cAAc,EAAE,KAAKwD,cAFzB;AAGI,QAAA,QAAQ,EAAE,KAAKC,QAHnB;AAII,QAAA,MAAM,EAAE,KAAKC,MAJjB;AAKI,QAAA,mBAAmB,EAAEzC;AALzB,QAJR,CA1BR,CADJ;AA2CH;;;;EA3WyBnE,KAAK,CAAC6G,a;;gBAA9BjF,e,kBAGoB;AAClByD,EAAAA,gBAAgB,EAAE;AADA,C;;AA4W1B,SAASzD,eAAe,IAAIkF,wBAA5B;AACA,eAAe7G,IAAI,CAAC,CAACmB,UAAU,CAACK,uBAAD,CAAX,EAAsCN,iBAAiB,CAACM,uBAAD,CAAvD,EAAkFP,cAAlF,CAAD,CAAJ,CACXU,eADW,CAAf","sourcesContent":["/**\n * @flow\n * @file Metadata sidebar component\n * @author Box\n */\n\nimport * as React from 'react';\nimport flow from 'lodash/flow';\nimport getProp from 'lodash/get';\nimport noop from 'lodash/noop';\nimport { FormattedMessage } from 'react-intl';\nimport type { MessageDescriptor } from 'react-intl';\nimport API from '../../api';\nimport EmptyContent from '../../features/metadata-instance-editor/EmptyContent';\nimport InlineError from '../../components/inline-error/InlineError';\nimport Instances from '../../features/metadata-instance-editor/Instances';\nimport LoadingIndicator from '../../components/loading-indicator/LoadingIndicator';\nimport LoadingIndicatorWrapper from '../../components/loading-indicator/LoadingIndicatorWrapper';\nimport messages from '../common/messages';\nimport SidebarContent from './SidebarContent';\nimport TemplateDropdown from '../../features/metadata-instance-editor/TemplateDropdown';\nimport { normalizeTemplates } from '../../features/metadata-instance-editor/metadataUtil';\nimport { EVENT_JS_READY } from '../common/logger/constants';\nimport { isUserCorrectableError } from '../../utils/error';\nimport { mark } from '../../utils/performance';\nimport { withAPIContext } from '../common/api-context';\nimport { withErrorBoundary } from '../common/error-boundary';\nimport { withLogger } from '../common/logger';\nimport {\n    FIELD_IS_EXTERNALLY_OWNED,\n    FIELD_PERMISSIONS,\n    FIELD_PERMISSIONS_CAN_UPLOAD,\n    IS_ERROR_DISPLAYED,\n    ORIGIN_METADATA_SIDEBAR,\n    SIDEBAR_VIEW_METADATA,\n} from '../../constants';\nimport type { WithLoggerProps } from '../../common/types/logging';\nimport type { ElementsXhrError, ErrorContextProps, JSONPatchOperations } from '../../common/types/api';\nimport type { MetadataEditor, MetadataTemplate } from '../../common/types/metadata';\nimport type { BoxItem } from '../../common/types/core';\nimport './MetadataSidebar.scss';\n\ntype ExternalProps = {\n    isFeatureEnabled: boolean,\n    selectedTemplateKey?: string,\n    templateFilters?: Array<string> | string,\n};\n\ntype PropsWithoutContext = {\n    elementId: string,\n    fileId: string,\n    hasSidebarInitialized?: boolean,\n} & ExternalProps;\n\ntype Props = {\n    api: API,\n} & PropsWithoutContext &\n    ErrorContextProps &\n    WithLoggerProps;\n\ntype State = {\n    editors?: Array<MetadataEditor>,\n    error?: MessageDescriptor,\n    file?: BoxItem,\n    isLoading: boolean,\n    templates?: Array<MetadataTemplate>,\n};\n\nconst MARK_NAME_JS_READY = `${ORIGIN_METADATA_SIDEBAR}_${EVENT_JS_READY}`;\n\nmark(MARK_NAME_JS_READY);\n\nclass MetadataSidebar extends React.PureComponent<Props, State> {\n    state = { isLoading: false };\n\n    static defaultProps = {\n        isFeatureEnabled: true,\n    };\n\n    constructor(props: Props) {\n        super(props);\n        const { logger } = this.props;\n        logger.onReadyMetric({\n            endMarkName: MARK_NAME_JS_READY,\n        });\n    }\n\n    componentDidMount() {\n        this.fetchFile();\n    }\n\n    /**\n     * Common error callback\n     *\n     * @param {Error} error - API error\n     * @param {string} code - error code\n     * @param {Object} [newState] - optional state to set\n     * @return {void}\n     */\n    onApiError = (error: ElementsXhrError, code: string, newState: Object = {}) => {\n        const { onError }: Props = this.props;\n        const { status } = error;\n        const isValidError = isUserCorrectableError(status);\n        this.setState({\n            error: messages.sidebarMetadataEditingErrorContent,\n            isLoading: false,\n            ...newState,\n        });\n        onError(error, code, {\n            error,\n            [IS_ERROR_DISPLAYED]: isValidError,\n        });\n    };\n\n    /**\n     * Checks upload permission\n     *\n     * @return {boolean} - true if metadata can be edited\n     */\n    canEdit(): boolean {\n        const { file }: State = this.state;\n        return getProp(file, FIELD_PERMISSIONS_CAN_UPLOAD, false);\n    }\n\n    /**\n     * Finds the editor we are editing\n     *\n     * @param {number} id - instance id\n     * @return {Object} editor instance\n     */\n    getEditor(id: string): ?MetadataEditor {\n        const { editors = [] }: State = this.state;\n        return editors.find(({ instance }) => instance.id === id);\n    }\n\n    /**\n     * Instance remove success handler\n     *\n     * @param {Object} editor - the editor to remove\n     * @return {void}\n     */\n    onRemoveSuccessHandler(editor: MetadataEditor): void {\n        const { editors = [] }: State = this.state;\n        const clone = editors.slice(0);\n        clone.splice(editors.indexOf(editor), 1);\n        this.setState({ editors: clone });\n    }\n\n    /**\n     * Instance remove handler\n     *\n     * @param {string} id - instance id\n     * @return {void}\n     */\n    onRemove = (id: string): void => {\n        const { api }: Props = this.props;\n        const { file }: State = this.state;\n        const editor = this.getEditor(id);\n\n        if (!editor || !file) {\n            return;\n        }\n\n        api.getMetadataAPI(false).deleteMetadata(\n            file,\n            editor.template,\n            () => this.onRemoveSuccessHandler(editor),\n            this.onApiError,\n        );\n    };\n\n    /**\n     * Instance add success handler\n     *\n     * @param {Object} editor - instance editor\n     * @return {void}\n     */\n    onAddSuccessHandler = (editor: MetadataEditor): void => {\n        const { editors = [] }: State = this.state;\n        const clone = editors.slice(0);\n        clone.push(editor);\n        this.setState({ editors: clone, isLoading: false });\n    };\n\n    /**\n     * Instance add handler\n     *\n     * @param {Object} template - instance template\n     * @return {void}\n     */\n    onAdd = (template: MetadataTemplate) => {\n        const { api }: Props = this.props;\n        const { file }: State = this.state;\n\n        if (!file) {\n            return;\n        }\n\n        this.setState({ isLoading: true });\n        api.getMetadataAPI(false).createMetadata(file, template, this.onAddSuccessHandler, this.onApiError);\n    };\n\n    /**\n     * Instance save success handler\n     *\n     * @param {Object} oldEditor - prior editor\n     * @param {Object} newEditor - updated editor\n     * @return {void}\n     */\n    replaceEditor(oldEditor: MetadataEditor, newEditor: MetadataEditor): void {\n        const { editors = [] }: State = this.state;\n        const clone = editors.slice(0);\n        clone.splice(editors.indexOf(oldEditor), 1, newEditor);\n        this.setState({ editors: clone });\n    }\n\n    /**\n     * Instance save error handler\n     *\n     * @param {Object} oldEditor - prior editor\n     * @param {Object} error - api error\n     * @param {string} code - error code\n     * @return {void}\n     */\n    onSaveErrorHandler(oldEditor: MetadataEditor, error: ElementsXhrError, code: string): void {\n        const clone: MetadataEditor = { ...oldEditor, hasError: true }; // shallow clone suffices for hasError setting\n        this.replaceEditor(oldEditor, clone);\n        this.onApiError(error, code);\n    }\n\n    /**\n     * Instance save handler\n     *\n     * @param {string} id - instance id\n     * @param {Array} ops - json patch ops\n     * @return {void}\n     */\n    onSave = (id: string, ops: JSONPatchOperations): void => {\n        const { api }: Props = this.props;\n        const { file }: State = this.state;\n        const oldEditor = this.getEditor(id);\n\n        if (!oldEditor || !file) {\n            return;\n        }\n\n        api.getMetadataAPI(false).updateMetadata(\n            file,\n            oldEditor.template,\n            ops,\n            (newEditor: MetadataEditor) => {\n                this.replaceEditor(oldEditor, newEditor);\n            },\n            (error: ElementsXhrError, code: string) => {\n                this.onSaveErrorHandler(oldEditor, error, code);\n            },\n        );\n    };\n\n    /**\n     * Instance dirty handler\n     *\n     * @param {string} id - instance id\n     * @param {boolean} isDirty - instance dirty state\n     * @return {void}\n     */\n    onModification = (id: string, isDirty: boolean) => {\n        const oldEditor = this.getEditor(id);\n        if (!oldEditor) {\n            return;\n        }\n        const newEditor = { ...oldEditor, isDirty }; // shallow clone suffices for isDirty setting\n        this.replaceEditor(oldEditor, newEditor);\n    };\n\n    /**\n     * Handles a failed metadata fetch\n     *\n     * @private\n     * @param {Error} e - API error\n     * @param {string} code - error code\n     * @return {void}\n     */\n    fetchMetadataErrorCallback = (e: ElementsXhrError, code: string) => {\n        this.onApiError(e, code, {\n            editors: undefined,\n            error: messages.sidebarMetadataFetchingErrorContent,\n            templates: undefined,\n        });\n    };\n\n    /**\n     * Handles a successful metadata fetch\n     *\n     * @param {Object} metadata - instances and templates\n     * @return {void}\n     */\n    fetchMetadataSuccessCallback = ({\n        editors,\n        templates,\n    }: {\n        editors: Array<MetadataEditor>,\n        templates: Array<MetadataTemplate>,\n    }) => {\n        const { selectedTemplateKey, templateFilters } = this.props;\n        this.setState({\n            editors: editors.slice(0), // cloned for potential editing\n            error: undefined,\n            isLoading: false,\n            templates: normalizeTemplates(templates, selectedTemplateKey, templateFilters),\n        });\n    };\n\n    /**\n     * Fetches the metadata editors\n     *\n     * @return {void}\n     */\n    fetchMetadata(): void {\n        const { api, isFeatureEnabled }: Props = this.props;\n        const { file }: State = this.state;\n\n        if (!file) {\n            return;\n        }\n\n        api.getMetadataAPI(false).getMetadata(\n            file,\n            this.fetchMetadataSuccessCallback,\n            this.fetchMetadataErrorCallback,\n            isFeatureEnabled,\n            { refreshCache: true },\n        );\n    }\n\n    /**\n     * Handles a failed file fetch\n     *\n     * @private\n     * @param {Error} e - API error\n     * @param {string} code - error code\n     * @return {void}\n     */\n    fetchFileErrorCallback = (e: ElementsXhrError, code: string) => {\n        this.onApiError(e, code, { error: messages.sidebarFileFetchingErrorContent, file: undefined });\n    };\n\n    /**\n     * Handles a successful file fetch.\n     * Can be called multiple times when refreshing caches.\n     * On file load we should fetch metadata, but we shouldn't need to fetch\n     * if the file permissions haven't changed from a prior file fetch.\n     * Metadata editors mostly care about upload permission.\n     *\n     * @param {Object} file - the Box file\n     * @return {void}\n     */\n    fetchFileSuccessCallback = (file: BoxItem) => {\n        const { file: currentFile }: State = this.state;\n        const currentCanUpload = getProp(currentFile, FIELD_PERMISSIONS_CAN_UPLOAD, false);\n        const newCanUpload = getProp(file, FIELD_PERMISSIONS_CAN_UPLOAD, false);\n        const shouldFetchMetadata = !currentFile || currentCanUpload !== newCanUpload;\n        const callback = shouldFetchMetadata ? this.fetchMetadata : noop;\n        this.setState({ file }, callback);\n    };\n\n    /**\n     * Fetches a file with the fields needed for metadata sidebar\n     *\n     * @return {void}\n     */\n    fetchFile(): void {\n        const { api, fileId }: Props = this.props;\n        api.getFileAPI().getFile(fileId, this.fetchFileSuccessCallback, this.fetchFileErrorCallback, {\n            fields: [FIELD_IS_EXTERNALLY_OWNED, FIELD_PERMISSIONS],\n            refreshCache: true, // see implications in file success callback\n        });\n    }\n\n    refresh(): void {\n        this.fetchMetadata();\n    }\n\n    render() {\n        const { editors, file, error, isLoading, templates }: State = this.state;\n        const { elementId, selectedTemplateKey }: Props = this.props;\n        const showEditor = !!file && !!templates && !!editors;\n        const showLoadingIndicator = !error && !showEditor;\n        const canEdit = this.canEdit();\n        const showTemplateDropdown = showEditor && canEdit;\n        const showEmptyContent = showEditor && ((editors: any): Array<MetadataEditor>).length === 0;\n\n        return (\n            <SidebarContent\n                actions={\n                    showTemplateDropdown ? (\n                        <TemplateDropdown\n                            hasTemplates={templates && templates.length !== 0}\n                            isDropdownBusy={false}\n                            onAdd={this.onAdd}\n                            // $FlowFixMe checked via showTemplateDropdown & showEditor\n                            templates={templates}\n                            // $FlowFixMe checked via showTemplateDropdown & showEditor\n                            usedTemplates={editors.map(editor => editor.template)}\n                        />\n                    ) : null\n                }\n                className=\"bcs-metadata\"\n                elementId={elementId}\n                sidebarView={SIDEBAR_VIEW_METADATA}\n                title={<FormattedMessage {...messages.sidebarMetadataTitle} />}\n            >\n                {error && (\n                    <InlineError title={<FormattedMessage {...messages.error} />}>\n                        <FormattedMessage {...error} />\n                    </InlineError>\n                )}\n                {showLoadingIndicator && <LoadingIndicator />}\n                {showEditor && (\n                    <LoadingIndicatorWrapper className=\"metadata-instance-editor\" isLoading={isLoading}>\n                        {showEmptyContent ? (\n                            <EmptyContent canAdd={canEdit} />\n                        ) : (\n                            <Instances\n                                editors={editors}\n                                onModification={this.onModification}\n                                onRemove={this.onRemove}\n                                onSave={this.onSave}\n                                selectedTemplateKey={selectedTemplateKey}\n                            />\n                        )}\n                    </LoadingIndicatorWrapper>\n                )}\n            </SidebarContent>\n        );\n    }\n}\n\nexport type MetadataSidebarProps = ExternalProps;\nexport { MetadataSidebar as MetadataSidebarComponent };\nexport default flow([withLogger(ORIGIN_METADATA_SIDEBAR), withErrorBoundary(ORIGIN_METADATA_SIDEBAR), withAPIContext])(\n    MetadataSidebar,\n);\n"],"file":"MetadataSidebar.js"}