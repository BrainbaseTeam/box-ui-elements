{"version":3,"sources":["../../../src/elements/content-sidebar/SkillsSidebar.js"],"names":["React","flow","getProp","noop","FormattedMessage","API","LoadingIndicator","messages","SidebarContent","SidebarSkills","EVENT_JS_READY","mark","withAPIContext","withErrorBoundary","withLogger","FIELD_PERMISSIONS_CAN_UPLOAD","SKILLS_TRANSCRIPT","ORIGIN_SKILLS_SIDEBAR","SIDEBAR_VIEW_SKILLS","MARK_NAME_JS_READY","SkillsSidebar","props","errors","cards","updatePreviewTranscript","setState","getPreview","getViewer","preview","viewer","transcriptCard","find","card","skill_card_type","addListener","loadedViewer","loadAutoGeneratedCaptions","index","updatedCards","state","clone","removes","adds","replaces","api","file","path","ops","canEdit","Array","isArray","forEach","replaced","replacement","idx","entries","findIndex","entry","push","op","value","deletes","removed","sort","a","b","added","length","splice","getMetadataAPI","updateSkills","onSaveSuccessHandler","onSaveErrorHandler","logger","onReadyMetric","endMarkName","getSkills","fetchSkillsSuccessCallback","prevRefreshIdentity","refreshIdentity","elementId","sidebarSkillsTitle","onSave","PureComponent","SkillsSidebarComponent"],"mappings":"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","sourcesContent":["/**\n * @flow\n * @file Skills sidebar component\n * @author Box\n */\n\nimport * as React from 'react';\nimport flow from 'lodash/flow';\nimport getProp from 'lodash/get';\nimport noop from 'lodash/noop';\nimport { FormattedMessage } from 'react-intl';\nimport API from '../../api';\nimport LoadingIndicator from '../../components/loading-indicator/LoadingIndicator';\nimport messages from '../common/messages';\nimport SidebarContent from './SidebarContent';\nimport SidebarSkills from './skills/SidebarSkills';\nimport { EVENT_JS_READY } from '../common/logger/constants';\nimport { mark } from '../../utils/performance';\nimport { withAPIContext } from '../common/api-context';\nimport { withErrorBoundary } from '../common/error-boundary';\nimport { withLogger } from '../common/logger';\nimport {\n    FIELD_PERMISSIONS_CAN_UPLOAD,\n    SKILLS_TRANSCRIPT,\n    ORIGIN_SKILLS_SIDEBAR,\n    SIDEBAR_VIEW_SKILLS,\n} from '../../constants';\nimport type { WithLoggerProps } from '../../common/types/logging';\nimport type { SkillCardEntry, SkillCard } from '../../common/types/skills';\nimport type { NumberBooleanMap, BoxItem } from '../../common/types/core';\nimport type { JSONPatchOperations } from '../../common/types/api';\nimport './SkillsSidebar.scss';\n\ntype PropsWithoutContext = {\n    elementId: string,\n    file: BoxItem,\n    getPreview: Function,\n    getViewer: Function,\n    hasSidebarInitialized?: boolean,\n    refreshIdentity?: boolean,\n};\n\ntype Props = {\n    api: API,\n} & PropsWithoutContext &\n    WithLoggerProps;\n\ntype State = {\n    cards?: Array<SkillCard>,\n    errors: NumberBooleanMap,\n};\n\nconst MARK_NAME_JS_READY = `${ORIGIN_SKILLS_SIDEBAR}_${EVENT_JS_READY}`;\n\nmark(MARK_NAME_JS_READY);\n\nclass SkillsSidebar extends React.PureComponent<Props, State> {\n    state: State = {\n        errors: {},\n    };\n\n    constructor(props: Props) {\n        super(props);\n        const { logger } = this.props;\n        logger.onReadyMetric({\n            endMarkName: MARK_NAME_JS_READY,\n        });\n    }\n\n    componentDidMount() {\n        const { api, file }: Props = this.props;\n        api.getMetadataAPI(false).getSkills(file, this.fetchSkillsSuccessCallback, noop);\n    }\n\n    componentDidUpdate({ refreshIdentity: prevRefreshIdentity }: Props) {\n        const { api, file, refreshIdentity }: Props = this.props;\n\n        if (refreshIdentity !== prevRefreshIdentity) {\n            api.getMetadataAPI(false).getSkills(file, this.fetchSkillsSuccessCallback, noop);\n        }\n    }\n\n    /**\n     * Handles skills fetch success\n     *\n     * @private\n     * @param {Array<SkillCard>} cards - Skills cards\n     * @return {void}\n     */\n    fetchSkillsSuccessCallback = (cards: Array<SkillCard>) => {\n        this.updatePreviewTranscript(cards);\n        this.setState({ cards });\n    };\n\n    /**\n     * Updates Preview with transcript data\n     *\n     * @private\n     * @param {Array<SkillCard>} cards - Skills cards\n     * @return {void}\n     */\n    updatePreviewTranscript = (cards: Array<SkillCard>): void => {\n        const { getPreview, getViewer } = this.props;\n        const preview = getPreview ? getPreview() : null;\n        const viewer = getViewer ? getViewer() : null;\n        const transcriptCard = cards.find(card => card.skill_card_type === SKILLS_TRANSCRIPT);\n        if (!transcriptCard || !preview) {\n            return;\n        }\n\n        if (!viewer) {\n            preview.addListener('load', ({ viewer: loadedViewer }) => {\n                if (typeof loadedViewer.loadAutoGeneratedCaptions === 'function') {\n                    loadedViewer.loadAutoGeneratedCaptions(transcriptCard);\n                }\n            });\n        } else if (typeof viewer.loadAutoGeneratedCaptions === 'function') {\n            viewer.loadAutoGeneratedCaptions(transcriptCard);\n        }\n    };\n\n    /**\n     * Success handler for save\n     *\n     * @private\n     * @param {Array} updatedCards - updated skill cards\n     * @param {number} index - index of the card being edited\n     * @return {void}\n     */\n    onSaveSuccessHandler = (index: number, updatedCards: Array<SkillCard>): void => {\n        const { errors }: State = this.state;\n        const clone = { ...errors };\n        delete clone[index];\n        this.updatePreviewTranscript(updatedCards);\n        this.setState({ cards: updatedCards, errors: clone });\n    };\n\n    /**\n     * Error handler for save\n     *\n     * @private\n     * @param {number} index - index of the card being edited\n     * @return {void}\n     */\n    onSaveErrorHandler = (index: number): void => {\n        const { errors }: State = this.state;\n        const clone = { ...errors };\n        clone[index] = true;\n        this.setState({ errors: clone });\n    };\n\n    /**\n     * Updates skill metadata\n     *\n     * @private\n     * @param {number} index - index of the card being edited\n     * @param {Array} removes - entries to remove\n     * @param {Array} adds - entries to add\n     * @param {Array} replaces - entries to replace\n     * @return {void}\n     */\n    onSave = (\n        index: number,\n        removes: Array<SkillCardEntry> = [],\n        adds: Array<SkillCardEntry> = [],\n        replaces: Array<{\n            replaced: SkillCardEntry,\n            replacement: SkillCardEntry,\n        }> = [],\n    ): void => {\n        const { api, file }: Props = this.props;\n        const { cards = [] }: State = this.state;\n        const card = cards[index];\n        const path = `/cards/${index}`;\n        const ops: JSONPatchOperations = [];\n        const canEdit = getProp(file, FIELD_PERMISSIONS_CAN_UPLOAD, false);\n\n        if (!canEdit || !card) {\n            return;\n        }\n\n        if (Array.isArray(replaces)) {\n            replaces.forEach(({ replaced, replacement }) => {\n                const idx = card.entries.findIndex(entry => entry === replaced);\n                if (idx > -1) {\n                    ops.push({\n                        op: 'replace',\n                        path: `${path}/entries/${idx}`,\n                        value: replacement,\n                    });\n                }\n            });\n        }\n\n        if (Array.isArray(removes)) {\n            const deletes = [];\n            removes.forEach(removed => {\n                const idx = card.entries.findIndex(entry => entry === removed);\n                if (idx > -1) {\n                    deletes.push(idx);\n                }\n            });\n            // To maintain metadata index positions, removes should be\n            // done is reverse order with largest index being removed first.\n            // Remove operations are atomic and don't happen in batch.\n            deletes\n                .sort((a, b) => b - a) // number sort in descending order\n                .forEach(idx => {\n                    ops.push({\n                        op: 'remove',\n                        path: `${path}/entries/${idx}`,\n                    });\n                });\n        }\n\n        if (Array.isArray(adds)) {\n            adds.forEach(added => {\n                ops.push({\n                    op: 'add',\n                    path: `${path}/entries/-`,\n                    value: added,\n                });\n            });\n        }\n\n        // If no ops, don't proceed\n        if (ops.length === 0) {\n            return;\n        }\n\n        // Add test ops before any other ops\n        ops.splice(0, 0, {\n            op: 'test',\n            path,\n            value: card,\n        });\n\n        api.getMetadataAPI(false).updateSkills(\n            file,\n            ops,\n            (updatedCards: Array<SkillCard>) => {\n                this.onSaveSuccessHandler(index, updatedCards);\n            },\n            () => {\n                this.onSaveErrorHandler(index);\n            },\n        );\n    };\n\n    render() {\n        const { file, getViewer, elementId }: Props = this.props;\n        const { cards, errors }: State = this.state;\n\n        return (\n            <SidebarContent\n                className=\"bcs-skills\"\n                elementId={elementId}\n                sidebarView={SIDEBAR_VIEW_SKILLS}\n                title={<FormattedMessage {...messages.sidebarSkillsTitle} />}\n            >\n                {cards ? (\n                    <SidebarSkills\n                        cards={cards}\n                        errors={errors}\n                        file={file}\n                        getViewer={getViewer}\n                        onSkillChange={this.onSave}\n                    />\n                ) : (\n                    <LoadingIndicator />\n                )}\n            </SidebarContent>\n        );\n    }\n}\n\nexport { SkillsSidebar as SkillsSidebarComponent };\nexport default flow([withLogger(ORIGIN_SKILLS_SIDEBAR), withErrorBoundary(ORIGIN_SKILLS_SIDEBAR), withAPIContext])(\n    SkillsSidebar,\n);\n"],"file":"SkillsSidebar.js"}