{"version":3,"sources":["../../../src/elements/content-sidebar/AddTaskButton.js"],"names":["React","withRouter","AddTaskMenu","TaskModal","TASK_TYPE_APPROVAL","AddTaskButton","createRef","error","isTaskFormOpen","taskType","props","history","replace","state","open","setState","onTaskModalClose","buttonRef","current","focus","e","element","isDisabled","taskFormProps","handleClickMenuItem","setAddTaskButtonRef","handleSubmitError","handleModalClose","Component","AddTaskButtonComponent"],"mappings":";;;;;;;;;;;;;;;;;;;;AACA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,UAAT,QAA+C,kBAA/C;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,SAASC,kBAAT,QAAmC,iBAAnC;;IAkBMC,a;;;;;;;;;;;;;;;;;;gEACUL,KAAK,CAACM,SAAN,E;;4DAEJ;AACJC,MAAAA,KAAK,EAAE,IADH;AAEJC,MAAAA,cAAc,EAAE,KAFZ;AAGJC,MAAAA,QAAQ,EAAEL;AAHN,K;;0EAcc,UAACK,QAAD,EAAwB;AAC1C,YAAKC,KAAL,CAAWC,OAAX,CAAmBC,OAAnB,CAA2B;AAAEC,QAAAA,KAAK,EAAE;AAAEC,UAAAA,IAAI,EAAE;AAAR;AAAT,OAA3B;;AACA,YAAKC,QAAL,CAAc;AAAEP,QAAAA,cAAc,EAAE,IAAlB;AAAwBC,QAAAA,QAAQ,EAARA;AAAxB,OAAd;AACH,K;;uEAEkB,YAAM;AAAA,UACbO,gBADa,GACQ,MAAKN,KADb,CACbM,gBADa;;AAErB,YAAKD,QAAL,CAAc;AAAEP,QAAAA,cAAc,EAAE,KAAlB;AAAyBD,QAAAA,KAAK,EAAE;AAAhC,OAAd;;AACA,UAAI,MAAKU,SAAL,CAAeC,OAAnB,EAA4B;AACxB,cAAKD,SAAL,CAAeC,OAAf,CAAuBC,KAAvB;AACH;;AACDH,MAAAA,gBAAgB;AACnB,K;;wEAEmB,UAACI,CAAD;AAAA,aAAyB,MAAKL,QAAL,CAAc;AAAER,QAAAA,KAAK,EAAEa;AAAT,OAAd,CAAzB;AAAA,K;;0EAEE,UAACC,OAAD,EAAgC;AAClD,YAAKJ,SAAL,CAAeC,OAAf,GAAyBG,OAAzB;AACH,K;;;;;;;6BAEQ;AAAA,wBACiC,KAAKX,KADtC;AAAA,UACGY,UADH,eACGA,UADH;AAAA,UACeC,aADf,eACeA,aADf;AAAA,wBAEuC,KAAKV,KAF5C;AAAA,UAEGL,cAFH,eAEGA,cAFH;AAAA,UAEmBC,QAFnB,eAEmBA,QAFnB;AAAA,UAE6BF,KAF7B,eAE6BA,KAF7B;AAIL,aACI,0CACI,oBAAC,WAAD;AACI,QAAA,UAAU,EAAEe,UADhB;AAEI,QAAA,eAAe,EAAE,KAAKE,mBAF1B;AAGI,QAAA,mBAAmB,EAAE,KAAKC;AAH9B,QADJ,EAMI,oBAAC,SAAD;AACI,QAAA,KAAK,EAAElB,KADX;AAEI,QAAA,aAAa,EAAE,KAAKmB,iBAFxB;AAGI,QAAA,eAAe,EAAE,KAAKC,gBAH1B;AAII,QAAA,YAAY,EAAE,KAAKA,gBAJvB;AAKI,QAAA,cAAc,EAAEnB,cALpB;AAMI,QAAA,aAAa,EAAEe,aANnB;AAOI,QAAA,QAAQ,EAAEd;AAPd,QANJ,CADJ;AAkBH;;;;EA3DuBT,KAAK,CAAC4B,S;;gBAA5BvB,a,kBASoB;AAClBiB,EAAAA,UAAU,EAAE;AADM,C;;AAqD1B,SAASjB,aAAa,IAAIwB,sBAA1B;AACA,eAAe5B,UAAU,CAACI,aAAD,CAAzB","sourcesContent":["// @flow\nimport * as React from 'react';\nimport { withRouter, type RouterHistory } from 'react-router-dom';\nimport AddTaskMenu from './AddTaskMenu';\nimport TaskModal from './TaskModal';\nimport { TASK_TYPE_APPROVAL } from '../../constants';\nimport type { TaskFormProps } from './activity-feed/task-form/TaskForm';\nimport type { TaskType } from '../../common/types/tasks';\nimport type { ElementsXhrError } from '../../common/types/api';\n\ntype Props = {|\n    history: RouterHistory,\n    isDisabled: boolean,\n    onTaskModalClose: () => void,\n    taskFormProps: TaskFormProps,\n|};\n\ntype State = {\n    error: ?ElementsXhrError,\n    isTaskFormOpen: boolean,\n    taskType: TaskType,\n};\n\nclass AddTaskButton extends React.Component<Props, State> {\n    buttonRef = React.createRef<HTMLButtonElement>();\n\n    state = {\n        error: null,\n        isTaskFormOpen: false,\n        taskType: TASK_TYPE_APPROVAL,\n    };\n\n    static defaultProps = {\n        isDisabled: false,\n    };\n\n    /*\n    1. Pushing the open state into history keeps the sidebar open upon resize and refresh\n    2. Preventing the sidebar from closing keeps the task modal open upon edit and resize\n    */\n    handleClickMenuItem = (taskType: TaskType) => {\n        this.props.history.replace({ state: { open: true } });\n        this.setState({ isTaskFormOpen: true, taskType });\n    };\n\n    handleModalClose = () => {\n        const { onTaskModalClose } = this.props;\n        this.setState({ isTaskFormOpen: false, error: null });\n        if (this.buttonRef.current) {\n            this.buttonRef.current.focus();\n        }\n        onTaskModalClose();\n    };\n\n    handleSubmitError = (e: ElementsXhrError) => this.setState({ error: e });\n\n    setAddTaskButtonRef = (element: HTMLButtonElement) => {\n        this.buttonRef.current = element;\n    };\n\n    render() {\n        const { isDisabled, taskFormProps } = this.props;\n        const { isTaskFormOpen, taskType, error } = this.state;\n\n        return (\n            <>\n                <AddTaskMenu\n                    isDisabled={isDisabled}\n                    onMenuItemClick={this.handleClickMenuItem}\n                    setAddTaskButtonRef={this.setAddTaskButtonRef}\n                />\n                <TaskModal\n                    error={error}\n                    onSubmitError={this.handleSubmitError}\n                    onSubmitSuccess={this.handleModalClose}\n                    onModalClose={this.handleModalClose}\n                    isTaskFormOpen={isTaskFormOpen}\n                    taskFormProps={taskFormProps}\n                    taskType={taskType}\n                />\n            </>\n        );\n    }\n}\n\nexport { AddTaskButton as AddTaskButtonComponent };\nexport default withRouter(AddTaskButton);\n"],"file":"AddTaskButton.js"}