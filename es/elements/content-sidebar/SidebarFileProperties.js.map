{"version":3,"sources":["../../../src/elements/content-sidebar/SidebarFileProperties.js"],"names":["React","getProp","injectIntl","ItemProperties","LoadingIndicatorWrapper","getFileSize","INTERACTION_TARGET","DETAILS_TARGETS","withErrorHandling","PLACEHOLDER_USER","SidebarFileProperties","file","onDescriptionChange","hasRetentionPolicy","retentionPolicy","onRetentionPolicyExtendClick","isLoading","intl","content_created_at","description","DESCRIPTION","content_modified_at","undefined","openModal","size","locale","id","SidebarFilePropertiesComponent"],"mappings":";;;;;;AAAA;;;;;AAMA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,OAAP,MAAoB,YAApB;AACA,SAASC,UAAT,QAA2B,YAA3B;AAEA,OAAOC,cAAP,MAA2B,4CAA3B;AACA,OAAOC,uBAAP,MAAoC,4DAApC;AACA,OAAOC,WAAP,MAAwB,yBAAxB;AACA,SAASC,kBAAT,EAA6BC,eAA7B,QAAoD,8BAApD;AACA,OAAOC,iBAAP,MAA8B,qBAA9B;AAGA,SAASC,gBAAT,QAAiC,iBAAjC;;AAaA,IAAMC,qBAAqB,GAAG,SAAxBA,qBAAwB;AAAA,MAC1BC,IAD0B,QAC1BA,IAD0B;AAAA,MAE1BC,mBAF0B,QAE1BA,mBAF0B;AAAA,MAG1BC,kBAH0B,QAG1BA,kBAH0B;AAAA,MAI1BC,eAJ0B,QAI1BA,eAJ0B;AAAA,MAK1BC,4BAL0B,QAK1BA,4BAL0B;AAAA,MAM1BC,SAN0B,QAM1BA,SAN0B;AAAA,MAO1BC,IAP0B,QAO1BA,IAP0B;AAAA,SAS1B,oBAAC,uBAAD;AAAyB,IAAA,SAAS,EAAED;AAApC,KACI,oBAAC,cAAD;AACI,IAAA,SAAS,EAAEL,IAAI,CAACO,kBADpB;AAEI,IAAA,WAAW,EAAEP,IAAI,CAACQ,WAFtB;AAGI,IAAA,wBAAwB,sBACnBb,kBADmB,EACEC,eAAe,CAACa,WADlB,CAH5B;AAMI,IAAA,UAAU,EAAET,IAAI,CAACU,mBANrB;AAOI,IAAA,mBAAmB,EAAEpB,OAAO,CAACU,IAAD,EAAO,wBAAP,CAAP,GAA0CC,mBAA1C,GAAgEU,SAPzF;AAQI,IAAA,KAAK,EAAErB,OAAO,CAACU,IAAD,EAAO,eAAP,CARlB;AASI,IAAA,oBAAoB,EAChBE,kBAAkB,qBAELC,eAFK;AAGRS,MAAAA,SAAS,EAAER;AAHH,SAKZ,EAfd;AAiBI,IAAA,IAAI,EAAEV,WAAW,CAACM,IAAI,CAACa,IAAN,EAAYP,IAAI,CAACQ,MAAjB,CAjBrB,CAkBI;AAlBJ;AAmBI,IAAA,QAAQ,EACJxB,OAAO,CAACU,IAAD,EAAO,eAAP,CAAP,KAAmCF,gBAAgB,CAACiB,EAApD,GACMzB,OAAO,CAACU,IAAD,EAAO,uBAAP,CADb,GAEMV,OAAO,CAACU,IAAD,EAAO,iBAAP;AAtBrB,IADJ,CAT0B;AAAA,CAA9B;;AAsCA,SAASD,qBAAqB,IAAIiB,8BAAlC;AACA,eAAezB,UAAU,CAACM,iBAAiB,CAACE,qBAAD,CAAlB,CAAzB","sourcesContent":["/**\n * @flow\n * @file Sidebar file properties component\n * @author Box\n */\n\nimport React from 'react';\nimport getProp from 'lodash/get';\nimport { injectIntl } from 'react-intl';\nimport type { InjectIntlProvidedProps } from 'react-intl';\nimport ItemProperties from '../../features/item-details/ItemProperties';\nimport LoadingIndicatorWrapper from '../../components/loading-indicator/LoadingIndicatorWrapper';\nimport getFileSize from '../../utils/getFileSize';\nimport { INTERACTION_TARGET, DETAILS_TARGETS } from '../common/interactionTargets';\nimport withErrorHandling from './withErrorHandling';\nimport type { ClassificationInfo } from './flowTypes';\nimport type { BoxItem } from '../../common/types/core';\nimport { PLACEHOLDER_USER } from '../../constants';\n\ntype Props = {\n    classification?: ClassificationInfo,\n    file: BoxItem,\n    hasClassification: boolean,\n    hasRetentionPolicy: boolean,\n    isLoading: boolean,\n    onDescriptionChange: Function,\n    onRetentionPolicyExtendClick?: Function,\n    retentionPolicy?: Object,\n} & InjectIntlProvidedProps;\n\nconst SidebarFileProperties = ({\n    file,\n    onDescriptionChange,\n    hasRetentionPolicy,\n    retentionPolicy,\n    onRetentionPolicyExtendClick,\n    isLoading,\n    intl,\n}: Props) => (\n    <LoadingIndicatorWrapper isLoading={isLoading}>\n        <ItemProperties\n            createdAt={file.content_created_at}\n            description={file.description}\n            descriptionTextareaProps={{\n                [INTERACTION_TARGET]: DETAILS_TARGETS.DESCRIPTION,\n            }}\n            modifiedAt={file.content_modified_at}\n            onDescriptionChange={getProp(file, 'permissions.can_rename') ? onDescriptionChange : undefined}\n            owner={getProp(file, 'owned_by.name')}\n            retentionPolicyProps={\n                hasRetentionPolicy\n                    ? {\n                          ...retentionPolicy,\n                          openModal: onRetentionPolicyExtendClick,\n                      }\n                    : {}\n            }\n            size={getFileSize(file.size, intl.locale)}\n            // use uploader_display_name if uploaded anonymously\n            uploader={\n                getProp(file, 'created_by.id') === PLACEHOLDER_USER.id\n                    ? getProp(file, 'uploader_display_name')\n                    : getProp(file, 'created_by.name')\n            }\n        />\n    </LoadingIndicatorWrapper>\n);\n\nexport { SidebarFileProperties as SidebarFilePropertiesComponent };\nexport default injectIntl(withErrorHandling(SidebarFileProperties));\n"],"file":"SidebarFileProperties.js"}