{"version":3,"sources":["../../../src/elements/content-sidebar/SidebarUtils.js"],"names":["React","FormattedMessage","AsyncLoad","messages","SidebarLoading","SidebarLoadingError","hasSkills","hasSkillsData","mark","SIDEBAR_VIEW_SKILLS","SIDEBAR_VIEW_ACTIVITY","SIDEBAR_VIEW_METADATA","SIDEBAR_VIEW_DETAILS","SIDEBAR_VIEW_VERSIONS","SidebarUtils","detailsSidebarProps","hasProperties","hasAccessStats","hasClassification","hasVersions","hasNotices","props","hasMetadata","hasActivityFeed","canHaveDetailsSidebar","canHaveActivitySidebar","canHaveSkillsSidebar","canHaveMetadataSidebar","file","editors","metadataSidebarProps","isFeatureEnabled","Array","isArray","length","shouldRenderSkillsSidebar","shouldRenderMetadataSidebar","view","sidebarSkillsTitle","sidebarDetailsTitle","sidebarMetadataTitle","sidebarActivityTitle","markName","importFn","Promise","resolve","errorComponent","fallback","getTitleForView","loader","getLoaderForView"],"mappings":"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","sourcesContent":["/**\n * @flow\n * @file Utility for sidebar\n * @author Box\n */\nimport * as React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport AsyncLoad from '../common/async-load';\nimport messages from '../common/messages';\nimport SidebarLoading from './SidebarLoading';\nimport SidebarLoadingError from './SidebarLoadingError';\nimport { hasSkills as hasSkillsData } from './skills/skillUtils';\nimport { mark } from '../../utils/performance';\nimport {\n    SIDEBAR_VIEW_SKILLS,\n    SIDEBAR_VIEW_ACTIVITY,\n    SIDEBAR_VIEW_METADATA,\n    SIDEBAR_VIEW_DETAILS,\n    SIDEBAR_VIEW_VERSIONS,\n} from '../../constants';\nimport type { MetadataSidebarProps } from './MetadataSidebar';\nimport type { MetadataEditor } from '../../common/types/metadata';\nimport type { BoxItem } from '../../common/types/core';\n\nclass SidebarUtils {\n    /**\n     * Determines if we can render the details sidebar.\n     * Only relies on props.\n     *\n     * @param {ContentSidebarProps} props - User passed in props\n     * @return {Boolean} true if we should render\n     */\n    static canHaveDetailsSidebar({ detailsSidebarProps = {} }: ContentSidebarProps): boolean {\n        const { hasProperties, hasAccessStats, hasClassification, hasVersions, hasNotices } = detailsSidebarProps;\n        return !!hasProperties || !!hasAccessStats || !!hasClassification || !!hasVersions || !!hasNotices;\n    }\n\n    /**\n     * Determines if we can render the metadata sidebar.\n     * Only relies on props.\n     *\n     * @param {ContentSidebarProps} props - User passed in props\n     * @return {Boolean} true if we should render\n     */\n    static canHaveMetadataSidebar(props: ContentSidebarProps): boolean {\n        return !!props.hasMetadata;\n    }\n\n    /**\n     * Determines if we can render the activity sidebar.\n     * Only relies on props.\n     *\n     * @param {ContentSidebarProps} props - User passed in props\n     * @return {Boolean} true if we should render\n     */\n    static canHaveActivitySidebar(props: ContentSidebarProps): boolean {\n        return !!props.hasActivityFeed;\n    }\n\n    /**\n     * Determines if we can render the skills sidebar.\n     * Only relies on props.\n     *\n     * @param {ContentSidebarProps} props - User passed in props\n     * @return {Boolean} true if we should render\n     */\n    static canHaveSkillsSidebar(props: ContentSidebarProps): boolean {\n        return !!props.hasSkills;\n    }\n\n    /**\n     * Determines if we can render the sidebar.\n     * Only relies on props.\n     *\n     * @param {ContentSidebarProps} props - User passed in props\n     * @return {Boolean} true if we should have a sidebar\n     */\n    static canHaveSidebar(props: ContentSidebarProps): boolean {\n        return (\n            SidebarUtils.canHaveDetailsSidebar(props) ||\n            SidebarUtils.canHaveActivitySidebar(props) ||\n            SidebarUtils.canHaveSkillsSidebar(props) ||\n            SidebarUtils.canHaveMetadataSidebar(props)\n        );\n    }\n\n    /**\n     * Determines if we should bother rendering the skills sidebar.\n     * Relies on props and file data.\n     *\n     * @private\n     * @param {ContentSidebarProps} props - User passed in props\n     * @param {BoxItem} file - box file\n     * @return {Boolean} true if we should render\n     */\n    static shouldRenderSkillsSidebar(props: ContentSidebarProps, file?: BoxItem): boolean {\n        return !!file && SidebarUtils.canHaveSkillsSidebar(props) && hasSkillsData(file);\n    }\n\n    /**\n     * Determines if we should bother rendering the metadata sidebar.\n     * Relies on props and metadata data and feature enabled or not.\n     *\n     * @private\n     * @param {ContentSidebarProps} props - User passed in props\n     * @param {Array<MetadataEditor>} editors - metadata editors\n     * @return {Boolean} true if we should render\n     */\n    static shouldRenderMetadataSidebar(props: ContentSidebarProps, editors?: Array<MetadataEditor>): boolean {\n        const { metadataSidebarProps = {} }: ContentSidebarProps = props;\n        const { isFeatureEnabled = true }: MetadataSidebarProps = metadataSidebarProps;\n\n        return (\n            SidebarUtils.canHaveMetadataSidebar(props) &&\n            (isFeatureEnabled || (Array.isArray(editors) && editors.length > 0))\n        );\n    }\n\n    /**\n     * Determines if we should bother rendering the sidebar.\n     * Relies on props and file data.\n     *\n     * @param {ContentSidebarProps} props - User passed in props\n     * @param {BoxItem} file - box file\n     * @param {Array<MetadataEditor>} editors - metadata editors\n     * @return {Boolean} true if we should fetch or render\n     */\n    static shouldRenderSidebar(props: ContentSidebarProps, file?: BoxItem, editors?: Array<MetadataEditor>): boolean {\n        return (\n            !!file &&\n            (SidebarUtils.canHaveDetailsSidebar(props) ||\n                SidebarUtils.shouldRenderSkillsSidebar(props, file) ||\n                SidebarUtils.canHaveActivitySidebar(props) ||\n                SidebarUtils.shouldRenderMetadataSidebar(props, editors))\n        );\n    }\n\n    /**\n     * Gets the title for a given sidebar view\n     *\n     * @param {string} view - the view name\n     * @return {React.Node} - the node to render\n     */\n    static getTitleForView(view: string): React.Node {\n        switch (view) {\n            case SIDEBAR_VIEW_SKILLS:\n                return <FormattedMessage {...messages.sidebarSkillsTitle} />;\n            case SIDEBAR_VIEW_DETAILS:\n                return <FormattedMessage {...messages.sidebarDetailsTitle} />;\n            case SIDEBAR_VIEW_METADATA:\n                return <FormattedMessage {...messages.sidebarMetadataTitle} />;\n            case SIDEBAR_VIEW_ACTIVITY:\n                return <FormattedMessage {...messages.sidebarActivityTitle} />;\n            default:\n                return null;\n        }\n    }\n\n    /**\n     * Marks and gets the loader for a given sidebar view\n     *\n     * @param {String} view - the view name\n     * @param {String} markName -  the name to be used by performance.mark\n     * @return {Function} - a function which will resolve the module to load\n     */\n    static getLoaderForView(view: string, markName: string): Promise<any> {\n        mark(markName);\n        let importFn;\n        switch (view) {\n            case SIDEBAR_VIEW_SKILLS:\n                importFn = import(/* webpackMode: \"lazy\", webpackChunkName: \"skills-sidebar\" */ './SkillsSidebar');\n                break;\n            case SIDEBAR_VIEW_DETAILS:\n                importFn = import(/* webpackMode: \"lazy\", webpackChunkName: \"details-sidebar\" */ './DetailsSidebar');\n                break;\n            case SIDEBAR_VIEW_METADATA:\n                importFn = import(/* webpackMode: \"lazy\", webpackChunkName: \"metadata-sidebar\" */ './MetadataSidebar');\n                break;\n            case SIDEBAR_VIEW_ACTIVITY:\n                importFn = import(/* webpackMode: \"lazy\", webpackChunkName: \"activity-sidebar\" */ './ActivitySidebar');\n                break;\n            case SIDEBAR_VIEW_VERSIONS:\n                importFn = import(/* webpackMode: \"lazy\", webpackChunkName: \"versions-sidebar\" */ './versions');\n                break;\n            default:\n                return Promise.resolve(null);\n        }\n\n        return importFn;\n    }\n\n    /**\n     * Gets the component which async loads a given sidebar view\n     *\n     * @param {String} view - the view name\n     * @param {String} markName -  the name to be used by performance.mark\n     * @param {Object} props - additional props\n     * @return {React.Node} - the node to render\n     */\n    static getAsyncSidebarContent(view: string, markName: string, props: Object = {}) {\n        return AsyncLoad({\n            errorComponent: SidebarLoadingError,\n            fallback: <SidebarLoading title={this.getTitleForView(view)} />,\n            loader: () => this.getLoaderForView(view, markName),\n            ...props,\n        });\n    }\n}\n\nexport default SidebarUtils;\n"],"file":"SidebarUtils.js"}