{"version":3,"sources":["../../../../src/elements/content-sidebar/skills/SidebarSkills.js"],"names":["React","FormattedMessage","uniqueId","messages","SKILLS_TARGETS","SidebarSection","isValidSkillsCard","SidebarSkillsCard","SKILLS_TRANSCRIPT","SKILLS_KEYWORD","SKILLS_TIMELINE","SKILLS_FACE","SKILLS_STATUS","SKILLS_ERROR_UNKNOWN","getCardInteractionTarget","skill_card_type","KEYWORDS","CARD","FACES","TRANSCRIPTS","getCardTitle","skill_card_title","code","message","defaultKey","defaultMessage","defaultSkill","faceSkill","transcriptSkill","topicsSkill","statusSkill","error","SidebarSkills","file","cards","errors","getViewer","onSkillChange","permissions","isSkillEditable","can_upload","map","card","index","status","id","cardId","isValid","interactionTarget","title","hasEntries","Array","isArray","entries","length","args"],"mappings":"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","sourcesContent":["/**\n * @flow\n * @file Details sidebar component\n * @author Box\n */\n\nimport * as React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport uniqueId from 'lodash/uniqueId';\nimport messages from '../../common/messages';\nimport { SKILLS_TARGETS } from '../../common/interactionTargets';\nimport SidebarSection from '../SidebarSection';\nimport { isValidSkillsCard } from './skillUtils';\nimport SidebarSkillsCard from './SidebarSkillsCard';\nimport {\n    SKILLS_TRANSCRIPT,\n    SKILLS_KEYWORD,\n    SKILLS_TIMELINE,\n    SKILLS_FACE,\n    SKILLS_STATUS,\n    SKILLS_ERROR_UNKNOWN,\n} from '../../../constants';\nimport type { SkillCard, SkillCardLocalizableType } from '../../../common/types/skills';\nimport type { NumberBooleanMap, BoxItem } from '../../../common/types/core';\n\ntype Props = {\n    cards: Array<SkillCard>,\n    errors: NumberBooleanMap,\n    file: BoxItem,\n    getViewer: Function,\n    onSkillChange: Function,\n};\n\n/**\n * Get ths skill interaction target based on card type\n *\n * @param {Object} card - skill card\n * @return {string} - interaction target\n */\nconst getCardInteractionTarget = ({ skill_card_type }: SkillCard): string => {\n    switch (skill_card_type) {\n        case SKILLS_KEYWORD:\n            return SKILLS_TARGETS.KEYWORDS.CARD;\n        case SKILLS_FACE:\n        case SKILLS_TIMELINE:\n            return SKILLS_TARGETS.FACES.CARD;\n        case SKILLS_TRANSCRIPT:\n            return SKILLS_TARGETS.TRANSCRIPTS.CARD;\n        default:\n            return '';\n    }\n};\n\n/**\n * Get ths string skill title based on card title\n *\n * @param {Object} card - skill card\n * @return {string} - skill title\n */\nconst getCardTitle = ({ skill_card_type, skill_card_title = {} }: SkillCard): string | React.Node => {\n    const { code, message }: SkillCardLocalizableType = skill_card_title;\n    const defaultKey = `${skill_card_type}Skill`;\n    const defaultMessage = messages[defaultKey] || messages.defaultSkill;\n\n    switch (code) {\n        case 'skills_faces':\n            return <FormattedMessage {...messages.faceSkill} />;\n        case 'skills_transcript':\n            return <FormattedMessage {...messages.transcriptSkill} />;\n        case 'skills_topics':\n            return <FormattedMessage {...messages.topicsSkill} />;\n        case 'skills_status':\n            return <FormattedMessage {...messages.statusSkill} />;\n        case 'skills_error':\n            return <FormattedMessage {...messages.error} />;\n        default:\n            return message || <FormattedMessage {...defaultMessage} />;\n    }\n};\n\nconst SidebarSkills = ({ file, cards, errors, getViewer, onSkillChange }: Props): Array<React.Node> => {\n    const { permissions = {} }: BoxItem = file;\n    const isSkillEditable = !!permissions.can_upload;\n\n    return cards.map((card: SkillCard, index: number) => {\n        if (card.error && !card.status) {\n            card.skill_card_type = SKILLS_STATUS;\n            card.status = {\n                code: SKILLS_ERROR_UNKNOWN,\n            };\n            delete card.error;\n        }\n\n        const { id } = card;\n        const cardId = id || uniqueId('card_');\n        const isValid = isValidSkillsCard(file, card);\n        const interactionTarget = getCardInteractionTarget(card);\n        const title = getCardTitle(card);\n        const hasEntries = Array.isArray(card.entries) ? card.entries.length > 0 : isValid;\n\n        return isValid ? (\n            <SidebarSection key={cardId} interactionTarget={interactionTarget} isOpen={hasEntries} title={title}>\n                <SidebarSkillsCard\n                    card={card}\n                    cards={cards}\n                    getViewer={getViewer}\n                    hasError={!!errors[index]}\n                    isEditable={isSkillEditable}\n                    onSkillChange={(...args) => onSkillChange(index, ...args)}\n                />\n            </SidebarSection>\n        ) : null;\n    });\n};\n\nexport default SidebarSkills;\n"],"file":"SidebarSkills.js"}