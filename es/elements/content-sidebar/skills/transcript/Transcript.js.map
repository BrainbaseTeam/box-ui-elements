{"version":3,"sources":["../../../../../src/elements/content-sidebar/skills/transcript/Transcript.js"],"names":["React","FormattedMessage","classNames","bdlGray50","PlainButton","IconEdit","IconCopy","IconExpand","IconCollapse","formatTime","LoadingIndicatorWrapper","Tooltip","copy","SKILLS_TARGETS","messages","isValidTimeSlice","TranscriptRow","Transcript","isEditingIndex","undefined","newTranscriptText","isCollapsed","isLoading","accumulator","appears","text","start","Array","isArray","index","state","isEditingRow","transcriptText","interactionTarget","TRANSCRIPTS","EDIT_TEXT","TRANSCRIPT","onCancel","onChange","onClick","onSave","setState","prevState","props","entries","card","onSkillChange","entry","replacement","replaced","event","currentTarget","value","previewSegment","copiedClass","reduce","transcriptReducer","copyBtn","classList","add","setTimeout","remove","btn","prevProps","wasEditing","getViewer","viewer","isValid","length","timeSlice","play","isEditable","hasEntries","hasManyEntries","isEditing","editBtnClassName","contentClassName","expandCollapseMessage","expand","collapse","COPY","copyBtnRef","copyTranscript","EXPAND","toggleExpandCollapse","editLabel","EDIT","toggleIsEditing","transcriptEdit","map","transcriptMapper","skillNoInfoFoundError","PureComponent"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;AAMA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,gBAAT,QAAiC,YAAjC;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,SAASC,SAAT,QAA0B,8BAA1B;AACA,OAAOC,WAAP,MAAwB,iDAAxB;AACA,OAAOC,QAAP,MAAqB,oCAArB;AACA,OAAOC,QAAP,MAAqB,oCAArB;AACA,OAAOC,UAAP,MAAuB,sCAAvB;AACA,OAAOC,YAAP,MAAyB,wCAAzB;AACA,SAASC,UAAT,QAA2B,4BAA3B;AACA,OAAOC,uBAAP,MAAoC,kEAApC;AACA,OAAOC,OAAP,MAAoB,wCAApB;AACA,SAASC,IAAT,QAAqB,4BAArB;AACA,SAASC,cAAT,QAA+B,oCAA/B;AACA,OAAOC,QAAP,MAAqB,0BAArB;AACA,SAASC,gBAAT,QAAiC,kBAAjC;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AAEA,OAAO,mBAAP;;IAgBMC,U;;;;;;;;;;;;;;;;;;4DAGa;AACXC,MAAAA,cAAc,EAAEC,SADL;AAEXC,MAAAA,iBAAiB,EAAE,EAFR;AAGXC,MAAAA,WAAW,EAAE,IAHF;AAIXC,MAAAA,SAAS,EAAE;AAJA,K;;wEAkCK,UAACC,WAAD,QAAoE;AAAA,UAA5CC,OAA4C,QAA5CA,OAA4C;AAAA,UAAnCC,IAAmC,QAAnCA,IAAmC;AACpF,UAAMC,KAAa,GACfX,gBAAgB,CAACS,OAAD,CAAhB,IAA6BG,KAAK,CAACC,OAAN,CAAcJ,OAAd,CAA7B,aAAyDf,UAAU,CAACe,OAAO,CAAC,CAAD,CAAP,CAAWE,KAAZ,CAAnE,SAA2F,EAD/F;AAEA,uBAAUH,WAAV,SAAwBG,KAAxB,cAAiCD,IAAI,IAAI,EAAzC;AACH,K;;uEASkB,iBAAoCI,KAApC,EAAkE;AAAA,UAA/DL,OAA+D,SAA/DA,OAA+D;AAAA,UAAtDC,IAAsD,SAAtDA,IAAsD;AAAA,wBAC5B,MAAKK,KADuB;AAAA,UACzEZ,cADyE,eACzEA,cADyE;AAAA,UACzDE,iBADyD,eACzDA,iBADyD;AAEjF,UAAMW,YAAY,GAAGb,cAAc,KAAKW,KAAxC;AACA,UAAMG,cAAc,GAAGD,YAAY,GAAGX,iBAAH,GAAuBK,IAA1D;AACA,UAAMQ,iBAAiB,GAAGF,YAAY,GAChClB,cAAc,CAACqB,WAAf,CAA2BC,SADK,GAEhCtB,cAAc,CAACqB,WAAf,CAA2BE,UAFjC;AAGA,aACI,oBAAC,aAAD;AACI,QAAA,GAAG,EAAEP,KADT;AAEI,QAAA,OAAO,EAAEL,OAFb;AAGI,QAAA,iBAAiB,EAAES,iBAHvB;AAII,QAAA,SAAS,EAAEF,YAJf;AAKI,QAAA,QAAQ,EAAE,MAAKM,QALnB;AAMI,QAAA,QAAQ,EAAE,MAAKC,QANnB;AAOI,QAAA,OAAO,EAAE;AAAA,iBAAM,MAAKC,OAAL,CAAaV,KAAb,CAAN;AAAA,SAPb;AAQI,QAAA,MAAM,EAAE,MAAKW,MARjB;AASI,QAAA,IAAI,EAAER;AATV,QADJ;AAaH,K;;sEAQiB,YAAY;AAC1B,YAAKS,QAAL,CAAc,UAAAC,SAAS;AAAA,eAAK;AACxBxB,UAAAA,cAAc,EAAE,OAAOwB,SAAS,CAACxB,cAAjB,KAAoC,QAApC,GAA+CC,SAA/C,GAA2D,CAAC;AADpD,SAAL;AAAA,OAAvB;AAGH,K;;6DA+BQ,YAAY;AAAA,wBAIN,MAAKwB,KAJC;AAAA,UAELC,OAFK,eAEbC,IAFa,CAELD,OAFK;AAAA,UAGbE,aAHa,eAGbA,aAHa;AAAA,yBAKoC,MAAKhB,KALzC;AAAA,UAKTZ,cALS,gBAKTA,cALS;AAAA,UAKOE,iBALP,gBAKOA,iBALP;;AAOjB,UAAI,OAAOF,cAAP,KAA0B,QAA9B,EAAwC;AACpC;AACH;;AAED,UAAM6B,KAAK,GAAGH,OAAO,CAAC1B,cAAD,CAArB;;AACA,UAAI6B,KAAK,CAACtB,IAAN,KAAeL,iBAAnB,EAAsC;AAClC,cAAKiB,QAAL;AACH,OAFD,MAEO;AACH,cAAKI,QAAL,CAAc;AAAEnB,UAAAA,SAAS,EAAE,IAAb;AAAmBJ,UAAAA,cAAc,EAAE,CAAC;AAApC,SAAd;;AACA4B,QAAAA,aAAa,CAAC,IAAD,EAAO,IAAP,EAAa,CACtB;AACIE,UAAAA,WAAW,oBAAOD,KAAP;AAActB,YAAAA,IAAI,EAAEL;AAApB,YADf;AAEI6B,UAAAA,QAAQ,EAAEF;AAFd,SADsB,CAAb,CAAb;AAMH;AACJ,K;;+DAQU,YAAY;AACnB,YAAKN,QAAL,CAAc;AAAEvB,QAAAA,cAAc,EAAE,CAAC,CAAnB;AAAsBE,QAAAA,iBAAiB,EAAE;AAAzC,OAAd;AACH,K;;+DASU,UAAC8B,KAAD,EAA8D;AACrE,UAAMC,aAAa,GAAID,KAAK,CAACC,aAA7B;;AACA,YAAKV,QAAL,CAAc;AACVrB,QAAAA,iBAAiB,EAAE+B,aAAa,CAACC;AADvB,OAAd;AAGH,K;;8DAQS,UAACvB,KAAD,EAAyB;AAAA,UAEnBe,OAFmB,GAGpB,MAAKD,KAHe,CAE3BE,IAF2B,CAEnBD,OAFmB;AAAA,UAIvB1B,cAJuB,GAIG,MAAKY,KAJR,CAIvBZ,cAJuB;;AAK/B,UAAI,OAAOA,cAAP,KAA0B,QAA9B,EAAwC;AACpC,cAAKuB,QAAL,CAAc;AACVvB,UAAAA,cAAc,EAAEW,KADN;AAEVT,UAAAA,iBAAiB,EAAEwB,OAAO,CAACf,KAAD,CAAP,CAAeJ;AAFxB,SAAd;AAIH,OALD,MAKO;AACH,cAAK4B,cAAL,CAAoBxB,KAApB;AACH;AACJ,K;;qEASgB,YAAM;AAAA,UAEPe,OAFO,GAGR,MAAKD,KAHG,CAEfE,IAFe,CAEPD,OAFO;AAInB,UAAMU,WAAW,GAAG,sBAApB;AACA1C,MAAAA,IAAI,CAACgC,OAAO,CAACW,MAAR,CAAe,MAAKC,iBAApB,EAAuC,EAAvC,CAAD,CAAJ,CALmB,CAOnB;;AACA,UAAI,MAAKC,OAAT,EAAkB;AACd,cAAKA,OAAL,CAAaC,SAAb,CAAuBC,GAAvB,CAA2BL,WAA3B;AACH,OAVkB,CAYnB;;;AACAM,MAAAA,UAAU,CAAC,YAAM;AACb,YAAI,MAAKH,OAAT,EAAkB;AACd,gBAAKA,OAAL,CAAaC,SAAb,CAAuBG,MAAvB,CAA8BP,WAA9B;AACH;AACJ,OAJS,EAIP,IAJO,CAAV;AAKH,K;;iEAQY,UAACQ,GAAD,EAAkC;AAC3C,YAAKL,OAAL,GAAeK,GAAf;AACH,K;;2EAQsB,YAAY;AAC/B,YAAKrB,QAAL,CAAc,UAAAC,SAAS;AAAA,eAAK;AACxBrB,UAAAA,WAAW,EAAE,CAACqB,SAAS,CAACrB;AADA,SAAL;AAAA,OAAvB;AAGH,K;;;;;;;;AA1ND;;;;;;uCAMmB0C,S,EAAwB;AACvC,UAAIA,SAAS,KAAK,KAAKpB,KAAvB,EAA8B;AAC1B;AACH;;AAED,UAAMqB,UAAU,GAAG,OAAO,KAAKlC,KAAL,CAAWZ,cAAlB,KAAqC,QAAxD;AACA,WAAKuB,QAAL,CAAc;AACVvB,QAAAA,cAAc,EAAE8C,UAAU,GAAG,CAAC,CAAJ,GAAQ7C,SADxB;AAEVC,QAAAA,iBAAiB,EAAE,EAFT;AAGVE,QAAAA,SAAS,EAAE;AAHD,OAAd;AAKH;AAED;;;;;;;;;;AAqDA;;;;;;;mCAOeO,K,EAAe;AAAA,yBAIf,KAAKc,KAJU;AAAA,UAEdC,OAFc,gBAEtBC,IAFsB,CAEdD,OAFc;AAAA,UAGtBqB,SAHsB,gBAGtBA,SAHsB;AAAA,UAKlBzC,OALkB,GAKNoB,OAAO,CAACf,KAAD,CALD,CAKlBL,OALkB;AAM1B,UAAM0C,MAAM,GAAGD,SAAS,GAAGA,SAAS,EAAZ,GAAiB,IAAzC;AACA,UAAME,OAAO,GAAGpD,gBAAgB,CAACS,OAAD,CAAhB,IAA6BG,KAAK,CAACC,OAAN,CAAcJ,OAAd,CAA7B,IAAuDA,OAAO,CAAC4C,MAAR,KAAmB,CAA1F;AACA,UAAMC,SAAS,GAAK7C,OAApB;AACA,UAAME,KAAK,GAAGyC,OAAO,GAAGE,SAAS,CAAC,CAAD,CAAT,CAAa3C,KAAhB,GAAwB,CAA7C;;AAEA,UAAIyC,OAAO,IAAID,MAAX,IAAqB,OAAOA,MAAM,CAACI,IAAd,KAAuB,UAAhD,EAA4D;AACxDJ,QAAAA,MAAM,CAACI,IAAP,CAAY5C,KAAZ;AACH;AACJ;AAED;;;;;;;;;;AA6HA;;;;;;6BAMS;AAAA,yBAIM,KAAKiB,KAJX;AAAA,UAEOC,OAFP,gBAEDC,IAFC,CAEOD,OAFP;AAAA,UAGD2B,UAHC,gBAGDA,UAHC;AAAA,yBAKqD,KAAKzC,KAL1D;AAAA,UAKGZ,cALH,gBAKGA,cALH;AAAA,UAKmBG,WALnB,gBAKmBA,WALnB;AAAA,UAKgCC,SALhC,gBAKgCA,SALhC;AAML,UAAMkD,UAAU,GAAG5B,OAAO,CAACwB,MAAR,GAAiB,CAApC;AACA,UAAMK,cAAc,GAAG7B,OAAO,CAACwB,MAAR,GAAiB,CAAxC;AACA,UAAMM,SAAS,GAAG,OAAOxD,cAAP,KAA0B,QAA5C;AACA,UAAMyD,gBAAgB,GAAGzE,UAAU,CAAC,oBAAD,EAAuB;AACtD,oCAA4BwE;AAD0B,OAAvB,CAAnC;AAGA,UAAME,gBAAgB,GAAG1E,UAAU,CAAC;AAChC,2CAAmCmB;AADH,OAAD,CAAnC;AAGA,UAAMwD,qBAAqB,GAAGxD,WAAW,GAAGP,QAAQ,CAACgE,MAAZ,GAAqBhE,QAAQ,CAACiE,QAAvE;AAEA,aACI,oBAAC,uBAAD;AAAyB,QAAA,SAAS,EAAC,eAAnC;AAAmD,QAAA,SAAS,EAAEzD;AAA9D,SACKkD,UAAU,IAAI,CAAClD,SAAf,IACG;AAAK,QAAA,SAAS,EAAC;AAAf,SACI,oBAAC,OAAD;AAAS,QAAA,IAAI,EAAE,oBAAC,gBAAD,EAAsBR,QAAQ,CAACF,IAA/B;AAAf,SACI,oBAAC,WAAD;AACI,QAAA,SAAS,EAAC,oBADd;AAEI,6BAAmBC,cAAc,CAACqB,WAAf,CAA2B8C,IAFlD;AAGI,QAAA,SAAS,EAAE,KAAKC,UAHpB;AAII,QAAA,OAAO,EAAE,KAAKC,cAJlB;AAKI,QAAA,IAAI,EAAC;AALT,SAOI,oBAAC,QAAD;AAAU,QAAA,KAAK,EAAE/E;AAAjB,QAPJ,CADJ,CADJ,EAYKsE,cAAc,IACX,oBAAC,OAAD;AAAS,QAAA,IAAI,EAAE,oBAAC,gBAAD,EAAsBI,qBAAtB;AAAf,SACI,oBAAC,WAAD;AACI,QAAA,SAAS,EAAC,sBADd;AAEI,6BAAmBhE,cAAc,CAACqB,WAAf,CAA2BiD,MAFlD;AAGI,QAAA,OAAO,EAAE,KAAKC,oBAHlB;AAII,QAAA,IAAI,EAAC;AAJT,SAMK/D,WAAW,GACR,oBAAC,UAAD;AAAY,QAAA,KAAK,EAAElB;AAAnB,QADQ,GAGR,oBAAC,YAAD;AAAc,QAAA,KAAK,EAAEA;AAArB,QATR,CADJ,CAbR,EA4BKoE,UAAU,IACP,oBAAC,OAAD;AAAS,QAAA,IAAI,EAAE,oBAAC,gBAAD,EAAsBzD,QAAQ,CAACuE,SAA/B;AAAf,SACI,oBAAC,WAAD;AACI,QAAA,SAAS,EAAEV,gBADf;AAEI,6BAAmB9D,cAAc,CAACqB,WAAf,CAA2BoD,IAFlD;AAGI,QAAA,OAAO,EAAE,KAAKC,eAHlB;AAII,QAAA,IAAI,EAAC;AAJT,SAMI,oBAAC,QAAD,OANJ,CADJ,CA7BR,CAFR,EA4CKb,SAAS,GACN;AAAK,QAAA,SAAS,EAAC;AAAf,SACI,oBAAC,gBAAD,EAAsB5D,QAAQ,CAAC0E,cAA/B,CADJ,CADM,GAIN,IAhDR,EAiDKhB,UAAU,GACP;AAAK,QAAA,SAAS,EAAEI;AAAhB,SAAmChC,OAAO,CAAC6C,GAAR,CAAY,KAAKC,gBAAjB,CAAnC,CADO,GAGP,oBAAC,gBAAD,EAAsB5E,QAAQ,CAAC6E,qBAA/B,CApDR,CADJ;AAyDH;;;;EAxToB3F,KAAK,CAAC4F,a;;AA2T/B,eAAe3E,UAAf","sourcesContent":["/**\n * @flow\n * @file Transcript component\n * @author Box\n */\n\nimport * as React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport classNames from 'classnames';\nimport { bdlGray50 } from '../../../../styles/variables';\nimport PlainButton from '../../../../components/plain-button/PlainButton';\nimport IconEdit from '../../../../icons/general/IconEdit';\nimport IconCopy from '../../../../icons/general/IconCopy';\nimport IconExpand from '../../../../icons/general/IconExpand';\nimport IconCollapse from '../../../../icons/general/IconCollapse';\nimport { formatTime } from '../../../../utils/datetime';\nimport LoadingIndicatorWrapper from '../../../../components/loading-indicator/LoadingIndicatorWrapper';\nimport Tooltip from '../../../../components/tooltip/Tooltip';\nimport { copy } from '../../../../utils/download';\nimport { SKILLS_TARGETS } from '../../../common/interactionTargets';\nimport messages from '../../../common/messages';\nimport { isValidTimeSlice } from './timeSliceUtils';\nimport TranscriptRow from './TranscriptRow';\nimport type { SkillCardEntry, SkillCard, SkillCardEntryTimeSlice } from '../../../../common/types/skills';\nimport './Transcript.scss';\n\ntype Props = {\n    card: SkillCard,\n    getViewer?: Function,\n    isEditable: boolean,\n    onSkillChange: Function,\n};\n\ntype State = {\n    isCollapsed: boolean,\n    isEditingIndex?: number,\n    isLoading: boolean,\n    newTranscriptText: string,\n};\n\nclass Transcript extends React.PureComponent<Props, State> {\n    props: Props;\n\n    state: State = {\n        isEditingIndex: undefined,\n        newTranscriptText: '',\n        isCollapsed: true,\n        isLoading: false,\n    };\n\n    copyBtn: HTMLButtonElement;\n\n    /**\n     * Called when transcripts gets new properties\n     *\n     * @private\n     * @return {void}\n     */\n    componentDidUpdate(prevProps: Props): void {\n        if (prevProps === this.props) {\n            return;\n        }\n\n        const wasEditing = typeof this.state.isEditingIndex === 'number';\n        this.setState({\n            isEditingIndex: wasEditing ? -1 : undefined,\n            newTranscriptText: '',\n            isLoading: false,\n        });\n    }\n\n    /**\n     * Reducer to accumulate all transcript entries for copying\n     *\n     * @param {Object} accumulator - reducer accumulator\n     * @return {string} accumulated transcript entries\n     */\n    transcriptReducer = (accumulator: string, { appears, text }: SkillCardEntry): string => {\n        const start: string =\n            isValidTimeSlice(appears) && Array.isArray(appears) ? `${formatTime(appears[0].start)}:` : '';\n        return `${accumulator}${start} ${text || ''}\\r\\n`;\n    };\n\n    /**\n     * Mapper to accumulate all transcript entries for displaying\n     *\n     * @param {Object} accumulator - reducer accumulator\n     * @param {number} index - mapper index\n     * @return {string} accumulated transcript entries\n     */\n    transcriptMapper = ({ appears, text }: SkillCardEntry, index: number): React.Node => {\n        const { isEditingIndex, newTranscriptText }: State = this.state;\n        const isEditingRow = isEditingIndex === index;\n        const transcriptText = isEditingRow ? newTranscriptText : text;\n        const interactionTarget = isEditingRow\n            ? SKILLS_TARGETS.TRANSCRIPTS.EDIT_TEXT\n            : SKILLS_TARGETS.TRANSCRIPTS.TRANSCRIPT;\n        return (\n            <TranscriptRow\n                key={index}\n                appears={appears}\n                interactionTarget={interactionTarget}\n                isEditing={isEditingRow}\n                onCancel={this.onCancel}\n                onChange={this.onChange}\n                onClick={() => this.onClick(index)}\n                onSave={this.onSave}\n                text={transcriptText}\n            />\n        );\n    };\n\n    /**\n     * Toggles the edit mode\n     *\n     * @private\n     * @return {void}\n     */\n    toggleIsEditing = (): void => {\n        this.setState(prevState => ({\n            isEditingIndex: typeof prevState.isEditingIndex === 'number' ? undefined : -1,\n        }));\n    };\n\n    /**\n     * Previews a transcript segment\n     *\n     * @private\n     * @param {number|void} [index] - row index to edit\n     * @return {void}\n     */\n    previewSegment(index: number) {\n        const {\n            card: { entries },\n            getViewer,\n        }: Props = this.props;\n        const { appears } = entries[index];\n        const viewer = getViewer ? getViewer() : null;\n        const isValid = isValidTimeSlice(appears) && Array.isArray(appears) && appears.length === 1;\n        const timeSlice = ((appears: any): Array<SkillCardEntryTimeSlice>);\n        const start = isValid ? timeSlice[0].start : 0;\n\n        if (isValid && viewer && typeof viewer.play === 'function') {\n            viewer.play(start);\n        }\n    }\n\n    /**\n     * Saves the new card data\n     *\n     * @private\n     * @return {void}\n     */\n    onSave = (): void => {\n        const {\n            card: { entries },\n            onSkillChange,\n        }: Props = this.props;\n        const { isEditingIndex, newTranscriptText }: State = this.state;\n\n        if (typeof isEditingIndex !== 'number') {\n            return;\n        }\n\n        const entry = entries[isEditingIndex];\n        if (entry.text === newTranscriptText) {\n            this.onCancel();\n        } else {\n            this.setState({ isLoading: true, isEditingIndex: -1 });\n            onSkillChange(null, null, [\n                {\n                    replacement: { ...entry, text: newTranscriptText },\n                    replaced: entry,\n                },\n            ]);\n        }\n    };\n\n    /**\n     * Cancels editing\n     *\n     * @private\n     * @return {void}\n     */\n    onCancel = (): void => {\n        this.setState({ isEditingIndex: -1, newTranscriptText: '' });\n    };\n\n    /**\n     * Reflects changes of editing\n     *\n     * @private\n     * @param {Event} event - keyboard event\n     * @return {void}\n     */\n    onChange = (event: SyntheticKeyboardEvent<HTMLTextAreaElement>): void => {\n        const currentTarget = (event.currentTarget: HTMLTextAreaElement);\n        this.setState({\n            newTranscriptText: currentTarget.value,\n        });\n    };\n\n    /**\n     * Click handler for transcript\n     *\n     * @private\n     * @return {void}\n     */\n    onClick = (index: number): void => {\n        const {\n            card: { entries },\n        }: Props = this.props;\n        const { isEditingIndex }: State = this.state;\n        if (typeof isEditingIndex === 'number') {\n            this.setState({\n                isEditingIndex: index,\n                newTranscriptText: entries[index].text,\n            });\n        } else {\n            this.previewSegment(index);\n        }\n    };\n\n    /**\n     * Copies the transcript.\n     * Also animates the copy button.\n     *\n     * @private\n     * @return {void}\n     */\n    copyTranscript = () => {\n        const {\n            card: { entries },\n        }: Props = this.props;\n        const copiedClass = 'be-transcript-copied';\n        copy(entries.reduce(this.transcriptReducer, ''));\n\n        // Animate the button by adding a class\n        if (this.copyBtn) {\n            this.copyBtn.classList.add(copiedClass);\n        }\n\n        // Remove the animation class\n        setTimeout(() => {\n            if (this.copyBtn) {\n                this.copyBtn.classList.remove(copiedClass);\n            }\n        }, 1000);\n    };\n\n    /**\n     * Copy button reference\n     *\n     * @private\n     * @return {void}\n     */\n    copyBtnRef = (btn: HTMLButtonElement): void => {\n        this.copyBtn = btn;\n    };\n\n    /**\n     * Toggles transcript exapand and collapse\n     *\n     * @private\n     * @return {void}\n     */\n    toggleExpandCollapse = (): void => {\n        this.setState(prevState => ({\n            isCollapsed: !prevState.isCollapsed,\n        }));\n    };\n\n    /**\n     * Renders the transcript\n     *\n     * @private\n     * @return {Object}\n     */\n    render() {\n        const {\n            card: { entries },\n            isEditable,\n        }: Props = this.props;\n        const { isEditingIndex, isCollapsed, isLoading }: State = this.state;\n        const hasEntries = entries.length > 0;\n        const hasManyEntries = entries.length > 5;\n        const isEditing = typeof isEditingIndex === 'number';\n        const editBtnClassName = classNames('be-transcript-edit', {\n            'be-transcript-is-editing': isEditing,\n        });\n        const contentClassName = classNames({\n            'be-transcript-content-collapsed': isCollapsed,\n        });\n        const expandCollapseMessage = isCollapsed ? messages.expand : messages.collapse;\n\n        return (\n            <LoadingIndicatorWrapper className=\"be-transcript\" isLoading={isLoading}>\n                {hasEntries && !isLoading && (\n                    <div className=\"be-transcript-actions\">\n                        <Tooltip text={<FormattedMessage {...messages.copy} />}>\n                            <PlainButton\n                                className=\"be-transcript-copy\"\n                                data-resin-target={SKILLS_TARGETS.TRANSCRIPTS.COPY}\n                                getDOMRef={this.copyBtnRef}\n                                onClick={this.copyTranscript}\n                                type=\"button\"\n                            >\n                                <IconCopy color={bdlGray50} />\n                            </PlainButton>\n                        </Tooltip>\n                        {hasManyEntries && (\n                            <Tooltip text={<FormattedMessage {...expandCollapseMessage} />}>\n                                <PlainButton\n                                    className=\"be-transcript-expand\"\n                                    data-resin-target={SKILLS_TARGETS.TRANSCRIPTS.EXPAND}\n                                    onClick={this.toggleExpandCollapse}\n                                    type=\"button\"\n                                >\n                                    {isCollapsed ? (\n                                        <IconExpand color={bdlGray50} />\n                                    ) : (\n                                        <IconCollapse color={bdlGray50} />\n                                    )}\n                                </PlainButton>\n                            </Tooltip>\n                        )}\n                        {isEditable && (\n                            <Tooltip text={<FormattedMessage {...messages.editLabel} />}>\n                                <PlainButton\n                                    className={editBtnClassName}\n                                    data-resin-target={SKILLS_TARGETS.TRANSCRIPTS.EDIT}\n                                    onClick={this.toggleIsEditing}\n                                    type=\"button\"\n                                >\n                                    <IconEdit />\n                                </PlainButton>\n                            </Tooltip>\n                        )}\n                    </div>\n                )}\n                {isEditing ? (\n                    <div className=\"be-transcript-edit-message\">\n                        <FormattedMessage {...messages.transcriptEdit} />\n                    </div>\n                ) : null}\n                {hasEntries ? (\n                    <div className={contentClassName}>{entries.map(this.transcriptMapper)}</div>\n                ) : (\n                    <FormattedMessage {...messages.skillNoInfoFoundError} />\n                )}\n            </LoadingIndicatorWrapper>\n        );\n    }\n}\n\nexport default Transcript;\n"],"file":"Transcript.js"}