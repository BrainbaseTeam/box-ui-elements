{"version":3,"sources":["../../../../../src/elements/content-sidebar/skills/keywords/Keywords.js"],"names":["React","PureComponent","FormattedMessage","classNames","PlainButton","IconEdit","LoadingIndicatorWrapper","InlineError","Tooltip","messages","SKILLS_TARGETS","EditableKeywords","ReadOnlyKeywords","Keywords","props","setState","prevState","isEditing","keyword","transcript","adds","state","locations","regex","RegExp","text","Array","isArray","entries","forEach","appears","test","length","push","slice","removes","addedIndex","findIndex","added","splice","onSkillChange","toggleIsEditing","isLoading","resetState","keywords","card","hasError","getViewer","isEditable","duration","hasKeywords","filter","face","includes","concat","editClassName","editLabel","KEYWORDS","EDIT","sidebarSkillsErrorTitle","sidebarSkillsErrorContent","onAdd","onCancel","onDelete","onSave","skillNoInfoFoundError"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;;;;;AAMA,OAAOA,KAAP,IAAgBC,aAAhB,QAAqC,OAArC;AACA,SAASC,gBAAT,QAAiC,YAAjC;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,OAAOC,WAAP,MAAwB,iDAAxB;AACA,OAAOC,QAAP,MAAqB,oCAArB;AACA,OAAOC,uBAAP,MAAoC,kEAApC;AACA,OAAOC,WAAP,MAAwB,iDAAxB;AACA,OAAOC,OAAP,MAAoB,wCAApB;AACA,OAAOC,QAAP,MAAqB,0BAArB;AACA,SAASC,cAAT,QAA+B,oCAA/B;AACA,OAAOC,gBAAP,MAA6B,oBAA7B;AACA,OAAOC,gBAAP,MAA6B,oBAA7B;AAGA,OAAO,iBAAP;;IAoBMC,Q;;;;;AAKF;;;;;;AAMA,oBAAYC,KAAZ,EAA0B;AAAA;;AAAA;;AACtB,kFAAMA,KAAN;;AADsB,sEAoCR,YAAY;AAC1B,YAAKC,QAAL,CAAc,UAAAC,SAAS;AAAA,eAAK;AACxBC,UAAAA,SAAS,EAAE,CAACD,SAAS,CAACC;AADE,SAAL;AAAA,OAAvB;AAGH,KAxCyB;;AAAA,4DAiDlB,UAACC,OAAD,EAAmC;AAAA,UAC/BC,UAD+B,GACT,MAAKL,KADI,CAC/BK,UAD+B;AAAA,UAE/BC,IAF+B,GAEtB,MAAKC,KAFiB,CAE/BD,IAF+B;AAGvC,UAAME,SAAS,GAAG,EAAlB;AACA,UAAMC,KAAK,GAAG,IAAIC,MAAJ,cAAmBN,OAAO,CAACO,IAA3B,UAAqD,GAArD,CAAd;;AAEA,UAAIN,UAAU,IAAIO,KAAK,CAACC,OAAN,CAAcR,UAAU,CAACS,OAAzB,CAAlB,EAAqD;AACjDT,QAAAA,UAAU,CAACS,OAAX,CAAmBC,OAAnB,CAA2B,gBAA6C;AAAA,cAA1CJ,IAA0C,QAA1CA,IAA0C;AAAA,cAApCK,OAAoC,QAApCA,OAAoC;;AACpE,cAAIL,IAAI,IAAIF,KAAK,CAACQ,IAAN,CAAWN,IAAX,CAAR,IAA4BC,KAAK,CAACC,OAAN,CAAcG,OAAd,CAA5B,IAAsDA,OAAO,CAACE,MAAR,GAAiB,CAA3E,EAA8E;AAC1EV,YAAAA,SAAS,CAACW,IAAV,CAAeH,OAAO,CAAC,CAAD,CAAtB;AACH;AACJ,SAJD;AAKH;;AAEDZ,MAAAA,OAAO,CAACY,OAAR,GAAkBR,SAAlB;AACAF,MAAAA,IAAI,CAACa,IAAL,CAAUf,OAAV;;AACA,YAAKH,QAAL,CAAc;AAAEK,QAAAA,IAAI,EAAEA,IAAI,CAACc,KAAL,CAAW,CAAX;AAAR,OAAd;AACH,KAlEyB;;AAAA,+DA0Ef,UAAChB,OAAD,EAAmC;AAAA,wBAChB,MAAKG,KADW;AAAA,UAClCD,IADkC,eAClCA,IADkC;AAAA,UAC5Be,OAD4B,eAC5BA,OAD4B;AAE1C,UAAMC,UAAU,GAAGhB,IAAI,CAACiB,SAAL,CAAe,UAAAC,KAAK;AAAA,eAAIA,KAAK,KAAKpB,OAAd;AAAA,OAApB,CAAnB;;AACA,UAAIkB,UAAU,GAAG,CAAC,CAAlB,EAAqB;AACjBhB,QAAAA,IAAI,CAACmB,MAAL,CAAYH,UAAZ,EAAwB,CAAxB;;AACA,cAAKrB,QAAL,CAAc;AAAEK,UAAAA,IAAI,EAAEA,IAAI,CAACc,KAAL,CAAW,CAAX;AAAR,SAAd;AACH,OAHD,MAGO;AACHC,QAAAA,OAAO,CAACF,IAAR,CAAaf,OAAb;;AACA,cAAKH,QAAL,CAAc;AAAEoB,UAAAA,OAAO,EAAEA,OAAO,CAACD,KAAR,CAAc,CAAd;AAAX,SAAd;AACH;AACJ,KApFyB;;AAAA,6DA4FjB,YAAY;AAAA,UACTM,aADS,GACgB,MAAK1B,KADrB,CACT0B,aADS;AAAA,yBAEgB,MAAKnB,KAFrB;AAAA,UAETc,OAFS,gBAETA,OAFS;AAAA,UAEAf,IAFA,gBAEAA,IAFA;;AAGjB,YAAKqB,eAAL;;AACA,UAAIN,OAAO,CAACH,MAAR,GAAiB,CAAjB,IAAsBZ,IAAI,CAACY,MAAL,GAAc,CAAxC,EAA2C;AACvC,cAAKjB,QAAL,CAAc;AAAE2B,UAAAA,SAAS,EAAE;AAAb,SAAd;;AACAF,QAAAA,aAAa,CAACL,OAAD,EAAUf,IAAV,CAAb;AACH;AACJ,KApGyB;;AAAA,+DA4Gf,YAAY;AACnB,YAAKuB,UAAL,CAAgB,MAAK7B,KAArB;AACH,KA9GyB;;AAEtB,UAAKO,KAAL,GAAa;AACTuB,MAAAA,QAAQ,EAAE9B,KAAK,CAAC+B,IAAN,CAAWjB,OADZ;AAETR,MAAAA,IAAI,EAAE,EAFG;AAGTe,MAAAA,OAAO,EAAE,EAHA;AAITlB,MAAAA,SAAS,EAAEH,KAAK,CAACgC,QAJR;AAKTA,MAAAA,QAAQ,EAAEhC,KAAK,CAACgC,QALP;AAMTJ,MAAAA,SAAS,EAAE;AANF,KAAb;AAFsB;AAUzB;AAED;;;;;;;;;;;+BAOW5B,K,EAAoB;AAC3B,WAAKC,QAAL,CAAc;AACV6B,QAAAA,QAAQ,EAAE9B,KAAK,CAAC+B,IAAN,CAAWjB,OADX;AAEVR,QAAAA,IAAI,EAAE,EAFI;AAGVe,QAAAA,OAAO,EAAE,EAHC;AAIVlB,QAAAA,SAAS,EAAE,KAJD;AAKV6B,QAAAA,QAAQ,EAAE,KALA;AAMVJ,QAAAA,SAAS,EAAE;AAND,OAAd;AAQH;AAED;;;;;;;;;;AAkFA;;;;;;6BAMS;AAAA,wBAC0C,KAAK5B,KAD/C;AAAA,UACG+B,IADH,eACGA,IADH;AAAA,UACSE,SADT,eACSA,SADT;AAAA,UACoBC,UADpB,eACoBA,UADpB;AAAA,UAEGC,QAFH,GAE2BJ,IAF3B,CAEGI,QAFH;AAAA,yBAGsE,KAAK5B,KAH3E;AAAA,UAGGJ,SAHH,gBAGGA,SAHH;AAAA,UAGcyB,SAHd,gBAGcA,SAHd;AAAA,UAGyBI,QAHzB,gBAGyBA,QAHzB;AAAA,UAGmCF,QAHnC,gBAGmCA,QAHnC;AAAA,UAG6CT,OAH7C,gBAG6CA,OAH7C;AAAA,UAGsDf,IAHtD,gBAGsDA,IAHtD;AAIL,UAAM8B,WAAW,GAAGN,QAAQ,CAACZ,MAAT,GAAkB,CAAtC;AACA,UAAMJ,OAAO,GAAGgB,QAAQ,CAACO,MAAT,CAAgB,UAACC,IAAD;AAAA,eAA0B,CAACjB,OAAO,CAACkB,QAAR,CAAiBD,IAAjB,CAA3B;AAAA,OAAhB,EAAmEE,MAAnE,CAA0ElC,IAA1E,CAAhB;AACA,UAAMmC,aAAa,GAAGpD,UAAU,CAAC,iBAAD,EAAoB;AAChD,iCAAyBc;AADuB,OAApB,CAAhC;AAIA,aACI,oBAAC,uBAAD;AAAyB,QAAA,SAAS,EAAC,aAAnC;AAAiD,QAAA,SAAS,EAAEyB;AAA5D,SACKQ,WAAW,IAAIF,UAAf,IAA6B,CAACN,SAA9B,IACG,oBAAC,OAAD;AAAS,QAAA,IAAI,EAAE,oBAAC,gBAAD,EAAsBjC,QAAQ,CAAC+C,SAA/B;AAAf,SACI,oBAAC,WAAD;AACI,QAAA,SAAS,EAAED,aADf;AAEI,6BAAmB7C,cAAc,CAAC+C,QAAf,CAAwBC,IAF/C;AAGI,QAAA,OAAO,EAAE,KAAKjB,eAHlB;AAII,QAAA,IAAI,EAAC;AAJT,SAMI,oBAAC,QAAD,OANJ,CADJ,CAFR,EAaKK,QAAQ,IACL,oBAAC,WAAD;AAAa,QAAA,KAAK,EAAE,oBAAC,gBAAD,EAAsBrC,QAAQ,CAACkD,uBAA/B;AAApB,SACI,oBAAC,gBAAD,EAAsBlD,QAAQ,CAACmD,yBAA/B,CADJ,CAdR,EAkBK3C,SAAS,IACN,oBAAC,gBAAD;AACI,QAAA,QAAQ,EAAEW,OADd;AAEI,QAAA,KAAK,EAAE,KAAKiC,KAFhB;AAGI,QAAA,QAAQ,EAAE,KAAKC,QAHnB;AAII,QAAA,QAAQ,EAAE,KAAKC,QAJnB;AAKI,QAAA,MAAM,EAAE,KAAKC;AALjB,QAnBR,EA2BK,CAAC/C,SAAD,IAAciC,WAAd,IACG,oBAAC,gBAAD;AAAkB,QAAA,QAAQ,EAAED,QAA5B;AAAsC,QAAA,SAAS,EAAEF,SAAjD;AAA4D,QAAA,QAAQ,EAAEnB;AAAtE,QA5BR,EA8BK,CAACX,SAAD,IAAc,CAACiC,WAAf,IAA8B,oBAAC,gBAAD,EAAsBzC,QAAQ,CAACwD,qBAA/B,CA9BnC,CADJ;AAkCH;;;;EA7KkBhE,a;;AAgLvB,eAAeY,QAAf","sourcesContent":["/**\n * @flow\n * @file File Keywords SkillCard component\n * @author Box\n */\n\nimport React, { PureComponent } from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport classNames from 'classnames';\nimport PlainButton from '../../../../components/plain-button/PlainButton';\nimport IconEdit from '../../../../icons/general/IconEdit';\nimport LoadingIndicatorWrapper from '../../../../components/loading-indicator/LoadingIndicatorWrapper';\nimport InlineError from '../../../../components/inline-error/InlineError';\nimport Tooltip from '../../../../components/tooltip/Tooltip';\nimport messages from '../../../common/messages';\nimport { SKILLS_TARGETS } from '../../../common/interactionTargets';\nimport EditableKeywords from './EditableKeywords';\nimport ReadOnlyKeywords from './ReadOnlyKeywords';\nimport type { SkillCardEntry, SkillCard } from '../../../../common/types/skills';\n\nimport './Keywords.scss';\n\ntype Props = {\n    card: SkillCard,\n    getViewer?: Function,\n    hasError: boolean,\n    isEditable: boolean,\n    onSkillChange: Function,\n    transcript?: SkillCard,\n};\n\ntype State = {\n    adds: Array<SkillCardEntry>,\n    hasError: boolean,\n    isEditing: boolean,\n    isLoading: boolean,\n    keywords: Array<SkillCardEntry>,\n    removes: Array<SkillCardEntry>,\n};\n\nclass Keywords extends PureComponent<Props, State> {\n    props: Props;\n\n    state: State;\n\n    /**\n     * [constructor]\n     *\n     * @public\n     * @return {Keywords}\n     */\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            keywords: props.card.entries,\n            adds: [],\n            removes: [],\n            isEditing: props.hasError,\n            hasError: props.hasError,\n            isLoading: false,\n        };\n    }\n\n    /**\n     * Helper to reset the state\n     *\n     * @private\n     * @param {Object} props - component props\n     * @return {void}\n     */\n    resetState(props: Props): void {\n        this.setState({\n            keywords: props.card.entries,\n            adds: [],\n            removes: [],\n            isEditing: false,\n            hasError: false,\n            isLoading: false,\n        });\n    }\n\n    /**\n     * Toggles the edit mode\n     *\n     * @private\n     * @return {void}\n     */\n    toggleIsEditing = (): void => {\n        this.setState(prevState => ({\n            isEditing: !prevState.isEditing,\n        }));\n    };\n\n    /**\n     * Adds a new keyword.\n     * Iterates over the transcript to find locations\n     *\n     * @private\n     * @return {void}\n     */\n    onAdd = (keyword: SkillCardEntry): void => {\n        const { transcript }: Props = this.props;\n        const { adds } = this.state;\n        const locations = [];\n        const regex = new RegExp(`\\\\b${((keyword.text: any): string)}\\\\b`, 'i');\n\n        if (transcript && Array.isArray(transcript.entries)) {\n            transcript.entries.forEach(({ text, appears }: SkillCardEntry): void => {\n                if (text && regex.test(text) && Array.isArray(appears) && appears.length > 0) {\n                    locations.push(appears[0]);\n                }\n            });\n        }\n\n        keyword.appears = locations;\n        adds.push(keyword);\n        this.setState({ adds: adds.slice(0) });\n    };\n\n    /**\n     * Deletes a keyword\n     *\n     * @private\n     * @return {void}\n     */\n    onDelete = (keyword: SkillCardEntry): void => {\n        const { adds, removes } = this.state;\n        const addedIndex = adds.findIndex(added => added === keyword);\n        if (addedIndex > -1) {\n            adds.splice(addedIndex, 1);\n            this.setState({ adds: adds.slice(0) });\n        } else {\n            removes.push(keyword);\n            this.setState({ removes: removes.slice(0) });\n        }\n    };\n\n    /**\n     * Saves the new card data\n     *\n     * @private\n     * @return {void}\n     */\n    onSave = (): void => {\n        const { onSkillChange }: Props = this.props;\n        const { removes, adds }: State = this.state;\n        this.toggleIsEditing();\n        if (removes.length > 0 || adds.length > 0) {\n            this.setState({ isLoading: true });\n            onSkillChange(removes, adds);\n        }\n    };\n\n    /**\n     * Cancels editing\n     *\n     * @private\n     * @return {void}\n     */\n    onCancel = (): void => {\n        this.resetState(this.props);\n    };\n\n    /**\n     * Renders the keywords\n     *\n     * @private\n     * @return {void}\n     */\n    render() {\n        const { card, getViewer, isEditable }: Props = this.props;\n        const { duration }: SkillCard = card;\n        const { isEditing, isLoading, hasError, keywords, removes, adds }: State = this.state;\n        const hasKeywords = keywords.length > 0;\n        const entries = keywords.filter((face: SkillCardEntry) => !removes.includes(face)).concat(adds);\n        const editClassName = classNames('be-keyword-edit', {\n            'be-keyword-is-editing': isEditing,\n        });\n\n        return (\n            <LoadingIndicatorWrapper className=\"be-keywords\" isLoading={isLoading}>\n                {hasKeywords && isEditable && !isLoading && (\n                    <Tooltip text={<FormattedMessage {...messages.editLabel} />}>\n                        <PlainButton\n                            className={editClassName}\n                            data-resin-target={SKILLS_TARGETS.KEYWORDS.EDIT}\n                            onClick={this.toggleIsEditing}\n                            type=\"button\"\n                        >\n                            <IconEdit />\n                        </PlainButton>\n                    </Tooltip>\n                )}\n                {hasError && (\n                    <InlineError title={<FormattedMessage {...messages.sidebarSkillsErrorTitle} />}>\n                        <FormattedMessage {...messages.sidebarSkillsErrorContent} />\n                    </InlineError>\n                )}\n                {isEditing && (\n                    <EditableKeywords\n                        keywords={entries}\n                        onAdd={this.onAdd}\n                        onCancel={this.onCancel}\n                        onDelete={this.onDelete}\n                        onSave={this.onSave}\n                    />\n                )}\n                {!isEditing && hasKeywords && (\n                    <ReadOnlyKeywords duration={duration} getViewer={getViewer} keywords={entries} />\n                )}\n                {!isEditing && !hasKeywords && <FormattedMessage {...messages.skillNoInfoFoundError} />}\n            </LoadingIndicatorWrapper>\n        );\n    }\n}\n\nexport default Keywords;\n"],"file":"Keywords.js"}