{"version":3,"sources":["../../../../../src/elements/content-sidebar/skills/keywords/EditableKeywords.js"],"names":["React","FormattedMessage","PillSelector","PrimaryButton","Button","messages","SKILLS_TARGETS","getPills","EditableKeywords","props","option","index","onDelete","keywords","key","state","isInCompositionMode","onBlur","onAdd","keyword","type","text","setState","event","currentTarget","value","pills","prevKeywords","onSave","onCancel","onCompositionEnd","onCompositionStart","onInput","onKeyDown","onRemove","KEYWORDS","EDIT_CANCEL","cancel","EDIT_SAVE","save","PureComponent"],"mappings":"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","sourcesContent":["/**\n * @flow\n * @file Editable Skill Keywords card component\n * @author Box\n */\n\nimport * as React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport PillSelector from '../../../../components/pill-selector-dropdown/PillSelector';\nimport PrimaryButton from '../../../../components/primary-button/PrimaryButton';\nimport Button from '../../../../components/button/Button';\nimport messages from '../../../common/messages';\nimport { SKILLS_TARGETS } from '../../../common/interactionTargets';\nimport getPills from './keywordUtils';\nimport type { Pill, Pills } from './flowTypes';\nimport type { SkillCardEntry } from '../../../../common/types/skills';\nimport './EditableKeywords.scss';\n\ntype Props = {\n    keywords: Array<SkillCardEntry>,\n    onAdd: Function,\n    onCancel: Function,\n    onDelete: Function,\n    onSave: Function,\n};\n\ntype State = {\n    isInCompositionMode: boolean,\n    keyword: string,\n    pills: Pills,\n};\n\nclass EditableKeywords extends React.PureComponent<Props, State> {\n    props: Props;\n\n    state: State;\n\n    /**\n     * [constructor]\n     *\n     * @public\n     * @return {EditableKeywords}\n     */\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            pills: getPills(props.keywords),\n            keyword: '',\n            isInCompositionMode: false,\n        };\n    }\n\n    /**\n     * Called when keywords gets new properties.\n     * Should reset to original state.\n     *\n     * @private\n     * @param {Object} nextProps - component props\n     * @return {void}\n     */\n    componentDidUpdate({ keywords: prevKeywords }: Props): void {\n        const { keywords } = this.props;\n\n        if (prevKeywords !== keywords) {\n            this.setState({ pills: getPills(keywords), keyword: '' });\n        }\n    }\n\n    /**\n     * Called when keywords gets new properties.\n     * Should reset to original state.\n     *\n     * @private\n     * @param {Object} option - pill\n     * @param {number} index - pill index\n     * @return {void}\n     */\n    onRemove = (option: Pill, index: number): void => {\n        // eslint-disable-line\n        const { onDelete, keywords }: Props = this.props;\n        onDelete(keywords[index]);\n    };\n\n    /**\n     * When pressing enter in the pill input box\n     *\n     * @private\n     * @param {Event} event - keyboard event\n     * @return {void}\n     */\n    onKeyDown = ({ key }: SyntheticKeyboardEvent<HTMLInputElement>): void => {\n        if (key === 'Enter' && !this.state.isInCompositionMode) {\n            this.onBlur();\n        }\n    };\n\n    /**\n     * Called when pill selector is blurred.\n     * Adds a new pill if needed.\n     *\n     * @private\n     * @return {void}\n     */\n    onBlur = () => {\n        const { onAdd }: Props = this.props;\n        const { keyword } = this.state;\n\n        if (keyword) {\n            onAdd({\n                type: 'text',\n                text: keyword,\n            });\n        }\n    };\n\n    /**\n     * Enables composition mode.\n     *\n     * @private\n     * @return {void}\n     */\n    onCompositionStart = () => {\n        this.setState({ isInCompositionMode: true });\n    };\n\n    /**\n     * Disables composition mode.\n     *\n     * @private\n     * @return {void}\n     */\n    onCompositionEnd = () => {\n        this.setState({ isInCompositionMode: false });\n    };\n\n    /**\n     * Called when pill selector gets new input value.\n     *\n     * @private\n     * @return {void}\n     */\n    onInput = (event: SyntheticKeyboardEvent<HTMLInputElement>) => {\n        const currentTarget = (event.currentTarget: HTMLInputElement);\n        this.setState({\n            keyword: currentTarget.value,\n        });\n    };\n\n    /**\n     * Renders the keywords\n     *\n     * @private\n     * @return {void}\n     */\n    render() {\n        const { onSave, onCancel }: Props = this.props;\n        const { pills, keyword }: State = this.state;\n        return (\n            <span className=\"bdl-EditableKeywords\">\n                <PillSelector\n                    onBlur={this.onBlur}\n                    onCompositionEnd={this.onCompositionEnd}\n                    onCompositionStart={this.onCompositionStart}\n                    onInput={this.onInput}\n                    onKeyDown={this.onKeyDown}\n                    onPaste={this.onInput}\n                    onRemove={this.onRemove}\n                    selectedOptions={pills}\n                    value={keyword}\n                />\n                <div className=\"be-keywords-buttons\">\n                    <Button data-resin-target={SKILLS_TARGETS.KEYWORDS.EDIT_CANCEL} onClick={onCancel} type=\"button\">\n                        <FormattedMessage {...messages.cancel} />\n                    </Button>\n                    <PrimaryButton data-resin-target={SKILLS_TARGETS.KEYWORDS.EDIT_SAVE} onClick={onSave} type=\"button\">\n                        <FormattedMessage {...messages.save} />\n                    </PrimaryButton>\n                </div>\n            </span>\n        );\n    }\n}\n\nexport default EditableKeywords;\n"],"file":"EditableKeywords.js"}