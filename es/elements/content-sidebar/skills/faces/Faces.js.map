{"version":3,"sources":["../../../../../src/elements/content-sidebar/skills/faces/Faces.js"],"names":["React","FormattedMessage","classNames","PlainButton","PrimaryButton","LoadingIndicatorWrapper","InlineError","Tooltip","Button","IconEdit","messages","SKILLS_TARGETS","Face","Timeline","Faces","props","setState","prevState","isEditing","face","selected","state","undefined","removes","push","slice","onSkillChange","toggleIsEditing","length","isLoading","resetState","faces","card","entries","hasError","isEditable","getViewer","duration","hasFaces","filter","includes","editClassName","editLabel","FACES","EDIT","sidebarSkillsErrorTitle","sidebarSkillsErrorContent","map","index","onDelete","onSelect","skillNoInfoFoundError","Array","isArray","appears","TIMELINE","EDIT_CANCEL","onCancel","cancel","EDIT_SAVE","onSave","save","PureComponent"],"mappings":"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","sourcesContent":["/**\n * @flow\n * @file Faces Skill Card component\n * @author Box\n */\n\nimport * as React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport classNames from 'classnames';\nimport PlainButton from '../../../../components/plain-button/PlainButton';\nimport PrimaryButton from '../../../../components/primary-button/PrimaryButton';\nimport LoadingIndicatorWrapper from '../../../../components/loading-indicator/LoadingIndicatorWrapper';\nimport InlineError from '../../../../components/inline-error/InlineError';\nimport Tooltip from '../../../../components/tooltip/Tooltip';\nimport Button from '../../../../components/button/Button';\nimport IconEdit from '../../../../icons/general/IconEdit';\nimport messages from '../../../common/messages';\nimport { SKILLS_TARGETS } from '../../../common/interactionTargets';\nimport Face from './Face';\nimport Timeline from '../timeline';\nimport type { SkillCardEntry, SkillCard } from '../../../../common/types/skills';\nimport './Faces.scss';\n\ntype Props = {\n    card: SkillCard,\n    getViewer?: Function,\n    hasError: boolean,\n    isEditable: boolean,\n    onSkillChange: Function,\n};\n\ntype State = {\n    faces: Array<SkillCardEntry>,\n    hasError: boolean,\n    isEditing: boolean,\n    isLoading: boolean,\n    removes: Array<SkillCardEntry>,\n    selected?: SkillCardEntry,\n};\n\nclass Faces extends React.PureComponent<Props, State> {\n    props: Props;\n\n    state: State;\n\n    /**\n     * [constructor]\n     *\n     * @public\n     * @return {Faces}\n     */\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            faces: props.card.entries,\n            removes: [],\n            isEditing: props.hasError,\n            hasError: props.hasError,\n            isLoading: false,\n        };\n    }\n\n    /**\n     * Helper to reset the state\n     *\n     * @private\n     * @param {Object} props - component props\n     * @return {void}\n     */\n    resetState(props: Props): void {\n        this.setState({\n            faces: props.card.entries,\n            removes: [],\n            isEditing: false,\n            selected: undefined,\n            hasError: false,\n            isLoading: false,\n        });\n    }\n\n    /**\n     * Toggles the edit mode\n     *\n     * @private\n     * @return {void}\n     */\n    toggleIsEditing = (): void => {\n        this.setState(prevState => ({\n            isEditing: !prevState.isEditing,\n        }));\n    };\n\n    /**\n     * Toggles face selection\n     *\n     * @private\n     * @return {void}\n     */\n    onSelect = (face: SkillCardEntry): void => {\n        const { selected } = this.state;\n        this.setState({\n            selected: selected === face ? undefined : face,\n        });\n    };\n\n    /**\n     * Deletes a face\n     *\n     * @private\n     * @return {void}\n     */\n    onDelete = (face: SkillCardEntry): void => {\n        const { removes } = this.state;\n        removes.push(face);\n        this.setState({ removes: removes.slice(0) });\n    };\n\n    /**\n     * Saves the new card data\n     *\n     * @private\n     * @return {void}\n     */\n    onSave = (): void => {\n        const { onSkillChange }: Props = this.props;\n        const { removes }: State = this.state;\n        this.toggleIsEditing();\n        if (removes.length > 0) {\n            this.setState({ isLoading: true });\n            onSkillChange(removes);\n        }\n    };\n\n    /**\n     * Cancels editing\n     *\n     * @private\n     * @return {void}\n     */\n    onCancel = (): void => {\n        this.resetState(this.props);\n    };\n\n    /**\n     * Renders the faces\n     *\n     * @private\n     * @return {void}\n     */\n    render() {\n        const { card, isEditable, getViewer }: Props = this.props;\n        const { selected, faces, removes, isEditing, hasError, isLoading }: State = this.state;\n        const { duration }: SkillCard = card;\n        const hasFaces = faces.length > 0;\n        const entries = faces.filter((face: SkillCardEntry) => !removes.includes(face));\n        const editClassName = classNames('be-face-edit', {\n            'be-faces-is-editing': isEditing,\n        });\n\n        return (\n            <LoadingIndicatorWrapper className=\"be-faces\" isLoading={isLoading}>\n                {hasFaces && isEditable && !isLoading && (\n                    <Tooltip text={<FormattedMessage {...messages.editLabel} />}>\n                        <PlainButton\n                            className={editClassName}\n                            data-resin-target={SKILLS_TARGETS.FACES.EDIT}\n                            onClick={this.toggleIsEditing}\n                            type=\"button\"\n                        >\n                            <IconEdit />\n                        </PlainButton>\n                    </Tooltip>\n                )}\n                {hasError && (\n                    <InlineError title={<FormattedMessage {...messages.sidebarSkillsErrorTitle} />}>\n                        <FormattedMessage {...messages.sidebarSkillsErrorContent} />\n                    </InlineError>\n                )}\n                {hasFaces ? (\n                    entries.map((face: SkillCardEntry, index: number) => (\n                        /* eslint-disable react/no-array-index-key */\n                        <Face\n                            key={index}\n                            face={face}\n                            isEditing={isEditing}\n                            onDelete={this.onDelete}\n                            onSelect={this.onSelect}\n                            selected={selected}\n                        />\n                        /* eslint-enable react/no-array-index-key */\n                    ))\n                ) : (\n                    <FormattedMessage {...messages.skillNoInfoFoundError} />\n                )}\n                {!!selected && !isEditing && Array.isArray(selected.appears) && selected.appears.length > 0 && (\n                    <Timeline\n                        duration={duration}\n                        getViewer={getViewer}\n                        interactionTarget={SKILLS_TARGETS.FACES.TIMELINE}\n                        timeslices={selected.appears}\n                    />\n                )}\n                {isEditing && (\n                    <div className=\"be-faces-buttons\">\n                        <Button\n                            data-resin-target={SKILLS_TARGETS.FACES.EDIT_CANCEL}\n                            onClick={this.onCancel}\n                            type=\"button\"\n                        >\n                            <FormattedMessage {...messages.cancel} />\n                        </Button>\n                        <PrimaryButton\n                            data-resin-target={SKILLS_TARGETS.FACES.EDIT_SAVE}\n                            onClick={this.onSave}\n                            type=\"button\"\n                        >\n                            <FormattedMessage {...messages.save} />\n                        </PrimaryButton>\n                    </div>\n                )}\n            </LoadingIndicatorWrapper>\n        );\n    }\n}\n\nexport default Faces;\n"],"file":"Faces.js"}