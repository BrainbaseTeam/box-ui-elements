{"version":3,"sources":["../../../src/elements/content-sharing/ContentSharing.js"],"names":["React","API","SharingModal","CLIENT_NAME_CONTENT_SHARING","DEFAULT_HOSTNAME_API","createAPI","apiHost","itemID","itemType","token","clientName","id","ContentSharing","config","customButton","displayInModal","language","messages","uuid","useState","api","setAPI","launchButton","setLaunchButton","isVisible","setIsVisible","useEffect","cloneElement","onClick"],"mappings":"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","sourcesContent":["/**\n * @flow\n * @file ContentSharing Element\n * @description This is the top-level component for ContentSharing. It instantiates the API, which it then\n * passes to the SharingModal component either immediately (when no custom button is provided) or on\n * button click (when a custom button is provided).\n * @author Box\n */\nimport 'regenerator-runtime/runtime';\nimport * as React from 'react';\nimport API from '../../api';\nimport SharingModal from './SharingModal';\nimport { CLIENT_NAME_CONTENT_SHARING, DEFAULT_HOSTNAME_API } from '../../constants';\nimport type { ItemType, StringMap } from '../../common/types/core';\nimport type { USMConfig } from '../../features/unified-share-modal/flowTypes';\n\nimport '../common/base.scss';\nimport '../common/fonts.scss';\nimport '../common/modal.scss';\n\ntype ContentSharingProps = {\n    /** apiHost - API hostname. Defaults to https://api.box.com */\n    apiHost: string,\n    /** config - Configuration object that shows/hides features in the USM */\n    config?: USMConfig,\n    /**\n     * customButton - Clickable element for opening the SharingModal component.\n     * This property should always be used in conjunction with displayInModal.\n     */\n    customButton?: React.Element<any>,\n    /**\n     * displayInModal - Whether the SharingModal component should be displayed in a modal.\n     * If false, the SharingModal component will appear as a form within the surrounding page.\n     * This property can be used with or without a customButton. If used without a customButton,\n     * the modal will appear on page load. See ContentSharing.stories.js for examples.\n     */\n    displayInModal: boolean,\n    /** itemID - Box file or folder ID */\n    itemID: string,\n    /** itemType - \"file\" or \"folder\" */\n    itemType: ItemType,\n    /** language - Language used for the element */\n    language: string,\n    /** messages - Localized strings used by the element */\n    messages?: StringMap,\n    /** token - Valid access token */\n    token: string,\n    /** uuid - Unique identifier, used for refreshing element visibility when called from the ES6 wrapper */\n    uuid?: string,\n};\n\nconst createAPI = (apiHost, itemID, itemType, token) =>\n    new API({\n        apiHost,\n        clientName: CLIENT_NAME_CONTENT_SHARING,\n        id: `${itemType}_${itemID}`,\n        token,\n    });\n\nfunction ContentSharing({\n    apiHost = DEFAULT_HOSTNAME_API,\n    config,\n    customButton,\n    displayInModal,\n    itemID,\n    itemType,\n    language,\n    messages,\n    token,\n    uuid,\n}: ContentSharingProps) {\n    const [api, setAPI] = React.useState<API | null>(createAPI(apiHost, itemID, itemType, token));\n    const [launchButton, setLaunchButton] = React.useState<React.Element<any> | null>(null);\n    const [isVisible, setIsVisible] = React.useState<boolean>(!customButton);\n\n    // Reset the API if necessary\n    React.useEffect(() => {\n        if (!api && apiHost && itemID && itemType && token) {\n            setAPI(createAPI(apiHost, itemID, itemType, token));\n        }\n    }, [api, apiHost, itemID, itemType, token]);\n\n    // Reset state if the API has changed\n    React.useEffect(() => {\n        setIsVisible(!customButton);\n    }, [api, customButton, uuid]);\n\n    React.useEffect(() => {\n        if (customButton && !launchButton) {\n            setLaunchButton(\n                React.cloneElement(customButton, {\n                    onClick: () => {\n                        return setIsVisible(true);\n                    },\n                }),\n            );\n        }\n    }, [config, customButton, displayInModal, itemID, itemType, language, launchButton, messages, isVisible]);\n\n    return (\n        <>\n            {launchButton}\n            {api && (\n                <SharingModal\n                    api={api}\n                    config={config}\n                    displayInModal={displayInModal}\n                    isVisible={isVisible}\n                    itemID={itemID}\n                    itemType={itemType}\n                    language={language}\n                    messages={messages}\n                    setIsVisible={setIsVisible}\n                    uuid={uuid}\n                />\n            )}\n        </>\n    );\n}\n\nexport default ContentSharing;\n"],"file":"ContentSharing.js"}