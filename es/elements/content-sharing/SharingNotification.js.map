{"version":3,"sources":["../../../src/elements/content-sharing/SharingNotification.js"],"names":["React","FormattedMessage","API","Notification","DURATION_SHORT","TYPE_ERROR","TYPE_INFO","NotificationsWrapper","useSharedLink","convertCollab","convertCollabsRequest","convertCollabsResponse","convertGroupContactsResponse","convertItemResponse","convertSharedLinkPermissions","convertSharedLinkSettings","convertUserContactsResponse","USM_TO_API_ACCESS_LEVEL_MAP","useAvatars","useCollaborators","useContacts","useInvites","contentSharingMessages","SharingNotification","accessLevel","api","closeComponent","closeSettings","collaboratorsList","currentUserID","getContacts","isDownloadAvailable","itemID","itemType","ownerEmail","ownerID","permissions","sendInvites","serverURL","setChangeSharedLinkAccessLevel","setChangeSharedLinkPermissionLevel","setGetContacts","setCollaboratorsList","setIsLoading","setItem","setOnAddLink","setOnRemoveLink","setOnSubmitSettings","setSendInvites","setSharedLink","useState","notifications","setNotifications","notificationID","setNotificationID","handleNotificationClose","useCallback","id","updatedNotifications","createNotification","notificationType","message","handleUpdateSharedLinkSuccess","itemData","updatedItem","item","updatedSharedLink","sharedLink","prevItem","prevSharedLink","handleRemoveSharedLinkSuccess","handleUpdateSharedLinkError","sharedLinkUpdateError","sharedLinkSettingsUpdateSuccess","handleRemoveSharedLinkError","sharedLinkRemovalSuccess","transformAccess","newAccessLevel","transformPermissions","newSharedLinkPermissionLevel","transformSettings","settings","access","changeSharedLinkAccessLevel","changeSharedLinkPermissionLevel","onAddLink","onRemoveLink","onSubmitSettings","collaboratorsListFromAPI","handleError","collaboratorsLoadingError","avatarsFromAPI","getContactsFn","getContactsError","transformGroups","data","transformUsers","sendInvitesFn","handleSuccess","response","sendInvitesSuccess","prevList","newList","collaborators","newCollab","collab","isCurrentUserOwner","push","sendInvitesError","transformRequest","Object","values"],"mappings":"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","sourcesContent":["// @flow\nimport * as React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport type { MessageDescriptor } from 'react-intl';\nimport API from '../../api';\nimport Notification from '../../components/notification/Notification';\nimport { DURATION_SHORT, TYPE_ERROR, TYPE_INFO } from '../../components/notification/constants';\nimport NotificationsWrapper from '../../components/notification/NotificationsWrapper';\nimport useSharedLink from './hooks/useSharedLink';\nimport {\n    convertCollab,\n    convertCollabsRequest,\n    convertCollabsResponse,\n    convertGroupContactsResponse,\n    convertItemResponse,\n    convertSharedLinkPermissions,\n    convertSharedLinkSettings,\n    convertUserContactsResponse,\n    USM_TO_API_ACCESS_LEVEL_MAP,\n} from '../../features/unified-share-modal/utils/convertData';\nimport useAvatars from './hooks/useAvatars';\nimport useCollaborators from './hooks/useCollaborators';\nimport useContacts from './hooks/useContacts';\nimport useInvites from './hooks/useInvites';\nimport contentSharingMessages from './messages';\nimport type { BoxItemPermission, Collaborations, ItemType, NotificationType } from '../../common/types/core';\nimport type { collaboratorsListType, item as itemFlowType } from '../../features/unified-share-modal/flowTypes';\nimport type {\n    ContentSharingItemAPIResponse,\n    ContentSharingSharedLinkType,\n    GetContactsFnType,\n    SendInvitesFnType,\n    SharedLinkUpdateLevelFnType,\n    SharedLinkUpdateSettingsFnType,\n} from './types';\n\ntype SharingNotificationProps = {\n    accessLevel: string,\n    api: API,\n    closeComponent: () => void,\n    closeSettings: () => void,\n    collaboratorsList: collaboratorsListType | null,\n    currentUserID: string | null,\n    getContacts: GetContactsFnType | null,\n    isDownloadAvailable: boolean,\n    itemID: string,\n    itemType: ItemType,\n    ownerEmail: ?string,\n    ownerID: ?string,\n    permissions: ?BoxItemPermission,\n    sendInvites: SendInvitesFnType | null,\n    serverURL: string,\n    setChangeSharedLinkAccessLevel: (changeSharedLinkAccessLevel: () => SharedLinkUpdateLevelFnType | null) => void,\n    setChangeSharedLinkPermissionLevel: (\n        changeSharedLinkPermissionLevel: () => SharedLinkUpdateLevelFnType | null,\n    ) => void,\n    setCollaboratorsList: (\n        collaboratorsList:\n            | collaboratorsListType\n            | null\n            | ((prevList: collaboratorsListType | null) => collaboratorsListType),\n    ) => void,\n    setGetContacts: (getContacts: () => GetContactsFnType | null) => void,\n    setIsLoading: boolean => void,\n    setItem: ((item: itemFlowType | null) => itemFlowType) => void,\n    setOnAddLink: (addLink: () => SharedLinkUpdateLevelFnType | null) => void,\n    setOnRemoveLink: (removeLink: () => SharedLinkUpdateLevelFnType | null) => void,\n    setOnSubmitSettings: (submitSettings: () => SharedLinkUpdateSettingsFnType | null) => void,\n    setSendInvites: (sendInvites: () => SendInvitesFnType | null) => void,\n    setSharedLink: ((sharedLink: ContentSharingSharedLinkType | null) => ContentSharingSharedLinkType) => void,\n};\n\nfunction SharingNotification({\n    accessLevel,\n    api,\n    closeComponent,\n    closeSettings,\n    collaboratorsList,\n    currentUserID,\n    getContacts,\n    isDownloadAvailable,\n    itemID,\n    itemType,\n    ownerEmail,\n    ownerID,\n    permissions,\n    sendInvites,\n    serverURL,\n    setChangeSharedLinkAccessLevel,\n    setChangeSharedLinkPermissionLevel,\n    setGetContacts,\n    setCollaboratorsList,\n    setIsLoading,\n    setItem,\n    setOnAddLink,\n    setOnRemoveLink,\n    setOnSubmitSettings,\n    setSendInvites,\n    setSharedLink,\n}: SharingNotificationProps) {\n    const [notifications, setNotifications] = React.useState<{ [string]: typeof Notification }>({});\n    const [notificationID, setNotificationID] = React.useState<number>(0);\n\n    // Close a notification\n    const handleNotificationClose = React.useCallback(\n        (id: number) => {\n            const updatedNotifications = { ...notifications };\n            delete updatedNotifications[id];\n            setNotifications(updatedNotifications);\n        },\n        [notifications],\n    );\n\n    // Create a notification\n    const createNotification = React.useCallback(\n        (notificationType: NotificationType, message: MessageDescriptor) => {\n            const updatedNotifications = { ...notifications };\n            if (updatedNotifications[notificationID]) {\n                return;\n            }\n            updatedNotifications[notificationID] = (\n                <Notification\n                    key={notificationID}\n                    duration={DURATION_SHORT}\n                    onClose={() => handleNotificationClose(notificationID)}\n                    type={notificationType}\n                >\n                    <span>\n                        <FormattedMessage {...message} />\n                    </span>\n                </Notification>\n            );\n            setNotifications(updatedNotifications);\n            setNotificationID(notificationID + 1);\n        },\n        [handleNotificationClose, notificationID, notifications],\n    );\n\n    // Handle successful PUT requests to /files or /folders\n    const handleUpdateSharedLinkSuccess = (itemData: ContentSharingItemAPIResponse) => {\n        const { item: updatedItem, sharedLink: updatedSharedLink } = convertItemResponse(itemData);\n        setItem((prevItem: itemFlowType | null) => ({ ...prevItem, ...updatedItem }));\n        setSharedLink((prevSharedLink: ContentSharingSharedLinkType | null) => {\n            return {\n                ...prevSharedLink,\n                ...updatedSharedLink,\n            };\n        }); // merge new shared link data with current shared link data\n    };\n\n    /**\n     * Handle a successful shared link removal request.\n     *\n     * Most of the data for the shared link will be removed, with the exception of the \"canInvite\" and \"serverURL\"\n     * properties, both of which are still necessary for rendering the form-only version of ContentSharing.\n     * We retain \"serverURL\" from the previous shared link, to avoid having to make another call to the Users API.\n     *\n     * @param {ContentSharingItemAPIResponse} itemData\n     */\n    const handleRemoveSharedLinkSuccess = (itemData: ContentSharingItemAPIResponse) => {\n        const { item: updatedItem, sharedLink: updatedSharedLink } = convertItemResponse(itemData);\n        setItem((prevItem: itemFlowType | null) => ({ ...prevItem, ...updatedItem }));\n        setSharedLink((prevSharedLink: ContentSharingSharedLinkType | null) => {\n            return {\n                ...updatedSharedLink,\n                serverURL: prevSharedLink ? prevSharedLink.serverURL : '',\n            };\n        });\n    };\n\n    // Generate shared link CRUD functions for the item\n    const {\n        changeSharedLinkAccessLevel,\n        changeSharedLinkPermissionLevel,\n        onAddLink,\n        onRemoveLink,\n        onSubmitSettings,\n    } = useSharedLink(api, itemID, itemType, permissions, accessLevel, {\n        handleUpdateSharedLinkError: () => {\n            createNotification(TYPE_ERROR, contentSharingMessages.sharedLinkUpdateError);\n            setIsLoading(false);\n            closeSettings();\n        },\n        handleUpdateSharedLinkSuccess: itemData => {\n            createNotification(TYPE_INFO, contentSharingMessages.sharedLinkSettingsUpdateSuccess);\n            handleUpdateSharedLinkSuccess(itemData);\n            setIsLoading(false);\n            closeSettings();\n        },\n        handleRemoveSharedLinkError: () => {\n            createNotification(TYPE_ERROR, contentSharingMessages.sharedLinkUpdateError);\n            setIsLoading(false);\n            closeComponent(); // if this function is provided, it will close the modal\n        },\n        handleRemoveSharedLinkSuccess: itemData => {\n            createNotification(TYPE_INFO, contentSharingMessages.sharedLinkRemovalSuccess);\n            handleRemoveSharedLinkSuccess(itemData);\n            setIsLoading(false);\n            closeComponent();\n        },\n        setIsLoading,\n        transformAccess: newAccessLevel => USM_TO_API_ACCESS_LEVEL_MAP[newAccessLevel],\n        transformPermissions: newSharedLinkPermissionLevel =>\n            convertSharedLinkPermissions(newSharedLinkPermissionLevel),\n        transformSettings: (settings, access) =>\n            convertSharedLinkSettings(settings, access, isDownloadAvailable, serverURL),\n    });\n\n    setChangeSharedLinkAccessLevel(() => changeSharedLinkAccessLevel);\n    setChangeSharedLinkPermissionLevel(() => changeSharedLinkPermissionLevel);\n    setOnAddLink(() => onAddLink);\n    setOnRemoveLink(() => onRemoveLink);\n    setOnSubmitSettings(() => onSubmitSettings);\n\n    // Set the collaborators list\n    const collaboratorsListFromAPI: Collaborations | null = useCollaborators(api, itemID, itemType, {\n        handleError: () => createNotification(TYPE_ERROR, contentSharingMessages.collaboratorsLoadingError),\n    });\n    const avatarsFromAPI = useAvatars(api, itemID, collaboratorsListFromAPI);\n\n    if (collaboratorsListFromAPI && avatarsFromAPI && !collaboratorsList) {\n        setCollaboratorsList(\n            convertCollabsResponse(collaboratorsListFromAPI, avatarsFromAPI, ownerEmail, currentUserID === ownerID),\n        );\n    }\n\n    // Set the getContacts function\n    const getContactsFn: GetContactsFnType | null = useContacts(api, itemID, {\n        handleError: () => createNotification(TYPE_ERROR, contentSharingMessages.getContactsError),\n        transformGroups: data => convertGroupContactsResponse(data),\n        transformUsers: data => convertUserContactsResponse(data, currentUserID),\n    });\n    if (getContactsFn && !getContacts) {\n        setGetContacts(() => getContactsFn);\n    }\n\n    // Set the sendInvites function\n    const sendInvitesFn = useInvites(api, itemID, itemType, {\n        handleSuccess: response => {\n            createNotification(TYPE_INFO, contentSharingMessages.sendInvitesSuccess);\n            setIsLoading(false);\n            setCollaboratorsList((prevList: collaboratorsListType | null) => {\n                const newList = prevList ? { ...prevList } : { collaborators: [] };\n                const newCollab = convertCollab({\n                    collab: response,\n                    ownerEmail,\n                    isCurrentUserOwner: currentUserID === ownerID,\n                });\n                if (newCollab) {\n                    newList.collaborators.push(newCollab);\n                }\n                return newList;\n            });\n            closeComponent();\n        },\n        handleError: () => {\n            createNotification(TYPE_ERROR, contentSharingMessages.sendInvitesError);\n            setIsLoading(false);\n            closeComponent();\n        },\n        setIsLoading,\n        transformRequest: data => convertCollabsRequest(data),\n    });\n    if (sendInvitesFn && !sendInvites) {\n        setSendInvites(() => sendInvitesFn);\n    }\n\n    return (\n        <NotificationsWrapper>\n            <>{[...Object.values(notifications)]}</>\n        </NotificationsWrapper>\n    );\n}\n\nexport default SharingNotification;\n"],"file":"SharingNotification.js"}