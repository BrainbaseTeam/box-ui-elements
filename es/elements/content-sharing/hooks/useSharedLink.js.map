{"version":3,"sources":["../../../../src/elements/content-sharing/hooks/useSharedLink.js"],"names":["React","noop","API","ACCESS_NONE","TYPE_FILE","TYPE_FOLDER","CONTENT_SHARING_SHARED_LINK_UPDATE_PARAMS","useSharedLink","api","itemID","itemType","permissions","accessLevel","options","useState","onAddLink","setOnAddLink","onRemoveLink","setOnRemoveLink","changeSharedLinkAccessLevel","setChangeSharedLinkAccessLevel","changeSharedLinkPermissionLevel","setChangeSharedLinkPermissionLevel","onSubmitSettings","setOnSubmitSettings","generatedFunctions","setGeneratedFunctions","currentAccessLevel","useRef","handleRemoveSharedLinkError","handleRemoveSharedLinkSuccess","arg","handleUpdateSharedLinkError","handleUpdateSharedLinkSuccess","setIsLoading","transformAccess","transformPermissions","transformSettings","data","access","useEffect","itemData","id","itemAPIInstance","getFileAPI","getFolderAPI","connectToItemShare","requestOptions","successFn","errorFn","share","updatedOnAddLinkFn","shared_link","current","updatedOnRemoveLinkFn","updatedChangeSharedLinkAccessLevelFn","newAccessLevel","connectToUpdateSharedLink","newSharedLinkData","updateSharedLink","updatedChangeSharedLinkPermissionLevelFn","newSharedLinkPermissionLevel","updatedOnSubmitSettingsFn","newSettings"],"mappings":";;;;;;;;AACA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,IAAP,MAAiB,aAAjB;AACA,OAAOC,GAAP,MAAgB,cAAhB;AACA,SAASC,WAAT,EAAsBC,SAAtB,EAAiCC,WAAjC,QAAoD,oBAApD;AACA,SAASC,yCAAT,QAA0D,cAA1D;;AASA;;;;;;;;;;AAUA,SAASC,aAAT,CACIC,GADJ,EAEIC,MAFJ,EAGIC,QAHJ,EAIIC,WAJJ,EAKIC,WALJ,EAOE;AAAA,MADEC,OACF,uEADwC,EACxC;;AAAA,wBACoCb,KAAK,CAACc,QAAN,CAAmD,IAAnD,CADpC;AAAA;AAAA,MACSC,SADT;AAAA,MACoBC,YADpB;;AAAA,yBAE0ChB,KAAK,CAACc,QAAN,CAAmD,IAAnD,CAF1C;AAAA;AAAA,MAESG,YAFT;AAAA,MAEuBC,eAFvB;;AAAA,yBAMMlB,KAAK,CAACc,QAAN,CAAmD,IAAnD,CANN;AAAA;AAAA,MAIMK,2BAJN;AAAA,MAKMC,8BALN;;AAAA,yBAUMpB,KAAK,CAACc,QAAN,CAAmD,IAAnD,CAVN;AAAA;AAAA,MAQMO,+BARN;AAAA,MASMC,kCATN;;AAAA,yBAWkDtB,KAAK,CAACc,QAAN,CAAsD,IAAtD,CAXlD;AAAA;AAAA,MAWSS,gBAXT;AAAA,MAW2BC,mBAX3B;;AAAA,0BAYsDxB,KAAK,CAACc,QAAN,CAAwB,KAAxB,CAZtD;AAAA;AAAA,MAYSW,kBAZT;AAAA,MAY6BC,qBAZ7B;AAcE;;;;;;;AAKA,MAAMC,kBAAkB,GAAG3B,KAAK,CAAC4B,MAAN,CAAahB,WAAb,CAA3B;AAnBF,8BA8BMC,OA9BN,CAsBMgB,2BAtBN;AAAA,MAsBMA,2BAtBN,sCAsBoC5B,IAtBpC;AAAA,+BA8BMY,OA9BN,CAuBMiB,6BAvBN;AAAA,MAuBMA,6BAvBN,uCAuBsC,UAAAC,GAAG;AAAA,WAAIA,GAAJ;AAAA,GAvBzC;AAAA,8BA8BMlB,OA9BN,CAwBMmB,2BAxBN;AAAA,MAwBMA,2BAxBN,sCAwBoC/B,IAxBpC;AAAA,+BA8BMY,OA9BN,CAyBMoB,6BAzBN;AAAA,MAyBMA,6BAzBN,uCAyBsC,UAAAF,GAAG;AAAA,WAAIA,GAAJ;AAAA,GAzBzC;AAAA,8BA8BMlB,OA9BN,CA0BMqB,YA1BN;AAAA,MA0BMA,YA1BN,sCA0BqBjC,IA1BrB;AAAA,8BA8BMY,OA9BN,CA2BMsB,eA3BN;AAAA,MA2BMA,eA3BN,sCA2BwB,UAAAJ,GAAG;AAAA,WAAIA,GAAJ;AAAA,GA3B3B;AAAA,8BA8BMlB,OA9BN,CA4BMuB,oBA5BN;AAAA,MA4BMA,oBA5BN,sCA4B6B,UAAAL,GAAG;AAAA,WAAIA,GAAJ;AAAA,GA5BhC;AAAA,8BA8BMlB,OA9BN,CA6BMwB,iBA7BN;AAAA,MA6BMA,iBA7BN,sCA6B0B,UAACC,IAAD,EAAOC,MAAP;AAAA,WAAkBD,IAAlB;AAAA,GA7B1B;AAgCEtC,EAAAA,KAAK,CAACwC,SAAN,CAAgB,YAAM;AAClB,QAAI,CAAC7B,WAAD,IAAgBc,kBAApB,EAAwC;AAExC,QAAMgB,QAAQ,GAAG;AACbC,MAAAA,EAAE,EAAEjC,MADS;AAEbE,MAAAA,WAAW,EAAXA;AAFa,KAAjB;AAKA,QAAIgC,eAAJ;;AAEA,QAAIjC,QAAQ,KAAKN,SAAjB,EAA4B;AACxBuC,MAAAA,eAAe,GAAGnC,GAAG,CAACoC,UAAJ,EAAlB;AACH,KAFD,MAEO,IAAIlC,QAAQ,KAAKL,WAAjB,EAA8B;AACjCsC,MAAAA,eAAe,GAAGnC,GAAG,CAACqC,YAAJ,EAAlB;AACH,KAdiB,CAgBlB;;;AACA,QAAMC,kBAA4C,GAAG,SAA/CA,kBAA+C,OAK/C;AAAA,UAJFP,MAIE,QAJFA,MAIE;AAAA,qCAHFQ,cAGE;AAAA,UAHFA,cAGE,oCAHezC,yCAGf;AAAA,gCAFF0C,SAEE;AAAA,UAFFA,SAEE,+BAFUf,6BAEV;AAAA,8BADFgB,OACE;AAAA,UADFA,OACE,6BADQjB,2BACR;AACFE,MAAAA,YAAY,CAAC,IAAD,CAAZ;AACA,aAAOS,eAAe,CAACO,KAAhB,CAAsBT,QAAtB,EAAgCF,MAAhC,EAAwCS,SAAxC,EAAmDC,OAAnD,EAA4DF,cAA5D,CAAP;AACH,KARD;AAUA;;;;;;;;;;;;AAUA,QAAMI,kBAA+C,GAAG,SAAlDA,kBAAkD;AAAA,aAAM;AAAA,eAC1DL,kBAAkB,CAAC;AACfE,UAAAA,SAAS,EAAE,mBAAAV,IAAI,EAAI;AAAA,gBAEIC,MAFJ,GAGXD,IAHW,CAEXc,WAFW,CAEIb,MAFJ;AAIfZ,YAAAA,kBAAkB,CAAC0B,OAAnB,GAA6Bd,MAA7B;AACAN,YAAAA,6BAA6B,CAACK,IAAD,CAA7B;AACH;AAPc,SAAD,CADwC;AAAA,OAAN;AAAA,KAAxD;;AAUAtB,IAAAA,YAAY,CAACmC,kBAAD,CAAZ,CA/CkB,CAiDlB;;AACA,QAAMG,qBAAkD,GAAG,SAArDA,qBAAqD;AAAA,aAAM;AAAA,eAC7DR,kBAAkB,CAAC;AACfP,UAAAA,MAAM,EAAEpC,WADO;AAEf6C,UAAAA,SAAS,EAAElB,6BAFI;AAGfmB,UAAAA,OAAO,EAAEpB;AAHM,SAAD,CAD2C;AAAA,OAAN;AAAA,KAA3D;;AAMAX,IAAAA,eAAe,CAACoC,qBAAD,CAAf,CAxDkB,CA0DlB;;AACA,QAAMC,oCAAiE,GAAG,SAApEA,oCAAoE;AAAA,aAAM,UAACC,cAAD;AAAA,eAC5EV,kBAAkB,CAAC;AACfP,UAAAA,MAAM,EAAEJ,eAAe,CAACqB,cAAD,CADR;AAEfR,UAAAA,SAAS,EAAE,mBAAAV,IAAI,EAAI;AACfX,YAAAA,kBAAkB,CAAC0B,OAAnB,GAA6BG,cAA7B;AACAvB,YAAAA,6BAA6B,CAACK,IAAD,CAA7B;AACH;AALc,SAAD,CAD0D;AAAA,OAAN;AAAA,KAA1E;;AAQAlB,IAAAA,8BAA8B,CAACmC,oCAAD,CAA9B,CAnEkB,CAqElB;;AACA,QAAME,yBAAyB,GAAG,SAA5BA,yBAA4B,CAACC,iBAAD,EAA+B;AAC7DxB,MAAAA,YAAY,CAAC,IAAD,CAAZ;AACA,aAAOS,eAAe,CAACgB,gBAAhB,CACHlB,QADG,EAEHiB,iBAFG,EAGHzB,6BAHG,EAIHD,2BAJG,EAKH1B,yCALG,CAAP;AAOH,KATD,CAtEkB,CAiFlB;;;AACA,QAAMsD,wCAAqE,GAAG,SAAxEA,wCAAwE;AAAA,aAAM,UAChFC,4BADgF;AAAA,eAE/EJ,yBAAyB,CAAC;AAAE9C,UAAAA,WAAW,EAAEyB,oBAAoB,CAACyB,4BAAD;AAAnC,SAAD,CAFsD;AAAA,OAAN;AAAA,KAA9E;;AAGAvC,IAAAA,kCAAkC,CAACsC,wCAAD,CAAlC;AAEA;;;;;AAIA,QAAME,yBAAyD,GAAG,SAA5DA,yBAA4D;AAAA,aAAM,UAAAC,WAAW;AAAA,eAC/EN,yBAAyB,CAACpB,iBAAiB,CAAC0B,WAAD,EAAcpC,kBAAkB,CAAC0B,OAAjC,CAAlB,CADsD;AAAA,OAAjB;AAAA,KAAlE;;AAEA7B,IAAAA,mBAAmB,CAACsC,yBAAD,CAAnB;AAEApC,IAAAA,qBAAqB,CAAC,IAAD,CAArB;AACH,GAhGD,EAgGG,CACCf,WADD,EAECc,kBAFD,EAGChB,MAHD,EAICC,QAJD,EAKCuB,6BALD,EAMCH,6BAND,EAOCK,eAPD,EAQCvB,WARD,EASCwB,oBATD,EAUCC,iBAVD,EAWCV,kBAXD,EAYCnB,GAZD,EAaC0B,YAbD,EAcCL,2BAdD,EAeCG,2BAfD,CAhGH;AAkHA,SAAO;AACHb,IAAAA,2BAA2B,EAA3BA,2BADG;AAEHE,IAAAA,+BAA+B,EAA/BA,+BAFG;AAGHN,IAAAA,SAAS,EAATA,SAHG;AAIHE,IAAAA,YAAY,EAAZA,YAJG;AAKHM,IAAAA,gBAAgB,EAAhBA;AALG,GAAP;AAOH;;AAED,eAAehB,aAAf","sourcesContent":["// @flow\nimport * as React from 'react';\nimport noop from 'lodash/noop';\nimport API from '../../../api';\nimport { ACCESS_NONE, TYPE_FILE, TYPE_FOLDER } from '../../../constants';\nimport { CONTENT_SHARING_SHARED_LINK_UPDATE_PARAMS } from '../constants';\nimport type { BoxItemPermission, ItemType } from '../../../common/types/core';\nimport type {\n    ConnectToItemShareFnType,\n    ContentSharingHooksOptions,\n    SharedLinkUpdateLevelFnType,\n    SharedLinkUpdateSettingsFnType,\n} from '../types';\n\n/**\n * Generate CRUD functions for shared links.\n *\n * @param {API} api\n * @param {string} itemID\n * @param {ItemType} itemType\n * @param {BoxItemPermission} permissions\n * @param {string} accessLevel\n * @param {ContentSharingHooksOptions} [options]\n */\nfunction useSharedLink(\n    api: API,\n    itemID: string,\n    itemType: ItemType,\n    permissions: ?BoxItemPermission,\n    accessLevel: string,\n    options: ContentSharingHooksOptions = {},\n) {\n    const [onAddLink, setOnAddLink] = React.useState<null | SharedLinkUpdateLevelFnType>(null);\n    const [onRemoveLink, setOnRemoveLink] = React.useState<null | SharedLinkUpdateLevelFnType>(null);\n    const [\n        changeSharedLinkAccessLevel,\n        setChangeSharedLinkAccessLevel,\n    ] = React.useState<null | SharedLinkUpdateLevelFnType>(null);\n    const [\n        changeSharedLinkPermissionLevel,\n        setChangeSharedLinkPermissionLevel,\n    ] = React.useState<null | SharedLinkUpdateLevelFnType>(null);\n    const [onSubmitSettings, setOnSubmitSettings] = React.useState<null | SharedLinkUpdateSettingsFnType>(null);\n    const [generatedFunctions, setGeneratedFunctions] = React.useState<boolean>(false);\n\n    /**\n     * Storing the access level in a ref allows us to update settings, which depend on the access level, in the following potential scenarios:\n     * - After changing the shared link's access level\n     * - After removing and recreating the shared link\n     */\n    const currentAccessLevel = React.useRef(accessLevel);\n\n    const {\n        handleRemoveSharedLinkError = noop,\n        handleRemoveSharedLinkSuccess = arg => arg,\n        handleUpdateSharedLinkError = noop,\n        handleUpdateSharedLinkSuccess = arg => arg,\n        setIsLoading = noop,\n        transformAccess = arg => arg,\n        transformPermissions = arg => arg,\n        transformSettings = (data, access) => data, // eslint-disable-line no-unused-vars\n    } = options;\n\n    React.useEffect(() => {\n        if (!permissions || generatedFunctions) return;\n\n        const itemData = {\n            id: itemID,\n            permissions,\n        };\n\n        let itemAPIInstance;\n\n        if (itemType === TYPE_FILE) {\n            itemAPIInstance = api.getFileAPI();\n        } else if (itemType === TYPE_FOLDER) {\n            itemAPIInstance = api.getFolderAPI();\n        }\n\n        // Create functions that alter the access level of a shared link\n        const connectToItemShare: ConnectToItemShareFnType = ({\n            access,\n            requestOptions = CONTENT_SHARING_SHARED_LINK_UPDATE_PARAMS,\n            successFn = handleUpdateSharedLinkSuccess,\n            errorFn = handleUpdateSharedLinkError,\n        }) => {\n            setIsLoading(true);\n            return itemAPIInstance.share(itemData, access, successFn, errorFn, requestOptions);\n        };\n\n        /**\n         * Set the shared link creation function.\n         *\n         * The backend will determine the default access level for the shared link, so we should not pass a value for \"access.\"\n         * The \"open\" and \"company\" access levels may be disabled due to certain policies, and attempting to set a disabled\n         * access level will throw a 400. The only access level that we can reliably set is \"collaborators,\" but defaulting\n         * to that level diverges from existing shared link creation behavior in the WebApp.\n         *\n         * After a shared link is successfully created, we save the access level from the API response into our ref.\n         */\n        const updatedOnAddLinkFn: SharedLinkUpdateLevelFnType = () => () =>\n            connectToItemShare({\n                successFn: data => {\n                    const {\n                        shared_link: { access },\n                    } = data;\n                    currentAccessLevel.current = access;\n                    handleUpdateSharedLinkSuccess(data);\n                },\n            });\n        setOnAddLink(updatedOnAddLinkFn);\n\n        // Shared link removal function\n        const updatedOnRemoveLinkFn: SharedLinkUpdateLevelFnType = () => () =>\n            connectToItemShare({\n                access: ACCESS_NONE,\n                successFn: handleRemoveSharedLinkSuccess,\n                errorFn: handleRemoveSharedLinkError,\n            });\n        setOnRemoveLink(updatedOnRemoveLinkFn);\n\n        // Shared link access level change function\n        const updatedChangeSharedLinkAccessLevelFn: SharedLinkUpdateLevelFnType = () => (newAccessLevel: string) =>\n            connectToItemShare({\n                access: transformAccess(newAccessLevel),\n                successFn: data => {\n                    currentAccessLevel.current = newAccessLevel;\n                    handleUpdateSharedLinkSuccess(data);\n                },\n            });\n        setChangeSharedLinkAccessLevel(updatedChangeSharedLinkAccessLevelFn);\n\n        // Create functions that update shared link settings aside from the access level\n        const connectToUpdateSharedLink = (newSharedLinkData: Object) => {\n            setIsLoading(true);\n            return itemAPIInstance.updateSharedLink(\n                itemData,\n                newSharedLinkData,\n                handleUpdateSharedLinkSuccess,\n                handleUpdateSharedLinkError,\n                CONTENT_SHARING_SHARED_LINK_UPDATE_PARAMS,\n            );\n        };\n\n        // Shared link permission level change function\n        const updatedChangeSharedLinkPermissionLevelFn: SharedLinkUpdateLevelFnType = () => (\n            newSharedLinkPermissionLevel: string,\n        ) => connectToUpdateSharedLink({ permissions: transformPermissions(newSharedLinkPermissionLevel) });\n        setChangeSharedLinkPermissionLevel(updatedChangeSharedLinkPermissionLevelFn);\n\n        /**\n         * Set the shared link settings update function. This is currently used in the Shared Link Settings Modal,\n         * but it may also be used to update any settings not covered by the above functions.\n         */\n        const updatedOnSubmitSettingsFn: SharedLinkUpdateSettingsFnType = () => newSettings =>\n            connectToUpdateSharedLink(transformSettings(newSettings, currentAccessLevel.current));\n        setOnSubmitSettings(updatedOnSubmitSettingsFn);\n\n        setGeneratedFunctions(true);\n    }, [\n        permissions,\n        generatedFunctions,\n        itemID,\n        itemType,\n        handleUpdateSharedLinkSuccess,\n        handleRemoveSharedLinkSuccess,\n        transformAccess,\n        accessLevel,\n        transformPermissions,\n        transformSettings,\n        currentAccessLevel,\n        api,\n        setIsLoading,\n        handleRemoveSharedLinkError,\n        handleUpdateSharedLinkError,\n    ]);\n\n    return {\n        changeSharedLinkAccessLevel,\n        changeSharedLinkPermissionLevel,\n        onAddLink,\n        onRemoveLink,\n        onSubmitSettings,\n    };\n}\n\nexport default useSharedLink;\n"],"file":"useSharedLink.js"}