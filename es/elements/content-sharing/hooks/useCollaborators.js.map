{"version":3,"sources":["../../../../src/elements/content-sharing/hooks/useCollaborators.js"],"names":["React","noop","API","TYPE_FILE","TYPE_FOLDER","useCollaborators","api","itemID","itemType","options","useState","collaboratorsList","setCollaboratorsList","handleSuccess","handleError","useEffect","handleGetCollaborationsSuccess","response","handleGetCollaborationsError","entries","next_marker","collabAPIInstance","getFileCollaborationsAPI","getFolderCollaborationsAPI","getCollaborations"],"mappings":";;;;;;;;AAEA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,IAAP,MAAiB,aAAjB;AACA,OAAOC,GAAP,MAAgB,cAAhB;AACA,SAASC,SAAT,EAAoBC,WAApB,QAAuC,oBAAvC;;AAIA;;;;;;;;;;;;;;AAcA,SAASC,gBAAT,CACIC,GADJ,EAEIC,MAFJ,EAGIC,QAHJ,EAIIC,OAJJ,EAKyB;AAAA,wBAC6BT,KAAK,CAACU,QAAN,CAAsC,IAAtC,CAD7B;AAAA;AAAA,MACdC,iBADc;AAAA,MACKC,oBADL;;AAAA,8BAEgCH,OAFhC,CAEbI,aAFa;AAAA,MAEbA,aAFa,sCAEGZ,IAFH;AAAA,6BAEgCQ,OAFhC,CAESK,WAFT;AAAA,MAESA,WAFT,qCAEuBb,IAFvB;AAIrBD,EAAAA,KAAK,CAACe,SAAN,CAAgB,YAAM;AAClB,QAAIJ,iBAAJ,EAAuB;;AAEvB,QAAMK,8BAA8B,GAAG,SAAjCA,8BAAiC,CAACC,QAAD,EAA8B;AACjEL,MAAAA,oBAAoB,CAACK,QAAD,CAApB;AACAJ,MAAAA,aAAa,CAACI,QAAD,CAAb;AACH,KAHD;;AAKA,QAAMC,4BAA4B,GAAG,SAA/BA,4BAA+B,GAAM;AACvCN,MAAAA,oBAAoB,CAAC;AAAEO,QAAAA,OAAO,EAAE,EAAX;AAAeC,QAAAA,WAAW,EAAE;AAA5B,OAAD,CAApB;AACAN,MAAAA,WAAW;AACd,KAHD;;AAKA,QAAIO,iBAAJ;;AACA,QAAIb,QAAQ,KAAKL,SAAjB,EAA4B;AACxBkB,MAAAA,iBAAiB,GAAGf,GAAG,CAACgB,wBAAJ,CAA6B,KAA7B,CAApB;AACH,KAFD,MAEO,IAAId,QAAQ,KAAKJ,WAAjB,EAA8B;AACjCiB,MAAAA,iBAAiB,GAAGf,GAAG,CAACiB,0BAAJ,CAA+B,KAA/B,CAApB;AACH;;AACD,QAAIF,iBAAJ,EAAuB;AACnBA,MAAAA,iBAAiB,CAACG,iBAAlB,CAAoCjB,MAApC,EAA4CS,8BAA5C,EAA4EE,4BAA5E;AACH;AACJ,GAtBD,EAsBG,CAACZ,GAAD,EAAMK,iBAAN,EAAyBG,WAAzB,EAAsCD,aAAtC,EAAqDN,MAArD,EAA6DC,QAA7D,CAtBH;AAwBA,SAAOG,iBAAP;AACH;;AAED,eAAeN,gBAAf","sourcesContent":["// @flow\n\nimport * as React from 'react';\nimport noop from 'lodash/noop';\nimport API from '../../../api';\nimport { TYPE_FILE, TYPE_FOLDER } from '../../../constants';\nimport type { Collaborations, ItemType } from '../../../common/types/core';\nimport type { ContentSharingHooksOptions } from '../types';\n\n/**\n * Get the item's collaborators\n *\n * A note on the wording: the USM uses the term \"collaborators\" internally,\n * so the state variable and state setting function also refer to \"collaborators.\"\n * However, we are using the Collaborations API here, so the API-related functions\n * use the term \"collaborations.\" For more details, see ./api/FileCollaborations.\n *\n * @param {API} api\n * @param {string} itemID\n * @param {ItemType} itemType\n * @param {ContentSharingHooksOptions} options\n * @returns {Collaborations | null}\n */\nfunction useCollaborators(\n    api: API,\n    itemID: string,\n    itemType: ItemType,\n    options: ContentSharingHooksOptions,\n): Collaborations | null {\n    const [collaboratorsList, setCollaboratorsList] = React.useState<Collaborations | null>(null);\n    const { handleSuccess = noop, handleError = noop } = options;\n\n    React.useEffect(() => {\n        if (collaboratorsList) return;\n\n        const handleGetCollaborationsSuccess = (response: Collaborations) => {\n            setCollaboratorsList(response);\n            handleSuccess(response);\n        };\n\n        const handleGetCollaborationsError = () => {\n            setCollaboratorsList({ entries: [], next_marker: null });\n            handleError();\n        };\n\n        let collabAPIInstance;\n        if (itemType === TYPE_FILE) {\n            collabAPIInstance = api.getFileCollaborationsAPI(false);\n        } else if (itemType === TYPE_FOLDER) {\n            collabAPIInstance = api.getFolderCollaborationsAPI(false);\n        }\n        if (collabAPIInstance) {\n            collabAPIInstance.getCollaborations(itemID, handleGetCollaborationsSuccess, handleGetCollaborationsError);\n        }\n    }, [api, collaboratorsList, handleError, handleSuccess, itemID, itemType]);\n\n    return collaboratorsList;\n}\n\nexport default useCollaborators;\n"],"file":"useCollaborators.js"}