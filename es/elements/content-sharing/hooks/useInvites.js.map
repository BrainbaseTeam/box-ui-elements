{"version":3,"sources":["../../../../src/elements/content-sharing/hooks/useInvites.js"],"names":["React","noop","API","useInvites","api","itemID","itemType","options","useState","sendInvites","setSendInvites","handleSuccess","handleError","setIsLoading","transformRequest","transformResponse","arg","useEffect","itemData","id","type","sendCollabRequest","collab","getCollaborationsAPI","addCollaboration","response","createPostCollaborationFn","collabRequest","Promise","resolve","users","groups","all","map","user","group"],"mappings":";;;;;;;;;;;;AAEA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,IAAP,MAAiB,aAAjB;AACA,OAAOC,GAAP,MAAgB,cAAhB;;AAKA;;;;;;;;AAQA,SAASC,UAAT,CAAoBC,GAApB,EAA8BC,MAA9B,EAA8CC,QAA9C,EAAkEC,OAAlE,EAA8F;AAAA,wBACpDP,KAAK,CAACQ,QAAN,CAAyC,IAAzC,CADoD;AAAA;AAAA,MACnFC,WADmF;AAAA,MACtEC,cADsE;;AAAA,8BAQtFH,OARsF,CAGtFI,aAHsF;AAAA,MAGtFA,aAHsF,sCAGtEV,IAHsE;AAAA,6BAQtFM,OARsF,CAItFK,WAJsF;AAAA,MAItFA,WAJsF,qCAIxEX,IAJwE;AAAA,8BAQtFM,OARsF,CAKtFM,YALsF;AAAA,MAKtFA,YALsF,sCAKvEZ,IALuE;AAAA,MAMtFa,gBANsF,GAQtFP,OARsF,CAMtFO,gBANsF;AAAA,8BAQtFP,OARsF,CAOtFQ,iBAPsF;AAAA,MAOtFA,iBAPsF,sCAOlE,UAAAC,GAAG;AAAA,WAAIA,GAAJ;AAAA,GAP+D;AAU1FhB,EAAAA,KAAK,CAACiB,SAAN,CAAgB,YAAM;AAClB,QAAIR,WAAJ,EAAiB;AAEjB,QAAMS,QAAQ,GAAG;AACbC,MAAAA,EAAE,EAAEd,MADS;AAEbe,MAAAA,IAAI,EAAEd;AAFO,KAAjB;;AAIA,QAAMe,iBAAiB,GAAG,SAApBA,iBAAoB,CAAAC,MAAM,EAAI;AAChCT,MAAAA,YAAY,CAAC,IAAD,CAAZ;AACA,aAAOT,GAAG,CAACmB,oBAAJ,CAAyB,KAAzB,EAAgCC,gBAAhC,CACHN,QADG,EAEHI,MAFG,EAGH,UAAAG,QAAQ,EAAI;AACRd,QAAAA,aAAa,CAACc,QAAD,CAAb;AACA,eAAOV,iBAAiB,CAACU,QAAD,CAAxB;AACH,OANE,EAOHb,WAPG,CAAP;AASH,KAXD;;AAaA,QAAMc,yBAA4C,GAAG,SAA/CA,yBAA+C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kCAAM,iBACvDC,aADuD;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,wBAGlDb,gBAHkD;AAAA;AAAA;AAAA;;AAAA,qDAGzBc,OAAO,CAACC,OAAR,CAAgB,IAAhB,CAHyB;;AAAA;AAAA,wCAK7Bf,gBAAgB,CAACa,aAAD,CALa,EAK/CG,KAL+C,qBAK/CA,KAL+C,EAKxCC,MALwC,qBAKxCA,MALwC;AAAA,qDAMhDH,OAAO,CAACI,GAAR,CAAY,CACfF,KAAK,CAACG,GAAN,CAAU,UAAAC,IAAI;AAAA,6BAAIb,iBAAiB,CAACa,IAAD,CAArB;AAAA,qBAAd,CADe,EAEfH,MAAM,CAACE,GAAP,CAAW,UAAAE,KAAK;AAAA,6BAAId,iBAAiB,CAACc,KAAD,CAArB;AAAA,qBAAhB,CAFe,CAAZ,CANgD;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAN;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAArD;;AAYA,QAAI,CAAC1B,WAAL,EAAkB;AACdC,MAAAA,cAAc,CAACgB,yBAAD,CAAd;AACH;AACJ,GAnCD,EAmCG,CACCtB,GADD,EAECQ,WAFD,EAGCD,aAHD,EAICN,MAJD,EAKCC,QALD,EAMCG,WAND,EAOCI,YAPD,EAQCC,gBARD,EASCC,iBATD,CAnCH;AA+CA,SAAON,WAAP;AACH;;AAED,eAAeN,UAAf","sourcesContent":["// @flow\n\nimport * as React from 'react';\nimport noop from 'lodash/noop';\nimport API from '../../../api';\nimport type { SendInvitesFnType, UseInvitesOptions } from '../types';\nimport type { InviteCollaboratorsRequest } from '../../../features/unified-share-modal/flowTypes';\nimport type { ItemType } from '../../../common/types/core';\n\n/**\n * Generate the sendInvites() function, which is used for inviting collaborators in the USM.\n *\n * @param {API} api\n * @param {string} itemID\n * @param {ItemType} itemType\n * @param {UseInvitesOptions} options\n */\nfunction useInvites(api: API, itemID: string, itemType: ItemType, options: UseInvitesOptions) {\n    const [sendInvites, setSendInvites] = React.useState<null | SendInvitesFnType>(null);\n    const {\n        handleSuccess = noop,\n        handleError = noop,\n        setIsLoading = noop,\n        transformRequest,\n        transformResponse = arg => arg,\n    } = options;\n\n    React.useEffect(() => {\n        if (sendInvites) return;\n\n        const itemData = {\n            id: itemID,\n            type: itemType,\n        };\n        const sendCollabRequest = collab => {\n            setIsLoading(true);\n            return api.getCollaborationsAPI(false).addCollaboration(\n                itemData,\n                collab,\n                response => {\n                    handleSuccess(response);\n                    return transformResponse(response);\n                },\n                handleError,\n            );\n        };\n\n        const createPostCollaborationFn: SendInvitesFnType = () => async (\n            collabRequest: InviteCollaboratorsRequest,\n        ) => {\n            if (!transformRequest) return Promise.resolve(null);\n\n            const { users, groups } = transformRequest(collabRequest);\n            return Promise.all([\n                users.map(user => sendCollabRequest(user)),\n                groups.map(group => sendCollabRequest(group)),\n            ]);\n        };\n\n        if (!sendInvites) {\n            setSendInvites(createPostCollaborationFn);\n        }\n    }, [\n        api,\n        handleError,\n        handleSuccess,\n        itemID,\n        itemType,\n        sendInvites,\n        setIsLoading,\n        transformRequest,\n        transformResponse,\n    ]);\n\n    return sendInvites;\n}\n\nexport default useInvites;\n"],"file":"useInvites.js"}