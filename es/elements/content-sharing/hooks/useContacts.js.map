{"version":3,"sources":["../../../../src/elements/content-sharing/hooks/useContacts.js"],"names":["React","noop","API","FIELD_NAME","FIELD_PERMISSIONS","useContacts","api","itemID","options","useState","getContacts","setGetContacts","handleSuccess","handleError","transformGroups","transformUsers","useEffect","resolveAPICall","resolve","response","transformFn","entriesExist","entries","length","emptyEntries","updatedGetContactsFn","filterTerm","getUsers","Promise","getMarkerBasedUsersAPI","getUsersInEnterprise","filter_term","getGroups","getMarkerBasedGroupsAPI","getGroupsInEnterprise","fields","toString","all","then","contactArrays"],"mappings":";;;;;;;;;;;;;;;;AAEA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,IAAP,MAAiB,aAAjB;AACA,OAAOC,GAAP,MAAgB,cAAhB;AACA,SAASC,UAAT,EAAqBC,iBAArB,QAA8C,oBAA9C;;AAIA;;;;;;;;AAQA,SAASC,WAAT,CAAqBC,GAArB,EAA+BC,MAA/B,EAA+CC,OAA/C,EAA8G;AAAA,wBACpER,KAAK,CAACS,QAAN,CAAyC,IAAzC,CADoE;AAAA;AAAA,MACnGC,WADmG;AAAA,MACtFC,cADsF;;AAAA,8BAEpBH,OAFoB,CAElGI,aAFkG;AAAA,MAElGA,aAFkG,sCAElFX,IAFkF;AAAA,6BAEpBO,OAFoB,CAE5EK,WAF4E;AAAA,MAE5EA,WAF4E,qCAE9DZ,IAF8D;AAAA,MAExDa,eAFwD,GAEpBN,OAFoB,CAExDM,eAFwD;AAAA,MAEvCC,cAFuC,GAEpBP,OAFoB,CAEvCO,cAFuC;AAI1Gf,EAAAA,KAAK,CAACgB,SAAN,CAAgB,YAAM;AAClB,QAAIN,WAAJ,EAAiB;;AAEjB,QAAMO,cAAc,GAAG,SAAjBA,cAAiB,CACnBC,OADmB,EAEnBC,QAFmB,EAGnBC,WAHmB,EAIlB;AACDR,MAAAA,aAAa,CAACO,QAAD,CAAb,CADC,CAED;;AACA,UAAME,YAAY,GAAGF,QAAQ,IAAIA,QAAQ,CAACG,OAArB,IAAgCH,QAAQ,CAACG,OAAT,CAAiBC,MAAtE;;AACA,UAAIH,WAAW,IAAIC,YAAnB,EAAiC;AAC7B,eAAOH,OAAO,CAACE,WAAW,CAACD,QAAD,CAAZ,CAAd;AACH;;AACD,UAAMK,YAAwB,GAAG,EAAjC;AACA,aAAON,OAAO,CAACC,QAAQ,IAAIA,QAAQ,CAACG,OAArB,GAA+BH,QAAQ,CAACG,OAAxC,GAAkDE,YAAnD,CAAd;AACH,KAbD;;AAeA,QAAMC,oBAAuC,GAAG,SAA1CA,oBAA0C;AAAA,aAAM,UAACC,UAAD,EAAwB;AAC1E,YAAMC,QAAQ,GAAG,IAAIC,OAAJ,CAAY,UAACV,OAAD,EAAgD;AACzEZ,UAAAA,GAAG,CAACuB,sBAAJ,CAA2B,KAA3B,EAAkCC,oBAAlC,CACIvB,MADJ,EAEI,UAACY,QAAD;AAAA,mBAA8BF,cAAc,CAACC,OAAD,EAAUC,QAAV,EAAoBJ,cAApB,CAA5C;AAAA,WAFJ,EAGIF,WAHJ,EAII;AAAEkB,YAAAA,WAAW,EAAEL;AAAf,WAJJ;AAMH,SAPgB,CAAjB;AAQA,YAAMM,SAAS,GAAG,IAAIJ,OAAJ,CAAY,UAACV,OAAD,EAAiD;AAC3EZ,UAAAA,GAAG,CAAC2B,uBAAJ,CAA4B,KAA5B,EAAmCC,qBAAnC,CACI3B,MADJ,EAEI,UAACY,QAAD;AAAA,mBAA+BF,cAAc,CAACC,OAAD,EAAUC,QAAV,EAAoBL,eAApB,CAA7C;AAAA,WAFJ,EAGID,WAHJ,EAII;AACIsB,YAAAA,MAAM,EAAE,CAAChC,UAAD,EAAaC,iBAAb,EAAgCgC,QAAhC,EADZ;AAEIL,YAAAA,WAAW,EAAEL;AAFjB,WAJJ;AASH,SAViB,CAAlB;AAWA,eAAOE,OAAO,CAACS,GAAR,CAAY,CAACV,QAAD,EAAWK,SAAX,CAAZ,EAAmCM,IAAnC,CAAwC,UAAAC,aAAa;AAAA,8CAAQA,aAAa,CAAC,CAAD,CAArB,sBAA6BA,aAAa,CAAC,CAAD,CAA1C;AAAA,SAArD,CAAP;AACH,OArB+C;AAAA,KAAhD;;AAsBA5B,IAAAA,cAAc,CAACc,oBAAD,CAAd;AACH,GAzCD,EAyCG,CAACnB,GAAD,EAAMI,WAAN,EAAmBG,WAAnB,EAAgCD,aAAhC,EAA+CL,MAA/C,EAAuDO,eAAvD,EAAwEC,cAAxE,CAzCH;AA2CA,SAAOL,WAAP;AACH;;AAED,eAAeL,WAAf","sourcesContent":["// @flow\n\nimport * as React from 'react';\nimport noop from 'lodash/noop';\nimport API from '../../../api';\nimport { FIELD_NAME, FIELD_PERMISSIONS } from '../../../constants';\nimport type { GroupCollection, GroupMini, UserCollection, UserMini } from '../../../common/types/core';\nimport type { ContentSharingHooksOptions, GetContactsFnType } from '../types';\n\n/**\n * Generate the getContacts() function, which is used for retrieving potential collaborators in the USM.\n *\n * @param {API} api\n * @param {string} itemID\n * @param {ContentSharingHooksOptions} options\n * @returns {GetContactsFnType | null}\n */\nfunction useContacts(api: API, itemID: string, options: ContentSharingHooksOptions): GetContactsFnType | null {\n    const [getContacts, setGetContacts] = React.useState<null | GetContactsFnType>(null);\n    const { handleSuccess = noop, handleError = noop, transformGroups, transformUsers } = options;\n\n    React.useEffect(() => {\n        if (getContacts) return;\n\n        const resolveAPICall = (\n            resolve: (result: Array<Object>) => void,\n            response: GroupCollection | UserCollection,\n            transformFn: ?Function,\n        ) => {\n            handleSuccess(response);\n            // A successful API call will always return an entries array, but we still need these checks for Flow purposes\n            const entriesExist = response && response.entries && response.entries.length;\n            if (transformFn && entriesExist) {\n                return resolve(transformFn(response));\n            }\n            const emptyEntries: Array<any> = [];\n            return resolve(response && response.entries ? response.entries : emptyEntries);\n        };\n\n        const updatedGetContactsFn: GetContactsFnType = () => (filterTerm: string) => {\n            const getUsers = new Promise((resolve: (result: Array<UserMini>) => void) => {\n                api.getMarkerBasedUsersAPI(false).getUsersInEnterprise(\n                    itemID,\n                    (response: UserCollection) => resolveAPICall(resolve, response, transformUsers),\n                    handleError,\n                    { filter_term: filterTerm },\n                );\n            });\n            const getGroups = new Promise((resolve: (result: Array<GroupMini>) => void) => {\n                api.getMarkerBasedGroupsAPI(false).getGroupsInEnterprise(\n                    itemID,\n                    (response: GroupCollection) => resolveAPICall(resolve, response, transformGroups),\n                    handleError,\n                    {\n                        fields: [FIELD_NAME, FIELD_PERMISSIONS].toString(),\n                        filter_term: filterTerm,\n                    },\n                );\n            });\n            return Promise.all([getUsers, getGroups]).then(contactArrays => [...contactArrays[0], ...contactArrays[1]]);\n        };\n        setGetContacts(updatedGetContactsFn);\n    }, [api, getContacts, handleError, handleSuccess, itemID, transformGroups, transformUsers]);\n\n    return getContacts;\n}\n\nexport default useContacts;\n"],"file":"useContacts.js"}