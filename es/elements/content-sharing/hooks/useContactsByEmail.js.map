{"version":3,"sources":["../../../../src/elements/content-sharing/hooks/useContactsByEmail.js"],"names":["React","noop","API","useContactsByEmail","api","itemID","options","useState","getContactsByEmail","setGetContactsByEmail","handleSuccess","handleError","transformUsers","useEffect","resolveAPICall","resolve","response","transformFn","entries","length","updatedGetContactsByEmailFn","filterTerm","Array","isArray","emails","Promise","parsedFilterTerm","getMarkerBasedUsersAPI","getUsersInEnterprise","filter_term"],"mappings":";;;;;;;;AAEA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,IAAP,MAAiB,aAAjB;AACA,OAAOC,GAAP,MAAgB,cAAhB;;AAIA;;;;;;;;AAQA,SAASC,kBAAT,CACIC,GADJ,EAEIC,MAFJ,EAGIC,OAHJ,EAImC;AAAA,wBACqBN,KAAK,CAACO,QAAN,CAAgD,IAAhD,CADrB;AAAA;AAAA,MACxBC,kBADwB;AAAA,MACJC,qBADI;;AAAA,8BAEsCH,OAFtC,CAEvBI,aAFuB;AAAA,MAEvBA,aAFuB,sCAEPT,IAFO;AAAA,6BAEsCK,OAFtC,CAEDK,WAFC;AAAA,MAEDA,WAFC,qCAEaV,IAFb;AAAA,MAEmBW,cAFnB,GAEsCN,OAFtC,CAEmBM,cAFnB;AAI/BZ,EAAAA,KAAK,CAACa,SAAN,CAAgB,YAAM;AAClB,QAAIL,kBAAJ,EAAwB;;AAExB,QAAMM,cAAc,GAAG,SAAjBA,cAAiB,CACnBC,OADmB,EAEnBC,QAFmB,EAGnBC,WAHmB,EAIlB;AACDP,MAAAA,aAAa,CAACM,QAAD,CAAb,CADC,CAED;;AACA,UAAIA,QAAQ,IAAIA,QAAQ,CAACE,OAArB,IAAgCF,QAAQ,CAACE,OAAT,CAAiBC,MAArD,EAA6D;AACzD,eAAOJ,OAAO,CAACE,WAAW,GAAGA,WAAW,CAACD,QAAD,CAAd,GAA2BA,QAAQ,CAACE,OAAhD,CAAd;AACH;;AACD,aAAOH,OAAO,CAAC,EAAD,CAAd;AACH,KAXD;;AAaA,QAAMK,2BAAqD,GAAG,SAAxDA,2BAAwD;AAAA,aAAM,UAACC,UAAD,EAE9D;AACF,YAAI,CAACA,UAAD,IAAe,CAACC,KAAK,CAACC,OAAN,CAAcF,UAAU,CAACG,MAAzB,CAAhB,IAAoD,CAACH,UAAU,CAACG,MAAX,CAAkBL,MAA3E,EAAmF;AAC/E,iBAAOM,OAAO,CAACV,OAAR,CAAgB,EAAhB,CAAP;AACH;;AACD,YAAMW,gBAAgB,GAAGL,UAAU,CAACG,MAAX,CAAkB,CAAlB,CAAzB;AAEA,eAAO,IAAIC,OAAJ,CAAY,UAACV,OAAD,EAAuE;AACtFX,UAAAA,GAAG,CAACuB,sBAAJ,CAA2B,KAA3B,EAAkCC,oBAAlC,CACIvB,MADJ,EAEI,UAACW,QAAD;AAAA,mBAA8BF,cAAc,CAACC,OAAD,EAAUC,QAAV,EAAoBJ,cAApB,CAA5C;AAAA,WAFJ,EAGID,WAHJ,EAII;AAAEkB,YAAAA,WAAW,EAAEH;AAAf,WAJJ;AAMH,SAPM,CAAP;AAQH,OAhB6D;AAAA,KAA9D;;AAiBAjB,IAAAA,qBAAqB,CAACW,2BAAD,CAArB;AACH,GAlCD,EAkCG,CAAChB,GAAD,EAAMI,kBAAN,EAA0BG,WAA1B,EAAuCD,aAAvC,EAAsDL,MAAtD,EAA8DO,cAA9D,CAlCH;AAoCA,SAAOJ,kBAAP;AACH;;AAED,eAAeL,kBAAf","sourcesContent":["// @flow\n\nimport * as React from 'react';\nimport noop from 'lodash/noop';\nimport API from '../../../api';\nimport type { UserCollection, UserMini } from '../../../common/types/core';\nimport type { ContactByEmailObject, ContentSharingHooksOptions, GetContactsByEmailFnType } from '../types';\n\n/**\n * Generate the getContactsByEmail() function, which is used for looking up contacts added to the collaborators field in the USM.\n *\n * @param {API} api\n * @param {string} itemID\n * @param {ContentSharingHooksOptions} options\n * @returns {GetContactsByEmailFnType | null}\n */\nfunction useContactsByEmail(\n    api: API,\n    itemID: string,\n    options: ContentSharingHooksOptions,\n): GetContactsByEmailFnType | null {\n    const [getContactsByEmail, setGetContactsByEmail] = React.useState<null | GetContactsByEmailFnType>(null);\n    const { handleSuccess = noop, handleError = noop, transformUsers } = options;\n\n    React.useEffect(() => {\n        if (getContactsByEmail) return;\n\n        const resolveAPICall = (\n            resolve: (result: ContactByEmailObject | Array<UserMini>) => void,\n            response: UserCollection,\n            transformFn: ?Function,\n        ) => {\n            handleSuccess(response);\n            // A successful API call will always return an entries array, but we still need these checks for Flow purposes\n            if (response && response.entries && response.entries.length) {\n                return resolve(transformFn ? transformFn(response) : response.entries);\n            }\n            return resolve({});\n        };\n\n        const updatedGetContactsByEmailFn: GetContactsByEmailFnType = () => (filterTerm: {\n            [emails: string]: string,\n        }) => {\n            if (!filterTerm || !Array.isArray(filterTerm.emails) || !filterTerm.emails.length) {\n                return Promise.resolve({});\n            }\n            const parsedFilterTerm = filterTerm.emails[0];\n\n            return new Promise((resolve: (result: ContactByEmailObject | Array<UserMini>) => void) => {\n                api.getMarkerBasedUsersAPI(false).getUsersInEnterprise(\n                    itemID,\n                    (response: UserCollection) => resolveAPICall(resolve, response, transformUsers),\n                    handleError,\n                    { filter_term: parsedFilterTerm },\n                );\n            });\n        };\n        setGetContactsByEmail(updatedGetContactsByEmailFn);\n    }, [api, getContactsByEmail, handleError, handleSuccess, itemID, transformUsers]);\n\n    return getContactsByEmail;\n}\n\nexport default useContactsByEmail;\n"],"file":"useContactsByEmail.js"}