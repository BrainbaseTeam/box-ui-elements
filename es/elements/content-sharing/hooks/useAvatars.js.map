{"version":3,"sources":["../../../../src/elements/content-sharing/hooks/useAvatars.js"],"names":["React","API","useAvatars","api","itemID","collaboratorsList","useState","avatarURLMap","setAvatarURLMap","useEffect","entries","usersAPI","getUsersAPI","retrievedAvatarURLMap","Promise","all","map","collab","accessible_by","userID","id","getAvatarUrlWithAccessToken","toString","url"],"mappings":";;;;;;;;;;;;AAEA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,GAAP,MAAgB,cAAhB;;AAIA;;;;;;;;AAQA,SAASC,UAAT,CAAoBC,GAApB,EAA8BC,MAA9B,EAA8CC,iBAA9C,EAA6G;AAAA,wBACjEL,KAAK,CAACM,QAAN,CAAoC,IAApC,CADiE;AAAA;AAAA,MAClGC,YADkG;AAAA,MACpFC,eADoF;;AAGzGR,EAAAA,KAAK,CAACS,SAAN,CAAgB,YAAM;AAClB,QAAIF,YAAY,IAAI,CAACF,iBAAjB,IAAsC,CAACA,iBAAiB,CAACK,OAA7D,EAAsE;AAEtE,QAAMC,QAAQ,GAAGR,GAAG,CAACS,WAAJ,CAAgB,KAAhB,CAAjB;;AAEA;AAAA;AAAA,4BAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AACSC,cAAAA,qBADT,GAC+C,EAD/C;AAESH,cAAAA,OAFT,GAEmBL,iBAAiB,GAAGA,iBAAiB,CAACK,OAArB,GAA+B,EAFnE,EAEuE;;AAFvE;AAAA,qBAGSI,OAAO,CAACC,GAAR,CACFL,OAAO,CAACM,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA,wCAAY,iBAAOC,MAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gCACJ,CAACA,MAAD,IAAW,CAACA,MAAM,CAACC,aADf;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAGiBC,0BAAAA,MAHjB,GAIJF,MAJI,CAGJC,aAHI,CAGaE,EAHb;AAAA;AAAA,iCAKUT,QAAQ,CAACU,2BAAT,CAAqCF,MAAM,CAACG,QAAP,EAArC,EAAwDlB,MAAxD,CALV;;AAAA;AAKFmB,0BAAAA,GALE;AAMRV,0BAAAA,qBAAqB,CAACM,MAAD,CAArB,GAAgCI,GAAhC;;AANQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAZ;;AAAA;AAAA;AAAA;AAAA,kBADE,CAHT;;AAAA;AAaGf,cAAAA,eAAe,CAACK,qBAAD,CAAf;;AAbH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAD;AAeH,GApBD,EAoBG,CAACV,GAAD,EAAMI,YAAN,EAAoBF,iBAApB,EAAuCD,MAAvC,CApBH;AAsBA,SAAOG,YAAP;AACH;;AAED,eAAeL,UAAf","sourcesContent":["// @flow\n\nimport * as React from 'react';\nimport API from '../../../api';\nimport type { Collaboration, Collaborations } from '../../../common/types/core';\nimport type { AvatarURLMap } from '../types';\n\n/**\n * Generate a map of avatar URLs, which are used to display collaborators in the USM.\n *\n * @param {API} api\n * @param {string} itemID\n * @param {Collaborations | null} collaboratorsList\n * @returns {AvatarURLMap | null}\n */\nfunction useAvatars(api: API, itemID: string, collaboratorsList: Collaborations | null): AvatarURLMap | null {\n    const [avatarURLMap, setAvatarURLMap] = React.useState<AvatarURLMap | null>(null);\n\n    React.useEffect(() => {\n        if (avatarURLMap || !collaboratorsList || !collaboratorsList.entries) return;\n\n        const usersAPI = api.getUsersAPI(false);\n\n        (async () => {\n            const retrievedAvatarURLMap: AvatarURLMap = {};\n            const entries = collaboratorsList ? collaboratorsList.entries : []; // needed for Flow\n            await Promise.all(\n                entries.map(async (collab: Collaboration) => {\n                    if (!collab || !collab.accessible_by) return;\n                    const {\n                        accessible_by: { id: userID },\n                    } = collab;\n                    const url = await usersAPI.getAvatarUrlWithAccessToken(userID.toString(), itemID);\n                    retrievedAvatarURLMap[userID] = url;\n                }),\n            );\n            setAvatarURLMap(retrievedAvatarURLMap);\n        })();\n    }, [api, avatarURLMap, collaboratorsList, itemID]);\n\n    return avatarURLMap;\n}\n\nexport default useAvatars;\n"],"file":"useAvatars.js"}