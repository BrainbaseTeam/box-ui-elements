{"version":3,"sources":["../../../src/elements/content-preview/ContentPreview.js"],"names":["React","classNames","uniqueid","throttle","cloneDeep","omit","getProp","flow","noop","Measure","decode","makeResponsive","Internationalize","AsyncLoad","TokenService","isInputElement","focus","getTypedFileId","withErrorBoundary","withLogger","PREVIEW_FIELDS_TO_FETCH","mark","withFeatureProvider","EVENT_JS_READY","ReloadNotification","API","PreviewHeader","PreviewNavigation","PreviewLoading","DEFAULT_HOSTNAME_API","DEFAULT_HOSTNAME_APP","DEFAULT_HOSTNAME_STATIC","DEFAULT_PREVIEW_VERSION","DEFAULT_LOCALE","DEFAULT_PATH_STATIC_PREVIEW","CLIENT_NAME_CONTENT_PREVIEW","ORIGIN_PREVIEW","ORIGIN_CONTENT_PREVIEW","ERROR_CODE_UNKNOWN","InvalidIdError","Error","PREVIEW_LOAD_METRIC_EVENT","MARK_NAME_JS_READY","LoadableSidebar","loader","ContentPreview","props","createRef","error","undefined","isReloadNotificationVisible","isThumbnailSidebarOpen","rest","code","onError","setState","previewMetrics","logger","event_name","metrics","totalFetchFileTime","getTotalFileFetchTime","totalTime","value","file_info_time","onPreviewMetric","data","onLoad","collection","currentIndex","getFileIndex","filesToPrefetch","slice","previewTimeMetrics","loadData","totalPreviewMetrics","addFetchFileTimeToPreviewMetrics","time","focusPreview","preview","length","prefetch","enableThumbnailsSidebar","fileOptions","tokenOrTokenFunction","token","state","file","selectedVersion","isPreviewLibraryLoaded","fileId","getFileId","currentFileId","fileOpts","typedId","getReadTokens","fileVersionId","id","previewOptions","container","header","headerElement","showAnnotations","canViewAnnotations","showDownload","canDownload","skipServerUpdate","useHotkeys","Preview","global","Box","addListener","onPreviewLoad","onPreviewError","updateFileCache","show","Object","keys","stagedFile","initialState","getCurrentViewer","resize","fetchFileEndTime","performance","now","currentFile","isExistingFile","isWatermarked","file_version","sha1","fileError","errorCode","message","getPreview","viewer","isLoaded","isDestroyed","newIndex","navigateToIndex","onDownload","download","print","getViewer","isPreviewing","CLASS_NAVIGATION_VISIBILITY","clearTimeout","mouseMoveTimeoutID","previewContainer","classList","remove","allowNavigationArrows","add","setTimeout","event","consumed","key","target","onKeydown","nativeEvent","navigateLeft","navigateRight","preventDefault","stopPropagation","version","additionalVersionInfo","onVersionChange","updateVersionToCurrent","apiHost","cache","language","requestInterceptor","responseInterceptor","sharedLink","sharedLinkPassword","api","clientName","prevFileIdProp","onReadyMetric","endMarkName","destroy","destroyPreview","removeAllListeners","loadStylesheet","loadScript","fetchFile","prevProps","prevState","hasFileIdChanged","hasTokenChanged","shouldLoadPreview","loadPreview","updatePreviewToken","shouldReload","updateToken","prevFile","prevSelectedVersion","prevSelectedVersionId","selectedVersionId","prevFileVersionId","isPreviousCurrent","isSelectedCurrent","asset","staticHost","staticPath","previewLibraryVersion","path","suffix","endsWith","document","head","url","getBasePath","querySelector","link","createElement","rel","type","href","appendChild","previewScript","script","src","addEventListener","autoFocus","getInnerRef","activeElement","files","typedIds","map","cacheTokens","forEach","refreshCache","fetchFileStartTime","Math","round","rendering","conversion","preload","totalConversion","totalRendering","totalPreload","total","isFileDownloadable","isFileAnnotatable","hasViewAllPermissions","hasViewSelfPermissions","canAnnotate","successCallback","errorCallback","fetchOptions","getFileAPI","getFile","fetchFileSuccessCallback","fetchFileErrorCallback","fields","findIndex","item","index","onNavigate","fileOrId","contentSidebar","current","refresh","messages","className","contentSidebarProps","contentOpenWithProps","hasHeader","history","isLarge","isVeryLarge","logoUrl","onClose","measureRef","styleClassName","currentVersionId","onHeaderClose","onKeyDown","onMouseMove","containerRef","onResize","previewRef","size","getCache","closeReloadNotification","loadFileFromStage","PureComponent","appHost","ContentPreviewComponent"],"mappings":"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","sourcesContent":["/**\n * @flow\n * @file Content Preview Component\n * @author Box\n */\n\nimport 'regenerator-runtime/runtime';\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport uniqueid from 'lodash/uniqueId';\nimport throttle from 'lodash/throttle';\nimport cloneDeep from 'lodash/cloneDeep';\nimport omit from 'lodash/omit';\nimport getProp from 'lodash/get';\nimport flow from 'lodash/flow';\nimport noop from 'lodash/noop';\nimport Measure from 'react-measure';\nimport type { RouterHistory } from 'react-router-dom';\nimport { decode } from '../../utils/keys';\nimport makeResponsive from '../common/makeResponsive';\nimport Internationalize from '../common/Internationalize';\nimport AsyncLoad from '../common/async-load';\nimport TokenService from '../../utils/TokenService';\nimport { isInputElement, focus } from '../../utils/dom';\nimport { getTypedFileId } from '../../utils/file';\nimport { withErrorBoundary } from '../common/error-boundary';\nimport { withLogger } from '../common/logger';\nimport { PREVIEW_FIELDS_TO_FETCH } from '../../utils/fields';\nimport { mark } from '../../utils/performance';\nimport { withFeatureProvider } from '../common/feature-checking';\nimport { EVENT_JS_READY } from '../common/logger/constants';\nimport ReloadNotification from './ReloadNotification';\nimport API from '../../api';\nimport PreviewHeader from './preview-header';\nimport PreviewNavigation from './PreviewNavigation';\nimport PreviewLoading from './PreviewLoading';\nimport {\n    DEFAULT_HOSTNAME_API,\n    DEFAULT_HOSTNAME_APP,\n    DEFAULT_HOSTNAME_STATIC,\n    DEFAULT_PREVIEW_VERSION,\n    DEFAULT_LOCALE,\n    DEFAULT_PATH_STATIC_PREVIEW,\n    CLIENT_NAME_CONTENT_PREVIEW,\n    ORIGIN_PREVIEW,\n    ORIGIN_CONTENT_PREVIEW,\n    ERROR_CODE_UNKNOWN,\n} from '../../constants';\nimport type { ErrorType } from '../common/flowTypes';\nimport type { VersionChangeCallback } from '../content-sidebar/versions';\nimport '../common/fonts.scss';\nimport '../common/base.scss';\nimport './ContentPreview.scss';\n\ntype Props = {\n    apiHost: string,\n    appHost: string,\n    autoFocus: boolean,\n    cache?: APICache,\n    canDownload?: boolean,\n    className: string,\n    collection: Array<string | BoxItem>,\n    contentOpenWithProps: ContentOpenWithProps,\n    contentSidebarProps: ContentSidebarProps,\n    enableThumbnailsSidebar: boolean,\n    features?: FeatureConfig,\n    fileId?: string,\n    fileOptions?: Object,\n    getInnerRef: () => ?HTMLElement,\n    hasHeader?: boolean,\n    history?: RouterHistory,\n    isLarge: boolean,\n    isVeryLarge?: boolean,\n    language: string,\n    logoUrl?: string,\n    measureRef: Function,\n    messages?: StringMap,\n    onClose?: Function,\n    onDownload: Function,\n    onLoad: Function,\n    onNavigate: Function,\n    onVersionChange: VersionChangeCallback,\n    previewLibraryVersion: string,\n    requestInterceptor?: Function,\n    responseInterceptor?: Function,\n    sharedLink?: string,\n    sharedLinkPassword?: string,\n    showAnnotations?: boolean,\n    staticHost: string,\n    staticPath: string,\n    token: Token,\n    useHotkeys: boolean,\n} & ErrorContextProps &\n    WithLoggerProps;\n\ntype State = {\n    currentFileId?: string,\n    error?: ErrorType,\n    file?: BoxItem,\n    isReloadNotificationVisible: boolean,\n    isThumbnailSidebarOpen: boolean,\n    prevFileIdProp?: string, // the previous value of the \"fileId\" prop. Needed to implement getDerivedStateFromProps\n    selectedVersion?: BoxItemVersion,\n};\n\n// Emitted by preview's 'load' event\ntype PreviewTimeMetrics = {\n    conversion: number,\n    preload?: number,\n    rendering: number,\n    total: number,\n};\n\n// Emitted by preview's 'preview_metric' event\ntype PreviewMetrics = {\n    browser_name: string,\n    client_version: string,\n    content_type: string, // Sum of all available load times.\n    convert_time: number,\n    download_response_time: number,\n    error?: Object,\n    event_name?: string,\n    extension: string,\n    file_id: string,\n    file_info_time: number,\n    file_version_id: string,\n    full_document_load_time: number,\n    locale: string,\n    logger_session_id: string,\n    rep_type: string,\n    timestamp: string,\n    value: number,\n};\n\ntype PreviewLibraryError = {\n    error: ErrorType,\n};\n\nconst InvalidIdError = new Error('Invalid id for Preview!');\nconst PREVIEW_LOAD_METRIC_EVENT = 'load';\nconst MARK_NAME_JS_READY = `${ORIGIN_CONTENT_PREVIEW}_${EVENT_JS_READY}`;\n\nmark(MARK_NAME_JS_READY);\n\nconst LoadableSidebar = AsyncLoad({\n    loader: () => import(/* webpackMode: \"lazy\", webpackChunkName: \"content-sidebar\" */ '../content-sidebar'),\n});\n\nclass ContentPreview extends React.PureComponent<Props, State> {\n    id: string;\n\n    props: Props;\n\n    state: State;\n\n    preview: any;\n\n    api: API;\n\n    // Defines a generic type for ContentSidebar, since an import would interfere with code splitting\n    contentSidebar: { current: null | { refresh: Function } } = React.createRef();\n\n    previewContainer: ?HTMLDivElement;\n\n    mouseMoveTimeoutID: TimeoutID;\n\n    rootElement: HTMLElement;\n\n    stagedFile: ?BoxItem;\n\n    updateVersionToCurrent: ?() => void;\n\n    initialState: State = {\n        error: undefined,\n        isReloadNotificationVisible: false,\n        isThumbnailSidebarOpen: false,\n    };\n\n    static defaultProps = {\n        apiHost: DEFAULT_HOSTNAME_API,\n        appHost: DEFAULT_HOSTNAME_APP,\n        autoFocus: false,\n        canDownload: true,\n        className: '',\n        collection: [],\n        contentOpenWithProps: {},\n        contentSidebarProps: {},\n        enableThumbnailsSidebar: false,\n        hasHeader: false,\n        language: DEFAULT_LOCALE,\n        onDownload: noop,\n        onError: noop,\n        onLoad: noop,\n        onNavigate: noop,\n        onVersionChange: noop,\n        previewLibraryVersion: DEFAULT_PREVIEW_VERSION,\n        showAnnotations: false,\n        staticHost: DEFAULT_HOSTNAME_STATIC,\n        staticPath: DEFAULT_PATH_STATIC_PREVIEW,\n        useHotkeys: true,\n    };\n\n    /**\n     * @property {number}\n     */\n    fetchFileEndTime: ?number;\n\n    /**\n     * @property {number}\n     */\n    fetchFileStartTime: ?number;\n\n    /**\n     * [constructor]\n     *\n     * @return {ContentPreview}\n     */\n    constructor(props: Props) {\n        super(props);\n        const {\n            apiHost,\n            cache,\n            fileId,\n            language,\n            requestInterceptor,\n            responseInterceptor,\n            sharedLink,\n            sharedLinkPassword,\n            token,\n        } = props;\n\n        this.id = uniqueid('bcpr_');\n        this.api = new API({\n            apiHost,\n            cache,\n            clientName: CLIENT_NAME_CONTENT_PREVIEW,\n            language,\n            requestInterceptor,\n            responseInterceptor,\n            sharedLink,\n            sharedLinkPassword,\n            token,\n        });\n        this.state = {\n            ...this.initialState,\n            currentFileId: fileId,\n            // eslint-disable-next-line react/no-unused-state\n            prevFileIdProp: fileId,\n        };\n        const { logger } = props;\n        logger.onReadyMetric({\n            endMarkName: MARK_NAME_JS_READY,\n        });\n    }\n\n    /**\n     * Cleanup\n     *\n     * @return {void}\n     */\n    componentWillUnmount(): void {\n        // Don't destroy the cache while unmounting\n        this.api.destroy(false);\n        this.destroyPreview();\n    }\n\n    /**\n     * Cleans up the preview instance\n     */\n    destroyPreview() {\n        if (this.preview) {\n            this.preview.destroy();\n            this.preview.removeAllListeners();\n            this.preview = undefined;\n        }\n\n        this.setState({ selectedVersion: undefined });\n    }\n\n    /**\n     * Destroys api instances with caches\n     *\n     * @private\n     * @return {void}\n     */\n    clearCache(): void {\n        this.api.destroy(true);\n    }\n\n    /**\n     * Once the component mounts, load Preview assets and fetch file info.\n     *\n     * @return {void}\n     */\n    componentDidMount(): void {\n        this.loadStylesheet();\n        this.loadScript();\n\n        this.fetchFile(this.state.currentFileId);\n        this.focusPreview();\n    }\n\n    static getDerivedStateFromProps(props: Props, state: State) {\n        const { fileId } = props;\n\n        if (fileId !== state.prevFileIdProp) {\n            return {\n                currentFileId: fileId,\n                prevFileIdProp: fileId,\n            };\n        }\n\n        return null;\n    }\n\n    /**\n     * After component updates, load Preview if appropriate.\n     *\n     * @return {void}\n     */\n    componentDidUpdate(prevProps: Props, prevState: State): void {\n        const { token } = this.props;\n        const { currentFileId } = this.state;\n        const hasFileIdChanged = prevState.currentFileId !== currentFileId;\n        const hasTokenChanged = prevProps.token !== token;\n        if (hasFileIdChanged) {\n            this.destroyPreview();\n            this.fetchFile(currentFileId);\n        } else if (this.shouldLoadPreview(prevState)) {\n            this.loadPreview();\n        } else if (hasTokenChanged) {\n            this.updatePreviewToken();\n        }\n    }\n\n    /**\n     * Updates the access token used by preview library\n     *\n     * @param {boolean} shouldReload - true if preview should be reloaded\n     */\n    updatePreviewToken(shouldReload: boolean = false) {\n        if (this.preview) {\n            this.preview.updateToken(this.props.token, shouldReload);\n        }\n    }\n\n    /**\n     * Returns whether or not preview should be loaded.\n     *\n     * @param {State} prevState - Previous state\n     * @return {boolean}\n     */\n    shouldLoadPreview(prevState: State): boolean {\n        const { file, selectedVersion }: State = this.state;\n        const { file: prevFile, selectedVersion: prevSelectedVersion }: State = prevState;\n        const prevSelectedVersionId = getProp(prevSelectedVersion, 'id');\n        const selectedVersionId = getProp(selectedVersion, 'id');\n        const prevFileVersionId = getProp(prevFile, 'file_version.id');\n        const fileVersionId = getProp(file, 'file_version.id');\n        let loadPreview = false;\n\n        if (selectedVersionId !== prevSelectedVersionId) {\n            const isPreviousCurrent = fileVersionId === prevSelectedVersionId || !prevSelectedVersionId;\n            const isSelectedCurrent = fileVersionId === selectedVersionId || !selectedVersionId;\n\n            // Load preview if the user has selected a non-current version of the file\n            loadPreview = !isPreviousCurrent || !isSelectedCurrent;\n        } else if (fileVersionId && prevFileVersionId) {\n            // Load preview if the file's current version ID has changed\n            loadPreview = fileVersionId !== prevFileVersionId;\n        } else {\n            // Load preview if file object has newly been populated in state\n            loadPreview = !prevFile && !!file;\n        }\n\n        return loadPreview;\n    }\n\n    /**\n     * Returns preview asset urls\n     *\n     * @return {string} base url\n     */\n    getBasePath(asset: string): string {\n        const { staticHost, staticPath, language, previewLibraryVersion }: Props = this.props;\n        const path: string = `${staticPath}/${previewLibraryVersion}/${language}/${asset}`;\n        const suffix: string = staticHost.endsWith('/') ? path : `/${path}`;\n        return `${staticHost}${suffix}`;\n    }\n\n    /**\n     * Determines if preview assets are loaded\n     *\n     * @return {boolean} true if preview is loaded\n     */\n    isPreviewLibraryLoaded(): boolean {\n        return !!global.Box && !!global.Box.Preview;\n    }\n\n    /**\n     * Loads external css by appending a <link> element\n     *\n     * @return {void}\n     */\n    loadStylesheet(): void {\n        const { head } = document;\n        const url: string = this.getBasePath('preview.css');\n\n        if (!head || head.querySelector(`link[rel=\"stylesheet\"][href=\"${url}\"]`)) {\n            return;\n        }\n\n        const link = document.createElement('link');\n        link.rel = 'stylesheet';\n        link.type = 'text/css';\n        link.href = url;\n        head.appendChild(link);\n    }\n\n    /**\n     * Loads external script by appending a <script> element\n     *\n     * @return {void}\n     */\n    loadScript(): void {\n        const { head } = document;\n        const url: string = this.getBasePath('preview.js');\n\n        if (!head || this.isPreviewLibraryLoaded()) {\n            return;\n        }\n\n        const previewScript = head.querySelector(`script[src=\"${url}\"]`);\n        if (previewScript) {\n            return;\n        }\n\n        const script = document.createElement('script');\n        script.src = url;\n        script.addEventListener('load', this.loadPreview);\n        head.appendChild(script);\n    }\n\n    /**\n     * Focuses the preview on load.\n     *\n     * @return {void}\n     */\n    focusPreview() {\n        const { autoFocus, getInnerRef }: Props = this.props;\n        if (autoFocus && !isInputElement(document.activeElement)) {\n            focus(getInnerRef());\n        }\n    }\n\n    /**\n     * Updates preview cache and prefetches a file\n     *\n     * @param {BoxItem} file - file to prefetch\n     * @return {void}\n     */\n    updatePreviewCacheAndPrefetch(file: BoxItem, token: Token): void {\n        if (!this.preview || !file || !file.id) {\n            return;\n        }\n\n        this.preview.updateFileCache([file]);\n        this.preview.prefetch({ fileId: file.id, token });\n    }\n\n    /**\n     * Gets the file id\n     *\n     * @param {string|BoxItem} file - box file or file id\n     * @return {string} file id\n     */\n    getFileId(file?: string | BoxItem): string {\n        if (typeof file === 'string') {\n            return file;\n        }\n\n        if (typeof file === 'object' && !!file.id) {\n            return file.id;\n        }\n\n        throw InvalidIdError;\n    }\n\n    /**\n     * Prefetches the next few preview files if any\n     *\n     * @param {Array<string|BoxItem>} files - files to prefetch\n     * @return {void}\n     */\n    async prefetch(files: Array<string | BoxItem>): Promise<void> {\n        const { token }: Props = this.props;\n        const typedIds: string[] = files.map(file => getTypedFileId(this.getFileId(file)));\n        await TokenService.cacheTokens(typedIds, token);\n        files.forEach(file => {\n            const fileId = this.getFileId(file);\n            this.fetchFile(fileId, noop, noop, {\n                refreshCache: false,\n            });\n        });\n    }\n\n    /**\n     * Calculates the total file fetch time\n     *\n     * @return {number} the total fetch time\n     */\n    getTotalFileFetchTime(): number {\n        if (!this.fetchFileStartTime || !this.fetchFileEndTime) {\n            return 0;\n        }\n\n        return Math.round(this.fetchFileEndTime - this.fetchFileStartTime);\n    }\n\n    /**\n     * Handler for 'preview_error' preview event\n     *\n     * @param {PreviewLibraryError} previewError - the error data emitted from preview\n     * @return {void}\n     */\n    onPreviewError = ({ error, ...rest }: PreviewLibraryError): void => {\n        const { code = ERROR_CODE_UNKNOWN } = error;\n        const { onError } = this.props;\n\n        // In case of error, there should be no thumbnail sidebar to account for\n        this.setState({ isThumbnailSidebarOpen: false });\n\n        onError(\n            error,\n            code,\n            {\n                ...rest,\n                error,\n            },\n            ORIGIN_PREVIEW,\n        );\n    };\n\n    /**\n     * Event handler 'preview_metric' which also adds in the file fetch time if it's a load event\n     *\n     * @param {Object} previewMetrics - the object emitted by 'preview_metric'\n     * @return {void}\n     */\n    onPreviewMetric = (previewMetrics: PreviewMetrics): void => {\n        const { logger } = this.props;\n        const { event_name } = previewMetrics;\n        let metrics = {\n            ...previewMetrics,\n        };\n\n        // We need to add in the total file fetch time to the file_info_time and value (total)\n        // as preview does not do the files call\n        if (event_name === PREVIEW_LOAD_METRIC_EVENT) {\n            const totalFetchFileTime = this.getTotalFileFetchTime();\n            const totalTime = (previewMetrics.value || 0) + totalFetchFileTime;\n\n            // If an unnatural load time occurs or is invalid, don't log a load event\n            if (!totalTime) {\n                return;\n            }\n\n            metrics = {\n                ...previewMetrics,\n                file_info_time: totalFetchFileTime,\n                value: totalTime,\n            };\n        }\n\n        logger.onPreviewMetric(metrics);\n    };\n\n    /**\n     * Adds in the file fetch time to the preview metrics\n     *\n     * @param {Object} previewTimeMetrics - the preview time metrics\n     * @return {Object} the preview time metrics merged with the files call time\n     */\n    addFetchFileTimeToPreviewMetrics(previewTimeMetrics: PreviewTimeMetrics): PreviewTimeMetrics {\n        const totalFetchFileTime = this.getTotalFileFetchTime();\n        const { rendering, conversion, preload } = previewTimeMetrics;\n\n        // We need to add in the total file fetch time to the rendering and total as preview\n        // does not do the files call. In the case the file is in the process of\n        // being converted, we need to add to conversion instead of the render\n        let totalConversion = conversion;\n        let totalRendering = rendering;\n        let totalPreload = preload;\n        if (conversion) {\n            totalConversion += totalFetchFileTime;\n        } else {\n            totalRendering += totalFetchFileTime;\n        }\n\n        if (totalPreload) {\n            // Preload is optional, depending on file type\n            totalPreload += totalFetchFileTime;\n        }\n\n        const previewMetrics = {\n            conversion: totalConversion,\n            rendering: totalRendering,\n            total: totalRendering + totalConversion,\n            preload: totalPreload,\n        };\n\n        return previewMetrics;\n    }\n\n    /**\n     * onLoad function for preview\n     *\n     * @return {void}\n     */\n    onPreviewLoad = (data: Object): void => {\n        const { onLoad, collection }: Props = this.props;\n        const currentIndex = this.getFileIndex();\n        const filesToPrefetch = collection.slice(currentIndex + 1, currentIndex + 5);\n        const previewTimeMetrics = getProp(data, 'metrics.time');\n        let loadData = data;\n\n        if (previewTimeMetrics) {\n            const totalPreviewMetrics = this.addFetchFileTimeToPreviewMetrics(previewTimeMetrics);\n            loadData = {\n                ...loadData,\n                metrics: {\n                    ...loadData.metrics,\n                    time: totalPreviewMetrics,\n                },\n            };\n        }\n\n        onLoad(loadData);\n        this.focusPreview();\n        if (this.preview && filesToPrefetch.length > 1) {\n            this.prefetch(filesToPrefetch);\n        }\n    };\n\n    /**\n     * Returns whether file can be downloaded based on file properties, permissions, and user-defined options.\n     *\n     * @return {boolean}\n     */\n    canDownload(): boolean {\n        const { canDownload }: Props = this.props;\n        const { file }: State = this.state;\n        const isFileDownloadable =\n            getProp(file, 'permissions.can_download', false) && getProp(file, 'is_download_available', false);\n        return isFileDownloadable && !!canDownload;\n    }\n\n    /**\n     * Returns whether file can be annotated based on permissions\n     *\n     * @return {boolean}\n     */\n    canAnnotate(): boolean {\n        const { showAnnotations }: Props = this.props;\n        const { file }: State = this.state;\n        const isFileAnnotatable = getProp(file, 'permissions.can_annotate', false);\n        return !!showAnnotations && isFileAnnotatable;\n    }\n\n    /**\n     * Returns whether a preview should render annotations based on permissions\n     *\n     * @return {boolean}\n     */\n    canViewAnnotations(): boolean {\n        const { showAnnotations }: Props = this.props;\n        const { file }: State = this.state;\n        const hasViewAllPermissions = getProp(file, 'permissions.can_view_annotations_all', false);\n        const hasViewSelfPermissions = getProp(file, 'permissions.can_view_annotations_self', false);\n        return !!showAnnotations && (this.canAnnotate() || hasViewAllPermissions || hasViewSelfPermissions);\n    }\n\n    /**\n     * Loads preview in the component using the preview library.\n     *\n     * @return {void}\n     */\n    loadPreview = async (): Promise<void> => {\n        const { enableThumbnailsSidebar, fileOptions, token: tokenOrTokenFunction, ...rest }: Props = this.props;\n        const { file, selectedVersion }: State = this.state;\n\n        if (!this.isPreviewLibraryLoaded() || !file || !tokenOrTokenFunction) {\n            return;\n        }\n\n        const fileId = this.getFileId(file);\n\n        if (fileId !== this.state.currentFileId) {\n            return;\n        }\n\n        const fileOpts = { ...fileOptions };\n        const token = typedId => TokenService.getReadTokens(typedId, tokenOrTokenFunction);\n\n        if (selectedVersion) {\n            fileOpts[fileId] = fileOpts[fileId] || {};\n            fileOpts[fileId].fileVersionId = selectedVersion.id;\n        }\n\n        const previewOptions = {\n            container: `#${this.id} .bcpr-content`,\n            enableThumbnailsSidebar,\n            fileOptions: fileOpts,\n            header: 'none',\n            headerElement: `#${this.id} .bcpr-PreviewHeader`,\n            showAnnotations: this.canViewAnnotations(),\n            showDownload: this.canDownload(),\n            skipServerUpdate: true,\n            useHotkeys: false,\n        };\n        const { Preview } = global.Box;\n        this.preview = new Preview();\n        this.preview.addListener('load', this.onPreviewLoad);\n        this.preview.addListener('preview_error', this.onPreviewError);\n        this.preview.addListener('preview_metric', this.onPreviewMetric);\n        this.preview.addListener('thumbnailsOpen', () => this.setState({ isThumbnailSidebarOpen: true }));\n        this.preview.addListener('thumbnailsClose', () => this.setState({ isThumbnailSidebarOpen: false }));\n        this.preview.updateFileCache([file]);\n        this.preview.show(file.id, token, {\n            ...previewOptions,\n            ...omit(rest, Object.keys(previewOptions)),\n        });\n    };\n\n    /**\n     * Updates preview file from temporary staged file.\n     *\n     * @return {void}\n     */\n    loadFileFromStage = () => {\n        if (this.stagedFile) {\n            this.setState({ ...this.initialState, file: this.stagedFile }, () => {\n                this.stagedFile = undefined;\n            });\n        }\n    };\n\n    /**\n     * Removes the reload notification\n     *\n     * @return {void}\n     */\n    closeReloadNotification = () => {\n        this.setState({ isReloadNotificationVisible: false });\n    };\n\n    /**\n     * Tells the preview to resize\n     *\n     * @return {void}\n     */\n    onResize = (): void => {\n        if (this.preview && this.preview.getCurrentViewer()) {\n            this.preview.resize();\n        }\n    };\n\n    /**\n     * File fetch success callback\n     *\n     * @param {Object} file - Box file\n     * @return {void}\n     */\n    fetchFileSuccessCallback = (file: BoxItem): void => {\n        this.fetchFileEndTime = performance.now();\n\n        const { file: currentFile }: State = this.state;\n        const isExistingFile = currentFile ? currentFile.id === file.id : false;\n        const isWatermarked = getProp(file, 'watermark_info.is_watermarked', false);\n\n        // If the file is watermarked or if its a new file, then update the state\n        // In this case preview should reload without prompting the user\n        if (isWatermarked || !isExistingFile) {\n            this.setState({ ...this.initialState, file });\n            // $FlowFixMe file version and sha1 should exist at this point\n        } else if (currentFile.file_version.sha1 !== file.file_version.sha1) {\n            // If we are already prevewing the file that got updated then show the\n            // user a notification to reload the file only if its sha1 changed\n            this.stagedFile = file;\n            this.setState({\n                ...this.initialState,\n                isReloadNotificationVisible: true,\n            });\n        }\n    };\n\n    /**\n     * File fetch error callback\n     *\n     * @return {void}\n     */\n    fetchFileErrorCallback = (fileError: ElementsXhrError, code: string): void => {\n        const { onError } = this.props;\n        const errorCode = fileError.code || code;\n        const error = {\n            code: errorCode,\n            message: fileError.message,\n        };\n        this.setState({ error, file: undefined });\n        onError(fileError, errorCode, {\n            error: fileError,\n        });\n    };\n\n    /**\n     * Fetches a file\n     *\n     * @param {string} id file id\n     * @param {Function|void} [successCallback] - Callback after file is fetched\n     * @param {Function|void} [errorCallback] - Callback after error\n     * @param {Object|void} [fetchOptions] - Fetch options\n     * @return {void}\n     */\n    fetchFile(\n        id: ?string,\n        successCallback?: Function,\n        errorCallback?: Function,\n        fetchOptions?: FetchOptions = {},\n    ): void {\n        if (!id) {\n            return;\n        }\n\n        this.fetchFileStartTime = performance.now();\n        this.fetchFileEndTime = null;\n\n        this.api\n            .getFileAPI()\n            .getFile(\n                id,\n                successCallback || this.fetchFileSuccessCallback,\n                errorCallback || this.fetchFileErrorCallback,\n                {\n                    ...fetchOptions,\n                    fields: PREVIEW_FIELDS_TO_FETCH,\n                },\n            );\n    }\n\n    /**\n     * Returns the preview instance\n     *\n     * @return {Preview} current instance of preview\n     */\n    getPreview = (): any => {\n        const { file }: State = this.state;\n        if (!this.preview || !file) {\n            return null;\n        }\n\n        return this.preview;\n    };\n\n    /**\n     * Returns the viewer instance being used by preview.\n     * This will let child components access the viewers.\n     *\n     * @return {Viewer} current instance of the preview viewer\n     */\n    getViewer = (): any => {\n        const preview = this.getPreview();\n        const viewer = preview ? preview.getCurrentViewer() : null;\n        return viewer && viewer.isLoaded() && !viewer.isDestroyed() ? viewer : null;\n    };\n\n    /**\n     * Finds the index of current file inside the collection\n     *\n     * @return {number} -1 if not indexed\n     */\n    getFileIndex() {\n        const { currentFileId }: State = this.state;\n        const { collection }: Props = this.props;\n        if (!currentFileId || collection.length < 2) {\n            return -1;\n        }\n\n        return collection.findIndex(item => {\n            if (typeof item === 'string') {\n                return item === currentFileId;\n            }\n\n            return item.id === currentFileId;\n        });\n    }\n\n    /**\n     * Shows a preview of a file at the specified index in the current collection.\n     *\n     * @public\n     * @param {number} index - Index of file to preview\n     * @return {void}\n     */\n    navigateToIndex(index: number) {\n        const { collection, onNavigate }: Props = this.props;\n        const { length } = collection;\n        if (length < 2 || index < 0 || index > length - 1) {\n            return;\n        }\n\n        const fileOrId = collection[index];\n        const fileId = typeof fileOrId === 'object' ? fileOrId.id || '' : fileOrId;\n\n        this.setState(\n            {\n                currentFileId: fileId,\n            },\n            () => {\n                // Execute navigation callback\n                onNavigate(fileId);\n            },\n        );\n    }\n\n    /**\n     * Shows a preview of the previous file.\n     *\n     * @public\n     * @return {void}\n     */\n    navigateLeft = () => {\n        const currentIndex = this.getFileIndex();\n        const newIndex = currentIndex === 0 ? 0 : currentIndex - 1;\n        if (newIndex !== currentIndex) {\n            this.navigateToIndex(newIndex);\n        }\n    };\n\n    /**\n     * Shows a preview of the next file.\n     *\n     * @public\n     * @return {void}\n     */\n    navigateRight = () => {\n        const { collection }: Props = this.props;\n        const currentIndex = this.getFileIndex();\n        const newIndex = currentIndex === collection.length - 1 ? collection.length - 1 : currentIndex + 1;\n        if (newIndex !== currentIndex) {\n            this.navigateToIndex(newIndex);\n        }\n    };\n\n    /**\n     * Downloads file.\n     *\n     * @public\n     * @return {void}\n     */\n    download = () => {\n        const { onDownload }: Props = this.props;\n        const { file }: State = this.state;\n        if (this.preview) {\n            this.preview.download();\n            onDownload(cloneDeep(file));\n        }\n    };\n\n    /**\n     * Prints file.\n     *\n     * @public\n     * @return {void}\n     */\n    print = () => {\n        if (this.preview) {\n            this.preview.print();\n        }\n    };\n\n    /**\n     * Mouse move handler that is throttled and show\n     * the navigation arrows if applicable.\n     *\n     * @return {void}\n     */\n    onMouseMove = throttle(() => {\n        const viewer = this.getViewer();\n        const isPreviewing = !!viewer;\n        const CLASS_NAVIGATION_VISIBILITY = 'bcpr-nav-is-visible';\n\n        clearTimeout(this.mouseMoveTimeoutID);\n\n        if (!this.previewContainer) {\n            return;\n        }\n\n        // Always assume that navigation arrows will be hidden\n        this.previewContainer.classList.remove(CLASS_NAVIGATION_VISIBILITY);\n\n        // Only show it if either we aren't previewing or if we are then the viewer\n        // is not blocking the show. If we are previewing then the viewer may choose\n        // to not allow navigation arrows. This is mostly useful for videos since the\n        // navigation arrows may interfere with the settings menu inside video player.\n        if (this.previewContainer && (!isPreviewing || viewer.allowNavigationArrows())) {\n            this.previewContainer.classList.add(CLASS_NAVIGATION_VISIBILITY);\n        }\n\n        this.mouseMoveTimeoutID = setTimeout(() => {\n            if (this.previewContainer) {\n                this.previewContainer.classList.remove(CLASS_NAVIGATION_VISIBILITY);\n            }\n        }, 1500);\n    }, 1000);\n\n    /**\n     * Keyboard events\n     *\n     * @return {void}\n     */\n    onKeyDown = (event: SyntheticKeyboardEvent<HTMLElement>) => {\n        const { useHotkeys }: Props = this.props;\n        if (!useHotkeys) {\n            return;\n        }\n\n        let consumed = false;\n        const key = decode(event);\n        const viewer = this.getViewer();\n\n        // If focus was on an input or if the viewer doesn't exist\n        // then don't bother doing anything further\n        if (!key || !viewer || isInputElement(event.target)) {\n            return;\n        }\n\n        if (typeof viewer.onKeydown === 'function') {\n            consumed = !!viewer.onKeydown(key, event.nativeEvent);\n        }\n\n        if (!consumed) {\n            switch (key) {\n                case 'ArrowLeft':\n                    this.navigateLeft();\n                    consumed = true;\n                    break;\n                case 'ArrowRight':\n                    this.navigateRight();\n                    consumed = true;\n                    break;\n                default:\n                // no-op\n            }\n        }\n\n        if (consumed) {\n            event.preventDefault();\n            event.stopPropagation();\n        }\n    };\n\n    /**\n     * Handles version change events\n     *\n     * @param {string} [version] - The version that is now previewed\n     * @param {object} [additionalVersionInfo] - extra info about the version\n     */\n    onVersionChange = (version?: BoxItemVersion, additionalVersionInfo?: AdditionalVersionInfo = {}): void => {\n        const { onVersionChange }: Props = this.props;\n        this.updateVersionToCurrent = additionalVersionInfo.updateVersionToCurrent;\n\n        onVersionChange(version, additionalVersionInfo);\n        this.setState({\n            selectedVersion: version,\n        });\n    };\n\n    /**\n     * Holds the reference the preview container\n     *\n     * @return {void}\n     */\n    containerRef = (container: ?HTMLDivElement) => {\n        this.previewContainer = container;\n    };\n\n    /**\n     * Refreshes the content sidebar panel\n     *\n     * @return {void}\n     */\n    refreshSidebar(): void {\n        const { current: contentSidebar } = this.contentSidebar;\n\n        if (contentSidebar) {\n            contentSidebar.refresh();\n        }\n    }\n\n    /**\n     * Renders the file preview\n     *\n     * @inheritdoc\n     * @return {Element}\n     */\n    render() {\n        const {\n            apiHost,\n            token,\n            language,\n            messages,\n            className,\n            contentSidebarProps,\n            contentOpenWithProps,\n            hasHeader,\n            history,\n            isLarge,\n            isVeryLarge,\n            logoUrl,\n            onClose,\n            measureRef,\n            sharedLink,\n            sharedLinkPassword,\n            requestInterceptor,\n            responseInterceptor,\n        }: Props = this.props;\n\n        const {\n            error,\n            file,\n            isReloadNotificationVisible,\n            currentFileId,\n            isThumbnailSidebarOpen,\n            selectedVersion,\n        }: State = this.state;\n        const { collection }: Props = this.props;\n        const styleClassName = classNames(\n            'be bcpr',\n            {\n                'bcpr-thumbnails-open': isThumbnailSidebarOpen,\n            },\n            className,\n        );\n\n        if (!currentFileId) {\n            return null;\n        }\n\n        const errorCode = getProp(error, 'code');\n        const currentVersionId = getProp(file, 'file_version.id');\n        const selectedVersionId = getProp(selectedVersion, 'id', currentVersionId);\n        const onHeaderClose = currentVersionId === selectedVersionId ? onClose : this.updateVersionToCurrent;\n\n        /* eslint-disable jsx-a11y/no-static-element-interactions */\n        /* eslint-disable jsx-a11y/no-noninteractive-tabindex */\n        return (\n            <Internationalize language={language} messages={messages}>\n                <div id={this.id} className={styleClassName} ref={measureRef} onKeyDown={this.onKeyDown} tabIndex={0}>\n                    {hasHeader && (\n                        <PreviewHeader\n                            file={file}\n                            logoUrl={logoUrl}\n                            token={token}\n                            onClose={onHeaderClose}\n                            onPrint={this.print}\n                            canDownload={this.canDownload()}\n                            onDownload={this.download}\n                            contentOpenWithProps={contentOpenWithProps}\n                            canAnnotate={this.canAnnotate()}\n                            selectedVersion={selectedVersion}\n                        />\n                    )}\n                    <div className=\"bcpr-body\">\n                        <div className=\"bcpr-container\" onMouseMove={this.onMouseMove} ref={this.containerRef}>\n                            {file ? (\n                                <Measure bounds onResize={this.onResize}>\n                                    {({ measureRef: previewRef }) => <div ref={previewRef} className=\"bcpr-content\" />}\n                                </Measure>\n                            ) : (\n                                <div className=\"bcpr-loading-wrapper\">\n                                    <PreviewLoading\n                                        errorCode={errorCode}\n                                        isLoading={!errorCode}\n                                        loadingIndicatorProps={{\n                                            size: 'large',\n                                        }}\n                                    />\n                                </div>\n                            )}\n                            <PreviewNavigation\n                                collection={collection}\n                                currentIndex={this.getFileIndex()}\n                                history={history}\n                                onNavigateLeft={this.navigateLeft}\n                                onNavigateRight={this.navigateRight}\n                            />\n                        </div>\n                        {file && (\n                            <LoadableSidebar\n                                {...contentSidebarProps}\n                                apiHost={apiHost}\n                                token={token}\n                                cache={this.api.getCache()}\n                                fileId={currentFileId}\n                                getPreview={this.getPreview}\n                                getViewer={this.getViewer}\n                                history={history}\n                                isDefaultOpen={isLarge || isVeryLarge}\n                                language={language}\n                                ref={this.contentSidebar}\n                                sharedLink={sharedLink}\n                                sharedLinkPassword={sharedLinkPassword}\n                                requestInterceptor={requestInterceptor}\n                                responseInterceptor={responseInterceptor}\n                                onVersionChange={this.onVersionChange}\n                            />\n                        )}\n                    </div>\n                    {isReloadNotificationVisible && (\n                        <ReloadNotification onClose={this.closeReloadNotification} onClick={this.loadFileFromStage} />\n                    )}\n                </div>\n            </Internationalize>\n        );\n        /* eslint-enable jsx-a11y/no-static-element-interactions */\n        /* eslint-enable jsx-a11y/no-noninteractive-tabindex */\n    }\n}\n\nexport type ContentPreviewProps = Props;\nexport { ContentPreview as ContentPreviewComponent };\nexport default flow([\n    makeResponsive,\n    withFeatureProvider,\n    withLogger(ORIGIN_CONTENT_PREVIEW),\n    withErrorBoundary(ORIGIN_CONTENT_PREVIEW),\n])(ContentPreview);\n"],"file":"ContentPreview.js"}