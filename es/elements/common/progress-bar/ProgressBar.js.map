{"version":3,"sources":["../../../../src/elements/common/progress-bar/ProgressBar.js"],"names":["React","PureComponent","ProgressBar","props","percent","state","interval","setInterval","incrementProgress","timeout","setTimeout","resetProgress","setState","defaultProps","clearInterval","clearTimeout","startProgress","prevProps","clearTimeoutAndInterval","containerStyle","opacity","transitionDelay","width"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;;;;;AAMA,OAAOA,KAAP,IAAgBC,aAAhB,QAAqC,OAArC;AACA,OAAO,oBAAP;;IAUMC,W;;;;;AAWF;;;;;AAKA,uBAAYC,KAAZ,EAA0B;AAAA;;AAAA;;AACtB,qFAAMA,KAAN;;AADsB,oEAqDV,YAAM;AAAA,UACVC,OADU,GACS,MAAKC,KADd,CACVD,OADU;;AAElB,UAAIA,OAAO,KAAK,CAAhB,EAAmB;AACf,cAAKE,QAAL,GAAgBC,WAAW,CAAC,MAAKC,iBAAN,EAAyB,GAAzB,CAA3B;AACH,OAFD,MAEO,IAAIJ,OAAO,KAAK,GAAhB,EAAqB;AACxB;AACA,cAAKK,OAAL,GAAeC,UAAU,CAAC,MAAKC,aAAN,EAAqB,GAArB,CAAzB;AACH;AACJ,KA7DyB;;AAAA,wEAoEN,YAAM;AAAA,UACdP,OADc,GACF,MAAKC,KADH,CACdD,OADc;;AAEtB,YAAKQ,QAAL,CAAc;AACVR,QAAAA,OAAO,EAAEA,OAAO,GAAG,KAAKA,OAAO,IAAI,CAAhB;AADT,OAAd;AAGH,KAzEyB;;AAAA,oEAgFV,YAAM;AAClB,YAAKQ,QAAL,CAAcV,WAAW,CAACW,YAA1B;AACH,KAlFyB;;AAAA,QAEdT,QAFc,GAEKD,KAFL,CAEdC,OAFc;AAGtB,UAAKC,KAAL,GAAa;AAAED,MAAAA,OAAO,EAAPA;AAAF,KAAb;AAHsB;AAIzB;AAED;;;;;;;;;8CAK0B;AACtBU,MAAAA,aAAa,CAAC,KAAKR,QAAN,CAAb;AACAS,MAAAA,YAAY,CAAC,KAAKN,OAAN,CAAZ;AACH;AAED;;;;;;wCAIoB;AAChB,WAAKO,aAAL;AACH;AAED;;;;;;;;uCAKmBC,S,EAAwB;AAAA,UAC/Bb,OAD+B,GACZ,KAAKD,KADO,CAC/BC,OAD+B;;AAGvC,UAAIa,SAAS,CAACb,OAAV,KAAsBA,OAA1B,EAAmC;AAC/B,aAAKc,uBAAL;AACA,aAAKN,QAAL,CAAc;AAAER,UAAAA,OAAO,EAAPA;AAAF,SAAd,EAA2B,KAAKY,aAAhC;AACH;AACJ;AAED;;;;;;;;2CAKuB;AACnB,WAAKE,uBAAL;AACH;AAED;;;;;;;;;;AAqCA;;;;;6BAKS;AAAA,UACGd,OADH,GACsB,KAAKC,KAD3B,CACGD,OADH;AAEL,UAAMe,cAAc,GAAG;AACnBC,QAAAA,OAAO,EAAEhB,OAAO,GAAG,CAAV,IAAeA,OAAO,GAAG,GAAzB,GAA+B,CAA/B,GAAmC,CADzB;AAEnBiB,QAAAA,eAAe,EAAEjB,OAAO,GAAG,CAAV,IAAeA,OAAO,GAAG,GAAzB,GAA+B,GAA/B,GAAqC;AAFnC,OAAvB;AAIA,aACI;AAAK,QAAA,SAAS,EAAC,uBAAf;AAAuC,QAAA,KAAK,EAAEe;AAA9C,SACI;AAAK,QAAA,SAAS,EAAC,aAAf;AAA6B,QAAA,KAAK,EAAE;AAAEG,UAAAA,KAAK,YAAKlB,OAAL;AAAP;AAApC,QADJ,CADJ;AAKH;;;;EApHqBH,a;;gBAApBC,W,kBASoB;AAAEE,EAAAA,OAAO,EAAE;AAAX,C;;AA8G1B,eAAeF,WAAf","sourcesContent":["/**\n * @flow\n * @file Progress Bar component\n * @author Box\n */\n\nimport React, { PureComponent } from 'react';\nimport './ProgressBar.scss';\n\ntype Props = {\n    percent: number,\n};\n\ntype State = {\n    percent: number,\n};\n\nclass ProgressBar extends PureComponent<Props, State> {\n    props: Props;\n\n    state: State;\n\n    timeout: TimeoutID;\n\n    interval: IntervalID;\n\n    static defaultProps = { percent: 0 };\n\n    /**\n     * [constructor]\n     *\n     * @return {ProgressBar}\n     */\n    constructor(props: Props) {\n        super(props);\n        const { percent }: State = props;\n        this.state = { percent };\n    }\n\n    /**\n     * Clears any timeouts and intervals\n     *\n     * @return {void}\n     */\n    clearTimeoutAndInterval() {\n        clearInterval(this.interval);\n        clearTimeout(this.timeout);\n    }\n\n    /**\n     * Starts progress on mount\n     */\n\n    componentDidMount() {\n        this.startProgress();\n    }\n\n    /**\n     * Updates state from new props\n     *\n     * @return {void}\n     */\n    componentDidUpdate(prevProps: Props): void {\n        const { percent }: Props = this.props;\n\n        if (prevProps.percent !== percent) {\n            this.clearTimeoutAndInterval();\n            this.setState({ percent }, this.startProgress);\n        }\n    }\n\n    /**\n     * Clears time out\n     *\n     * @return {void}\n     */\n    componentWillUnmount() {\n        this.clearTimeoutAndInterval();\n    }\n\n    /**\n     * Increaments the progress or resets it\n     * depending upon the edge conditions.\n     *\n     * @return {void}\n     */\n    startProgress = () => {\n        const { percent }: State = this.state;\n        if (percent === 0) {\n            this.interval = setInterval(this.incrementProgress, 100);\n        } else if (percent === 100) {\n            // Timeout helps transition of hiding the bar to finish\n            this.timeout = setTimeout(this.resetProgress, 600);\n        }\n    };\n\n    /**\n     * Increaments the progress very slowly\n     *\n     * @return {void}\n     */\n    incrementProgress = () => {\n        const { percent } = this.state;\n        this.setState({\n            percent: percent + 2 / (percent || 1),\n        });\n    };\n\n    /**\n     * Resets the progress to 0\n     *\n     * @return {void}\n     */\n    resetProgress = () => {\n        this.setState(ProgressBar.defaultProps);\n    };\n\n    /**\n     * Renders the progress bar\n     *\n     * @return {void}\n     */\n    render() {\n        const { percent }: State = this.state;\n        const containerStyle = {\n            opacity: percent > 0 && percent < 100 ? 1 : 0,\n            transitionDelay: percent > 0 && percent < 100 ? '0' : '0.4s',\n        };\n        return (\n            <div className=\"be-progress-container\" style={containerStyle}>\n                <div className=\"be-progress\" style={{ width: `${percent}%` }} />\n            </div>\n        );\n    }\n}\n\nexport default ProgressBar;\n"],"file":"ProgressBar.js"}