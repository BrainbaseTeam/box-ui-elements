{"version":3,"sources":["../../../../src/elements/common/sub-header/SubHeaderLeft.js"],"names":["React","injectIntl","messages","Breadcrumbs","VIEW_SEARCH","VIEW_FOLDER","VIEW_RECENTS","DELIMITER_CARET","SubHeaderLeft","view","isSmall","rootId","rootName","currentCollection","onItemClick","intl","crumbs","id","name","breadcrumbs","concat","undefined","formatMessage","searchBreadcrumb","unshift","rootBreadcrumb"],"mappings":"AAAA;;;;;AAMA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,QAA2B,YAA3B;AAEA,OAAOC,QAAP,MAAqB,aAArB;AACA,SAASC,WAAT,QAA4B,gBAA5B;AACA,SAASC,WAAT,EAAsBC,WAAtB,EAAmCC,YAAnC,EAAiDC,eAAjD,QAAwE,oBAAxE;;AAYA,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,OAAsF;AAAA,MAAnFC,IAAmF,QAAnFA,IAAmF;AAAA,MAA7EC,OAA6E,QAA7EA,OAA6E;AAAA,MAApEC,MAAoE,QAApEA,MAAoE;AAAA,MAA5DC,QAA4D,QAA5DA,QAA4D;AAAA,MAAlDC,iBAAkD,QAAlDA,iBAAkD;AAAA,MAA/BC,WAA+B,QAA/BA,WAA+B;AAAA,MAAlBC,IAAkB,QAAlBA,IAAkB;AACxG,MAAIC,MAAJ;;AAEA,MAAIP,IAAI,KAAKJ,WAAT,IAAwBI,IAAI,KAAKL,WAArC,EAAkD;AAAA,QACtCa,EADsC,GACFJ,iBADE,CACtCI,EADsC;AAAA,gCACFJ,iBADE,CAClCK,IADkC;AAAA,QAClCA,IADkC,sCAC3B,EAD2B;AAAA,gCACFL,iBADE,CACvBM,WADuB;AAAA,QACvBA,WADuB,sCACT,EADS;AAE9CH,IAAAA,MAAM,GAAGG,WAAW,CAACC,MAAZ,CAAmB;AAAEH,MAAAA,EAAE,EAAFA,EAAF;AAAMC,MAAAA,IAAI,EAAJA;AAAN,KAAnB,CAAT,CAF8C,CAI9C;AACA;;AACA,QAAIT,IAAI,KAAKL,WAAb,EAA0B;AACtBY,MAAAA,MAAM,GAAGA,MAAM,CAACI,MAAP,CAAc;AACnBH,QAAAA,EAAE,EAAEI,SADe;AAEnBH,QAAAA,IAAI,EAAEH,IAAI,CAACO,aAAL,CAAmBpB,QAAQ,CAACqB,gBAA5B;AAFa,OAAd,CAAT;AAIH;AACJ,GAZD,MAYO;AACHP,IAAAA,MAAM,GAAG,CACL;AACIC,MAAAA,EAAE,EAAEI,SADR;AAEIH,MAAAA,IAAI,EAAEH,IAAI,CAACO,aAAL,CAAmBpB,QAAQ,WAAIO,IAAJ,gBAA3B;AAFV,KADK,CAAT;;AAOA,QAAIA,IAAI,KAAKH,YAAb,EAA2B;AACvBU,MAAAA,MAAM,CAACQ,OAAP,CAAe;AACXP,QAAAA,EAAE,EAAEN,MADO;AAEXO,QAAAA,IAAI,EAAEN,QAAQ,IAAIG,IAAI,CAACO,aAAL,CAAmBpB,QAAQ,CAACuB,cAA5B;AAFP,OAAf;AAIH;AACJ;;AAED,SACI,oBAAC,WAAD;AACI,IAAA,MAAM,EAAET,MADZ;AAEI,IAAA,SAAS,EAAET,eAFf;AAGI,IAAA,OAAO,EAAEG,OAHb;AAII,IAAA,YAAY,EAAEI,WAJlB;AAKI,IAAA,MAAM,EAAEH;AALZ,IADJ;AASH,CAxCD;;AA0CA,eAAeV,UAAU,CAACO,aAAD,CAAzB","sourcesContent":["/**\n * @flow\n * @file Content sub header component\n * @author Box\n */\n\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport type { InjectIntlProvidedProps } from 'react-intl';\nimport messages from '../messages';\nimport { Breadcrumbs } from '../breadcrumbs';\nimport { VIEW_SEARCH, VIEW_FOLDER, VIEW_RECENTS, DELIMITER_CARET } from '../../../constants';\nimport type { View, Collection } from '../../../common/types/core';\n\ntype Props = {\n    currentCollection: Collection,\n    isSmall: boolean,\n    onItemClick: Function,\n    rootId: string,\n    rootName?: string,\n    view: View,\n} & InjectIntlProvidedProps;\n\nconst SubHeaderLeft = ({ view, isSmall, rootId, rootName, currentCollection, onItemClick, intl }: Props) => {\n    let crumbs;\n\n    if (view === VIEW_FOLDER || view === VIEW_SEARCH) {\n        const { id, name = '', breadcrumbs = [] } = currentCollection;\n        crumbs = breadcrumbs.concat({ id, name });\n\n        // Search results are specific to the current folder\n        // hence the breadcrumb is added to the end of the list\n        if (view === VIEW_SEARCH) {\n            crumbs = crumbs.concat({\n                id: undefined,\n                name: intl.formatMessage(messages.searchBreadcrumb),\n            });\n        }\n    } else {\n        crumbs = [\n            {\n                id: undefined,\n                name: intl.formatMessage(messages[`${view}Breadcrumb`]),\n            },\n        ];\n\n        if (view !== VIEW_RECENTS) {\n            crumbs.unshift({\n                id: rootId,\n                name: rootName || intl.formatMessage(messages.rootBreadcrumb),\n            });\n        }\n    }\n\n    return (\n        <Breadcrumbs\n            crumbs={crumbs}\n            delimiter={DELIMITER_CARET}\n            isSmall={isSmall}\n            onCrumbClick={onItemClick}\n            rootId={rootId}\n        />\n    );\n};\n\nexport default injectIntl(SubHeaderLeft);\n"],"file":"SubHeaderLeft.js"}