{"version":3,"sources":["../../../../src/elements/common/breadcrumbs/Breadcrumbs.js"],"names":["React","Breadcrumb","BreadcrumbDropdown","BreadcrumbDelimiter","DELIMITER_SLASH","DELIMITER_CARET","filterCrumbs","rootId","crumbs","rootIndex","findIndex","crumb","id","slice","getBreadcrumb","isLast","onCrumbClick","delimiter","Array","isArray","condensed","name","Breadcrumbs","isSmall","length","filteredCrumbs","onClick","undefined","lastBreadcrumb","secondLastBreadcrumb","moreBreadcrumbs","firstBreadcrumb"],"mappings":"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","sourcesContent":["/**\n * @flow\n * @file Component that creates breadcumbs for both the header and name details\n * @author Box\n */\n\nimport React from 'react';\nimport Breadcrumb from './Breadcrumb';\nimport BreadcrumbDropdown from './BreadcrumbDropdown';\nimport BreadcrumbDelimiter from './BreadcrumbDelimiter';\nimport { DELIMITER_SLASH, DELIMITER_CARET } from '../../../constants';\nimport './Breadcrumbs.scss';\n\ntype Props = {\n    crumbs: Crumb[],\n    delimiter: Delimiter,\n    isSmall?: boolean,\n    onCrumbClick: Function,\n    rootId: string,\n};\n\n/**\n * Filters out ancestors to root from the crumbs.\n * This is useful when the root is not All Files.\n *\n * @private\n * @param {string} rootId the root folder id\n * @param {Array} crumbs list of crumbs\n * @return {Array} crumbs\n */\nfunction filterCrumbs(rootId: string, crumbs: Crumb[]): Crumb[] {\n    const rootIndex = crumbs.findIndex((crumb: Crumb) => crumb.id === rootId);\n    return rootIndex === -1 ? crumbs : crumbs.slice(rootIndex);\n}\n\n/**\n * Creates an individual breadcrumb\n *\n * @private\n * @param {Object} crumb single crumb data\n * @param {boolean} isLast is this the last crumb\n * @return {Element}\n */\nfunction getBreadcrumb(crumbs: Crumb | Crumb[], isLast: boolean, onCrumbClick: Function, delimiter: Delimiter) {\n    if (Array.isArray(crumbs)) {\n        const condensed = delimiter !== DELIMITER_CARET;\n        return (\n            <span className=\"be-breadcrumb-more\">\n                <BreadcrumbDropdown\n                    className={condensed ? 'be-breadcrumbs-condensed' : ''}\n                    crumbs={crumbs}\n                    onCrumbClick={onCrumbClick}\n                />\n                <BreadcrumbDelimiter delimiter={condensed ? DELIMITER_SLASH : DELIMITER_CARET} />\n            </span>\n        );\n    }\n\n    const { id, name } = crumbs;\n    return <Breadcrumb delimiter={delimiter} isLast={isLast} name={name} onClick={() => onCrumbClick(id)} />;\n}\n\nconst Breadcrumbs = ({ rootId, crumbs, onCrumbClick, delimiter, isSmall = false }: Props) => {\n    if (!rootId || crumbs.length === 0) {\n        return <span />;\n    }\n\n    // The crumbs given may have ancestors higher than the root. We need to filter them out.\n    const filteredCrumbs = filterCrumbs(rootId, crumbs);\n    const { length } = filteredCrumbs;\n\n    // Always show the last/leaf breadcrumb.\n    const crumb = filteredCrumbs[length - 1];\n    const onClick = crumb.id ? () => onCrumbClick(crumb.id) : undefined;\n    const lastBreadcrumb = <Breadcrumb isLast name={crumb.name} onClick={onClick} />;\n\n    // Always show the second last/parent breadcrumb when there are at least 2 crumbs.\n    const secondLastBreadcrumb =\n        length > 1 ? getBreadcrumb(filteredCrumbs[length - 2], false, onCrumbClick, delimiter) : null;\n\n    // Only show the more dropdown when there were at least 4 crumbs.\n    const moreBreadcrumbs =\n        length > 3 ? getBreadcrumb(filteredCrumbs.slice(1, length - 2), false, onCrumbClick, delimiter) : null;\n\n    // Only show the root breadcrumb when there are at least 3 crumbs.\n    const firstBreadcrumb = length > 2 ? getBreadcrumb(filteredCrumbs[0], false, onCrumbClick, delimiter) : null;\n\n    return (\n        <div className=\"be-breadcrumbs\">\n            {isSmall ? null : firstBreadcrumb}\n            {isSmall ? null : moreBreadcrumbs}\n            {secondLastBreadcrumb}\n            {lastBreadcrumb}\n        </div>\n    );\n};\n\nexport default Breadcrumbs;\n"],"file":"Breadcrumbs.js"}