{"version":3,"sources":["../../../../src/elements/common/droppable/makeDroppable.js"],"names":["React","PureComponent","findDOMNode","classNames","makeDroppable","dropValidator","onDrop","Wrapped","props","element","removeEventListener","handleDragEnter","handleDragOver","handleDragLeave","handleDrop","droppableEl","Element","addEventListener","event","preventDefault","enterLeaveCounter","dataTransfer","canDrop","setState","isOver","state","dropEffect","effectAllowed","isDragging","bindDragDropHandlers","removeEventListeners","className","rest","classes","mergedProps"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;AAMA,OAAOA,KAAP,IAAgBC,aAAhB,QAAqC,OAArC;AACA,SAASC,WAAT,QAA4B,WAA5B;AACA,OAAOC,UAAP,MAAuB,YAAvB;;AAaA;AACA,IAAMC,aAAa,GAAG,SAAhBA,aAAgB;AAAA,MAAGC,aAAH,QAAGA,aAAH;AAAA,MAAkBC,MAAlB,QAAkBA,MAAlB;AAAA,SAAgF,UAGlGC,OAHkG;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAkB9F;;;;;;AAMA,kCAAYC,KAAZ,EAA0B;AAAA;;AAAA;;AACtB,gGAAMA,KAAN;;AADsB,+EAoCH,UAACC,OAAD,EAAsB;AACzCA,UAAAA,OAAO,CAACC,mBAAR,CAA4B,WAA5B,EAAyC,MAAKC,eAA9C;AACAF,UAAAA,OAAO,CAACC,mBAAR,CAA4B,UAA5B,EAAwC,MAAKE,cAA7C;AACAH,UAAAA,OAAO,CAACC,mBAAR,CAA4B,WAA5B,EAAyC,MAAKG,eAA9C;AACAJ,UAAAA,OAAO,CAACC,mBAAR,CAA4B,MAA5B,EAAoC,MAAKI,UAAzC;AACH,SAzCyB;;AAAA,+EAgDH,YAAM;AACzB,cAAMC,WAAW,GAAGb,WAAW,+BAA/B,CADyB,CACc;;AACvC,cAAI,CAACa,WAAD,IAAgB,EAAEA,WAAW,YAAYC,OAAzB,CAApB,EAAuD;AACnD;AACH,WAJwB,CAMzB;;;AACAD,UAAAA,WAAW,CAACE,gBAAZ,CAA6B,WAA7B,EAA0C,MAAKN,eAA/C;AACAI,UAAAA,WAAW,CAACE,gBAAZ,CAA6B,UAA7B,EAAyC,MAAKL,cAA9C;AACAG,UAAAA,WAAW,CAACE,gBAAZ,CAA6B,WAA7B,EAA0C,MAAKJ,eAA/C;AACAE,UAAAA,WAAW,CAACE,gBAAZ,CAA6B,MAA7B,EAAqC,MAAKH,UAA1C;AAEA,gBAAKC,WAAL,GAAmBA,WAAnB;AACH,SA7DyB;;AAAA,0EAiFR,UAACG,KAAD,EAAsB;AACpC;AACAA,UAAAA,KAAK,CAACC,cAAN,GAFoC,CAIpC;AACA;AAEA;;AACA,cAAI,EAAE,MAAKC,iBAAP,KAA6B,CAAjC,EAAoC;AAAA,gBACxBC,YADwB,GACPH,KADO,CACxBG,YADwB,EAGhC;;AACA,gBAAMC,OAAO,GAAGjB,aAAa,GAAGA,aAAa,CAAC,MAAKG,KAAN,EAAaa,YAAb,CAAhB,GAA6C,IAA1E;;AAEA,kBAAKE,QAAL,CAAc;AACVC,cAAAA,MAAM,EAAE,IADE;AAEVF,cAAAA,OAAO,EAAPA;AAFU,aAAd;AAIH;AACJ,SApGyB;;AAAA,yEA4GT,UAACJ,KAAD,EAAsB;AACnC;AACAA,UAAAA,KAAK,CAACC,cAAN;AAFmC,cAI3BG,OAJ2B,GAIf,MAAKG,KAJU,CAI3BH,OAJ2B;AAAA,cAK3BD,YAL2B,GAKVH,KALU,CAK3BG,YAL2B;;AAOnC,cAAI,CAACA,YAAL,EAAmB;AACf;AACH;;AAED,cAAI,CAACC,OAAL,EAAc;AACVD,YAAAA,YAAY,CAACK,UAAb,GAA0B,MAA1B;AACH,WAFD,MAEO,IAAIL,YAAY,CAACM,aAAjB,EAAgC;AACnC;AACAN,YAAAA,YAAY,CAACK,UAAb,GAA0BL,YAAY,CAACM,aAAvC;AACH;AACJ,SA7HyB;;AAAA,qEAqIb,UAACT,KAAD,EAAsB;AAC/BA,UAAAA,KAAK,CAACC,cAAN,GAD+B,CAG/B;;AACA,gBAAKC,iBAAL,GAAyB,CAAzB;AAJ+B,cAMvBE,OANuB,GAMX,MAAKG,KANM,CAMvBH,OANuB;;AAQ/B,gBAAKC,QAAL,CAAc;AACVD,YAAAA,OAAO,EAAE,KADC;AAEVM,YAAAA,UAAU,EAAE,KAFF;AAGVJ,YAAAA,MAAM,EAAE;AAHE,WAAd;;AAMA,cAAIF,OAAO,IAAIhB,MAAf,EAAuB;AACnBA,YAAAA,MAAM,CAACY,KAAD,EAAQ,MAAKV,KAAb,CAAN;AACH;AACJ,SAtJyB;;AAAA,0EA8JR,UAACU,KAAD,EAAsB;AACpCA,UAAAA,KAAK,CAACC,cAAN,GADoC,CAGpC;;AACA,cAAI,EAAE,MAAKC,iBAAP,GAA2B,CAA/B,EAAkC;AAC9B;AACH;;AAED,gBAAKG,QAAL,CAAc;AACVD,YAAAA,OAAO,EAAE,KADC;AAEVM,YAAAA,UAAU,EAAE,KAFF;AAGVJ,YAAAA,MAAM,EAAE;AAHE,WAAd;AAKH,SA3KyB;;AAEtB,cAAKJ,iBAAL,GAAyB,CAAzB;AACA,cAAKK,KAAL,GAAa;AACTH,UAAAA,OAAO,EAAE,KADA;AAETM,UAAAA,UAAU,EAAE,KAFH;AAGTJ,UAAAA,MAAM,EAAE;AAHC,SAAb;AAHsB;AAQzB;AAED;;;;;;AAlC8F;AAAA;AAAA,4CAsC1E;AAChB,eAAKK,oBAAL;AACH;AAxC6F;AAAA;AAAA,6CA0CzE;AACjB,cAAI,CAAC,KAAKd,WAAV,EAAuB;AACnB,iBAAKc,oBAAL;AACA;AACH,WAJgB,CAKjB;;;AACA,cAAI3B,WAAW,CAAC,IAAD,CAAX,KAAsB,KAAKa,WAA/B,EAA4C;AACxC,iBAAKe,oBAAL,CAA0B,KAAKf,WAA/B;AACA,iBAAKc,oBAAL;AACH;AACJ;AAED;;;;;;;AAtD8F;AAAA;;AAuF9F;;;;AAvF8F,+CA2FvE;AACnB,cAAI,CAAC,KAAKd,WAAN,IAAqB,EAAE,KAAKA,WAAL,YAA4BC,OAA9B,CAAzB,EAAiE;AAC7D;AACH;;AAED,eAAKc,oBAAL,CAA0B,KAAKf,WAA/B;AACH;AAED;;;;;;;AAnG8F;AAAA;;AAqM9F;;;;;;;AArM8F,iCA4MrF;AAAA,4BAC0B,KAAKP,KAD/B;AAAA,cACGuB,SADH,eACGA,SADH;AAAA,cACiBC,IADjB;;AAAA,4BAEuB,KAAKP,KAF5B;AAAA,cAEGH,OAFH,eAEGA,OAFH;AAAA,cAEYE,MAFZ,eAEYA,MAFZ;AAIL,cAAMS,OAAO,GAAG9B,UAAU,CAAC4B,SAAD,EAAY;AAClC,4BAAgBT,OADkB;AAElC,uBAAWE;AAFuB,WAAZ,CAA1B;;AAKA,cAAMU,WAAW,qBACVF,IADU,MAEV,KAAKP,KAFK;AAGbM,YAAAA,SAAS,EAAEE;AAHE,YAAjB;;AAMA,iBAAO,oBAAC,OAAD,EAAaC,WAAb,CAAP;AACH;AA5N6F;;AAAA;AAAA,MAKjEjC,aALiE,2CAcxE;AAClB8B,MAAAA,SAAS,EAAE;AADO,KAdwE;AAAA,GAAhF;AAAA,CAAtB;;AA+NA,eAAe3B,aAAf","sourcesContent":["/**\n * @flow\n * @file HOC for drag drop\n * @author Box\n */\n\nimport React, { PureComponent } from 'react';\nimport { findDOMNode } from 'react-dom';\nimport classNames from 'classnames';\nimport type { ClassComponent } from '../../../common/types/core';\n\ntype PropsShape = {\n    className: string,\n};\n\ntype State = {\n    canDrop: boolean,\n    isDragging: boolean,\n    isOver: boolean,\n};\n\n/* eslint-disable no-plusplus */\nconst makeDroppable = ({ dropValidator, onDrop }: { dropValidator?: Function, onDrop?: Function }) => <\n    Props: PropsShape,\n>(\n    Wrapped: Function,\n): ClassComponent<any, any> =>\n    class DroppableComponent extends PureComponent<Props, State> {\n        props: Props;\n\n        state: State;\n\n        enterLeaveCounter: number;\n\n        droppableEl: Element;\n\n        static defaultProps = {\n            className: '',\n        };\n\n        /**\n         * [constructor]\n         *\n         * @param {*} props\n         * @return {DroppableComponent}\n         */\n        constructor(props: Props) {\n            super(props);\n            this.enterLeaveCounter = 0;\n            this.state = {\n                canDrop: false,\n                isDragging: false,\n                isOver: false,\n            };\n        }\n\n        /**\n         * Adds event listeners once the component mounts\n         * @inheritdoc\n         */\n        componentDidMount() {\n            this.bindDragDropHandlers();\n        }\n\n        componentDidUpdate() {\n            if (!this.droppableEl) {\n                this.bindDragDropHandlers();\n                return;\n            }\n            // eslint-disable-next-line react/no-find-dom-node\n            if (findDOMNode(this) !== this.droppableEl) {\n                this.removeEventListeners(this.droppableEl);\n                this.bindDragDropHandlers();\n            }\n        }\n\n        /**\n         * Function that removes the drag and drop related event listeners on the input element\n         *\n         * @param {Element} element\n         * @return {void}\n         */\n        removeEventListeners = (element: Element) => {\n            element.removeEventListener('dragenter', this.handleDragEnter);\n            element.removeEventListener('dragover', this.handleDragOver);\n            element.removeEventListener('dragleave', this.handleDragLeave);\n            element.removeEventListener('drop', this.handleDrop);\n        };\n\n        /**\n         * Bind drag and drop event handlers to the droppableEl, when the wrapped element\n         * is changed, remove the event listeners on the previous droppableEl and add\n         * event listeners on the new droppableEl\n         */\n        bindDragDropHandlers = () => {\n            const droppableEl = findDOMNode(this); // eslint-disable-line react/no-find-dom-node\n            if (!droppableEl || !(droppableEl instanceof Element)) {\n                return;\n            }\n\n            // add event listeners directly on the element\n            droppableEl.addEventListener('dragenter', this.handleDragEnter);\n            droppableEl.addEventListener('dragover', this.handleDragOver);\n            droppableEl.addEventListener('dragleave', this.handleDragLeave);\n            droppableEl.addEventListener('drop', this.handleDrop);\n\n            this.droppableEl = droppableEl;\n        };\n\n        /**\n         * Removes event listeners when the component is going to unmount\n         * @inheritdoc\n         */\n        componentWillUnmount() {\n            if (!this.droppableEl || !(this.droppableEl instanceof Element)) {\n                return;\n            }\n\n            this.removeEventListeners(this.droppableEl);\n        }\n\n        /**\n         * Function that gets called when an item is dragged into the drop zone\n         *\n         * @param {SyntheticEvent} event - The dragenter event\n         * @return {void}\n         */\n        handleDragEnter = (event: DragEvent) => {\n            // This allows onDrop to be fired\n            event.preventDefault();\n\n            // Use this to track the number of drag enters and leaves.\n            // This is used to normalize enters/leaves between parent/child elements\n\n            // we only want to do things in dragenter when the counter === 1\n            if (++this.enterLeaveCounter === 1) {\n                const { dataTransfer } = event;\n\n                // if we don't have a dropValidator, we just default canDrop to true\n                const canDrop = dropValidator ? dropValidator(this.props, dataTransfer) : true;\n\n                this.setState({\n                    isOver: true,\n                    canDrop,\n                });\n            }\n        };\n\n        /**\n         * Function that gets called when an item is dragged over the drop zone\n         *\n         * @param {DragEvent} event - The dragover event\n         * @return {void}\n         */\n        handleDragOver = (event: DragEvent) => {\n            // This allows onDrop to be fired\n            event.preventDefault();\n\n            const { canDrop } = this.state;\n            const { dataTransfer } = event;\n\n            if (!dataTransfer) {\n                return;\n            }\n\n            if (!canDrop) {\n                dataTransfer.dropEffect = 'none';\n            } else if (dataTransfer.effectAllowed) {\n                // Set the drop effect if it was defined\n                dataTransfer.dropEffect = dataTransfer.effectAllowed;\n            }\n        };\n\n        /**\n         * Function that gets called when an item is drop onto the drop zone\n         *\n         * @param {DragEvent} event - The drop event\n         * @return {void}\n         */\n        handleDrop = (event: DragEvent) => {\n            event.preventDefault();\n\n            // reset enterLeaveCounter\n            this.enterLeaveCounter = 0;\n\n            const { canDrop } = this.state;\n\n            this.setState({\n                canDrop: false,\n                isDragging: false,\n                isOver: false,\n            });\n\n            if (canDrop && onDrop) {\n                onDrop(event, this.props);\n            }\n        };\n\n        /**\n         * Function that gets called when an item is dragged out of the drop zone\n         *\n         * @param {DragEvent} event - The dragleave event\n         * @return {void}\n         */\n        handleDragLeave = (event: DragEvent) => {\n            event.preventDefault();\n\n            // if enterLeaveCounter is zero, it means that we're actually leaving the item\n            if (--this.enterLeaveCounter > 0) {\n                return;\n            }\n\n            this.setState({\n                canDrop: false,\n                isDragging: false,\n                isOver: false,\n            });\n        };\n\n        /**\n         * Renders the HOC\n         *\n         * @private\n         * @inheritdoc\n         * @return {Element}\n         */\n        render() {\n            const { className, ...rest } = this.props;\n            const { canDrop, isOver } = this.state;\n\n            const classes = classNames(className, {\n                'is-droppable': canDrop,\n                'is-over': isOver,\n            });\n\n            const mergedProps = {\n                ...rest,\n                ...this.state,\n                className: classes,\n            };\n\n            return <Wrapped {...mergedProps} />;\n        }\n    };\n\nexport default makeDroppable;\n"],"file":"makeDroppable.js"}