{"version":3,"sources":["../../../../src/elements/common/error-boundary/ErrorBoundary.js"],"names":["React","noop","ERROR_CODE_UNEXPECTED_EXCEPTION","IS_ERROR_DISPLAYED","DefaultError","ErrorBoundary","error","code","contextInfo","origin","props","errorOrigin","elementsError","type","message","context_info","onError","info","setState","handleError","children","ErrorComponent","errorComponent","rest","state","cloneElement","Component"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;AAMA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,IAAP,MAAiB,aAAjB;AACA,SAASC,+BAAT,EAA0CC,kBAA1C,QAAoE,oBAApE;AACA,OAAOC,YAAP,MAAyB,gBAAzB;;IAeMC,a;;;;;;;;;;;;;;;;;;4DAGa,E;;kEA6BD,UACVC,KADU,EAEVC,IAFU,EAKT;AAAA,UAFDC,WAEC,uEAFqB,EAErB;AAAA,UADDC,MACC,uEADuB,MAAKC,KAAL,CAAWC,WAClC;;AACD,UAAI,CAACL,KAAD,IAAU,CAACC,IAAX,IAAmB,CAACE,MAAxB,EAAgC;AAC5B;AACH;;AAED,UAAMG,aAA4B,GAAG;AACjCC,QAAAA,IAAI,EAAE,OAD2B;AAEjCN,QAAAA,IAAI,EAAJA,IAFiC;AAGjCO,QAAAA,OAAO,EAAER,KAAK,CAACQ,OAHkB;AAIjCL,QAAAA,MAAM,EAANA,MAJiC;AAKjCM,QAAAA,YAAY,oCACPZ,kBADO,EACc,IADd,GAELK,WAFK;AALqB,OAArC;;AAWA,YAAKE,KAAL,CAAWM,OAAX,CAAmBJ,aAAnB;AACH,K;;;;;;;sCA5CiBN,K,EAAcW,I,EAAoB;AAAA;;AAChD,WAAKC,QAAL,CAAc;AAAEZ,QAAAA,KAAK,EAALA;AAAF,OAAd,EAAyB,YAAM;AAC3B,QAAA,MAAI,CAACa,WAAL,CACIb,KADJ,EAEIJ,+BAFJ,oBAIWe,IAJX,GAMI,MAAI,CAACP,KAAL,CAAWC,WANf;AAQH,OATD;AAUH;AAED;;;;;;;;;;;;6BAiCS;AAAA,wBACyD,KAAKD,KAD9D;AAAA,UACGU,QADH,eACGA,QADH;AAAA,UAC6BC,cAD7B,eACaC,cADb;AAAA,UACgDC,IADhD;;AAAA,UAEGjB,KAFH,GAEa,KAAKkB,KAFlB,CAEGlB,KAFH;;AAGL,UAAIA,KAAJ,EAAW;AACP,eAAO,oBAAC,cAAD;AAAgB,UAAA,KAAK,EAAEA;AAAvB,UAAP;AACH;;AAED,aAAON,KAAK,CAACyB,YAAN,CAAmBL,QAAnB,oBACAG,IADA;AAEHP,QAAAA,OAAO,EAAE,KAAKG;AAFX,SAAP;AAIH;;;;EAnEuBnB,KAAK,CAAC0B,S;;gBAA5BrB,a,kBAKoB;AAClBiB,EAAAA,cAAc,EAAElB,YADE;AAElBY,EAAAA,OAAO,EAAEf;AAFS,C;;AAiE1B,eAAeI,aAAf","sourcesContent":["/**\n * @flow\n * @file Error Boundary\n * @author Box\n */\n\nimport * as React from 'react';\nimport noop from 'lodash/noop';\nimport { ERROR_CODE_UNEXPECTED_EXCEPTION, IS_ERROR_DISPLAYED } from '../../../constants';\nimport DefaultError from './DefaultError';\nimport type { ElementsXhrError, ElementsError } from '../../../common/types/api';\nimport type { ElementOrigin } from '../flowTypes';\n\ntype Props = {\n    children: React.Element<any>,\n    errorComponent: React.ComponentType<any>,\n    errorOrigin: ElementOrigin,\n    onError: (error: ElementsError) => void,\n};\n\ntype State = {\n    error?: Error,\n};\n\nclass ErrorBoundary extends React.Component<Props, State> {\n    props: Props;\n\n    state: State = {};\n\n    static defaultProps = {\n        errorComponent: DefaultError,\n        onError: noop,\n    };\n\n    componentDidCatch(error: Error, info: Object): void {\n        this.setState({ error }, () => {\n            this.handleError(\n                error,\n                ERROR_CODE_UNEXPECTED_EXCEPTION,\n                {\n                    ...info,\n                },\n                this.props.errorOrigin,\n            );\n        });\n    }\n\n    /**\n     * Formats the error and emits it to the top level onError prop\n     *\n     * @param {Error} error - the error which occurred\n     * @param {string} type - the error type to identify where the error occurred\n     * @param {string} code - the error code to identify what error occurred\n     * @param {Object} contextInfo - additional information which may be useful for the consumer of the error\n     * @return {void}\n     */\n    handleError = (\n        error: ElementsXhrError | Error,\n        code: string,\n        contextInfo: Object = {},\n        origin: ElementOrigin = this.props.errorOrigin,\n    ) => {\n        if (!error || !code || !origin) {\n            return;\n        }\n\n        const elementsError: ElementsError = {\n            type: 'error',\n            code,\n            message: error.message,\n            origin,\n            context_info: {\n                [IS_ERROR_DISPLAYED]: true,\n                ...contextInfo,\n            },\n        };\n\n        this.props.onError(elementsError);\n    };\n\n    render() {\n        const { children, errorComponent: ErrorComponent, ...rest } = this.props;\n        const { error } = this.state;\n        if (error) {\n            return <ErrorComponent error={error} />;\n        }\n\n        return React.cloneElement(children, {\n            ...rest,\n            onError: this.handleError,\n        });\n    }\n}\n\nexport default ErrorBoundary;\n"],"file":"ErrorBoundary.js"}