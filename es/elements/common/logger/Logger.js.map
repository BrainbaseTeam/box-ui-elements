{"version":3,"sources":["../../../../src/elements/common/logger/Logger.js"],"names":["React","noop","uuidv4","isMarkSupported","EVENT_JS_READY","METRIC_TYPE_PREVIEW","METRIC_TYPE_ELEMENTS_LOAD_METRIC","SESSION_ID","uniqueEvents","Set","Logger","props","data","onMetric","type","startMarkName","metricData","logUniqueMetric","loggerProps","onPreviewMetric","handlePreviewMetric","onReadyMetric","handleReadyMetric","name","source","has","metric","component","timestamp","getTimestamp","sessionId","eventName","createEventName","hasLoggedEvent","logMetric","add","Date","toISOString","children","rest","cloneElement","logger","Component"],"mappings":"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","sourcesContent":["// @flow\nimport * as React from 'react';\nimport noop from 'lodash/noop';\nimport uuidv4 from 'uuid/v4';\nimport { isMarkSupported } from '../../../utils/performance';\nimport { EVENT_JS_READY } from './constants';\nimport { METRIC_TYPE_PREVIEW, METRIC_TYPE_ELEMENTS_LOAD_METRIC } from '../../../constants';\nimport type { ElementOrigin } from '../flowTypes';\nimport type { MetricType, ElementsLoadMetricData, LoggerProps } from '../../../common/types/logging';\n\ntype ElementsMetric = {\n    component: ElementOrigin,\n    name: string,\n    sessionId: string,\n    timestamp: string,\n    type: MetricType,\n} & ElementsLoadMetricData;\n\ntype Props = {\n    children: React.Element<any>,\n    fileId?: string,\n    onMetric: (data: Object) => void,\n    source: ElementOrigin,\n    startMarkName?: string,\n};\n\nconst SESSION_ID = uuidv4();\nconst uniqueEvents: Set<string> = new Set();\n\nclass Logger extends React.Component<Props> {\n    static defaultProps = {\n        onMetric: noop,\n    };\n\n    constructor(props: Props) {\n        super(props);\n        this.loggerProps = {\n            onPreviewMetric: this.handlePreviewMetric,\n            onReadyMetric: this.handleReadyMetric,\n        };\n    }\n\n    loggerProps: LoggerProps;\n\n    get uniqueEvents(): Set<string> {\n        return uniqueEvents;\n    }\n\n    get sessionId(): string {\n        return SESSION_ID;\n    }\n\n    /**\n     * Creates an event name meant for use with an event which is unique and meant to be logged only once\n     *\n     * @param {string} name - The event name\n     * @returns {string} A string containing the component and event name\n     */\n    createEventName(name: string): string {\n        const { source } = this.props;\n        return `${source}::${name}`;\n    }\n\n    /**\n     * Checks to see if the specified event for the component has already been fired.\n     *\n     * @param {string} component - the component name\n     * @param {string} name - the event name\n     * @returns {boolean} True if the event has already been fired\n     */\n    hasLoggedEvent(name: string): boolean {\n        return this.uniqueEvents.has(name);\n    }\n\n    /**\n     * Invokes the provided metric logging callback.\n     *\n     * @param {string} type - the type of the event\n     * @param {string} name - the name of the event\n     * @param {Object} data  - the event data\n     */\n    logMetric(type: MetricType, name: string, data: Object): void {\n        const { onMetric, source } = this.props;\n        const metric: ElementsMetric = {\n            ...data,\n            component: source,\n            name,\n            timestamp: this.getTimestamp(),\n            sessionId: this.sessionId,\n            type,\n        };\n\n        onMetric(metric);\n    }\n\n    /**\n     * Logs a unique metric event. Prevents duplicate events from being logged in the session.\n     *\n     * @param {string} type - the type of the event\n     * @param {string} name - the name of the event\n     * @param {Object} data  - the event data\n     */\n    logUniqueMetric(type: MetricType, name: string, data: Object): void {\n        const eventName = this.createEventName(name);\n        if (this.hasLoggedEvent(eventName)) {\n            return;\n        }\n\n        this.logMetric(type, name, data);\n        this.uniqueEvents.add(eventName);\n    }\n\n    /**\n     * Preview metric handler\n     *\n     * @param {Object} data - the metric data\n     * @returns {void}\n     */\n    handlePreviewMetric = (data: Object) => {\n        const { onMetric } = this.props;\n        onMetric({\n            ...data,\n            type: METRIC_TYPE_PREVIEW,\n        });\n    };\n\n    /**\n     * JS ready metric handler\n     *\n     * @param {Object} data - the metric data\n     * @returns {void}\n     */\n    handleReadyMetric = (data: ElementsLoadMetricData) => {\n        if (!isMarkSupported) {\n            return;\n        }\n\n        const { startMarkName } = this.props;\n        const metricData = {\n            ...data,\n            startMarkName,\n        };\n        this.logUniqueMetric(METRIC_TYPE_ELEMENTS_LOAD_METRIC, EVENT_JS_READY, metricData);\n    };\n\n    /**\n     * Create an ISO Timestamp for right now.\n     *\n     * @returns {string}\n     */\n    getTimestamp(): string {\n        return new Date().toISOString();\n    }\n\n    render() {\n        const { children, onMetric, startMarkName, ...rest } = this.props;\n\n        return React.cloneElement(children, {\n            ...rest,\n            logger: this.loggerProps,\n        });\n    }\n}\n\nexport default Logger;\n"],"file":"Logger.js"}