{"version":3,"sources":["../../../src/elements/common/makeResponsive.js"],"names":["React","debounce","Measure","classNames","CLASS_IS_MEDIUM","CLASS_IS_SMALL","CLASS_IS_TOUCH","SIZE_LARGE","SIZE_MEDIUM","SIZE_SMALL","SIZE_VERY_LARGE","CROSS_OVER_WIDTH_SMALL","CROSS_OVER_WIDTH_MEDIUM","CROSS_OVER_WIDTH_LARGE","HAS_TOUCH","window","DocumentTouch","document","makeResponsive","Wrapped","props","width","bounds","setState","size","getSize","el","innerElement","state","innerWidth","isTouch","className","componentRef","rest","isLarge","isMedium","isSmall","isVeryLarge","isResponsive","filter","item","length","Error","sizeFromState","styleClassName","innerRef","onResize","measureRef","getInnerElement","PureComponent"],"mappings":"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","sourcesContent":["/**\n * @flow\n * @file HOC to make responsive Box UI Elements\n * @author Box\n */\n\nimport * as React from 'react';\nimport debounce from 'lodash/debounce';\nimport Measure from 'react-measure';\nimport classNames from 'classnames';\nimport {\n    CLASS_IS_MEDIUM,\n    CLASS_IS_SMALL,\n    CLASS_IS_TOUCH,\n    SIZE_LARGE,\n    SIZE_MEDIUM,\n    SIZE_SMALL,\n    SIZE_VERY_LARGE,\n} from '../../constants';\nimport type { Size } from '../../common/types/core';\n\ntype PropsShape = {\n    className: string,\n    componentRef?: Function,\n    isTouch: boolean,\n    size?: Size,\n};\n\ntype State = {\n    size: Size,\n};\n\nconst CROSS_OVER_WIDTH_SMALL = 700;\nconst CROSS_OVER_WIDTH_MEDIUM = 1000;\nconst CROSS_OVER_WIDTH_LARGE = 1500;\nconst HAS_TOUCH = !!('ontouchstart' in window || (window.DocumentTouch && document instanceof window.DocumentTouch));\n\nfunction makeResponsive<Props: PropsShape>(Wrapped: React.ComponentType<any>): React.ComponentType<any> {\n    return class extends React.PureComponent<Props, State> {\n        props: Props;\n\n        state: State;\n\n        innerElement: ?HTMLElement;\n\n        static defaultProps = {\n            className: '',\n            isTouch: HAS_TOUCH,\n        };\n\n        /**\n         * [constructor]\n         *\n         * @param {*} data\n         * @return {void}\n         */\n        constructor(props: Props) {\n            super(props);\n            this.state = {\n                size: props.size || this.getSize(window.innerWidth),\n            };\n        }\n\n        /**\n         * Calculates the new size\n         *\n         * @private\n         * @param {Component} react component\n         * @return {void}\n         */\n        getSize(width: number) {\n            let size = SIZE_VERY_LARGE;\n            if (width <= CROSS_OVER_WIDTH_SMALL) {\n                size = SIZE_SMALL;\n            } else if (width <= CROSS_OVER_WIDTH_MEDIUM) {\n                size = SIZE_MEDIUM;\n            } else if (width <= CROSS_OVER_WIDTH_LARGE) {\n                size = SIZE_LARGE;\n            }\n\n            return size;\n        }\n\n        /**\n         * Resizing function\n         *\n         * @private\n         * @param {Component} react component\n         * @return {void}\n         */\n        onResize = debounce(({ bounds: { width } }: { bounds: ClientRect }) => {\n            this.setState({ size: this.getSize(width) });\n        }, 500);\n\n        /**\n         * Callback function for setting the ref which measureRef is attached to\n         *\n         * @return {void}\n         */\n        innerRef = el => {\n            this.innerElement = el;\n        };\n\n        /**\n         * Gets the ref element which measureRef is attached to\n         *\n         * @return {?HTMLElement} - the HTML element\n         */\n        getInnerElement = () => this.innerElement;\n\n        /**\n         * Renders the Box UI Element\n         *\n         * @private\n         * @inheritdoc\n         * @return {Element}\n         */\n        render() {\n            const { isTouch, size, className, componentRef, ...rest }: Props = this.props;\n\n            let isLarge: boolean = size === SIZE_LARGE;\n            let isMedium: boolean = size === SIZE_MEDIUM;\n            let isSmall: boolean = size === SIZE_SMALL;\n            let isVeryLarge: boolean = size === SIZE_VERY_LARGE;\n            const isResponsive: boolean = !isSmall && !isLarge && !isMedium && !isVeryLarge;\n\n            if ([isSmall, isMedium, isLarge, isVeryLarge].filter(item => item).length > 1) {\n                throw new Error('Box UI Element cannot be small or medium or large or very large at the same time');\n            }\n\n            if (!isResponsive) {\n                return (\n                    <Wrapped\n                        ref={componentRef}\n                        className={className}\n                        isLarge={isLarge}\n                        isMedium={isMedium}\n                        isSmall={isSmall}\n                        isTouch={isTouch}\n                        isVeryLarge={isVeryLarge}\n                        {...rest}\n                    />\n                );\n            }\n\n            const { size: sizeFromState }: State = this.state;\n            isSmall = sizeFromState === SIZE_SMALL;\n            isMedium = sizeFromState === SIZE_MEDIUM;\n            isLarge = sizeFromState === SIZE_LARGE;\n            isVeryLarge = sizeFromState === SIZE_VERY_LARGE;\n            const styleClassName = classNames(\n                {\n                    [CLASS_IS_SMALL]: isSmall,\n                    [CLASS_IS_MEDIUM]: isMedium,\n                    [CLASS_IS_TOUCH]: isTouch,\n                },\n                className,\n            );\n\n            return (\n                <Measure bounds innerRef={this.innerRef} onResize={this.onResize}>\n                    {({ measureRef }) => (\n                        <Wrapped\n                            ref={componentRef}\n                            className={styleClassName}\n                            getInnerRef={this.getInnerElement}\n                            isLarge={isLarge}\n                            isMedium={isMedium}\n                            isSmall={isSmall}\n                            isTouch={isTouch}\n                            isVeryLarge={isVeryLarge}\n                            measureRef={measureRef}\n                            {...rest}\n                        />\n                    )}\n                </Measure>\n            );\n        }\n    };\n}\n\nexport default makeResponsive;\n"],"file":"makeResponsive.js"}