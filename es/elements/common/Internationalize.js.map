{"version":3,"sources":["../../../src/elements/common/Internationalize.js"],"names":["React","Children","IntlProvider","Internationalize","language","messages","children","shouldInternationalize","only"],"mappings":"AAAA;;;;;AAMA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,YAAT,QAA6B,YAA7B;;AASA,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,OAA6C;AAAA,MAA1CC,QAA0C,QAA1CA,QAA0C;AAAA,MAAhCC,QAAgC,QAAhCA,QAAgC;AAAA,MAAtBC,QAAsB,QAAtBA,QAAsB;AAClE,MAAMC,sBAA+B,GAAG,CAAC,CAACH,QAAF,IAAc,CAAC,CAACC,QAAxD;;AAEA,MAAIE,sBAAJ,EAA4B;AACxB,WACI,oBAAC,YAAD;AAAc,MAAA,MAAM,EAAEH,QAAtB;AAAgC,MAAA,QAAQ,EAAEC;AAA1C,OACKC,QADL,CADJ;AAKH;;AAED,SAAOL,QAAQ,CAACO,IAAT,CAAcF,QAAd,CAAP;AACH,CAZD;;AAcA,eAAeH,gBAAf","sourcesContent":["/**\n * @flow\n * @file Wraps a component in an IntlProvider\n * @author Box\n */\n\nimport React, { Children } from 'react';\nimport { IntlProvider } from 'react-intl';\nimport type { StringMap } from '../../common/types/core';\n\ntype Props = {\n    children?: any,\n    language?: string,\n    messages?: StringMap,\n};\n\nconst Internationalize = ({ language, messages, children }: Props) => {\n    const shouldInternationalize: boolean = !!language && !!messages;\n\n    if (shouldInternationalize) {\n        return (\n            <IntlProvider locale={language} messages={messages}>\n                {children}\n            </IntlProvider>\n        );\n    }\n\n    return Children.only(children);\n};\n\nexport default Internationalize;\n"],"file":"Internationalize.js"}