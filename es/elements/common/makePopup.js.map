{"version":3,"sources":["../../../src/elements/common/makePopup.js"],"names":["React","PureComponent","Modal","noop","omit","CLIENT_NAME_CONTENT_PICKER","CLIENT_NAME_CONTENT_UPLOADER","makePopup","kit","Wrapped","props","data","onClick","close","onClose","onCancel","onChoose","setState","isOpen","state","callback","modal","rest","wrappedProps","buttonLabel","buttonClassName","modalClassName","overlayClassName","Error","onButtonClick"],"mappings":"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","sourcesContent":["/**\n * @flow\n * @file HOC to make popup-able Box UI Elements\n * @author Box\n */\n\nimport React, { PureComponent } from 'react';\nimport Modal from 'react-modal';\nimport noop from 'lodash/noop';\nimport omit from 'lodash/omit';\n\nimport { CLIENT_NAME_CONTENT_PICKER, CLIENT_NAME_CONTENT_UPLOADER } from '../../constants';\n\nimport type { ModalOptions } from './flowTypes';\n\ntype Props = {\n    modal: ModalOptions,\n    onCancel?: Function,\n    onChoose?: Function,\n    onClick?: Function,\n    onClose?: Function,\n};\n\ntype State = {\n    isOpen: boolean,\n};\n\nconst makePopup = (kit: string) => (Wrapped: any) =>\n    class Wrapper extends PureComponent<Props, State> {\n        /**\n         * [constructor]\n         *\n         * @param {*} props\n         * @return {Wrapper}\n         */\n        constructor(props: Props) {\n            super(props);\n            this.state = {\n                isOpen: false,\n            };\n        }\n\n        /**\n         * Hides the modal and call the callback\n         *\n         * @param {Function} callback - function to call\n         * @return {void}\n         */\n        close(callback: Function, data: any) {\n            this.setState({ isOpen: false }, () => callback(data));\n        }\n\n        /**\n         * Callback for clicking\n         *\n         * @param {*} data - any callback data\n         * @return {void}\n         */\n        onClick = (data: any) => {\n            const { onClick = noop }: Props = this.props;\n            this.close(onClick, data);\n        };\n\n        /**\n         * Callback for pressing close\n         *\n         * @param {*} data - any callback data\n         * @return {void}\n         */\n        onClose = (data: any) => {\n            const { onClose = noop }: Props = this.props;\n            this.close(onClose, data);\n        };\n\n        /**\n         * Callback for pressing cancel\n         *\n         * @param {*} data - any callback data\n         * @return {void}\n         */\n        onCancel = (data: any) => {\n            const { onCancel = noop }: Props = this.props;\n            this.close(onCancel, data);\n        };\n\n        /**\n         * Callback for pressing choose\n         *\n         * @param {*} data - any callback data\n         * @return {void}\n         */\n        onChoose = (data: any) => {\n            const { onChoose = noop }: Props = this.props;\n            this.close(onChoose, data);\n        };\n\n        /**\n         * Button click handler\n         *\n         * @return {void}\n         */\n        onButtonClick = () => {\n            this.setState({ isOpen: true });\n        };\n\n        /**\n         * Renders the component\n         *\n         * @return {void}\n         */\n        render() {\n            const { isOpen }: State = this.state;\n            const { modal, ...rest }: Props = this.props;\n            const wrappedProps = omit(rest, ['onCancel', 'onChoose', 'onClose', 'modal']);\n            const {\n                buttonLabel = 'Missing modal.buttonLabel in options',\n                buttonClassName = 'btn btn-primary',\n                modalClassName = 'be-modal-wrapper-content',\n                overlayClassName = 'be-modal-wrapper-overlay',\n            }: ModalOptions = modal;\n\n            switch (kit) {\n                case CLIENT_NAME_CONTENT_PICKER:\n                    wrappedProps.onCancel = this.onCancel;\n                    wrappedProps.onChoose = this.onChoose;\n                    break;\n                case CLIENT_NAME_CONTENT_UPLOADER:\n                    wrappedProps.onClose = this.onClose;\n                    break;\n                default:\n                    throw new Error('Unknown kit type');\n            }\n\n            return (\n                <div>\n                    <button className={buttonClassName} onClick={this.onButtonClick} type=\"button\">\n                        {buttonLabel}\n                    </button>\n                    <Modal\n                        className={modalClassName}\n                        contentLabel={kit}\n                        isOpen={isOpen}\n                        overlayClassName={overlayClassName}\n                    >\n                        <Wrapped {...wrappedProps} />\n                    </Modal>\n                </div>\n            );\n        }\n    };\n\nexport default makePopup;\n"],"file":"makePopup.js"}