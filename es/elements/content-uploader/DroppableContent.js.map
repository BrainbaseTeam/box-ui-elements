{"version":3,"sources":["../../../src/elements/content-uploader/DroppableContent.js"],"names":["React","makeDroppable","ItemList","UploadState","dropDefinition","dropValidator","allowedTypes","types","Array","from","some","type","indexOf","onDrop","event","addDataTransferItemsToUploadQueue","items","dataTransfer","DroppableContent","canDrop","isOver","isTouch","view","addFiles","onClick","isFolderUploadEnabled","handleSelectFiles","files","target","hasItems","length"],"mappings":"AAAA;;;;AAKA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,aAAP,MAA0B,qBAA1B;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AAEA,OAAO,yBAAP;;AAcA;;;AAGA,IAAMC,cAAc,GAAG;AACnB;;;AAGAC,EAAAA,aAAa,EAAE;AAAA,QAAGC,YAAH,QAAGA,YAAH;AAAA,QAAsDC,KAAtD,SAAsDA,KAAtD;AAAA,WACXC,KAAK,CAACC,IAAN,CAAWF,KAAX,EAAkBG,IAAlB,CAAuB,UAAAC,IAAI;AAAA,aAAIL,YAAY,CAACM,OAAb,CAAqBD,IAArB,IAA6B,CAAC,CAAlC;AAAA,KAA3B,CADW;AAAA,GAJI;;AAOnB;;;AAGAE,EAAAA,MAAM,EAAE,gBAACC,KAAD,SAAyD;AAAA,QAA/CC,iCAA+C,SAA/CA,iCAA+C;AAAA,QAEzCC,KAFyC,GAGzDF,KAHyD,CAEzDG,YAFyD,CAEzCD,KAFyC;AAK7DD,IAAAA,iCAAiC,CAACC,KAAD,CAAjC;AACH;AAhBkB,CAAvB;AAmBA,IAAME,gBAAgB,GAAGjB,aAAa,CAACG,cAAD,CAAb,CACrB,iBAAgG;AAAA,MAA7Fe,OAA6F,SAA7FA,OAA6F;AAAA,MAApFC,MAAoF,SAApFA,MAAoF;AAAA,MAA5EC,OAA4E,SAA5EA,OAA4E;AAAA,MAAnEC,IAAmE,SAAnEA,IAAmE;AAAA,MAA7DN,KAA6D,SAA7DA,KAA6D;AAAA,MAAtDO,QAAsD,SAAtDA,QAAsD;AAAA,MAA5CC,OAA4C,SAA5CA,OAA4C;AAAA,MAAnCC,qBAAmC,SAAnCA,qBAAmC;;AAC5F,MAAMC,iBAAiB,GAAG,SAApBA,iBAAoB;AAAA,QAAaC,KAAb,SAAGC,MAAH,CAAaD,KAAb;AAAA,WAAgCJ,QAAQ,CAACI,KAAD,CAAxC;AAAA,GAA1B;;AACA,MAAME,QAAQ,GAAGb,KAAK,CAACc,MAAN,GAAe,CAAhC;AAEA,sBACI;AAAK,IAAA,SAAS,EAAC;AAAf,kBACI,oBAAC,QAAD;AAAU,IAAA,KAAK,EAAEd,KAAjB;AAAwB,IAAA,OAAO,EAAEQ,OAAjC;AAA0C,IAAA,IAAI,EAAEF;AAAhD,IADJ,eAEI,oBAAC,WAAD;AACI,IAAA,OAAO,EAAEH,OADb;AAEI,IAAA,QAAQ,EAAEU,QAFd;AAGI,IAAA,qBAAqB,EAAEJ,qBAH3B;AAII,IAAA,MAAM,EAAEL,MAJZ;AAKI,IAAA,OAAO,EAAEC,OALb;AAMI,IAAA,QAAQ,EAAEK,iBANd;AAOI,IAAA,IAAI,EAAEJ;AAPV,IAFJ,CADJ;AAcH,CAnBoB,CAAzB;AAsBA,eAAeJ,gBAAf","sourcesContent":["/**\n * @flow\n * @file Droppable area containing upload item list\n */\n\nimport React from 'react';\nimport makeDroppable from '../common/droppable';\nimport ItemList from './ItemList';\nimport UploadState from './UploadState';\n\nimport './DroppableContent.scss';\n\ntype Props = {\n    addDataTransferItemsToUploadQueue: Function,\n    addFiles: Function,\n    canDrop: boolean,\n    isFolderUploadEnabled: boolean,\n    isOver: boolean,\n    isTouch: boolean,\n    items: UploadItem[],\n    onClick: Function,\n    view: View,\n};\n\n/**\n * Definition for drag and drop behavior.\n */\nconst dropDefinition = {\n    /**\n     * Validates whether a file can be dropped or not.\n     */\n    dropValidator: ({ allowedTypes }: { allowedTypes: Array<string> }, { types }: { types: Array<string> }) =>\n        Array.from(types).some(type => allowedTypes.indexOf(type) > -1),\n\n    /**\n     * Determines what happens after a file is dropped\n     */\n    onDrop: (event, { addDataTransferItemsToUploadQueue }: Props) => {\n        const {\n            dataTransfer: { items },\n        } = event;\n\n        addDataTransferItemsToUploadQueue(items);\n    },\n};\n\nconst DroppableContent = makeDroppable(dropDefinition)(\n    ({ canDrop, isOver, isTouch, view, items, addFiles, onClick, isFolderUploadEnabled }: Props) => {\n        const handleSelectFiles = ({ target: { files } }: any) => addFiles(files);\n        const hasItems = items.length > 0;\n\n        return (\n            <div className=\"bcu-droppable-content\">\n                <ItemList items={items} onClick={onClick} view={view} />\n                <UploadState\n                    canDrop={canDrop}\n                    hasItems={hasItems}\n                    isFolderUploadEnabled={isFolderUploadEnabled}\n                    isOver={isOver}\n                    isTouch={isTouch}\n                    onSelect={handleSelectFiles}\n                    view={view}\n                />\n            </div>\n        );\n    },\n);\n\nexport default DroppableContent;\n"],"file":"DroppableContent.js"}