{"version":3,"sources":["../../../src/elements/content-uploader/ItemAction.js"],"names":["React","injectIntl","IconCheck","IconClose","IconInProgress","IconRetry","LoadingIndicator","PlainButton","Tooltip","messages","STATUS_PENDING","STATUS_IN_PROGRESS","STATUS_STAGED","STATUS_COMPLETE","STATUS_ERROR","ICON_CHECK_COLOR","ItemAction","status","onClick","intl","isResumableUploadsEnabled","isFolder","icon","tooltip","remove","resume","retry","uploadsCancelButtonTooltip","formatMessage","ItemActionForTesting"],"mappings":"AAAA;;;;AAKA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,QAA2B,YAA3B;AAEA,OAAOC,SAAP,MAAsB,+BAAtB;AACA,OAAOC,SAAP,MAAsB,+BAAtB;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,OAAOC,SAAP,MAAsB,+BAAtB;AACA,OAAOC,gBAAP,MAA6B,oCAA7B;AACA,OAAOC,WAAP,MAAwB,2CAAxB;AACA,OAAOC,OAAP,MAAoB,0BAApB;AACA,OAAOC,QAAP,MAAqB,oBAArB;AACA,SAASC,cAAT,EAAyBC,kBAAzB,EAA6CC,aAA7C,EAA4DC,eAA5D,EAA6EC,YAA7E,QAAiG,iBAAjG;AAGA,OAAO,mBAAP;AAEA,IAAMC,gBAAgB,GAAG,SAAzB;;AASA,IAAMC,UAAU,GAAG,SAAbA,UAAa,OAAmF;AAAA,MAAhFC,MAAgF,QAAhFA,MAAgF;AAAA,MAAxEC,OAAwE,QAAxEA,OAAwE;AAAA,MAA/DC,IAA+D,QAA/DA,IAA+D;AAAA,MAAzDC,yBAAyD,QAAzDA,yBAAyD;AAAA,2BAA9BC,QAA8B;AAAA,MAA9BA,QAA8B,8BAAnB,KAAmB;AAClG,MAAIC,IAAI,GAAG,oBAAC,SAAD,OAAX;AACA,MAAIC,OAAJ;;AAEA,MAAIF,QAAQ,IAAIJ,MAAM,KAAKP,cAA3B,EAA2C;AACvC,WAAO,IAAP;AACH;;AAED,UAAQO,MAAR;AACI,SAAKJ,eAAL;AACIS,MAAAA,IAAI,GAAG,oBAAC,SAAD;AAAW,QAAA,KAAK,EAAEP;AAAlB,QAAP;;AACA,UAAI,CAACK,yBAAL,EAAgC;AAC5BG,QAAAA,OAAO,GAAGd,QAAQ,CAACe,MAAnB;AACH;;AACD;;AACJ,SAAKV,YAAL;AACIQ,MAAAA,IAAI,GAAG,oBAAC,SAAD;AAAW,QAAA,MAAM,EAAE,EAAnB;AAAuB,QAAA,KAAK,EAAE;AAA9B,QAAP;AACAC,MAAAA,OAAO,GAAGH,yBAAyB,GAAGX,QAAQ,CAACgB,MAAZ,GAAqBhB,QAAQ,CAACiB,KAAjE;AACA;;AACJ,SAAKf,kBAAL;AACA,SAAKC,aAAL;AACI,UAAIQ,yBAAJ,EAA+B;AAC3BE,QAAAA,IAAI,GAAG,oBAAC,gBAAD,OAAP;AACH,OAFD,MAEO;AACHA,QAAAA,IAAI,GAAG,oBAAC,cAAD,OAAP;AACAC,QAAAA,OAAO,GAAGd,QAAQ,CAACkB,0BAAnB;AACH;;AACD;;AACJ,SAAKjB,cAAL;AACA;AACI,UAAIU,yBAAJ,EAA+B;AAC3BE,QAAAA,IAAI,GAAG,oBAAC,gBAAD,OAAP;AACH,OAFD,MAEO;AACHC,QAAAA,OAAO,GAAGd,QAAQ,CAACkB,0BAAnB;AACH;;AACD;AA3BR;;AA8BA,SACI;AAAK,IAAA,SAAS,EAAC;AAAf,KACKJ,OAAO,GACJ,oBAAC,OAAD;AAAS,IAAA,QAAQ,EAAC,UAAlB;AAA6B,IAAA,IAAI,EAAEJ,IAAI,CAACS,aAAL,CAAmBL,OAAnB;AAAnC,KACI,oBAAC,WAAD;AAAa,IAAA,OAAO,EAAEL,OAAtB;AAA+B,IAAA,IAAI,EAAC,QAApC;AAA6C,IAAA,UAAU,EAAED,MAAM,KAAKL;AAApE,KACKU,IADL,CADJ,CADI,GAOJA,IARR,CADJ;AAaH,CAnDD;;AAqDA,SAASN,UAAU,IAAIa,oBAAvB;AACA,eAAe5B,UAAU,CAACe,UAAD,CAAzB","sourcesContent":["/**\n * @flow\n * @file Item action component\n */\n\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport type { InjectIntlProvidedProps } from 'react-intl';\nimport IconCheck from '../../icons/general/IconCheck';\nimport IconClose from '../../icons/general/IconClose';\nimport IconInProgress from './IconInProgress';\nimport IconRetry from '../../icons/general/IconRetry';\nimport LoadingIndicator from '../../components/loading-indicator';\nimport PlainButton from '../../components/plain-button/PlainButton';\nimport Tooltip from '../../components/tooltip';\nimport messages from '../common/messages';\nimport { STATUS_PENDING, STATUS_IN_PROGRESS, STATUS_STAGED, STATUS_COMPLETE, STATUS_ERROR } from '../../constants';\nimport type { UploadStatus } from '../../common/types/upload';\n\nimport './ItemAction.scss';\n\nconst ICON_CHECK_COLOR = '#26C281';\n\ntype Props = {\n    isFolder?: boolean,\n    isResumableUploadsEnabled: boolean,\n    onClick: Function,\n    status: UploadStatus,\n} & InjectIntlProvidedProps;\n\nconst ItemAction = ({ status, onClick, intl, isResumableUploadsEnabled, isFolder = false }: Props) => {\n    let icon = <IconClose />;\n    let tooltip;\n\n    if (isFolder && status !== STATUS_PENDING) {\n        return null;\n    }\n\n    switch (status) {\n        case STATUS_COMPLETE:\n            icon = <IconCheck color={ICON_CHECK_COLOR} />;\n            if (!isResumableUploadsEnabled) {\n                tooltip = messages.remove;\n            }\n            break;\n        case STATUS_ERROR:\n            icon = <IconRetry height={24} width={24} />;\n            tooltip = isResumableUploadsEnabled ? messages.resume : messages.retry;\n            break;\n        case STATUS_IN_PROGRESS:\n        case STATUS_STAGED:\n            if (isResumableUploadsEnabled) {\n                icon = <LoadingIndicator />;\n            } else {\n                icon = <IconInProgress />;\n                tooltip = messages.uploadsCancelButtonTooltip;\n            }\n            break;\n        case STATUS_PENDING:\n        default:\n            if (isResumableUploadsEnabled) {\n                icon = <LoadingIndicator />;\n            } else {\n                tooltip = messages.uploadsCancelButtonTooltip;\n            }\n            break;\n    }\n\n    return (\n        <div className=\"bcu-item-action\">\n            {tooltip ? (\n                <Tooltip position=\"top-left\" text={intl.formatMessage(tooltip)}>\n                    <PlainButton onClick={onClick} type=\"button\" isDisabled={status === STATUS_STAGED}>\n                        {icon}\n                    </PlainButton>\n                </Tooltip>\n            ) : (\n                icon\n            )}\n        </div>\n    );\n};\n\nexport { ItemAction as ItemActionForTesting };\nexport default injectIntl(ItemAction);\n"],"file":"ItemAction.js"}