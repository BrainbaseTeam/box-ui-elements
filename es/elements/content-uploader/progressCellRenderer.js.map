{"version":3,"sources":["../../../src/elements/content-uploader/progressCellRenderer.js"],"names":["React","FormattedMessage","Browser","messages","ItemProgress","ERROR_CODE_UPLOAD_FILE_SIZE_LIMIT_EXCEEDED","ERROR_CODE_ITEM_NAME_IN_USE","ERROR_CODE_ITEM_NAME_INVALID","ERROR_CODE_UPLOAD_PENDING_APP_FOLDER_SIZE_LIMIT","ERROR_CODE_UPLOAD_STORAGE_LIMIT_EXCEEDED","ERROR_CODE_UPLOAD_CHILD_FOLDER_FAILED","ERROR_CODE_UPLOAD_BAD_DIGEST","ERROR_CODE_UPLOAD_FAILED_PACKAGE","STATUS_IN_PROGRESS","STATUS_STAGED","STATUS_ERROR","getErrorMessage","errorCode","itemName","uploadsOneOrMoreChildFoldersFailedToUploadMessage","uploadsFileSizeLimitExceededErrorMessage","uploadsItemNameInUseErrorMessage","uploadsProvidedFolderNameInvalidMessage","name","uploadsStorageLimitErrorMessage","uploadsPendingFolderSizeLimitErrorMessage","uploadsPackageUploadErrorMessage","uploadsDefaultErrorMessage","rowData","status","error","isFolder","file","code","isSafari","indexOf"],"mappings":";;AAAA;;;;AAKA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,gBAAT,QAAiC,YAAjC;AACA,OAAOC,OAAP,MAAoB,qBAApB;AACA,OAAOC,QAAP,MAAqB,oBAArB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AAEA,SACIC,0CADJ,EAEIC,2BAFJ,EAGIC,4BAHJ,EAIIC,+CAJJ,EAKIC,wCALJ,EAMIC,qCANJ,EAOIC,4BAPJ,EAQIC,gCARJ,EASIC,kBATJ,EAUIC,aAVJ,EAWIC,YAXJ,QAYO,iBAZP;;AAmBA;;;;;;;AAOA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACC,SAAD,EAAqBC,QAArB,EAA2C;AAC/D,UAAQD,SAAR;AACI,SAAKP,qCAAL;AACI,aAAO,oBAAC,gBAAD,EAAsBP,QAAQ,CAACgB,iDAA/B,CAAP;;AACJ,SAAKd,0CAAL;AACI,aAAO,oBAAC,gBAAD,EAAsBF,QAAQ,CAACiB,wCAA/B,CAAP;;AACJ,SAAKd,2BAAL;AACI,aAAO,oBAAC,gBAAD,EAAsBH,QAAQ,CAACkB,gCAA/B,CAAP;;AACJ,SAAKd,4BAAL;AACI,aACI,oBAAC,gBAAD,eAAsBJ,QAAQ,CAACmB,uCAA/B;AAAwE,QAAA,MAAM,EAAE;AAAEC,UAAAA,IAAI,EAAEL;AAAR;AAAhF,SADJ;;AAGJ,SAAKT,wCAAL;AACI,aAAO,oBAAC,gBAAD,EAAsBN,QAAQ,CAACqB,+BAA/B,CAAP;;AACJ,SAAKhB,+CAAL;AACI,aAAO,oBAAC,gBAAD,EAAsBL,QAAQ,CAACsB,yCAA/B,CAAP;;AACJ,SAAKb,gCAAL;AACI,aAAO,oBAAC,gBAAD,EAAsBT,QAAQ,CAACuB,gCAA/B,CAAP;;AACJ;AACI,aAAO,oBAAC,gBAAD,EAAsBvB,QAAQ,CAACwB,0BAA/B,CAAP;AAlBR;AAoBH,CArBD;;AAuBA,gBAAe;AAAA,SAAM,gBAAwB;AAAA,QAArBC,OAAqB,QAArBA,OAAqB;AAAA,QACjCC,MADiC,GACYD,OADZ,CACjCC,MADiC;AAAA,yBACYD,OADZ,CACzBE,KADyB;AAAA,QACzBA,KADyB,+BACjB,EADiB;AAAA,QACbP,IADa,GACYK,OADZ,CACbL,IADa;AAAA,QACPQ,QADO,GACYH,OADZ,CACPG,QADO;AAAA,QACGC,IADH,GACYJ,OADZ,CACGI,IADH;AAAA,QAEjCC,IAFiC,GAExBH,KAFwB,CAEjCG,IAFiC;;AAIzC,QAAIF,QAAQ,IAAIF,MAAM,KAAKd,YAA3B,EAAyC;AACrC,aAAO,IAAP;AACH;;AAED,YAAQc,MAAR;AACI,WAAKhB,kBAAL;AACA,WAAKC,aAAL;AACI,eAAO,oBAAC,YAAD,EAAkBc,OAAlB,CAAP;;AACJ,WAAKb,YAAL;AACI,YAAIb,OAAO,CAACgC,QAAR,MAAsBD,IAAI,KAAKtB,4BAA/B,IAA+DqB,IAAI,CAACT,IAAL,CAAUY,OAAV,CAAkB,MAAlB,MAA8B,CAAC,CAAlG,EAAqG;AACjG,iBAAOnB,eAAe,CAACJ,gCAAD,EAAmCoB,IAAI,CAACT,IAAxC,CAAtB;AACH;;AACD,eAAOP,eAAe,CAACiB,IAAD,EAAOV,IAAP,CAAtB;;AACJ;AACI,eAAO,IAAP;AAVR;AAYH,GApBc;AAAA,CAAf","sourcesContent":["/**\n * @flow\n * @file Function to render the progress table cell\n */\n\nimport React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport Browser from '../../utils/Browser';\nimport messages from '../common/messages';\nimport ItemProgress from './ItemProgress';\n\nimport {\n    ERROR_CODE_UPLOAD_FILE_SIZE_LIMIT_EXCEEDED,\n    ERROR_CODE_ITEM_NAME_IN_USE,\n    ERROR_CODE_ITEM_NAME_INVALID,\n    ERROR_CODE_UPLOAD_PENDING_APP_FOLDER_SIZE_LIMIT,\n    ERROR_CODE_UPLOAD_STORAGE_LIMIT_EXCEEDED,\n    ERROR_CODE_UPLOAD_CHILD_FOLDER_FAILED,\n    ERROR_CODE_UPLOAD_BAD_DIGEST,\n    ERROR_CODE_UPLOAD_FAILED_PACKAGE,\n    STATUS_IN_PROGRESS,\n    STATUS_STAGED,\n    STATUS_ERROR,\n} from '../../constants';\nimport type { UploadItem } from '../../common/types/upload';\n\ntype Props = {\n    rowData: UploadItem,\n};\n\n/**\n * Get error message for a specific error code\n *\n * @param {string} [errorCode]\n * @param {string} [itemName]\n * @returns {FormattedMessage}\n */\nconst getErrorMessage = (errorCode: ?string, itemName: ?string) => {\n    switch (errorCode) {\n        case ERROR_CODE_UPLOAD_CHILD_FOLDER_FAILED:\n            return <FormattedMessage {...messages.uploadsOneOrMoreChildFoldersFailedToUploadMessage} />;\n        case ERROR_CODE_UPLOAD_FILE_SIZE_LIMIT_EXCEEDED:\n            return <FormattedMessage {...messages.uploadsFileSizeLimitExceededErrorMessage} />;\n        case ERROR_CODE_ITEM_NAME_IN_USE:\n            return <FormattedMessage {...messages.uploadsItemNameInUseErrorMessage} />;\n        case ERROR_CODE_ITEM_NAME_INVALID:\n            return (\n                <FormattedMessage {...messages.uploadsProvidedFolderNameInvalidMessage} values={{ name: itemName }} />\n            );\n        case ERROR_CODE_UPLOAD_STORAGE_LIMIT_EXCEEDED:\n            return <FormattedMessage {...messages.uploadsStorageLimitErrorMessage} />;\n        case ERROR_CODE_UPLOAD_PENDING_APP_FOLDER_SIZE_LIMIT:\n            return <FormattedMessage {...messages.uploadsPendingFolderSizeLimitErrorMessage} />;\n        case ERROR_CODE_UPLOAD_FAILED_PACKAGE:\n            return <FormattedMessage {...messages.uploadsPackageUploadErrorMessage} />;\n        default:\n            return <FormattedMessage {...messages.uploadsDefaultErrorMessage} />;\n    }\n};\n\nexport default () => ({ rowData }: Props) => {\n    const { status, error = {}, name, isFolder, file } = rowData;\n    const { code } = error;\n\n    if (isFolder && status !== STATUS_ERROR) {\n        return null;\n    }\n\n    switch (status) {\n        case STATUS_IN_PROGRESS:\n        case STATUS_STAGED:\n            return <ItemProgress {...rowData} />;\n        case STATUS_ERROR:\n            if (Browser.isSafari() && code === ERROR_CODE_UPLOAD_BAD_DIGEST && file.name.indexOf('.zip') !== -1) {\n                return getErrorMessage(ERROR_CODE_UPLOAD_FAILED_PACKAGE, file.name);\n            }\n            return getErrorMessage(code, name);\n        default:\n            return null;\n    }\n};\n"],"file":"progressCellRenderer.js"}