{"version":3,"sources":["../../../src/elements/content-uploader/progressCellRenderer.js"],"names":["React","FormattedMessage","messages","ItemProgress","ERROR_CODE_UPLOAD_FILE_SIZE_LIMIT_EXCEEDED","ERROR_CODE_ITEM_NAME_IN_USE","ERROR_CODE_ITEM_NAME_INVALID","ERROR_CODE_UPLOAD_PENDING_APP_FOLDER_SIZE_LIMIT","ERROR_CODE_UPLOAD_STORAGE_LIMIT_EXCEEDED","ERROR_CODE_UPLOAD_CHILD_FOLDER_FAILED","STATUS_ERROR","STATUS_IN_PROGRESS","STATUS_STAGED","getErrorMessage","errorCode","itemName","uploadsOneOrMoreChildFoldersFailedToUploadMessage","uploadsFileSizeLimitExceededErrorMessage","uploadsItemNameInUseErrorMessage","uploadsProvidedFolderNameInvalidMessage","name","uploadsStorageLimitErrorMessage","uploadsPendingFolderSizeLimitErrorMessage","uploadsDefaultErrorMessage","rowData","status","error","isFolder","code"],"mappings":";;AAAA;AACA;AACA;AACA;AAEA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,gBAAT,QAAiC,YAAjC;AACA,OAAOC,QAAP,MAAqB,oBAArB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,SACIC,0CADJ,EAEIC,2BAFJ,EAGIC,4BAHJ,EAIIC,+CAJJ,EAKIC,wCALJ,EAMIC,qCANJ,EAOIC,YAPJ,EAQIC,kBARJ,EASIC,aATJ,QAUO,iBAVP;;AAgBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACC,SAAD,EAAqBC,QAArB,EAA2C;AAC/D,UAAQD,SAAR;AACI,SAAKL,qCAAL;AACI,0BAAO,oBAAC,gBAAD,EAAsBP,QAAQ,CAACc,iDAA/B,CAAP;;AACJ,SAAKZ,0CAAL;AACI,0BAAO,oBAAC,gBAAD,EAAsBF,QAAQ,CAACe,wCAA/B,CAAP;;AACJ,SAAKZ,2BAAL;AACI,0BAAO,oBAAC,gBAAD,EAAsBH,QAAQ,CAACgB,gCAA/B,CAAP;;AACJ,SAAKZ,4BAAL;AACI,0BACI,oBAAC,gBAAD,eAAsBJ,QAAQ,CAACiB,uCAA/B;AAAwE,QAAA,MAAM,EAAE;AAAEC,UAAAA,IAAI,EAAEL;AAAR;AAAhF,SADJ;;AAGJ,SAAKP,wCAAL;AACI,0BAAO,oBAAC,gBAAD,EAAsBN,QAAQ,CAACmB,+BAA/B,CAAP;;AACJ,SAAKd,+CAAL;AACI,0BAAO,oBAAC,gBAAD,EAAsBL,QAAQ,CAACoB,yCAA/B,CAAP;;AACJ;AACI,0BAAO,oBAAC,gBAAD,EAAsBpB,QAAQ,CAACqB,0BAA/B,CAAP;AAhBR;AAkBH,CAnBD;;AAqBA,gBAAe;AAAA,SAAM,gBAAwB;AAAA,QAArBC,OAAqB,QAArBA,OAAqB;AAAA,QACjCC,MADiC,GACMD,OADN,CACjCC,MADiC;AAAA,yBACMD,OADN,CACzBE,KADyB;AAAA,QACzBA,KADyB,+BACjB,EADiB;AAAA,QACbN,IADa,GACMI,OADN,CACbJ,IADa;AAAA,QACPO,QADO,GACMH,OADN,CACPG,QADO;AAAA,QAEjCC,IAFiC,GAExBF,KAFwB,CAEjCE,IAFiC;;AAIzC,QAAID,QAAQ,IAAIF,MAAM,KAAKf,YAA3B,EAAyC;AACrC,aAAO,IAAP;AACH;;AAED,YAAQe,MAAR;AACI,WAAKd,kBAAL;AACA,WAAKC,aAAL;AACI,4BAAO,oBAAC,YAAD,EAAkBY,OAAlB,CAAP;;AACJ,WAAKd,YAAL;AACI,eAAOG,eAAe,CAACe,IAAD,EAAOR,IAAP,CAAtB;;AACJ;AACI,eAAO,IAAP;AAPR;AASH,GAjBc;AAAA,CAAf","sourcesContent":["/**\n * @flow\n * @file Function to render the progress table cell\n */\n\nimport React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport messages from '../common/messages';\nimport ItemProgress from './ItemProgress';\nimport {\n    ERROR_CODE_UPLOAD_FILE_SIZE_LIMIT_EXCEEDED,\n    ERROR_CODE_ITEM_NAME_IN_USE,\n    ERROR_CODE_ITEM_NAME_INVALID,\n    ERROR_CODE_UPLOAD_PENDING_APP_FOLDER_SIZE_LIMIT,\n    ERROR_CODE_UPLOAD_STORAGE_LIMIT_EXCEEDED,\n    ERROR_CODE_UPLOAD_CHILD_FOLDER_FAILED,\n    STATUS_ERROR,\n    STATUS_IN_PROGRESS,\n    STATUS_STAGED,\n} from '../../constants';\n\ntype Props = {\n    rowData: UploadItem,\n};\n\n/**\n * Get error message for a specific error code\n *\n * @param {string} [errorCode]\n * @param {string} [itemName]\n * @returns {FormattedMessage}\n */\nconst getErrorMessage = (errorCode: ?string, itemName: ?string) => {\n    switch (errorCode) {\n        case ERROR_CODE_UPLOAD_CHILD_FOLDER_FAILED:\n            return <FormattedMessage {...messages.uploadsOneOrMoreChildFoldersFailedToUploadMessage} />;\n        case ERROR_CODE_UPLOAD_FILE_SIZE_LIMIT_EXCEEDED:\n            return <FormattedMessage {...messages.uploadsFileSizeLimitExceededErrorMessage} />;\n        case ERROR_CODE_ITEM_NAME_IN_USE:\n            return <FormattedMessage {...messages.uploadsItemNameInUseErrorMessage} />;\n        case ERROR_CODE_ITEM_NAME_INVALID:\n            return (\n                <FormattedMessage {...messages.uploadsProvidedFolderNameInvalidMessage} values={{ name: itemName }} />\n            );\n        case ERROR_CODE_UPLOAD_STORAGE_LIMIT_EXCEEDED:\n            return <FormattedMessage {...messages.uploadsStorageLimitErrorMessage} />;\n        case ERROR_CODE_UPLOAD_PENDING_APP_FOLDER_SIZE_LIMIT:\n            return <FormattedMessage {...messages.uploadsPendingFolderSizeLimitErrorMessage} />;\n        default:\n            return <FormattedMessage {...messages.uploadsDefaultErrorMessage} />;\n    }\n};\n\nexport default () => ({ rowData }: Props) => {\n    const { status, error = {}, name, isFolder } = rowData;\n    const { code } = error;\n\n    if (isFolder && status !== STATUS_ERROR) {\n        return null;\n    }\n\n    switch (status) {\n        case STATUS_IN_PROGRESS:\n        case STATUS_STAGED:\n            return <ItemProgress {...rowData} />;\n        case STATUS_ERROR:\n            return getErrorMessage(code, name);\n        default:\n            return null;\n    }\n};\n"],"file":"progressCellRenderer.js"}