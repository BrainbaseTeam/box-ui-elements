{"version":3,"sources":["../../../src/elements/content-uploader/UploadState.js"],"names":["React","classNames","FormattedMessage","ErrorEmptyState","UploadEmptyState","UploadSuccessState","messages","UploadStateContent","VIEW_ERROR","VIEW_UPLOAD_EMPTY","VIEW_UPLOAD_IN_PROGRESS","VIEW_UPLOAD_SUCCESS","UploadState","canDrop","hasItems","isOver","isTouch","view","onSelect","isFolderUploadEnabled","icon","content","uploadError","uploadInProgress","uploadNoDragDrop","uploadEmptyFileInput","uploadEmptyFolderInput","uploadEmptyWithFolderUploadEnabled","uploadEmptyWithFolderUploadDisabled","uploadSuccessFileInput","uploadSuccessFolderInput","uploadSuccess","className"],"mappings":"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","sourcesContent":["/**\n * @flow\n * @file Upload state component\n */\n\nimport React from 'react';\nimport classNames from 'classnames';\nimport { FormattedMessage } from 'react-intl';\nimport ErrorEmptyState from '../../icons/states/ErrorEmptyState';\nimport UploadEmptyState from '../../icons/states/UploadEmptyState';\nimport UploadSuccessState from '../../icons/states/UploadSuccessState';\nimport messages from '../common/messages';\nimport UploadStateContent from './UploadStateContent';\nimport { VIEW_ERROR, VIEW_UPLOAD_EMPTY, VIEW_UPLOAD_IN_PROGRESS, VIEW_UPLOAD_SUCCESS } from '../../constants';\nimport type { View } from '../../common/types/core';\n\nimport './UploadState.scss';\n\ntype Props = {\n    canDrop: boolean,\n    hasItems: boolean,\n    isFolderUploadEnabled: boolean,\n    isOver: boolean,\n    isTouch: boolean,\n    onSelect: Function,\n    view: View,\n};\n\nconst UploadState = ({ canDrop, hasItems, isOver, isTouch, view, onSelect, isFolderUploadEnabled }: Props) => {\n    let icon;\n    let content;\n    switch (view) {\n        case VIEW_ERROR:\n            icon = <ErrorEmptyState />;\n            content = <UploadStateContent message={<FormattedMessage {...messages.uploadError} />} />;\n            break;\n        case VIEW_UPLOAD_EMPTY:\n            icon = <UploadEmptyState />;\n            /* eslint-disable no-nested-ternary */\n            content =\n                canDrop && hasItems ? (\n                    <UploadStateContent message={<FormattedMessage {...messages.uploadInProgress} />} />\n                ) : isTouch ? (\n                    <UploadStateContent\n                        fileInputLabel={<FormattedMessage {...messages.uploadNoDragDrop} />}\n                        onChange={onSelect}\n                        useButton\n                    />\n                ) : (\n                    <UploadStateContent\n                        fileInputLabel={<FormattedMessage {...messages.uploadEmptyFileInput} />}\n                        folderInputLabel={\n                            isFolderUploadEnabled && <FormattedMessage {...messages.uploadEmptyFolderInput} />\n                        }\n                        message={\n                            isFolderUploadEnabled ? (\n                                <FormattedMessage {...messages.uploadEmptyWithFolderUploadEnabled} />\n                            ) : (\n                                <FormattedMessage {...messages.uploadEmptyWithFolderUploadDisabled} />\n                            )\n                        }\n                        onChange={onSelect}\n                    />\n                );\n            /* eslint-enable no-nested-ternary */\n            break;\n        case VIEW_UPLOAD_IN_PROGRESS:\n            icon = <UploadEmptyState />;\n            content = <UploadStateContent message={<FormattedMessage {...messages.uploadInProgress} />} />;\n            break;\n        case VIEW_UPLOAD_SUCCESS:\n            icon = <UploadSuccessState />;\n            content = (\n                <UploadStateContent\n                    fileInputLabel={<FormattedMessage {...messages.uploadSuccessFileInput} />}\n                    folderInputLabel={\n                        isFolderUploadEnabled && <FormattedMessage {...messages.uploadSuccessFolderInput} />\n                    }\n                    message={<FormattedMessage {...messages.uploadSuccess} />}\n                    onChange={onSelect}\n                    useButton={isTouch}\n                />\n            );\n            break;\n        default:\n            break;\n        /* eslint-enable jsx-a11y/label-has-for */\n    }\n\n    const className = classNames('bcu-upload-state', {\n        'bcu-is-droppable': isOver && canDrop,\n        'bcu-is-not-droppable': isOver && !canDrop,\n        'bcu-has-items': hasItems,\n    });\n\n    return (\n        <div className={className}>\n            <div>\n                {icon}\n                {content}\n            </div>\n            <div className=\"bcu-drag-drop-overlay\" />\n        </div>\n    );\n};\n\nexport default UploadState;\n"],"file":"UploadState.js"}