{"version":3,"sources":["../../../src/elements/content-uploader/ContentUploader.js"],"names":["React","Component","classNames","getProp","noop","uniqueid","cloneDeep","getTypedFileId","getTypedFolderId","makeResponsive","Internationalize","FolderUpload","API","getDataTransferItemId","getFileId","getFileFromDataTransferItem","getFile","getFileAPIOptions","getDataTransferItemAPIOptions","isDataTransferItemAFolder","isMultiputSupported","DroppableContent","UploadsManager","Footer","DEFAULT_ROOT","CLIENT_NAME_CONTENT_UPLOADER","DEFAULT_HOSTNAME_UPLOAD","DEFAULT_HOSTNAME_API","VIEW_ERROR","VIEW_UPLOAD_EMPTY","VIEW_UPLOAD_IN_PROGRESS","VIEW_UPLOAD_SUCCESS","STATUS_PENDING","STATUS_IN_PROGRESS","STATUS_STAGED","STATUS_COMPLETE","STATUS_ERROR","ERROR_CODE_UPLOAD_FILE_LIMIT","CHUNKED_UPLOAD_MIN_SIZE_BYTES","FILE_LIMIT_DEFAULT","HIDE_UPLOAD_MANAGER_DELAY_MS_DEFAULT","EXPAND_UPLOADS_MANAGER_ITEMS_NUM_THRESHOLD","UPLOAD_CONCURRENCY","ContentUploader","props","token","sharedLink","sharedLinkPassword","apiHost","uploadHost","clientName","requestInterceptor","responseInterceptor","files","rootFolderId","itemIds","state","Array","from","filter","file","items","item","itemUpdateCallback","isRelativePathIgnored","onBeforeUpload","length","newFiles","getNewFiles","newItemIds","forEach","clearTimeout","resetItemsTimeout","firstFile","setState","webkitRelativePath","addFilesWithRelativePathToQueue","addFilesWithoutRelativePathToQueue","dataTransferItems","isFolderUploadEnabled","folderItems","fileItems","isDirectory","push","addFileDataTransferItemsToUploadQueue","addFolderDataTransferItemsToUploadQueue","addFilesToUploadQueue","newItems","getNewDataTransferItems","fileAPIOptions","folderId","folderUpload","getFolderUploadAPI","buildFolderTreeFromDataTransferItem","addFolderToUploadQueue","uploadBaseAPIOptions","getBaseAPIOptions","addToQueue","apiOptions","api","extension","isFolder","name","folder","options","progress","size","status","map","uploadFile","uploadAPIOptions","substr","lastIndexOf","getUploadAPI","uploadItem","fileLimit","useUploadsManager","isUploadsManagerExpanded","updatedItems","prevItemsNum","totalNumOfItems","concat","slice","errorCode","isAutoExpanded","expandUploadsManager","updateViewAndCollection","view","upload","onCancel","cancel","splice","indexOf","minimizeUploadsManager","entries","onUpload","error","boxFile","checkClearUploadItems","onError","index","findIndex","singleItem","errorData","event","total","Math","min","round","loaded","chunked","isResumableUploadsEnabled","isChunkedUpload","isResumable","sessionId","removeFileFromUploadQueue","resumeFile","resetFile","onClick","onMinimize","resetUploadManagerExpandState","setTimeout","resetUploadsManagerItemsWhenUploadsComplete","addDataTransferItemsToUploadQueue","id","rootElement","document","getElementById","appElement","hasFiles","isArray","hasItems","hasUploads","addFilesWithOptionsToUploadQueueAndStartUpload","fileId","itemFolderId","itemFileId","buildFolderTreeFromWebkitRelativePath","factory","createAPIFactory","chunkedUploadAPI","getChunkedUploadAPI","console","warn","getPlainUploadAPI","overwrite","numItemsUploading","item_t","uploadOptions","errorCallback","handleUploadError","progressCallback","handleUploadProgress","successCallback","handleUploadSuccess","resumeOptions","resume","callback","onComplete","someUploadIsInProgress","some","someUploadHasFailed","allItemsArePending","noFileIsPendingOrInProgress","every","language","messages","onClose","className","measureRef","isTouch","isDraggingItemsToUploadsManager","isEmpty","isVisible","isLoading","isDone","styleClassName","be","clickAllWithStatus","toggleUploadsManager","ContentUploaderComponent"],"mappings":"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","sourcesContent":["/**\n * @flow\n * @file Content Uploader component\n * @author Box\n */\n\nimport 'regenerator-runtime/runtime';\nimport React, { Component } from 'react';\nimport classNames from 'classnames';\nimport getProp from 'lodash/get';\nimport noop from 'lodash/noop';\nimport uniqueid from 'lodash/uniqueId';\nimport cloneDeep from 'lodash/cloneDeep';\nimport { getTypedFileId, getTypedFolderId } from '../../utils/file';\nimport makeResponsive from '../common/makeResponsive';\nimport Internationalize from '../common/Internationalize';\nimport FolderUpload from '../../api/uploads/FolderUpload';\nimport API from '../../api';\nimport {\n    getDataTransferItemId,\n    getFileId,\n    getFileFromDataTransferItem,\n    getFile,\n    getFileAPIOptions,\n    getDataTransferItemAPIOptions,\n    isDataTransferItemAFolder,\n    isMultiputSupported,\n} from '../../utils/uploads';\nimport DroppableContent from './DroppableContent';\nimport UploadsManager from './UploadsManager';\nimport Footer from './Footer';\nimport {\n    DEFAULT_ROOT,\n    CLIENT_NAME_CONTENT_UPLOADER,\n    DEFAULT_HOSTNAME_UPLOAD,\n    DEFAULT_HOSTNAME_API,\n    VIEW_ERROR,\n    VIEW_UPLOAD_EMPTY,\n    VIEW_UPLOAD_IN_PROGRESS,\n    VIEW_UPLOAD_SUCCESS,\n    STATUS_PENDING,\n    STATUS_IN_PROGRESS,\n    STATUS_STAGED,\n    STATUS_COMPLETE,\n    STATUS_ERROR,\n    ERROR_CODE_UPLOAD_FILE_LIMIT,\n} from '../../constants';\nimport '../common/fonts.scss';\nimport '../common/base.scss';\n\ntype Props = {\n    apiHost: string,\n    chunked: boolean,\n    className: string,\n    clientName: string,\n    dataTransferItems: Array<DataTransferItem | UploadDataTransferItemWithAPIOptions>,\n    fileLimit: number,\n    files?: Array<UploadFileWithAPIOptions | File>,\n    isDraggingItemsToUploadsManager?: boolean,\n    isFolderUploadEnabled: boolean,\n    isLarge: boolean,\n    isResumableUploadsEnabled: boolean,\n    isSmall: boolean,\n    isTouch: boolean,\n    language?: string,\n    measureRef: Function,\n    messages?: StringMap,\n    onBeforeUpload: (file: Array<UploadFileWithAPIOptions | File>) => void,\n    onCancel: Function,\n    onClose: Function,\n    onComplete: Function,\n    onError: Function,\n    onMinimize?: Function,\n    onUpload: Function,\n    overwrite: boolean,\n    requestInterceptor?: Function,\n    responseInterceptor?: Function,\n    rootFolderId: string,\n    sharedLink?: string,\n    sharedLinkPassword?: string,\n    token?: Token,\n    uploadHost: string,\n    useUploadsManager?: boolean,\n};\n\ntype State = {\n    errorCode?: string,\n    isUploadsManagerExpanded: boolean,\n    itemIds: Object,\n    items: UploadItem[],\n    view: View,\n};\n\nconst CHUNKED_UPLOAD_MIN_SIZE_BYTES = 104857600; // 100MB\nconst FILE_LIMIT_DEFAULT = 100; // Upload at most 100 files at once by default\nconst HIDE_UPLOAD_MANAGER_DELAY_MS_DEFAULT = 8000;\nconst EXPAND_UPLOADS_MANAGER_ITEMS_NUM_THRESHOLD = 5;\nconst UPLOAD_CONCURRENCY = 6;\n\nclass ContentUploader extends Component<Props, State> {\n    id: string;\n\n    state: State;\n\n    props: Props;\n\n    rootElement: HTMLElement;\n\n    appElement: HTMLElement;\n\n    resetItemsTimeout: TimeoutID;\n\n    isAutoExpanded: boolean = false;\n\n    static defaultProps = {\n        rootFolderId: DEFAULT_ROOT,\n        apiHost: DEFAULT_HOSTNAME_API,\n        chunked: true,\n        className: '',\n        clientName: CLIENT_NAME_CONTENT_UPLOADER,\n        fileLimit: FILE_LIMIT_DEFAULT,\n        uploadHost: DEFAULT_HOSTNAME_UPLOAD,\n        onBeforeUpload: noop,\n        onClose: noop,\n        onComplete: noop,\n        onError: noop,\n        onUpload: noop,\n        overwrite: true,\n        useUploadsManager: false,\n        files: [],\n        onMinimize: noop,\n        onCancel: noop,\n        isFolderUploadEnabled: false,\n        isResumableUploadsEnabled: false,\n        dataTransferItems: [],\n        isDraggingItemsToUploadsManager: false,\n    };\n\n    /**\n     * [constructor]\n     *\n     * @return {ContentUploader}\n     */\n    constructor(props: Props) {\n        super(props);\n\n        const { rootFolderId, token, useUploadsManager } = props;\n        this.state = {\n            view: (rootFolderId && token) || useUploadsManager ? VIEW_UPLOAD_EMPTY : VIEW_ERROR,\n            items: [],\n            errorCode: '',\n            itemIds: {},\n            isUploadsManagerExpanded: false,\n        };\n        this.id = uniqueid('bcu_');\n    }\n\n    /**\n     * Fetches the root folder on load\n     *\n     * @private\n     * @inheritdoc\n     * @return {void}\n     */\n    componentDidMount() {\n        this.rootElement = ((document.getElementById(this.id): any): HTMLElement);\n        this.appElement = this.rootElement;\n    }\n\n    /**\n     * Cancels pending uploads\n     *\n     * @private\n     * @inheritdoc\n     * @return {void}\n     */\n    componentWillUnmount() {\n        this.cancel();\n    }\n\n    /**\n     * Adds new items to the queue when files prop gets updated in window view\n     *\n     * @return {void}\n     */\n    componentDidUpdate(): void {\n        const { files, dataTransferItems, useUploadsManager } = this.props;\n\n        const hasFiles = Array.isArray(files) && files.length > 0;\n        const hasItems = Array.isArray(dataTransferItems) && dataTransferItems.length > 0;\n        const hasUploads = hasFiles || hasItems;\n\n        if (!useUploadsManager || !hasUploads) {\n            return;\n        }\n\n        this.addFilesWithOptionsToUploadQueueAndStartUpload(files, dataTransferItems);\n    }\n\n    /**\n     * Create and return new instance of API creator\n     *\n     * @param {UploadItemAPIOptions} [uploadAPIOptions]\n     * @return {API}\n     */\n    createAPIFactory(uploadAPIOptions?: UploadItemAPIOptions): API {\n        const { rootFolderId } = this.props;\n        const folderId = getProp(uploadAPIOptions, 'folderId') || rootFolderId;\n        const fileId = getProp(uploadAPIOptions, 'fileId');\n        const itemFolderId = getTypedFolderId(folderId);\n        const itemFileId = fileId ? getTypedFileId(fileId) : null;\n\n        return new API({\n            ...this.getBaseAPIOptions(),\n            id: itemFileId || itemFolderId,\n            ...uploadAPIOptions,\n        });\n    }\n\n    /**\n     * Return base API options from props\n     *\n     * @private\n     * @returns {Object}\n     */\n    getBaseAPIOptions = (): Object => {\n        const {\n            token,\n            sharedLink,\n            sharedLinkPassword,\n            apiHost,\n            uploadHost,\n            clientName,\n            requestInterceptor,\n            responseInterceptor,\n        } = this.props;\n\n        return {\n            token,\n            sharedLink,\n            sharedLinkPassword,\n            apiHost,\n            uploadHost,\n            clientName,\n            requestInterceptor,\n            responseInterceptor,\n        };\n    };\n\n    /**\n     * Given an array of files, return the files that are new to the Content Uploader\n     *\n     * @param {Array<UploadFileWithAPIOptions | File>} files\n     */\n    getNewFiles = (files: Array<UploadFileWithAPIOptions | File>): Array<UploadFileWithAPIOptions | File> => {\n        const { rootFolderId } = this.props;\n        const { itemIds } = this.state;\n\n        return Array.from(files).filter(file => !itemIds[getFileId(file, rootFolderId)]);\n    };\n\n    /**\n     * Given an array of files, return the files that are new to the Content Uploader\n     *\n     * @param {Array<UploadFileWithAPIOptions | File>} files\n     */\n    getNewDataTransferItems = (\n        items: Array<DataTransferItem | UploadDataTransferItemWithAPIOptions>,\n    ): Array<DataTransferItem | UploadDataTransferItemWithAPIOptions> => {\n        const { rootFolderId } = this.props;\n        const { itemIds } = this.state;\n\n        return Array.from(items).filter(item => !itemIds[getDataTransferItemId(item, rootFolderId)]);\n    };\n\n    /**\n     * Converts File API to upload items and adds to upload queue.\n     *\n     * @private\n     * @param {Array<UploadFileWithAPIOptions | UploadFile>} files - Files to be added to upload queue\n     * @param {Function} itemUpdateCallback - function to be invoked after items status are updated\n     * @param {boolean} [isRelativePathIgnored] - if true webkitRelativePath property is ignored\n     * @return {void}\n     */\n    addFilesToUploadQueue = (\n        files?: Array<UploadFileWithAPIOptions | UploadFile>,\n        itemUpdateCallback: Function,\n        isRelativePathIgnored?: boolean = false,\n    ) => {\n        const { onBeforeUpload, rootFolderId } = this.props;\n        if (!files || files.length === 0) {\n            return;\n        }\n\n        const newFiles = this.getNewFiles(files);\n\n        if (newFiles.length === 0) {\n            return;\n        }\n\n        const newItemIds = {};\n\n        newFiles.forEach(file => {\n            newItemIds[getFileId(file, rootFolderId)] = true;\n        });\n\n        clearTimeout(this.resetItemsTimeout);\n\n        const firstFile = getFile(newFiles[0]);\n\n        this.setState(\n            state => ({\n                itemIds: {\n                    ...state.itemIds,\n                    ...newItemIds,\n                },\n            }),\n            () => {\n                onBeforeUpload(newFiles);\n                if (firstFile.webkitRelativePath && !isRelativePathIgnored) {\n                    // webkitRelativePath should be ignored when the upload destination folder is known\n                    this.addFilesWithRelativePathToQueue(newFiles, itemUpdateCallback);\n                } else {\n                    this.addFilesWithoutRelativePathToQueue(newFiles, itemUpdateCallback);\n                }\n            },\n        );\n    };\n\n    /**\n     * Add dataTransferItems to the upload queue\n     *\n     * @private\n     * @param {DataTransferItemList} dataTransferItems\n     * @param {Function} itemUpdateCallback\n     * @returns {Promise<any>}\n     */\n    addDataTransferItemsToUploadQueue = (\n        dataTransferItems: DataTransferItemList | Array<DataTransferItem | UploadDataTransferItemWithAPIOptions>,\n        itemUpdateCallback: Function,\n    ): void => {\n        const { isFolderUploadEnabled } = this.props;\n        if (!dataTransferItems || dataTransferItems.length === 0) {\n            return;\n        }\n\n        const folderItems = [];\n        const fileItems = [];\n\n        Array.from(dataTransferItems).forEach(item => {\n            const isDirectory = isDataTransferItemAFolder(item);\n            if (isDirectory && isFolderUploadEnabled) {\n                folderItems.push(item);\n            } else if (!isDirectory) {\n                fileItems.push(item);\n            }\n        });\n\n        this.addFileDataTransferItemsToUploadQueue(fileItems, itemUpdateCallback);\n        this.addFolderDataTransferItemsToUploadQueue(folderItems, itemUpdateCallback);\n    };\n\n    /**\n     * Add dataTransferItem of file type to the upload queue\n     *\n     * @private\n     * @param {Array<DataTransferItem | UploadDataTransferItemWithAPIOptions>} dataTransferItems\n     * @param {Function} itemUpdateCallback\n     * @returns {void}\n     */\n    addFileDataTransferItemsToUploadQueue = (\n        dataTransferItems: Array<DataTransferItem | UploadDataTransferItemWithAPIOptions>,\n        itemUpdateCallback: Function,\n    ): void => {\n        dataTransferItems.forEach(async item => {\n            const file = await getFileFromDataTransferItem(item);\n            if (!file) {\n                return;\n            }\n\n            this.addFilesToUploadQueue([file], itemUpdateCallback);\n        });\n    };\n\n    /**\n     * Add dataTransferItem of folder type to the upload queue\n     *\n     * @private\n     * @param {Array<DataTransferItem | UploadDataTransferItemWithAPIOptions>} dataTransferItems\n     * @param {Function} itemUpdateCallback\n     * @returns {Promise<any>}\n     */\n    addFolderDataTransferItemsToUploadQueue = async (\n        dataTransferItems: Array<DataTransferItem | UploadDataTransferItemWithAPIOptions>,\n        itemUpdateCallback: Function,\n    ): Promise<any> => {\n        const { rootFolderId } = this.props;\n        const { itemIds } = this.state;\n        if (dataTransferItems.length === 0) {\n            return;\n        }\n\n        const newItems = this.getNewDataTransferItems(dataTransferItems);\n        newItems.forEach(item => {\n            itemIds[getDataTransferItemId(item, rootFolderId)] = true;\n        });\n\n        if (newItems.length === 0) {\n            return;\n        }\n\n        // $FlowFixMe\n        const fileAPIOptions: Object = getDataTransferItemAPIOptions(newItems[0]);\n        const { folderId = rootFolderId } = fileAPIOptions;\n\n        newItems.forEach(async item => {\n            const folderUpload = this.getFolderUploadAPI(folderId);\n            await folderUpload.buildFolderTreeFromDataTransferItem(item);\n            this.addFolderToUploadQueue(folderUpload, itemUpdateCallback, fileAPIOptions);\n        });\n    };\n\n    /**\n     * Converts File API to upload items and adds to upload queue for files with webkitRelativePath.\n     *\n     * @private\n     * @param {Array<UploadFileWithAPIOptions | File>} files - Files to be added to upload queue\n     * @param {Function} itemUpdateCallback - function to be invoked after items status are updated\n     * @return {void}\n     */\n    addFilesWithRelativePathToQueue(files: Array<UploadFileWithAPIOptions | File>, itemUpdateCallback: Function) {\n        if (files.length === 0) {\n            return;\n        }\n\n        const { rootFolderId } = this.props;\n        // $FlowFixMe\n        const fileAPIOptions: Object = getFileAPIOptions(files[0]);\n        const { folderId = rootFolderId } = fileAPIOptions;\n        const folderUpload = this.getFolderUploadAPI(folderId);\n\n        // Only 1 folder tree can be built with files having webkitRelativePath properties\n        folderUpload.buildFolderTreeFromWebkitRelativePath(files);\n\n        this.addFolderToUploadQueue(folderUpload, itemUpdateCallback, fileAPIOptions);\n    }\n\n    /**\n     * Get folder upload API instance\n     *\n     * @private\n     * @param {string} folderId\n     * @return {FolderUpload}\n     */\n    getFolderUploadAPI = (folderId: string): FolderUpload => {\n        const uploadBaseAPIOptions = this.getBaseAPIOptions();\n\n        return new FolderUpload(this.addFilesToUploadQueue, folderId, this.addToQueue, uploadBaseAPIOptions);\n    };\n\n    /**\n     * Add folder to upload queue\n     *\n     * @private\n     * @param {FolderUpload} folderUpload\n     * @param {Function} itemUpdateCallback\n     * @param {Object} apiOptions\n     * @return {void}\n     */\n    addFolderToUploadQueue = (folderUpload: FolderUpload, itemUpdateCallback: Function, apiOptions: Object): void => {\n        this.addToQueue(\n            [\n                // $FlowFixMe no file property\n                {\n                    api: folderUpload,\n                    extension: '',\n                    isFolder: true,\n                    name: folderUpload.folder.name,\n                    options: apiOptions,\n                    progress: 0,\n                    size: 1,\n                    status: STATUS_PENDING,\n                },\n            ],\n            itemUpdateCallback,\n        );\n    };\n\n    /**\n     * Converts File API to upload items and adds to upload queue for files with webkitRelativePath missing or ignored.\n     *\n     * @private\n     * @param {Array<UploadFileWithAPIOptions | File>} files - Files to be added to upload queue\n     * @param {Function} itemUpdateCallback - function to be invoked after items status are updated\n     * @return {void}\n     */\n    addFilesWithoutRelativePathToQueue = (\n        files: Array<UploadFileWithAPIOptions | File>,\n        itemUpdateCallback: Function,\n    ) => {\n        const { itemIds } = this.state;\n        const { rootFolderId } = this.props;\n\n        // Convert files from the file API to upload items\n        const newItems = files.map(file => {\n            const uploadFile = getFile(file);\n            const uploadAPIOptions = getFileAPIOptions(file);\n            const { name, size } = uploadFile;\n\n            // Extract extension or use empty string if file has no extension\n            let extension = name.substr(name.lastIndexOf('.') + 1);\n            if (extension.length === name.length) {\n                extension = '';\n            }\n\n            const api = this.getUploadAPI(uploadFile, uploadAPIOptions);\n            const uploadItem: Object = {\n                api,\n                extension,\n                file: uploadFile,\n                name,\n                progress: 0,\n                size,\n                status: STATUS_PENDING,\n            };\n\n            if (uploadAPIOptions) {\n                uploadItem.options = uploadAPIOptions;\n            }\n\n            itemIds[getFileId(uploadItem, rootFolderId)] = true;\n\n            return uploadItem;\n        });\n\n        if (newItems.length === 0) {\n            return;\n        }\n\n        this.setState({\n            itemIds,\n        });\n        this.addToQueue(newItems, itemUpdateCallback);\n    };\n\n    /**\n     * Add new items to the upload queue\n     *\n     * @private\n     * @param {Array<UploadFileWithAPIOptions | File>} newItems - Files to be added to upload queue\n     * @param {Function} itemUpdateCallback - function to be invoked after items status are updated\n     * @return {void}\n     */\n    addToQueue = (newItems: UploadItem[], itemUpdateCallback: Function) => {\n        const { fileLimit, useUploadsManager } = this.props;\n        const { items, isUploadsManagerExpanded } = this.state;\n\n        let updatedItems = [];\n        const prevItemsNum = items.length;\n        const totalNumOfItems = prevItemsNum + newItems.length;\n\n        // Don't add more than fileLimit # of items\n        if (totalNumOfItems > fileLimit) {\n            updatedItems = items.concat(newItems.slice(0, fileLimit - items.length));\n            this.setState({\n                errorCode: ERROR_CODE_UPLOAD_FILE_LIMIT,\n            });\n        } else {\n            updatedItems = items.concat(newItems);\n            this.setState({ errorCode: '' });\n\n            // If the number of items being uploaded passes the threshold, expand the upload manager\n            if (\n                prevItemsNum < EXPAND_UPLOADS_MANAGER_ITEMS_NUM_THRESHOLD &&\n                totalNumOfItems >= EXPAND_UPLOADS_MANAGER_ITEMS_NUM_THRESHOLD &&\n                useUploadsManager &&\n                !isUploadsManagerExpanded\n            ) {\n                this.isAutoExpanded = true;\n                this.expandUploadsManager();\n            }\n        }\n\n        this.updateViewAndCollection(updatedItems, () => {\n            if (itemUpdateCallback) {\n                itemUpdateCallback();\n            }\n\n            const { view } = this.state;\n            // Automatically start upload if other files are being uploaded\n            if (view === VIEW_UPLOAD_IN_PROGRESS) {\n                this.upload();\n            }\n        });\n    };\n\n    /**\n     * Returns a new API instance for the given file.\n     *\n     * @private\n     * @param {File} file - File to get a new API instance for\n     * @param {UploadItemAPIOptions} [uploadAPIOptions]\n     * @return {UploadAPI} - Instance of Upload API\n     */\n    getUploadAPI(file: File, uploadAPIOptions?: UploadItemAPIOptions) {\n        const { chunked, isResumableUploadsEnabled } = this.props;\n        const { size } = file;\n        const factory = this.createAPIFactory(uploadAPIOptions);\n\n        if (chunked && size > CHUNKED_UPLOAD_MIN_SIZE_BYTES) {\n            if (isMultiputSupported()) {\n                const chunkedUploadAPI = factory.getChunkedUploadAPI();\n                if (isResumableUploadsEnabled) {\n                    chunkedUploadAPI.isResumableUploadsEnabled = true;\n                }\n                return chunkedUploadAPI;\n            }\n\n            /* eslint-disable no-console */\n            console.warn(\n                'Chunked uploading is enabled, but not supported by your browser. You may need to enable HTTPS.',\n            );\n            /* eslint-enable no-console */\n        }\n\n        return factory.getPlainUploadAPI();\n    }\n\n    /**\n     * Removes an item from the upload queue. Cancels upload if in progress.\n     *\n     * @param {UploadItem} item - Item to remove\n     * @return {void}\n     */\n    removeFileFromUploadQueue = (item: UploadItem) => {\n        const { onCancel, useUploadsManager } = this.props;\n        const { items } = this.state;\n        // Clear any error errorCode in footer\n        this.setState({ errorCode: '' });\n\n        const { api } = item;\n        api.cancel();\n\n        items.splice(items.indexOf(item), 1);\n\n        onCancel([item]);\n        this.updateViewAndCollection(items, () => {\n            // Minimize uploads manager if there are no more items\n            if (useUploadsManager && !items.length) {\n                this.minimizeUploadsManager();\n            }\n\n            const { view } = this.state;\n            if (view === VIEW_UPLOAD_IN_PROGRESS) {\n                this.upload();\n            }\n        });\n    };\n\n    /**\n     * Aborts uploads in progress and clears upload list.\n     *\n     * @private\n     * @return {void}\n     */\n    cancel = () => {\n        const { items } = this.state;\n        items.forEach(uploadItem => {\n            const { api, status } = uploadItem;\n            if (status === STATUS_IN_PROGRESS) {\n                api.cancel();\n            }\n        });\n\n        // Reset upload collection\n        this.updateViewAndCollection([]);\n    };\n\n    /**\n     * Uploads all items in the upload collection.\n     *\n     * @private\n     * @return {void}\n     */\n    upload = () => {\n        const { items } = this.state;\n        items.forEach(uploadItem => {\n            if (uploadItem.status === STATUS_PENDING) {\n                this.uploadFile(uploadItem);\n            }\n        });\n    };\n\n    /**\n     * Helper to upload a single file.\n     *\n     * @param {UploadItem} item - Upload item object\n     * @return {void}\n     */\n    uploadFile(item: UploadItem) {\n        const { overwrite, rootFolderId } = this.props;\n        const { api, file, options } = item;\n        const { items } = this.state;\n\n        const numItemsUploading = items.filter(item_t => item_t.status === STATUS_IN_PROGRESS).length;\n\n        if (numItemsUploading >= UPLOAD_CONCURRENCY) {\n            return;\n        }\n\n        const uploadOptions: Object = {\n            file,\n            folderId: options && options.folderId ? options.folderId : rootFolderId,\n            errorCallback: error => this.handleUploadError(item, error),\n            progressCallback: event => this.handleUploadProgress(item, event),\n            successCallback: entries => this.handleUploadSuccess(item, entries),\n            overwrite,\n            fileId: options && options.fileId ? options.fileId : null,\n        };\n\n        item.status = STATUS_IN_PROGRESS;\n        items[items.indexOf(item)] = item;\n\n        api.upload(uploadOptions);\n\n        this.updateViewAndCollection(items);\n    }\n\n    /**\n     * Helper to resume uploading a single file.\n     *\n     * @param {UploadItem} item - Upload item object\n     * @return {void}\n     */\n    resumeFile(item: UploadItem) {\n        const { overwrite, rootFolderId } = this.props;\n        const { api, file, options } = item;\n        const { items } = this.state;\n\n        const numItemsUploading = items.filter(item_t => item_t.status === STATUS_IN_PROGRESS).length;\n\n        if (numItemsUploading >= UPLOAD_CONCURRENCY) {\n            return;\n        }\n\n        const resumeOptions: Object = {\n            file,\n            folderId: options && options.folderId ? options.folderId : rootFolderId,\n            errorCallback: error => this.handleUploadError(item, error),\n            progressCallback: event => this.handleUploadProgress(item, event),\n            successCallback: entries => this.handleUploadSuccess(item, entries),\n            overwrite,\n            sessionId: api && api.sessionId ? api.sessionId : null,\n            fileId: options && options.fileId ? options.fileId : null,\n        };\n\n        item.status = STATUS_IN_PROGRESS;\n        delete item.error;\n        items[items.indexOf(item)] = item;\n\n        api.resume(resumeOptions);\n\n        this.updateViewAndCollection(items);\n    }\n\n    /**\n     * Helper to reset a file. Cancels any current upload and resets progress.\n     *\n     * @param {UploadItem} item - Upload item to reset\n     * @return {void}\n     */\n    resetFile(item: UploadItem) {\n        const { api, file, options } = item;\n        if (api && typeof api.cancel === 'function') {\n            api.cancel();\n        }\n\n        // Reset API, progress & status\n        item.api = this.getUploadAPI(file, options);\n        item.progress = 0;\n        item.status = STATUS_PENDING;\n        delete item.error;\n\n        const { items } = this.state;\n        items[items.indexOf(item)] = item;\n\n        this.updateViewAndCollection(items);\n    }\n\n    /**\n     * Handles a successful upload.\n     *\n     * @private\n     * @param {UploadItem} item - Upload item corresponding to success event\n     * @param {BoxItem[]} entries - Successfully uploaded Box File objects\n     * @return {void}\n     */\n    handleUploadSuccess = (item: UploadItem, entries?: BoxItem[]) => {\n        const { onUpload, useUploadsManager } = this.props;\n\n        item.progress = 100;\n        if (!item.error) {\n            item.status = STATUS_COMPLETE;\n        }\n\n        // Cache Box File object of successfully uploaded item\n        if (entries && entries.length === 1) {\n            const [boxFile] = entries;\n            item.boxFile = boxFile;\n        }\n\n        const { items } = this.state;\n        items[items.indexOf(item)] = item;\n\n        // Broadcast that a file has been uploaded\n        if (useUploadsManager) {\n            onUpload(item);\n            this.checkClearUploadItems();\n        } else {\n            onUpload(item.boxFile);\n        }\n\n        this.updateViewAndCollection(items, () => {\n            const { view } = this.state;\n            if (view === VIEW_UPLOAD_IN_PROGRESS) {\n                this.upload();\n            }\n        });\n    };\n\n    resetUploadManagerExpandState = () => {\n        this.isAutoExpanded = false;\n        this.setState({\n            isUploadsManagerExpanded: false,\n        });\n    };\n\n    /**\n     * Updates view and internal upload collection with provided items.\n     *\n     * @private\n     * @param {UploadItem[]} item - Items to update collection with\n     * @param {Function} callback\n     * @return {void}\n     */\n    updateViewAndCollection(items: UploadItem[], callback?: Function) {\n        const { onComplete, useUploadsManager }: Props = this.props;\n        const someUploadIsInProgress = items.some(uploadItem => uploadItem.status !== STATUS_COMPLETE);\n        const someUploadHasFailed = items.some(uploadItem => uploadItem.status === STATUS_ERROR);\n        const allItemsArePending = !items.some(uploadItem => uploadItem.status !== STATUS_PENDING);\n        const noFileIsPendingOrInProgress = items.every(\n            uploadItem => uploadItem.status !== STATUS_PENDING && uploadItem.status !== STATUS_IN_PROGRESS,\n        );\n\n        let view = '';\n        if ((items && items.length === 0) || allItemsArePending) {\n            view = VIEW_UPLOAD_EMPTY;\n        } else if (someUploadHasFailed && useUploadsManager) {\n            view = VIEW_ERROR;\n        } else if (someUploadIsInProgress) {\n            view = VIEW_UPLOAD_IN_PROGRESS;\n        } else {\n            view = VIEW_UPLOAD_SUCCESS;\n\n            if (!useUploadsManager) {\n                onComplete(cloneDeep(items.map(item => item.boxFile)));\n                // Reset item collection after successful upload\n                items = [];\n            }\n        }\n\n        if (noFileIsPendingOrInProgress && useUploadsManager) {\n            if (this.isAutoExpanded) {\n                this.resetUploadManagerExpandState();\n            } // Else manually expanded so don't close\n            onComplete(items);\n        }\n\n        const state: Object = {\n            items,\n            view,\n        };\n\n        if (items.length === 0) {\n            state.itemIds = {};\n            state.errorCode = '';\n        }\n\n        this.setState(state, callback);\n    }\n\n    /**\n     * Handles an upload error.\n     *\n     * @private\n     * @param {UploadItem} item - Upload item corresponding to error\n     * @param {Error} error - Upload error\n     * @return {void}\n     */\n    handleUploadError = (item: UploadItem, error: Error) => {\n        const { onError, useUploadsManager } = this.props;\n        const { file } = item;\n        const { items } = this.state;\n\n        item.status = STATUS_ERROR;\n        item.error = error;\n\n        const newItems = [...items];\n        const index = newItems.findIndex(singleItem => singleItem === item);\n        if (index !== -1) {\n            newItems[index] = item;\n        }\n\n        // Broadcast that there was an error uploading a file\n        const errorData = useUploadsManager\n            ? {\n                  item,\n                  error,\n              }\n            : {\n                  file,\n                  error,\n              };\n\n        onError(errorData);\n\n        this.updateViewAndCollection(newItems, () => {\n            if (useUploadsManager) {\n                this.isAutoExpanded = true;\n                this.expandUploadsManager();\n            }\n            const { view } = this.state;\n            if (view === VIEW_UPLOAD_IN_PROGRESS) {\n                this.upload();\n            }\n        });\n    };\n\n    /**\n     * Handles an upload progress event.\n     *\n     * @private\n     * @param {UploadItem} item - Upload item corresponding to progress event\n     * @param {ProgressEvent} event - Progress event\n     * @return {void}\n     */\n    handleUploadProgress = (item: UploadItem, event: any) => {\n        if (!event.total || item.status === STATUS_COMPLETE || item.status === STATUS_STAGED) {\n            return;\n        }\n\n        item.progress = Math.min(Math.round((event.loaded / event.total) * 100), 100);\n        item.status = item.progress === 100 ? STATUS_STAGED : STATUS_IN_PROGRESS;\n\n        const { items } = this.state;\n        items[items.indexOf(item)] = item;\n\n        this.updateViewAndCollection(items);\n    };\n\n    /**\n     * Updates item based on its status.\n     *\n     * @private\n     * @param {UploadItem} item - The upload item to update\n     * @return {void}\n     */\n    onClick = (item: UploadItem) => {\n        const { chunked, isResumableUploadsEnabled } = this.props;\n        const { status, file } = item;\n        const isChunkedUpload = chunked && file.size > CHUNKED_UPLOAD_MIN_SIZE_BYTES && isMultiputSupported();\n        const isResumable = isResumableUploadsEnabled && isChunkedUpload && item.api.sessionId;\n\n        switch (status) {\n            case STATUS_IN_PROGRESS:\n            case STATUS_STAGED:\n            case STATUS_COMPLETE:\n            case STATUS_PENDING:\n                this.removeFileFromUploadQueue(item);\n                break;\n            case STATUS_ERROR:\n                if (isResumable) {\n                    this.resumeFile(item);\n                } else {\n                    this.resetFile(item);\n                    this.uploadFile(item);\n                }\n                break;\n            default:\n                break;\n        }\n    };\n\n    /**\n     * Click action button for all uploads in the Uploads Manager with the given status.\n     *\n     * @private\n     * @param {UploadStatus} - the status that items should have for their action button to be clicked\n     * @return {void}\n     */\n    clickAllWithStatus = (status?: UploadStatus) => {\n        const { items } = this.state;\n\n        items.forEach(item => {\n            if (!status || item.status === status) {\n                this.onClick(item);\n            }\n        });\n    };\n\n    /**\n     * Expands the upload manager\n     *\n     * @return {void}\n     */\n    expandUploadsManager = (): void => {\n        const { useUploadsManager } = this.props;\n\n        if (!useUploadsManager) {\n            return;\n        }\n\n        clearTimeout(this.resetItemsTimeout);\n\n        this.setState({ isUploadsManagerExpanded: true });\n    };\n\n    /**\n     * Minimizes the upload manager\n     *\n     * @return {void}\n     */\n    minimizeUploadsManager = (): void => {\n        const { useUploadsManager, onMinimize } = this.props;\n\n        if (!useUploadsManager || !onMinimize) {\n            return;\n        }\n\n        clearTimeout(this.resetItemsTimeout);\n\n        onMinimize();\n        this.resetUploadManagerExpandState();\n        this.checkClearUploadItems();\n    };\n\n    /**\n     * Checks if the upload items should be cleared after a timeout\n     *\n     * @return {void}\n     */\n    checkClearUploadItems = () => {\n        this.resetItemsTimeout = setTimeout(\n            this.resetUploadsManagerItemsWhenUploadsComplete,\n            HIDE_UPLOAD_MANAGER_DELAY_MS_DEFAULT,\n        );\n    };\n\n    /**\n     * Toggles the upload manager\n     *\n     * @return {void}\n     */\n    toggleUploadsManager = (): void => {\n        const { isUploadsManagerExpanded } = this.state;\n\n        if (isUploadsManagerExpanded) {\n            this.minimizeUploadsManager();\n        } else {\n            this.expandUploadsManager();\n        }\n    };\n\n    /**\n     * Empties the items queue\n     *\n     * @return {void}\n     */\n    resetUploadsManagerItemsWhenUploadsComplete = (): void => {\n        const { view, items, isUploadsManagerExpanded } = this.state;\n        const { useUploadsManager, onCancel } = this.props;\n\n        // Do not reset items when upload manger is expanded or there're uploads in progress\n        if ((isUploadsManagerExpanded && useUploadsManager && !!items.length) || view === VIEW_UPLOAD_IN_PROGRESS) {\n            return;\n        }\n\n        onCancel(items);\n\n        this.setState({\n            items: [],\n            itemIds: {},\n        });\n    };\n\n    /**\n     * Adds file to the upload queue and starts upload immediately\n     *\n     * @param {Array<UploadFileWithAPIOptions | File>} files - Files to be added to upload queue\n     * @return {void}\n     */\n    addFilesWithOptionsToUploadQueueAndStartUpload = (\n        files?: Array<UploadFileWithAPIOptions | File>,\n        dataTransferItems: Array<DataTransferItem | UploadDataTransferItemWithAPIOptions>,\n    ): void => {\n        this.addFilesToUploadQueue(files, this.upload);\n        this.addDataTransferItemsToUploadQueue(dataTransferItems, this.upload);\n    };\n\n    /**\n     * Renders the content uploader\n     *\n     * @inheritdoc\n     * @return {Component}\n     */\n    render() {\n        const {\n            language,\n            messages,\n            onClose,\n            className,\n            measureRef,\n            isTouch,\n            fileLimit,\n            useUploadsManager,\n            isResumableUploadsEnabled,\n            isFolderUploadEnabled,\n            isDraggingItemsToUploadsManager = false,\n        }: Props = this.props;\n        const { view, items, errorCode, isUploadsManagerExpanded }: State = this.state;\n        const isEmpty = items.length === 0;\n        const isVisible = !isEmpty || !!isDraggingItemsToUploadsManager;\n\n        const hasFiles = items.length !== 0;\n        const isLoading = items.some(item => item.status === STATUS_IN_PROGRESS);\n        const isDone = items.every(item => item.status === STATUS_COMPLETE || item.status === STATUS_STAGED);\n\n        const styleClassName = classNames('bcu', className, {\n            'be-app-element': !useUploadsManager,\n            be: !useUploadsManager,\n        });\n\n        return (\n            <Internationalize language={language} messages={messages}>\n                {useUploadsManager ? (\n                    <div ref={measureRef} className={styleClassName} id={this.id}>\n                        <UploadsManager\n                            isDragging={isDraggingItemsToUploadsManager}\n                            isExpanded={isUploadsManagerExpanded}\n                            isResumableUploadsEnabled={isResumableUploadsEnabled}\n                            isVisible={isVisible}\n                            items={items}\n                            onItemActionClick={this.onClick}\n                            onRemoveActionClick={this.removeFileFromUploadQueue}\n                            onUploadsManagerActionClick={this.clickAllWithStatus}\n                            toggleUploadsManager={this.toggleUploadsManager}\n                            view={view}\n                        />\n                    </div>\n                ) : (\n                    <div ref={measureRef} className={styleClassName} id={this.id}>\n                        <DroppableContent\n                            addDataTransferItemsToUploadQueue={this.addDataTransferItemsToUploadQueue}\n                            addFiles={this.addFilesToUploadQueue}\n                            allowedTypes={['Files']}\n                            isFolderUploadEnabled={isFolderUploadEnabled}\n                            isTouch={isTouch}\n                            items={items}\n                            onClick={this.onClick}\n                            view={view}\n                        />\n                        <Footer\n                            errorCode={errorCode}\n                            fileLimit={fileLimit}\n                            hasFiles={hasFiles}\n                            isLoading={isLoading}\n                            onCancel={this.cancel}\n                            onClose={onClose}\n                            onUpload={this.upload}\n                            isDone={isDone}\n                        />\n                    </div>\n                )}\n            </Internationalize>\n        );\n    }\n}\n\nexport default makeResponsive(ContentUploader);\nexport { ContentUploader as ContentUploaderComponent, CHUNKED_UPLOAD_MIN_SIZE_BYTES };\n"],"file":"ContentUploader.js"}