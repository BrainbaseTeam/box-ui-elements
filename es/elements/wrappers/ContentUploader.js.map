{"version":3,"sources":["../../../src/elements/wrappers/ContentUploader.js"],"names":["React","render","ES6Wrapper","ContentUploaderPopup","WrappedContentUploaderComponent","ContentUploader","emit","data","options","modal","rest","UploaderComponent","language","messages","setComponent","id","token","onClose","onComplete","onError","onBeforeUpload","onUpload","container","global","Box"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;AAMA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,MAAM,IAANA,OAAT,QAAuB,WAAvB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,oBAAP,MAAiC,0CAAjC;AACA,OAAOC,+BAAP,MAA4C,qCAA5C;;IAKMC,e;;;;;;;;;;;;;;;;;;8DAMQ,YAAY;AAClB,YAAKC,IAAL,CAAU,OAAV;AACH,K;;iEAQY,UAACC,IAAD,EAA2B;AACpC,YAAKD,IAAL,CAAU,UAAV,EAAsBC,IAAtB;AACH,K;;8DAQS,UAACA,IAAD,EAAqB;AAC3B,YAAKD,IAAL,CAAU,OAAV,EAAmBC,IAAnB;AACH,K;;qEAQgB,UAACA,IAAD,EAAiD;AAC9D,YAAKD,IAAL,CAAU,cAAV,EAA0BC,IAA1B;AACH,K;;+DAQU,UAACA,IAAD,EAAyB;AAChC,YAAKD,IAAL,CAAU,QAAV,EAAoBC,IAApB;AACH,K;;;;;;;;AAED;6BACS;AAAA,0BACgD,KAAKC,OADrD;AAAA,UACGC,KADH,iBACGA,KADH;AAAA,UACaC,IADb;;AAEL,UAAMC,iBAAiB,GAAGF,KAAK,GAAGN,oBAAH,GAA0BC,+BAAzD;;AAEAH,MAAAA,OAAM,CACF,oBAAC,iBAAD;AACI,QAAA,QAAQ,EAAE,KAAKW,QADnB;AAEI,QAAA,QAAQ,EAAE,KAAKC,QAFnB;AAGI,QAAA,YAAY,EAAE,KAAKC,YAHvB;AAII,QAAA,YAAY,EAAE,KAAKC,EAJvB;AAKI,QAAA,KAAK,EAAE,KAAKC,KALhB;AAMI,QAAA,OAAO,EAAE,KAAKC,OANlB;AAOI,QAAA,UAAU,EAAE,KAAKC,UAPrB;AAQI,QAAA,OAAO,EAAE,KAAKC,OARlB;AASI,QAAA,cAAc,EAAE,KAAKC,cATzB;AAUI,QAAA,QAAQ,EAAE,KAAKC,QAVnB;AAWI,QAAA,KAAK,EAAIZ;AAXb,SAYQC,IAZR,EADE,EAeF,KAAKY,SAfH,CAAN;AAiBH;;;;EAxEyBpB,U;;AA2E9BqB,MAAM,CAACC,GAAP,GAAaD,MAAM,CAACC,GAAP,IAAc,EAA3B;AACAD,MAAM,CAACC,GAAP,CAAWnB,eAAX,GAA6BA,eAA7B;AACA,eAAeA,eAAf","sourcesContent":["/**\n * @flow\n * @file Base class for the Content Uploader ES6 wrapper\n * @author Box\n */\n\nimport React from 'react';\nimport { render } from 'react-dom';\nimport ES6Wrapper from './ES6Wrapper';\nimport ContentUploaderPopup from '../content-uploader/ContentUploaderPopup';\nimport WrappedContentUploaderComponent from '../content-uploader/ContentUploader';\nimport type { UploadFileWithAPIOptions } from '../../common/types/upload';\nimport type { BoxItem } from '../../common/types/core';\nimport type { ModalOptions } from '../common/flowTypes';\n\nclass ContentUploader extends ES6Wrapper {\n    /**\n     * Callback on closing uploader. Emits 'close' event.\n     *\n     * @return {void}\n     */\n    onClose = (): void => {\n        this.emit('close');\n    };\n\n    /**\n     * Callback when all files finish uploading. Emits 'complete' event with Box File objects of uploaded items as data.\n     *\n     * @param {Array} data - Completed upload items\n     * @return {void}\n     */\n    onComplete = (data: BoxItem[]): void => {\n        this.emit('complete', data);\n    };\n\n    /**\n     * Callback on a single upload error. Emits 'uploaderror' event with information about the failed upload.\n     *\n     * @param {Object} data - File and error info about failed upload\n     * @return {void}\n     */\n    onError = (data: any): void => {\n        this.emit('error', data);\n    };\n\n    /**\n     * Callback on a single pre-uploaded file. Emits 'beforeupload' event with the Box File object pre-upload.\n     *\n     * @param {Object} data - Upload item\n     * @return {void}\n     */\n    onBeforeUpload = (data: UploadFileWithAPIOptions | File): void => {\n        this.emit('beforeupload', data);\n    };\n\n    /**\n     * Callback on a single successful upload. Emits 'uploadsuccess' event with Box File object of uploaded item.\n     *\n     * @param {BoxItem} data - Successfully uploaded item\n     * @return {void}\n     */\n    onUpload = (data: BoxItem): void => {\n        this.emit('upload', data);\n    };\n\n    /** @inheritdoc */\n    render() {\n        const { modal, ...rest }: { modal?: ModalOptions } = this.options;\n        const UploaderComponent = modal ? ContentUploaderPopup : WrappedContentUploaderComponent;\n\n        render(\n            <UploaderComponent\n                language={this.language}\n                messages={this.messages}\n                componentRef={this.setComponent}\n                rootFolderId={this.id}\n                token={this.token}\n                onClose={this.onClose}\n                onComplete={this.onComplete}\n                onError={this.onError}\n                onBeforeUpload={this.onBeforeUpload}\n                onUpload={this.onUpload}\n                modal={((modal: any): ModalOptions)}\n                {...rest}\n            />,\n            this.container,\n        );\n    }\n}\n\nglobal.Box = global.Box || {};\nglobal.Box.ContentUploader = ContentUploader;\nexport default ContentUploader;\n"],"file":"ContentUploader.js"}