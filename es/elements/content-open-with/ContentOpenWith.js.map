{"version":3,"sources":["../../../src/elements/content-open-with/ContentOpenWith.js"],"names":["React","PureComponent","classNames","uniqueid","noop","FormattedMessage","queryString","Internationalize","messages","withErrorBoundary","API","IntegrationPortalContainer","OpenWithDropdownMenu","BoxToolsInstallMessage","OpenWithButton","OpenWithFallbackButton","ExecuteForm","BOX_EDIT_INTEGRATION_ID","BOX_EDIT_SFC_INTEGRATION_ID","CLIENT_NAME_OPEN_WITH","DEFAULT_HOSTNAME_API","ERROR_CODE_EXECUTE_INTEGRATION","HTTP_GET","HTTP_POST","ORIGIN_OPEN_WITH","TYPE_FILE","TYPE_FOLDER","UNSUPPORTED_INVOCATION_METHOD_TYPE","BLACKLISTED_ERROR_MESSAGE_KEY","BOX_TOOLS_INSTALL_ERROR_MESSAGE_KEY","GENERIC_EXECUTE_MESSAGE_KEY","AUTH_CODE","ContentOpenWith","props","isDropdownOpen","integrations","isLoading","fetchError","executePostData","shouldRenderErrorIntegrationPortal","shouldRenderLoadingIntegrationPortal","boxToolsName","boxToolsInstallUrl","boxEditIntegration","find","appIntegrationId","isBoxEditIntegration","isDisabled","getIntegrationFileExtension","extension","isBoxEditAvailable","canOpenExtensionWithBoxEdit","errorMessageObject","message","formattedErrorMessage","disabledReasons","push","setState","fileId","Promise","resolve","reject","api","getFileAPI","getFileExtension","Error","getBoxEditAPI","checkBoxEditAvailability","catch","getAppForExtension","error","code","onError","displayName","getAppIntegrationsAPI","execute","executeIntegrationSuccessHandler","bind","executeBoxEditErrorHandler","executeIntegrationErrorHandler","windowFeatures","window","screenX","screenY","outerHeight","innerWidth","integrationWindow","open","document","title","onunload","cleanupIntegrationWindow","integrationId","executeData","executeBoxEditSuccessHandler","executeOnlineIntegrationSuccessHandler","onExecute","method","url","location","opener","token","queryParams","parse","authCode","isFileScoped","isBoxEditSFCIntegration","openFile","data","auth_code","token_scope","console","apiHost","clientName","language","requestInterceptor","responseInterceptor","id","state","initialState","destroy","fetchOpenWithData","prevProps","currentFileId","previousFileId","getOpenWithAPI","getOpenWithIntegrations","fetchOpenWithSuccessHandler","fetchErrorHandler","integrationID","Array","isArray","length","intlMessages","dropdownAlignment","className","displayIntegration","getDisplayIntegration","numIntegrations","onIntegrationClick","onExecuteFormSubmit","name","ContentOpenWithComponent"],"mappings":"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","sourcesContent":["/**\n * @flow\n * @file Open With Component\n * @author Box\n */\n\nimport React, { PureComponent } from 'react';\nimport classNames from 'classnames';\nimport uniqueid from 'lodash/uniqueId';\nimport noop from 'lodash/noop';\nimport { FormattedMessage } from 'react-intl';\nimport queryString from 'query-string';\nimport Internationalize from '../common/Internationalize';\nimport messages from '../common/messages';\nimport { withErrorBoundary } from '../common/error-boundary';\nimport API from '../../api';\nimport IntegrationPortalContainer from './IntegrationPortalContainer';\nimport OpenWithDropdownMenu from './OpenWithDropdownMenu';\nimport BoxToolsInstallMessage from './BoxToolsInstallMessage';\nimport OpenWithButton from './OpenWithButton';\nimport OpenWithFallbackButton from './OpenWithFallbackButton';\nimport ExecuteForm from './ExecuteForm';\nimport '../common/base.scss';\nimport './ContentOpenWith.scss';\nimport {\n    BOX_EDIT_INTEGRATION_ID,\n    BOX_EDIT_SFC_INTEGRATION_ID,\n    CLIENT_NAME_OPEN_WITH,\n    DEFAULT_HOSTNAME_API,\n    ERROR_CODE_EXECUTE_INTEGRATION,\n    HTTP_GET,\n    HTTP_POST,\n    ORIGIN_OPEN_WITH,\n    TYPE_FILE,\n    TYPE_FOLDER,\n} from '../../constants';\nimport type { Alignment } from '../common/flowTypes';\nimport type { ExecuteAPI, Integration } from '../../common/types/integrations';\nimport type { StringMap, Token, BoxItem } from '../../common/types/core';\n\nconst UNSUPPORTED_INVOCATION_METHOD_TYPE = 'Integration invocation using this HTTP method type is not supported';\nconst BLACKLISTED_ERROR_MESSAGE_KEY = 'boxToolsBlacklistedError';\nconst BOX_TOOLS_INSTALL_ERROR_MESSAGE_KEY = 'boxToolsInstallErrorMessage';\nconst GENERIC_EXECUTE_MESSAGE_KEY = 'executeIntegrationOpenWithErrorHeader';\nconst AUTH_CODE = 'auth_code';\n\ntype ExternalProps = {\n    show?: boolean,\n};\n\ntype Props = {\n    /** Box API url. */\n    apiHost: string,\n    /** Class name applied to base component. */\n    boxToolsInstallUrl?: string,\n    /** Application client name. */\n    boxToolsName?: string,\n    /** Custom name for Box Tools to display to users */\n    className: string,\n    /** Custom URL to direct users to install Box Tools */\n    clientName: string,\n    /** Determines positioning of menu dropdown */\n    dropdownAlignment: Alignment,\n    /** Box File ID. */\n    fileId: string,\n    /** Language to use for translations. */\n    language?: string,\n    /** Messages to be translated. */\n    messages?: StringMap,\n    /** Callback that executes when an integration attempts to open the given file */\n    onError: Function,\n    /** Callback that executes when an integration invocation fails. The two most common cases being API failures or blocking of a new window */\n    onExecute: Function,\n    /** Axios request interceptor that runs before a network request. */\n    requestInterceptor?: Function,\n    /** Axios response interceptor that runs before a network response is returned. */\n    responseInterceptor?: Function,\n    /** Access token. */\n    token: Token,\n};\n\ntype State = {\n    executePostData: ?Object,\n    fetchError: ?Error,\n    integrations: ?Array<Integration>,\n    isDropdownOpen: boolean,\n    isLoading: boolean,\n    shouldRenderErrorIntegrationPortal: boolean,\n    shouldRenderLoadingIntegrationPortal: boolean,\n};\n\nclass ContentOpenWith extends PureComponent<Props, State> {\n    api: API;\n\n    id: string;\n\n    props: Props;\n\n    state: State;\n\n    window: any;\n\n    integrationWindow: ?any;\n\n    static defaultProps = {\n        apiHost: DEFAULT_HOSTNAME_API,\n        className: '',\n        clientName: CLIENT_NAME_OPEN_WITH,\n        onExecute: noop,\n        onError: noop,\n    };\n\n    initialState: State = {\n        isDropdownOpen: false,\n        integrations: null,\n        isLoading: true,\n        fetchError: null,\n        executePostData: null,\n        shouldRenderErrorIntegrationPortal: false,\n        shouldRenderLoadingIntegrationPortal: false,\n    };\n\n    /**\n     * [constructor]\n     *\n     * @private\n     * @return {ContentOpenWith}\n     */\n    constructor(props: Props) {\n        super(props);\n\n        const { token, apiHost, clientName, language, requestInterceptor, responseInterceptor } = props;\n        this.id = uniqueid('bcow_');\n        this.api = new API({\n            apiHost,\n            clientName,\n            language,\n            requestInterceptor,\n            responseInterceptor,\n            token,\n        });\n\n        // Clone initial state to allow for state reset on new files\n        this.state = { ...this.initialState };\n    }\n\n    /**\n     * Destroys api instances with caches\n     *\n     * @private\n     * @return {void}\n     */\n    clearCache(): void {\n        this.api.destroy(true);\n    }\n\n    /**\n     * Cleanup\n     *\n     * @private\n     * @inheritdoc\n     * @return {void}\n     */\n    componentWillUnmount() {\n        // Don't destroy the cache while unmounting\n        this.api.destroy(false);\n    }\n\n    /**\n     *\n     * @private\n     * @inheritdoc\n     * @return {void}\n     */\n    componentDidMount() {\n        const { fileId }: Props = this.props;\n        if (!fileId) {\n            return;\n        }\n\n        this.window = window;\n\n        this.fetchOpenWithData();\n    }\n\n    /**\n     * After component updates, re-fetch Open With data if appropriate.\n     *\n     * @return {void}\n     */\n    componentDidUpdate(prevProps: Props): void {\n        const { fileId: currentFileId }: Props = this.props;\n        const { fileId: previousFileId }: Props = prevProps;\n\n        if (!currentFileId) {\n            return;\n        }\n\n        if (currentFileId !== previousFileId) {\n            this.setState({ ...this.initialState });\n            this.fetchOpenWithData();\n        }\n    }\n\n    /**\n     * Checks if a given integration is a Box Edit integration.\n     *\n     * @param {string} [integrationId] - The integration ID\n     * @return {boolean}\n     */\n    isBoxEditIntegration(integrationId: ?string): boolean {\n        return integrationId === BOX_EDIT_INTEGRATION_ID || this.isBoxEditSFCIntegration(integrationId);\n    }\n\n    /**\n     * Checks if a given integration is a Box Edit integration.\n     *\n     * @param {string} [integrationId] - The integration ID\n     * @return {boolean}\n     */\n    isBoxEditSFCIntegration(integrationId: ?string): boolean {\n        return integrationId === BOX_EDIT_SFC_INTEGRATION_ID;\n    }\n\n    /**\n     * Fetches Open With data.\n     *\n     * @return {void}\n     */\n    fetchOpenWithData(): void {\n        const { fileId }: Props = this.props;\n        this.api\n            .getOpenWithAPI(false)\n            .getOpenWithIntegrations(fileId, this.fetchOpenWithSuccessHandler, this.fetchErrorHandler);\n    }\n\n    /**\n     * Fetch app integrations info needed to render.\n     *\n     * @param {OpenWithIntegrations} integrations - The available Open With integrations\n     * @return {void}\n     */\n    fetchOpenWithSuccessHandler = async (integrations: Array<Integration>): Promise<any> => {\n        const { boxToolsName, boxToolsInstallUrl } = this.props;\n        const boxEditIntegration = integrations.find(({ appIntegrationId }) =>\n            this.isBoxEditIntegration(appIntegrationId),\n        );\n\n        if (boxEditIntegration && !boxEditIntegration.isDisabled) {\n            try {\n                const { extension } = await this.getIntegrationFileExtension();\n                boxEditIntegration.extension = extension;\n                // If Box Edit is present and enabled, we need to set its ability to locally open the given file\n                // No-op if these checks are successful\n                await this.isBoxEditAvailable();\n                await this.canOpenExtensionWithBoxEdit(boxEditIntegration);\n            } catch (error) {\n                const errorMessageObject = messages[error.message] || messages[GENERIC_EXECUTE_MESSAGE_KEY];\n                let formattedErrorMessage = <FormattedMessage {...errorMessageObject} />;\n                if (error.message === BOX_TOOLS_INSTALL_ERROR_MESSAGE_KEY) {\n                    formattedErrorMessage = (\n                        <BoxToolsInstallMessage boxToolsInstallUrl={boxToolsInstallUrl} boxToolsName={boxToolsName} />\n                    );\n                }\n\n                boxEditIntegration.disabledReasons.push(formattedErrorMessage);\n                boxEditIntegration.isDisabled = true;\n            }\n        }\n\n        this.setState({ integrations, isLoading: false });\n    };\n\n    /**\n     * Fetches the file extension of the current file.\n     *\n     * @return {Promise}\n     */\n    getIntegrationFileExtension = (): Promise<BoxItem> => {\n        const { fileId }: Props = this.props;\n        return new Promise((resolve, reject) => {\n            this.api\n                .getFileAPI()\n                .getFileExtension(fileId, resolve, () => reject(new Error(GENERIC_EXECUTE_MESSAGE_KEY)));\n        });\n    };\n\n    /**\n     * Uses Box Edit to check if Box Tools is installed and reachable\n     *\n     * @return {Promise}\n     */\n    isBoxEditAvailable = (): Promise<any> => {\n        return this.api\n            .getBoxEditAPI()\n            .checkBoxEditAvailability()\n            .catch(() => {\n                throw new Error(BOX_TOOLS_INSTALL_ERROR_MESSAGE_KEY);\n            });\n    };\n\n    /**\n     * Uses Box Edit to check if Box Tools can open a given file type\n     *\n     * @param {String} extension - A file extension\n     * @return {Promise}\n     */\n    canOpenExtensionWithBoxEdit = ({ extension = '' }: Integration): Promise<any> => {\n        return this.api\n            .getBoxEditAPI()\n            .getAppForExtension(extension)\n            .catch(() => {\n                throw new Error(BLACKLISTED_ERROR_MESSAGE_KEY);\n            });\n    };\n\n    /**\n     * Handles a fetch error for the open_with_integrations and app_integrations endpoints\n     *\n     * @param {Error} error - An axios fetch error\n     * @return {void}\n     */\n    fetchErrorHandler = (error: any, code: string): void => {\n        this.props.onError(error, code, { error });\n        this.setState({ fetchError: error, isLoading: false });\n    };\n\n    /**\n     * Click handler when an integration is clicked\n     *\n     * @private\n     * @param {string} appIntegrationId - An app integration ID\n     * @param {string} displayName - The integration's display name\n     * @return {void}\n     */\n    onIntegrationClick = ({ appIntegrationId, displayName }: Integration): void => {\n        const { fileId }: Props = this.props;\n        const isBoxEditIntegration = this.isBoxEditIntegration(appIntegrationId);\n        this.api\n            .getAppIntegrationsAPI(false)\n            .execute(\n                appIntegrationId,\n                fileId,\n                this.executeIntegrationSuccessHandler.bind(this, appIntegrationId),\n                isBoxEditIntegration ? this.executeBoxEditErrorHandler : this.executeIntegrationErrorHandler,\n            );\n\n        if (isBoxEditIntegration) {\n            // No window management is required when using Box Edit.\n            return;\n        }\n\n        // These window features will open the new window directly on top of the current window at the same\n        const windowFeatures = `left=${window.screenX},top=${window.screenY},height=${window.outerHeight},width=${window.innerWidth},toolbar=0`;\n\n        // window.open() is immediately invoked to avoid popup-blockers\n        // The name is included to be the target of a form if the integration is a POST integration.\n        // A uniqueid is used to force the browser to open a new tab every time, while still allowing\n        // a form to reference a given tab.\n        this.integrationWindow = this.window.open('', `${uniqueid(appIntegrationId)}`, windowFeatures);\n        this.integrationWindow.document.title = displayName;\n        this.integrationWindow.onunload = this.cleanupIntegrationWindow;\n\n        this.setState({\n            shouldRenderLoadingIntegrationPortal: true,\n            shouldRenderErrorIntegrationPortal: false,\n        });\n    };\n\n    /**\n     * cleans up the portal UI when a tab is closed so that we can remount the component later.\n     *\n     * @private\n     * @return {void}\n     */\n    cleanupIntegrationWindow = () => {\n        this.setState({\n            shouldRenderLoadingIntegrationPortal: false,\n            shouldRenderErrorIntegrationPortal: false,\n        });\n    };\n\n    /**\n     * Opens the integration in a new tab based on the API data\n     *\n     * @private\n     * @param {string} integrationId - The integration that was executed\n     * @param {ExecuteAPI} executeData - API response on how to open an executed integration\n\n     * @return {void}\n     */\n    executeIntegrationSuccessHandler = (integrationId: string, executeData: ExecuteAPI): void => {\n        if (this.isBoxEditIntegration(integrationId)) {\n            this.executeBoxEditSuccessHandler(integrationId, executeData);\n        } else {\n            this.executeOnlineIntegrationSuccessHandler(executeData);\n        }\n        this.onExecute(integrationId);\n    };\n\n    /**\n     * Opens the file via a Partner Integration\n     *\n     * @private\n     * @param {ExecuteAPI} executeData - API response on how to open an executed integration\n\n     * @return {void}\n     */\n    executeOnlineIntegrationSuccessHandler = (executeData: ExecuteAPI): void => {\n        const { method, url } = executeData;\n        switch (method) {\n            case HTTP_POST:\n                this.setState({ executePostData: executeData });\n                break;\n            case HTTP_GET:\n                if (!this.integrationWindow) {\n                    return;\n                }\n\n                // Prevents abuse of window.opener\n                // see here for more details: https://mathiasbynens.github.io/rel-noopener/\n                this.integrationWindow.location = url;\n                this.integrationWindow.opener = null;\n                break;\n            default:\n                this.executeIntegrationErrorHandler(\n                    Error(UNSUPPORTED_INVOCATION_METHOD_TYPE),\n                    ERROR_CODE_EXECUTE_INTEGRATION,\n                );\n        }\n\n        this.integrationWindow = null;\n    };\n\n    /**\n     * Opens the file via Box Edit\n     *\n     * @private\n     * @param {string} url - Integration execution URL\n\n     * @return {void}\n     */\n    executeBoxEditSuccessHandler = (integrationId: string, { url }: ExecuteAPI): void => {\n        const { fileId, token, onError } = this.props;\n        const queryParams = queryString.parse(url);\n        const authCode = queryParams[AUTH_CODE];\n        const isFileScoped = this.isBoxEditSFCIntegration(integrationId);\n\n        this.api\n            .getBoxEditAPI()\n            .openFile(fileId, {\n                data: {\n                    auth_code: authCode,\n                    token,\n                    token_scope: isFileScoped ? TYPE_FILE : TYPE_FOLDER,\n                },\n            })\n            .catch(error => {\n                onError(error, ERROR_CODE_EXECUTE_INTEGRATION, { error });\n            });\n    };\n\n    /**\n     * Clears state after a form has been submitted\n     *\n     * @private\n     * @return {void}\n     */\n    onExecuteFormSubmit = (): void => {\n        this.setState({ executePostData: null });\n    };\n\n    /**\n     * Calls the onExecute prop\n     *\n     * @private\n     * @param {string} integrationID - The integration that was executed\n     * @return {void}\n     */\n    onExecute(integrationID: string) {\n        this.props.onExecute(integrationID);\n        this.setState({\n            shouldRenderLoadingIntegrationPortal: false,\n        });\n    }\n\n    /**\n     * Handles execution related errors\n     *\n     * @private\n     * @param {Error} error - Error object\n     * @return {void}\n     */\n    executeIntegrationErrorHandler = (error: any, code: string): void => {\n        this.props.onError(error, code, { error });\n        // eslint-disable-next-line no-console\n        console.error(error);\n        this.setState({\n            shouldRenderLoadingIntegrationPortal: false,\n            shouldRenderErrorIntegrationPortal: true,\n        });\n    };\n\n    /**\n     * Handles Box Edit execution related errors\n     *\n     * @private\n     * @param {Error} error - Error object\n     * @return {void}\n     */\n    executeBoxEditErrorHandler = (error: any): void => {\n        this.props.onError(error);\n        // eslint-disable-next-line no-console\n        console.error(error);\n    };\n\n    /**\n     * Gets a display integration, if available, for the Open With button\n     *\n     * @private\n     * @return {?Integration}\n     */\n    getDisplayIntegration(): ?Integration {\n        const { integrations }: State = this.state;\n        // We only consider an integration a display integration if is the only integration in our state\n        return Array.isArray(integrations) && integrations.length === 1 ? integrations[0] : null;\n    }\n\n    /**\n     * Render the Open With element\n     *\n     * @private\n     * @inheritdoc\n     * @return {Element}\n     */\n    render() {\n        const { language, messages: intlMessages, dropdownAlignment }: Props = this.props;\n        const {\n            fetchError,\n            isLoading,\n            integrations,\n            executePostData,\n            shouldRenderLoadingIntegrationPortal,\n            shouldRenderErrorIntegrationPortal,\n        }: State = this.state;\n\n        const className = classNames('be bcow', this.props.className);\n        const displayIntegration = this.getDisplayIntegration();\n        const numIntegrations = integrations ? integrations.length : 0;\n\n        return (\n            <Internationalize language={language} messages={intlMessages}>\n                <div className={className} data-testid=\"bcow-content\" id={this.id}>\n                    {numIntegrations <= 1 ? (\n                        <OpenWithButton\n                            displayIntegration={displayIntegration}\n                            error={fetchError}\n                            isLoading={isLoading}\n                            onClick={this.onIntegrationClick}\n                        />\n                    ) : (\n                        <OpenWithDropdownMenu\n                            dropdownAlignment={dropdownAlignment}\n                            integrations={((integrations: any): Array<Integration>)}\n                            onClick={this.onIntegrationClick}\n                        />\n                    )}\n                    {(shouldRenderLoadingIntegrationPortal || shouldRenderErrorIntegrationPortal) && (\n                        <IntegrationPortalContainer\n                            hasError={shouldRenderErrorIntegrationPortal}\n                            integrationWindow={this.integrationWindow}\n                        />\n                    )}\n                    {executePostData && (\n                        <ExecuteForm\n                            executePostData={executePostData}\n                            id={this.id}\n                            onSubmit={this.onExecuteFormSubmit}\n                            windowName={this.integrationWindow && this.integrationWindow.name}\n                        />\n                    )}\n                </div>\n            </Internationalize>\n        );\n    }\n}\n\nexport type ContentOpenWithProps = Props & ExternalProps;\nexport { ContentOpenWith as ContentOpenWithComponent };\nexport default withErrorBoundary(ORIGIN_OPEN_WITH, OpenWithFallbackButton)(ContentOpenWith);\n"],"file":"ContentOpenWith.js"}