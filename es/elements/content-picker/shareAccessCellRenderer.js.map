{"version":3,"sources":["../../../src/elements/content-picker/shareAccessCellRenderer.js"],"names":["React","getProp","ShareAccessSelect","isRowSelectable","LoadingIndicator","onChange","canSetShareAccess","selectableType","extensionsWhitelist","hasHitSelectionLimit","rowData","itemCanSetShareAccess","selected","allowed_shared_link_access_levels","isLoading"],"mappings":"AAAA;;;;;AAMA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,OAAP,MAAoB,YAApB;AACA,OAAOC,iBAAP,MAA8B,+BAA9B;AACA,OAAOC,eAAP,MAA4B,sBAA5B;AACA,OAAOC,gBAAP,MAA6B,oCAA7B;AAGA,gBAAe,UACXC,QADW,EAEXC,iBAFW,EAGXC,cAHW,EAIXC,mBAJW,EAKXC,oBALW;AAAA,SAMV,gBAAuC;AAAA,QAApCC,OAAoC,QAApCA,OAAoC;AACxC,QAAMC,qBAAqB,GAAGV,OAAO,CAACS,OAAD,EAAU,kCAAV,EAA8C,KAA9C,CAArC;;AAEA,QACI,CAACJ,iBAAD,IACA,CAACK,qBADD,IAEA,CAACR,eAAe,CAACI,cAAD,EAAiBC,mBAAjB,EAAsCC,oBAAtC,EAA4DC,OAA5D,CAFhB,IAGA,CAACA,OAAO,CAACE,QAJb,EAKE;AACE,aAAO,iCAAP;AACH;;AAVuC,QAYhCC,iCAZgC,GAYMH,OAZN,CAYhCG,iCAZgC;AAaxC,QAAMC,SAAS,GAAG,CAACD,iCAAnB;AAEA,WAAOC,SAAS,GACZ,oBAAC,gBAAD;AAAkB,MAAA,SAAS,EAAC;AAA5B,MADY,GAGZ,oBAAC,iBAAD;AACI,MAAA,iBAAiB,EAAER,iBADvB;AAEI,MAAA,SAAS,EAAC,0BAFd;AAGI,MAAA,IAAI,EAAEI,OAHV;AAII,MAAA,QAAQ,EAAEL;AAJd,MAHJ;AAUH,GA/Bc;AAAA,CAAf","sourcesContent":["/**\n * @flow\n * @file Function to render the share access table cell\n * @author Box\n */\n\nimport React from 'react';\nimport getProp from 'lodash/get';\nimport ShareAccessSelect from '../common/share-access-select';\nimport isRowSelectable from './cellRendererHelper';\nimport LoadingIndicator from '../../components/loading-indicator';\nimport type { BoxItem } from '../../common/types/core';\n\nexport default (\n    onChange: Function,\n    canSetShareAccess: boolean,\n    selectableType: string,\n    extensionsWhitelist: string[],\n    hasHitSelectionLimit: boolean,\n) => ({ rowData }: { rowData: BoxItem }) => {\n    const itemCanSetShareAccess = getProp(rowData, 'permissions.can_set_share_access', false);\n\n    if (\n        !canSetShareAccess ||\n        !itemCanSetShareAccess ||\n        !isRowSelectable(selectableType, extensionsWhitelist, hasHitSelectionLimit, rowData) ||\n        !rowData.selected\n    ) {\n        return <span />;\n    }\n\n    const { allowed_shared_link_access_levels } = rowData;\n    const isLoading = !allowed_shared_link_access_levels;\n\n    return isLoading ? (\n        <LoadingIndicator className=\"bcp-share-access-loading\" />\n    ) : (\n        <ShareAccessSelect\n            canSetShareAccess={canSetShareAccess}\n            className=\"bcp-shared-access-select\"\n            item={rowData}\n            onChange={onChange}\n        />\n    );\n};\n"],"file":"shareAccessCellRenderer.js"}