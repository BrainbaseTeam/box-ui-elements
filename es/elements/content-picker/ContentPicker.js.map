{"version":3,"sources":["../../../src/elements/content-picker/ContentPicker.js"],"names":["React","Component","classNames","debounce","getProp","uniqueid","noop","Header","SubHeader","UploadDialog","CreateFolderDialog","Internationalize","makeResponsive","Pagination","isFocusableElement","isInputElement","focus","API","Content","Footer","CLIENT_NAME_CONTENT_PICKER","DEFAULT_HOSTNAME_API","DEFAULT_HOSTNAME_UPLOAD","DEFAULT_PAGE_NUMBER","DEFAULT_PAGE_SIZE","DEFAULT_ROOT","DEFAULT_SEARCH_DEBOUNCE","DEFAULT_VIEW_FILES","DEFAULT_VIEW_RECENTS","ERROR_CODE_ITEM_NAME_IN_USE","ERROR_CODE_ITEM_NAME_INVALID","ERROR_CODE_ITEM_NAME_TOO_LONG","FIELD_NAME","FIELD_SHARED_LINK","SORT_ASC","TYPE_FILE","TYPE_FOLDER","TYPE_WEBLINK","TYPED_ID_FOLDER_PREFIX","VIEW_ERROR","VIEW_FOLDER","VIEW_RECENTS","VIEW_SEARCH","VIEW_SELECTED","FILE_SHARED_LINK_FIELDS_TO_FETCH","defaultType","ContentPicker","props","selected","state","onChoose","results","Object","keys","map","key","clone","onCancel","forEach","setState","id","currentCollection","view","searchQuery","fetchFolder","showRecents","search","showSelected","Error","error","code","console","item","type","triggerNavigationEvent","rootFolderId","currentId","currentOffset","limit","currentPageSize","sortBy","sortDirection","folderId","hasFolderChanged","hasSearchQuery","trim","length","offset","firstLoad","rootElement","currentUnloadedCollection","api","getFolderAPI","getFolder","collection","fetchFolderSuccessCallback","errorCallback","forceFetch","percentLoaded","items","getCache","get","finishNavigation","query","getSearchAPI","searchSuccessCallback","trimmedQuery","debouncedSearch","cancel","permissions","canUpload","canUploadPermission","can_upload","isUploadModalOpen","createFolderCallback","name","isCreateFolderModalOpen","canCreateNewFolder","errorCode","isLoading","create","status","response","forceSharedLink","canSetShareAccess","selectableType","maxSelectable","indexOf","selectedKeys","selectedCount","hasHitSelectionLimit","isSingleFileSelection","cacheKey","getAPI","getCacheKey","existing","existingFromCache","existInSelected","itemCanSetShareAccess","prior","fetchSharedLinkInfo","focusedRow","findIndex","i","getFolderFields","handleSharedLinkSuccess","fields","getFileAPI","getFile","getWebLinkAPI","getWeblink","changeShareAccess","updateItemInCollection","select","access","can_set_share_access","share","updatedItem","newState","collectionItem","refreshCollection","table","event","target","toLowerCase","preventDefault","globalModifier","choose","upload","createFolder","newOffset","apiHost","clientName","initialPage","initialPageSize","language","requestInterceptor","responseInterceptor","sharedLink","sharedLinkPassword","token","uploadHost","rootName","destroy","clearCache","defaultView","currentFolderId","document","getElementById","appElement","firstElementChild","prevState","prevFolderId","autoFocus","activeElement","closeModals","getRecentsAPI","recents","recentsSuccessCallback","messages","logoUrl","extensions","isSmall","className","measureRef","chooseButtonLabel","cancelButtonLabel","totalCount","isSingleSelect","allowUpload","allowCreate","styleClassName","onKeyDown","sort","tableRef","onItemClick","onFocusChange","paginate","uploadSuccessHandler","Infinity","ContentPickerComponent"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;AAMA,OAAO,6BAAP;AACA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,OAAOC,QAAP,MAAqB,iBAArB;AACA,OAAOC,OAAP,MAAoB,YAApB;AACA,OAAOC,QAAP,MAAqB,iBAArB;AACA,OAAOC,IAAP,MAAiB,aAAjB;AACA,OAAOC,MAAP,MAAmB,kBAAnB;AACA,OAAOC,SAAP,MAAsB,gCAAtB;AACA,OAAOC,YAAP,MAAyB,yBAAzB;AACA,OAAOC,kBAAP,MAA+B,gCAA/B;AACA,OAAOC,gBAAP,MAA6B,4BAA7B;AACA,OAAOC,cAAP,MAA2B,0BAA3B;AACA,OAAOC,UAAP,MAAuB,iCAAvB;AACA,SAASC,kBAAT,EAA6BC,cAA7B,EAA6CC,KAA7C,QAA0D,iBAA1D;AACA,OAAOC,GAAP,MAAgB,WAAhB;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,SACIC,0BADJ,EAEIC,oBAFJ,EAGIC,uBAHJ,EAIIC,mBAJJ,EAKIC,iBALJ,EAMIC,YANJ,EAOIC,uBAPJ,EAQIC,kBARJ,EASIC,oBATJ,EAUIC,2BAVJ,EAWIC,4BAXJ,EAYIC,6BAZJ,EAaIC,UAbJ,EAcIC,iBAdJ,EAeIC,QAfJ,EAgBIC,SAhBJ,EAiBIC,WAjBJ,EAkBIC,YAlBJ,EAmBIC,sBAnBJ,EAoBIC,UApBJ,EAqBIC,WArBJ,EAsBIC,YAtBJ,EAuBIC,WAvBJ,EAwBIC,aAxBJ,QAyBO,iBAzBP;AA0BA,SAASC,gCAAT,QAAiD,oBAAjD;AACA,OAAO,sBAAP;AACA,OAAO,qBAAP;AACA,OAAO,sBAAP;AACA,OAAO,sBAAP;AAwDA,IAAMC,WAAW,aAAMV,SAAN,cAAmBE,YAAnB,CAAjB;;IAEMS,a;;;;;AAiByB;;AAwB3B;;;;;;AAMA,yBAAYC,KAAZ,EAA0B;AAAA;;AAAA;;AACtB,8BAAMA,KAAN;;AADsB,gEA9BL,IA8BK;;AAAA,6DA+HjB,YAAY;AAAA,UACTC,QADS,GACW,MAAKC,KADhB,CACTD,QADS;AAAA,UAETE,QAFS,GAEW,MAAKH,KAFhB,CAETG,QAFS;AAGjB,UAAMC,OAAkB,GAAGC,MAAM,CAACC,IAAP,CAAYL,QAAZ,EAAsBM,GAAtB,CAA0B,UAAAC,GAAG,EAAI;AACxD,YAAMC,KAAc,qBAAQR,QAAQ,CAACO,GAAD,CAAhB,CAApB;;AACA,eAAOC,KAAK,CAACR,QAAb;AACA,eAAOQ,KAAP;AACH,OAJ0B,CAA3B;AAKAN,MAAAA,QAAQ,CAACC,OAAD,CAAR;AACH,KAxIyB;;AAAA,6DAiJjB,YAAY;AAAA,UACTM,QADS,GACW,MAAKV,KADhB,CACTU,QADS;AAAA,UAETT,QAFS,GAEW,MAAKC,KAFhB,CAETD,QAFS,EAIjB;;AACAI,MAAAA,MAAM,CAACC,IAAP,CAAYL,QAAZ,EAAsBU,OAAtB,CAA8B,UAAAH,GAAG;AAAA,eAAI,OAAOP,QAAQ,CAACO,GAAD,CAAR,CAAcP,QAAzB;AAAA,OAAjC,EALiB,CAOjB;;AACA,YAAKW,QAAL,CAAc;AAAEX,QAAAA,QAAQ,EAAE;AAAZ,OAAd,EAAgC;AAAA,eAAMS,QAAQ,EAAd;AAAA,OAAhC;AACH,KA1JyB;;AAAA,wEAkLN,YAAY;AAAA,wBAKjB,MAAKR,KALY;AAAA,UAEHW,EAFG,eAExBC,iBAFwB,CAEHD,EAFG;AAAA,UAGxBE,IAHwB,eAGxBA,IAHwB;AAAA,UAIxBC,WAJwB,eAIxBA,WAJwB;;AAM5B,UAAID,IAAI,KAAKtB,WAAT,IAAwBoB,EAA5B,EAAgC;AAC5B,cAAKI,WAAL,CAAiBJ,EAAjB,EAAqB,KAArB;AACH,OAFD,MAEO,IAAIE,IAAI,KAAKrB,YAAb,EAA2B;AAC9B,cAAKwB,WAAL,CAAiB,KAAjB;AACH,OAFM,MAEA,IAAIH,IAAI,KAAKpB,WAAT,IAAwBqB,WAA5B,EAAyC;AAC5C,cAAKG,MAAL,CAAYH,WAAZ;AACH,OAFM,MAEA,IAAID,IAAI,KAAKnB,aAAb,EAA4B;AAC/B,cAAKwB,YAAL;AACH,OAFM,MAEA;AACH,cAAM,IAAIC,KAAJ,CAAU,mCAAV,CAAN;AACH;AACJ,KAnMyB;;AAAA,oEA4MV,UAACC,KAAD,EAA0BC,IAA1B,EAAiD;AAC7D,YAAKX,QAAL,CAAc;AAAEG,QAAAA,IAAI,EAAEvB;AAAR,OAAd;AACA;;;AACAgC,MAAAA,OAAO,CAACF,KAAR,CAAcA,KAAd,EAAqBC,IAArB;AACA;AACH,KAjNyB;;AAAA,kEA0NZ,UAACE,IAAD,EAAkC;AAC5C;AACA,UAAI,OAAOA,IAAP,KAAgB,QAApB,EAA8B;AAC1B,cAAKR,WAAL,CAAiBQ,IAAjB;;AACA;AACH,OAL2C,CAO5C;;;AAP4C,UAQpCZ,EARoC,GAQdY,IARc,CAQpCZ,EARoC;AAAA,UAQhCa,IARgC,GAQdD,IARc,CAQhCC,IARgC;;AAS5C,UAAIA,IAAI,KAAKrC,WAAb,EAA0B;AACtB,cAAK4B,WAAL,CAAiBJ,EAAjB;AACH;AACJ,KAtOyB;;AAAA,kEAwSZ,UAACA,EAAD,EAAgE;AAAA,UAAlDc,sBAAkD,uEAAf,IAAe;AAAA,UAClEC,YADkE,GAC1C,MAAK5B,KADqC,CAClE4B,YADkE;AAAA,yBAS/D,MAAK1B,KAT0D;AAAA,UAG7C2B,SAH6C,gBAGtEf,iBAHsE,CAGjDD,EAHiD;AAAA,UAItEiB,aAJsE,gBAItEA,aAJsE;AAAA,UAKrDC,KALqD,gBAKtEC,eALsE;AAAA,+CAMtEhB,WANsE;AAAA,UAMtEA,WANsE,sCAMxD,EANwD;AAAA,UAOtEiB,MAPsE,gBAOtEA,MAPsE;AAAA,UAQtEC,aARsE,gBAQtEA,aARsE;AAU1E,UAAMC,QAAgB,GAAG,OAAOtB,EAAP,KAAc,QAAd,GAAyBA,EAAzB,GAA8Be,YAAvD;AACA,UAAMQ,gBAAgB,GAAGP,SAAS,IAAIA,SAAS,KAAKM,QAApD;AACA,UAAME,cAAc,GAAG,CAAC,CAACrB,WAAW,CAACsB,IAAZ,GAAmBC,MAA5C;AACA,UAAMC,MAAM,GAAGJ,gBAAgB,IAAIC,cAApB,GAAqC,CAArC,GAAyCP,aAAxD,CAb0E,CAaH;AAEvE;AACA;AACA;AACA;;AACA,UAAI,CAAC,MAAKW,SAAV,EAAqB;AACjB,cAAKC,WAAL,CAAiBzE,KAAjB;AACH,OArByE,CAuB1E;;;AACA,YAAK2C,QAAL,CAAc;AACVI,QAAAA,WAAW,EAAE,EADH;AAEVD,QAAAA,IAAI,EAAEtB,WAFI;AAGVqB,QAAAA,iBAAiB,EAAE,MAAK6B,yBAAL,EAHT;AAIVb,QAAAA,aAAa,EAAEU;AAJL,OAAd,EAxB0E,CA+B1E;;;AACA,YAAKI,GAAL,CAASC,YAAT,GAAwBC,SAAxB,CACIX,QADJ,EAEIJ,KAFJ,EAGIS,MAHJ,EAIIP,MAJJ,EAKIC,aALJ,EAMI,UAACa,UAAD,EAA4B;AACxB,cAAKC,0BAAL,CAAgCD,UAAhC,EAA4CpB,sBAA5C;AACH,OARL,EASI,MAAKsB,aATT,EAUI;AAAEC,QAAAA,UAAU,EAAE;AAAd,OAVJ;AAYH,KApVyB;;AAAA,mEA4YX,YAAY;AAAA,yBAC4B,MAAKhD,KADjC;AAAA,UACfD,QADe,gBACfA,QADe;AAAA,UACLgC,MADK,gBACLA,MADK;AAAA,UACGC,aADH,gBACGA,aADH;;AAEvB,YAAKtB,QAAL,CACI;AACII,QAAAA,WAAW,EAAE,EADjB;AAEID,QAAAA,IAAI,EAAEnB,aAFV;AAGIkB,QAAAA,iBAAiB,EAAE;AACfmB,UAAAA,MAAM,EAANA,MADe;AAEfC,UAAAA,aAAa,EAAbA,aAFe;AAGfiB,UAAAA,aAAa,EAAE,GAHA;AAIfC,UAAAA,KAAK,EAAE/C,MAAM,CAACC,IAAP,CAAYL,QAAZ,EAAsBM,GAAtB,CAA0B,UAAAC,GAAG;AAAA,mBAAI,MAAKoC,GAAL,CAASS,QAAT,GAAoBC,GAApB,CAAwB9C,GAAxB,CAAJ;AAAA,WAA7B;AAJQ;AAHvB,OADJ,EAWI,MAAK+C,gBAXT;AAaH,KA3ZyB;;AAAA,4EAoaF,UAACR,UAAD,EAAkC;AAAA,UAC9CjC,iBAD8C,GACjB,MAAKZ,KADY,CAC9CY,iBAD8C;;AAEtD,YAAKF,QAAL,CAAc;AACVE,QAAAA,iBAAiB,EAAE,SAAcA,iBAAd,EAAiCiC,UAAjC;AADT,OAAd;AAGH,KAzayB;;AAAA,sEAobE3F,QAAQ,CAAC,UAACyD,EAAD,EAAa2C,KAAb,EAAqC;AAAA,yBACpB,MAAKtD,KADe;AAAA,UAC9D4B,aAD8D,gBAC9DA,aAD8D;AAAA,UAC/CE,eAD+C,gBAC/CA,eAD+C;;AAGtE,YAAKY,GAAL,CACKa,YADL,GAEKtC,MAFL,CAEYN,EAFZ,EAEgB2C,KAFhB,EAEuBxB,eAFvB,EAEwCF,aAFxC,EAEuD,MAAK4B,qBAF5D,EAEmF,MAAKT,aAFxF,EAEuG;AAC/FC,QAAAA,UAAU,EAAE;AADmF,OAFvG;AAKH,KARmC,EAQjCvE,uBARiC,CApbV;;AAAA,6DAqcjB,UAAC6E,KAAD,EAAyB;AAAA,UACtB5B,YADsB,GACE,MAAK5B,KADP,CACtB4B,YADsB;AAAA,yBAMnB,MAAK1B,KANc;AAAA,UAGLW,EAHK,gBAG1BC,iBAH0B,CAGLD,EAHK;AAAA,UAI1BiB,aAJ0B,gBAI1BA,aAJ0B;AAAA,UAK1Bd,WAL0B,gBAK1BA,WAL0B;AAO9B,UAAMmB,QAAQ,GAAG,OAAOtB,EAAP,KAAc,QAAd,GAAyBA,EAAzB,GAA8Be,YAA/C;AACA,UAAM+B,YAAoB,GAAGH,KAAK,CAAClB,IAAN,EAA7B;;AAEA,UAAI,CAACkB,KAAL,EAAY;AACR;AACA,cAAKI,eAAL,CAAqBC,MAArB,GAFQ,CAIR;AACA;;;AACA,cAAKjD,QAAL,CAAc;AAAEkB,UAAAA,aAAa,EAAE;AAAjB,SAAd,EAAoC,YAAM;AACtC,gBAAKb,WAAL,CAAiBkB,QAAjB,EAA2B,KAA3B;AACH,SAFD;;AAIA;AACH;;AAED,UAAI,CAACwB,YAAL,EAAmB;AACf;AACA;AACA,cAAK/C,QAAL,CAAc;AACVI,UAAAA,WAAW,EAAEwC;AADH,SAAd;;AAGA;AACH;;AAED,YAAK5C,QAAL,CAAc;AACVI,QAAAA,WAAW,EAAEwC,KADH;AAEVzC,QAAAA,IAAI,EAAEpB,WAFI;AAGVmB,QAAAA,iBAAiB,EAAE,MAAK6B,yBAAL,EAHT;AAIVb,QAAAA,aAAa,EAAE6B,YAAY,KAAK3C,WAAjB,GAA+Bc,aAA/B,GAA+C;AAJpD,OAAd;;AAOA,YAAK8B,eAAL,CAAqBzB,QAArB,EAA+BqB,KAA/B;AACH,KA7eyB;;AAAA,6DAsfjB,YAAY;AAAA,kCAGN,MAAKtD,KAHC,CAEbY,iBAFa;AAAA,UAEQD,EAFR,yBAEQA,EAFR;AAAA,UAEYiD,WAFZ,yBAEYA,WAFZ;AAAA,UAITC,SAJS,GAIY,MAAK/D,KAJjB,CAIT+D,SAJS;;AAKjB,UAAI,CAAClD,EAAD,IAAO,CAACiD,WAAZ,EAAyB;AACrB;AACH;;AAPgB,UASGE,mBATH,GAS8CF,WAT9C,CASTG,UATS;;AAUjB,UAAI,CAACF,SAAD,IAAc,CAACC,mBAAnB,EAAwC;AACpC;AACH;;AAED,YAAKpD,QAAL,CAAc;AAAEsD,QAAAA,iBAAiB,EAAE;AAArB,OAAd;AACH,KArgByB;;AAAA,2EA8gBH,YAAY;AAAA,UAENrD,EAFM,GAGpB,MAAKX,KAHe,CAE3BY,iBAF2B,CAEND,EAFM;;AAI/B,YAAKI,WAAL,CAAiBJ,EAAjB,EAAqB,KAArB;AACH,KAnhByB;;AAAA,mEA2hBX,YAAY;AACvB,YAAKsD,oBAAL;AACH,KA7hByB;;AAAA,2EAsiBH,UAACC,IAAD,EAAyB;AAAA,yBACkB,MAAKlE,KADvB;AAAA,UACpCmE,uBADoC,gBACpCA,uBADoC;AAAA,UACXvD,iBADW,gBACXA,iBADW;AAAA,UAEpCwD,kBAFoC,GAEN,MAAKtE,KAFC,CAEpCsE,kBAFoC;;AAG5C,UAAI,CAACA,kBAAL,EAAyB;AACrB;AACH;;AAL2C,UAOpCzD,EAPoC,GAOJC,iBAPI,CAOpCD,EAPoC;AAAA,UAOhCiD,WAPgC,GAOJhD,iBAPI,CAOhCgD,WAPgC;;AAQ5C,UAAI,CAACjD,EAAD,IAAO,CAACiD,WAAZ,EAAyB;AACrB;AACH;;AAV2C,UAYpCG,UAZoC,GAYFH,WAZE,CAYpCG,UAZoC;;AAa5C,UAAI,CAACA,UAAL,EAAiB;AACb;AACH;;AAED,UAAI,CAACI,uBAAD,IAA4B,CAACD,IAAjC,EAAuC;AACnC,cAAKxD,QAAL,CAAc;AAAEyD,UAAAA,uBAAuB,EAAE,IAA3B;AAAiCE,UAAAA,SAAS,EAAE;AAA5C,SAAd;;AACA;AACH;;AAED,UAAI,CAACH,IAAL,EAAW;AACP,cAAKxD,QAAL,CAAc;AACV2D,UAAAA,SAAS,EAAExF,4BADD;AAEVyF,UAAAA,SAAS,EAAE;AAFD,SAAd;;AAIA;AACH;;AAED,UAAIJ,IAAI,CAAC7B,MAAL,GAAc,GAAlB,EAAuB;AACnB,cAAK3B,QAAL,CAAc;AACV2D,UAAAA,SAAS,EAAEvF,6BADD;AAEVwF,UAAAA,SAAS,EAAE;AAFD,SAAd;;AAIA;AACH;;AAED,YAAK5D,QAAL,CAAc;AAAE4D,QAAAA,SAAS,EAAE;AAAb,OAAd;;AACA,YAAK5B,GAAL,CAASC,YAAT,GAAwB4B,MAAxB,CACI5D,EADJ,EAEIuD,IAFJ,EAGI,YAAM;AACF,cAAKnD,WAAL,CAAiBJ,EAAjB;AACH,OALL,EAMI,gBAA8B;AAAA,YAAf6D,MAAe,QAA3BC,QAA2B,CAAfD,MAAe;;AAC1B,cAAK9D,QAAL,CAAc;AACV2D,UAAAA,SAAS,EAAEG,MAAM,KAAK,GAAX,GAAiB5F,2BAAjB,GAA+CC,4BADhD;AAEVyF,UAAAA,SAAS,EAAE;AAFD,SAAd;AAIH,OAXL;AAaH,KA1lByB;;AAAA,6DAomBjB,UAAC/C,IAAD,EAAwE;AAAA,sFAAb,EAAa;AAAA,wCAAtDmD,eAAsD;AAAA,UAAtDA,eAAsD,sCAApC,IAAoC;;AAAA,wBACH,MAAK5E,KADF;AAAA,UACrE6E,iBADqE,eACrEA,iBADqE;AAAA,UAC5CC,cAD4C,eAClDpD,IADkD;AAAA,UAC5BqD,aAD4B,eAC5BA,aAD4B;AAAA,yBAMlE,MAAK7E,KAN6D;AAAA,UAGzEa,IAHyE,gBAGzEA,IAHyE;AAAA,UAIzEd,QAJyE,gBAIzEA,QAJyE;AAAA,+CAKzEa,iBALyE,CAKpDsC,KALoD;AAAA,UAKpDA,KALoD,sCAK5C,EAL4C;AAAA,UAOrEvC,EAPqE,GAO/CY,IAP+C,CAOrEZ,EAPqE;AAAA,UAOjEa,IAPiE,GAO/CD,IAP+C,CAOjEC,IAPiE;;AAS7E,UAAI,CAACb,EAAD,IAAO,CAACa,IAAR,IAAgBoD,cAAc,CAACE,OAAf,CAAuBtD,IAAvB,MAAiC,CAAC,CAAtD,EAAyD;AACrD;AACH;;AAED,UAAMuD,YAA2B,GAAG5E,MAAM,CAACC,IAAP,CAAYL,QAAZ,CAApC;AACA,UAAMiF,aAAqB,GAAGD,YAAY,CAAC1C,MAA3C;AACA,UAAM4C,oBAA6B,GAAGD,aAAa,KAAKH,aAAxD;AACA,UAAMK,qBAA8B,GAAGL,aAAa,KAAK,CAAzD;;AACA,UAAMM,QAAgB,GAAG,MAAKzC,GAAL,CAAS0C,MAAT,CAAgB5D,IAAhB,EAAsB6D,WAAtB,CAAkC1E,EAAlC,CAAzB;;AACA,UAAM2E,QAAiB,GAAGvF,QAAQ,CAACoF,QAAD,CAAlC;;AACA,UAAMI,iBAA0B,GAAG,MAAK7C,GAAL,CAASS,QAAT,GAAoBC,GAApB,CAAwB+B,QAAxB,CAAnC;;AACA,UAAMK,eAAe,GAAGT,YAAY,CAACD,OAAb,CAAqBK,QAArB,MAAmC,CAAC,CAA5D;AACA,UAAMM,qBAAqB,GAAGtI,OAAO,CAACoE,IAAD,EAAO,kCAAP,EAA2C,KAA3C,CAArC,CArB6E,CAuB7E;AACA;;AACA,UAAI+D,QAAQ,IAAIA,QAAQ,KAAKC,iBAA7B,EAAgD;AAC5C;AACA;AACA,eAAOD,QAAQ,CAACvF,QAAhB;AACA,eAAOA,QAAQ,CAACoF,QAAD,CAAf;AACH,OALD,MAKO;AACH;AACA;AACA;AACA;AAEA;AACA;AACA;AACA,YAAIF,oBAAoB,IAAI,CAACC,qBAAzB,IAAkD,CAACM,eAAvD,EAAwE;AACpE;AACH,SAXE,CAaH;;;AACA,YAAIR,aAAa,GAAG,CAAhB,IAAqBE,qBAAzB,EAAgD;AAC5C,cAAMQ,KAAK,GAAGX,YAAY,CAAC,CAAD,CAA1B,CAD4C,CACb;;AAC/B,iBAAOhF,QAAQ,CAAC2F,KAAD,CAAR,CAAgB3F,QAAvB;AACA,iBAAOA,QAAQ,CAAC2F,KAAD,CAAf;AACH,SAlBE,CAoBH;;;AACAnE,QAAAA,IAAI,CAACxB,QAAL,GAAgB,IAAhB;AACAA,QAAAA,QAAQ,CAACoF,QAAD,CAAR,GAAqB5D,IAArB,CAtBG,CAwBH;AACA;AACA;;AACA,YAAIoD,iBAAiB,IAAIc,qBAArB,IAA8Cf,eAAlD,EAAmE;AAC/D,gBAAKiB,mBAAL,CAAyBpE,IAAzB;AACH;AACJ;;AAED,UAAMqE,UAAU,GAAG1C,KAAK,CAAC2C,SAAN,CAAgB,UAACC,CAAD;AAAA,eAAgBA,CAAC,CAACnF,EAAF,KAASY,IAAI,CAACZ,EAA9B;AAAA,OAAhB,CAAnB;;AACA,YAAKD,QAAL,CAAc;AAAEX,QAAAA,QAAQ,EAARA,QAAF;AAAY6F,QAAAA,UAAU,EAAVA;AAAZ,OAAd,EAAwC,YAAM;AAC1C,YAAI/E,IAAI,KAAKnB,aAAb,EAA4B;AACxB;AACA,gBAAKwB,YAAL;AACH;AACJ,OALD;AAMH,KAzqByB;;AAAA,0EAgrBJ,UAACK,IAAD,EAAyB;AAAA,UACnCZ,EADmC,GACbY,IADa,CACnCZ,EADmC;AAAA,UAC/Ba,IAD+B,GACbD,IADa,CAC/BC,IAD+B;;AAG3C,cAAQA,IAAR;AACI,aAAKrC,WAAL;AACI,gBAAKuD,GAAL,CAASC,YAAT,GAAwBoD,eAAxB,CAAwCpF,EAAxC,EAA4C,MAAKqF,uBAAjD,EAA0E3I,IAA1E,EAAgF;AAC5E4I,YAAAA,MAAM,EAAEtG;AADoE,WAAhF;;AAGA;;AACJ,aAAKT,SAAL;AACI,gBAAKwD,GAAL,CACKwD,UADL,GAEKC,OAFL,CAEaxF,EAFb,EAEiB,MAAKqF,uBAFtB,EAE+C3I,IAF/C,EAEqD;AAAE4I,YAAAA,MAAM,EAAEtG;AAAV,WAFrD;;AAGA;;AACJ,aAAKP,YAAL;AACI,gBAAKsD,GAAL,CACK0D,aADL,GAEKC,UAFL,CAEgB1F,EAFhB,EAEoB,MAAKqF,uBAFzB,EAEkD3I,IAFlD,EAEwD;AAAE4I,YAAAA,MAAM,EAAEtG;AAAV,WAFxD;;AAGA;;AACJ;AACI,gBAAM,IAAIwB,KAAJ,CAAU,cAAV,CAAN;AAjBR;AAmBH,KAtsByB;;AAAA,8EA+sBA,UAACI,IAAD,EAAmB;AACzC;AACA,UAAI,CAACA,IAAI,CAACvC,iBAAD,CAAT,EAA8B;AAC1B,cAAKsH,iBAAL,CAAuB,IAAvB,EAA6B/E,IAA7B;AACH,OAFD,MAEO;AAAA,YACKxB,QADL,GACkB,MAAKC,KADvB,CACKD,QADL;AAAA,YAEKY,EAFL,GAEkBY,IAFlB,CAEKZ,EAFL;AAAA,YAESa,IAFT,GAEkBD,IAFlB,CAESC,IAFT;;AAGH,YAAM2D,QAAQ,GAAG,MAAKzC,GAAL,CAAS0C,MAAT,CAAgB5D,IAAhB,EAAsB6D,WAAtB,CAAkC1E,EAAlC,CAAjB,CAHG,CAIH;;;AACA,cAAK4F,sBAAL,CAA4BhF,IAA5B;;AACA,YAAIA,IAAI,CAACxB,QAAL,IAAiBwB,IAAI,KAAKxB,QAAQ,CAACoF,QAAD,CAAtC,EAAkD;AAC9C,gBAAKqB,MAAL,CAAYjF,IAAZ,EAAkB;AAAEmD,YAAAA,eAAe,EAAE;AAAnB,WAAlB;AACH;AACJ;AACJ,KA7tByB;;AAAA,wEAuuBN,UAAC+B,MAAD,EAAiBlF,IAAjB,EAAyC;AAAA,UACjDoD,iBADiD,GACpB,MAAK7E,KADe,CACjD6E,iBADiD;;AAEzD,UAAI,CAACpD,IAAD,IAAS,CAACoD,iBAAd,EAAiC;AAC7B;AACH;;AAJwD,UAMjDf,WANiD,GAMlBrC,IANkB,CAMjDqC,WANiD;AAAA,UAMpCpC,IANoC,GAMlBD,IANkB,CAMpCC,IANoC;;AAOzD,UAAI,CAACoC,WAAD,IAAgB,CAACpC,IAArB,EAA2B;AACvB;AACH;;AATwD,UAWjDkF,oBAXiD,GAWL9C,WAXK,CAWjD8C,oBAXiD;;AAYzD,UAAI,CAACA,oBAAL,EAA2B;AACvB;AACH;;AAED,YAAKhE,GAAL,CAAS0C,MAAT,CAAgB5D,IAAhB,EAAsBmF,KAAtB,CAA4BpF,IAA5B,EAAkCkF,MAAlC,EAA0C,UAACG,WAAD,EAA0B;AAChE,cAAKL,sBAAL,CAA4BK,WAA5B;;AACA,YAAIrF,IAAI,CAACxB,QAAT,EAAmB;AACf,gBAAKyG,MAAL,CAAYI,WAAZ,EAAyB;AAAElC,YAAAA,eAAe,EAAE;AAAnB,WAAzB;AACH;AACJ,OALD;AAMH,KA7vByB;;AAAA,6EAqwBD,UAACnD,IAAD,EAAmB;AAAA,UAChCX,iBADgC,GACV,MAAKZ,KADK,CAChCY,iBADgC;AAAA,kCAEjBA,iBAFiB,CAEhCsC,KAFgC;AAAA,UAEhCA,KAFgC,sCAExB,EAFwB;AAGxC,UAAM2D,QAAQ,GAAG;AACbjG,QAAAA,iBAAiB,kCACVA,iBADU;AAEbsC,UAAAA,KAAK,EAAEA,KAAK,CAAC7C,GAAN,CAAU,UAAAyG,cAAc;AAAA,mBAAKA,cAAc,CAACnG,EAAf,KAAsBY,IAAI,CAACZ,EAA3B,GAAgCY,IAAhC,GAAuCuF,cAA5C;AAAA,WAAxB;AAFM;AADJ,OAAjB;;AAMA,YAAKpG,QAAL,CAAcmG,QAAd;AACH,KA/wByB;;AAAA,2DAyxBnB,UAAC9E,MAAD,EAAiBC,aAAjB,EAAkD;AAAA,UAE5BrB,EAF4B,GAG1C,MAAKX,KAHqC,CAEjDY,iBAFiD,CAE5BD,EAF4B;;AAIrD,UAAIA,EAAJ,EAAQ;AACJ,cAAKD,QAAL,CAAc;AAAEqB,UAAAA,MAAM,EAANA,MAAF;AAAUC,UAAAA,aAAa,EAAbA;AAAV,SAAd,EAAyC,MAAK+E,iBAA9C;AACH;AACJ,KAhyByB;;AAAA,+DAyyBf,UAACC,KAAD,EAAkC;AACzC,YAAKA,KAAL,GAAaA,KAAb;AACH,KA3yByB;;AAAA,kEAmzBZ,YAAY;AAAA,UACdpB,UADc,GACQ,MAAK5F,KADb,CACd4F,UADc;;AAGtB,YAAKlF,QAAL,CAAc;AACV4D,QAAAA,SAAS,EAAE,KADD;AAEVH,QAAAA,uBAAuB,EAAE,KAFf;AAGVH,QAAAA,iBAAiB,EAAE;AAHT,OAAd;;AAHsB,yBAYX,MAAKhE,KAZM;AAAA,UAUlBD,QAVkB,gBAUlBA,QAVkB;AAAA,+CAWlBa,iBAXkB,CAWGsC,KAXH;AAAA,UAWGA,KAXH,sCAWW,EAXX;;AAatB,UAAInD,QAAQ,IAAImD,KAAK,CAACb,MAAN,GAAe,CAA/B,EAAkC;AAC9BtE,QAAAA,KAAK,CAAC,MAAKyE,WAAN,0BAAoCoD,UAApC,EAAL;AACH;AACJ,KAn0ByB;;AAAA,gEA40Bd,UAACqB,KAAD,EAAgD;AACxD,UAAInJ,cAAc,CAACmJ,KAAK,CAACC,MAAP,CAAlB,EAAkC;AAC9B;AACH;;AAHuD,UAKhDxF,YALgD,GAKxB,MAAK5B,KALmB,CAKhD4B,YALgD;AAMxD,UAAMpB,GAAG,GAAG2G,KAAK,CAAC3G,GAAN,CAAU6G,WAAV,EAAZ;;AAEA,cAAQ7G,GAAR;AACI,aAAK,GAAL;AACIvC,UAAAA,KAAK,CAAC,MAAKyE,WAAN,EAAmB,iCAAnB,EAAsD,KAAtD,CAAL;AACAyE,UAAAA,KAAK,CAACG,cAAN;AACA;;AACJ,aAAK,WAAL;AACIrJ,UAAAA,KAAK,CAAC,MAAKyE,WAAN,EAAmB,eAAnB,EAAoC,KAApC,CAAL;;AACA,gBAAK9B,QAAL,CAAc;AAAEkF,YAAAA,UAAU,EAAE;AAAd,WAAd;;AACAqB,UAAAA,KAAK,CAACG,cAAN;AACA;;AACJ,aAAK,GAAL;AACI;;AACJ,aAAK,GAAL;AACI,cAAI,MAAKC,cAAT,EAAyB;AACrBtJ,YAAAA,KAAK,CAAC,MAAKyE,WAAN,EAAmB,uBAAnB,EAA4C,KAA5C,CAAL;AACAyE,YAAAA,KAAK,CAACG,cAAN;AACH;;AAED;;AACJ,aAAK,GAAL;AACI,cAAI,MAAKC,cAAT,EAAyB;AACrB,kBAAKtG,WAAL,CAAiBW,YAAjB;;AACAuF,YAAAA,KAAK,CAACG,cAAN;AACH;;AAED;;AACJ,aAAK,GAAL;AACI,cAAI,MAAKC,cAAT,EAAyB;AACrB,kBAAKC,MAAL;;AACAL,YAAAA,KAAK,CAACG,cAAN;AACH;;AAED;;AACJ,aAAK,GAAL;AACI,cAAI,MAAKC,cAAT,EAAyB;AACrB,kBAAK1D,MAAL;;AACAsD,YAAAA,KAAK,CAACG,cAAN;AACH;;AAED;;AACJ,aAAK,GAAL;AACI,cAAI,MAAKC,cAAT,EAAyB;AACrB,kBAAKnG,YAAL;;AACA+F,YAAAA,KAAK,CAACG,cAAN;AACH;;AAED;;AACJ,aAAK,GAAL;AACI,cAAI,MAAKC,cAAT,EAAyB;AACrB,kBAAKE,MAAL;;AACAN,YAAAA,KAAK,CAACG,cAAN;AACH;;AAED;;AACJ,aAAK,GAAL;AACI,cAAI,MAAKC,cAAT,EAAyB;AACrB,kBAAKrG,WAAL;;AACAiG,YAAAA,KAAK,CAACG,cAAN;AACH;;AAED;;AACJ,aAAK,GAAL;AACI,cAAI,MAAKC,cAAT,EAAyB;AACrB,kBAAKG,YAAL;;AACAP,YAAAA,KAAK,CAACG,cAAN;AACH;;AAED;;AACJ;AACI,gBAAKC,cAAL,GAAsB,KAAtB;AACA;AAtER;;AAyEA,YAAKA,cAAL,GAAsB/G,GAAG,KAAK,GAA9B;AACH,KA95ByB;;AAAA,oEAu6BV,UAACsF,UAAD,EAAwB;AACpC,YAAKlF,QAAL,CAAc;AAAEkF,QAAAA,UAAU,EAAVA;AAAF,OAAd;AACH,KAz6ByB;;AAAA,+DAg7Bf,UAAC6B,SAAD,EAAuB;AAC9B,YAAK/G,QAAL,CAAc;AAAEkB,QAAAA,aAAa,EAAE6F;AAAjB,OAAd,EAA4C,MAAKV,iBAAjD;AACH,KAl7ByB;;AAAA,QAIlBW,OAJkB,GAkBlB5H,KAlBkB,CAIlB4H,OAJkB;AAAA,QAKlBC,UALkB,GAkBlB7H,KAlBkB,CAKlB6H,UALkB;AAAA,QAMlBC,WANkB,GAkBlB9H,KAlBkB,CAMlB8H,WANkB;AAAA,QAOlBC,eAPkB,GAkBlB/H,KAlBkB,CAOlB+H,eAPkB;AAAA,QAQlBC,QARkB,GAkBlBhI,KAlBkB,CAQlBgI,QARkB;AAAA,QASlBC,kBATkB,GAkBlBjI,KAlBkB,CASlBiI,kBATkB;AAAA,QAUlBC,mBAVkB,GAkBlBlI,KAlBkB,CAUlBkI,mBAVkB;AAAA,QAWlBtG,aAXkB,GAkBlB5B,KAlBkB,CAWlB4B,YAXkB;AAAA,QAYlBuG,UAZkB,GAkBlBnI,KAlBkB,CAYlBmI,UAZkB;AAAA,QAalBC,kBAbkB,GAkBlBpI,KAlBkB,CAalBoI,kBAbkB;AAAA,QAclBnG,OAdkB,GAkBlBjC,KAlBkB,CAclBiC,MAdkB;AAAA,QAelBC,cAfkB,GAkBlBlC,KAlBkB,CAelBkC,aAfkB;AAAA,QAgBlBmG,KAhBkB,GAkBlBrI,KAlBkB,CAgBlBqI,KAhBkB;AAAA,QAiBlBC,UAjBkB,GAkBlBtI,KAlBkB,CAiBlBsI,UAjBkB;AAoBtB,UAAK1F,GAAL,GAAW,IAAI1E,GAAJ,CAAQ;AACf0J,MAAAA,OAAO,EAAPA,OADe;AAEfC,MAAAA,UAAU,EAAVA,UAFe;AAGfhH,MAAAA,EAAE,YAAKtB,sBAAL,SAA8BqC,aAA9B,CAHa;AAIfoG,MAAAA,QAAQ,EAARA,QAJe;AAKfC,MAAAA,kBAAkB,EAAlBA,kBALe;AAMfC,MAAAA,mBAAmB,EAAnBA,mBANe;AAOfC,MAAAA,UAAU,EAAVA,UAPe;AAQfC,MAAAA,kBAAkB,EAAlBA,kBARe;AASfC,MAAAA,KAAK,EAALA,KATe;AAUfC,MAAAA,UAAU,EAAVA;AAVe,KAAR,CAAX;AAaA,UAAKzH,EAAL,GAAUvD,QAAQ,CAAC,MAAD,CAAlB;AAEA,UAAK4C,KAAL,GAAa;AACT+B,MAAAA,MAAM,EAANA,OADS;AAETC,MAAAA,aAAa,EAAbA,cAFS;AAGTqG,MAAAA,QAAQ,EAAE,EAHD;AAITzH,MAAAA,iBAAiB,EAAE,EAJV;AAKTgB,MAAAA,aAAa,EAAEiG,eAAe,IAAID,WAAW,GAAG,CAAlB,CALrB;AAMT9F,MAAAA,eAAe,EAAE+F,eANR;AAOT9H,MAAAA,QAAQ,EAAE,EAPD;AAQTe,MAAAA,WAAW,EAAE,EARJ;AASTD,MAAAA,IAAI,EAAEtB,WATG;AAUT4E,MAAAA,uBAAuB,EAAE,KAVhB;AAWTH,MAAAA,iBAAiB,EAAE,KAXV;AAYT4B,MAAAA,UAAU,EAAE,CAZH;AAaTtB,MAAAA,SAAS,EAAE,KAbF;AAcTD,MAAAA,SAAS,EAAE;AAdF,KAAb;AAnCsB;AAmDzB;AAED;;;;;;;;;;iCAMmB;AACf,WAAK3B,GAAL,CAAS4F,OAAT,CAAiB,IAAjB;AACH;AAED;;;;;;;;;;2CAOuB;AACnB,WAAKC,UAAL;AACH;AAED;;;;;;;;;;wCAOoB;AAAA,yBACgC,KAAKzI,KADrC;AAAA,UACR0I,WADQ,gBACRA,WADQ;AAAA,UACKC,eADL,gBACKA,eADL;AAEhB,WAAKjG,WAAL,GAAqBkG,QAAQ,CAACC,cAAT,CAAwB,KAAKhI,EAA7B,CAArB;AACA,WAAKiI,UAAL,GAAoB,KAAKpG,WAAL,CAAiBqG,iBAArC;;AAEA,UAAIL,WAAW,KAAK7J,oBAApB,EAA0C;AACtC,aAAKqC,WAAL;AACH,OAFD,MAEO;AACH,aAAKD,WAAL,CAAiB0H,eAAjB;AACH;AACJ;AAED;;;;;;;;;;;8CAQ6DK,S,EAAwB;AAAA,UAA/CC,YAA+C,SAAhEN,eAAgE;AAAA,UACzEA,eADyE,GAC9C,KAAK3I,KADyC,CACzE2I,eADyE;AAAA,UAGxD9H,EAHwD,GAItEmI,SAJsE,CAG7ElI,iBAH6E,CAGxDD,EAHwD;;AAMjF,UAAIoI,YAAY,KAAKN,eAArB,EAAsC;AAClC;AACH;;AAED,UAAI,OAAOA,eAAP,KAA2B,QAA3B,IAAuC9H,EAAE,KAAK8H,eAAlD,EAAmE;AAC/D,aAAK1H,WAAL,CAAiB0H,eAAjB;AACH;AACJ;AAED;;;;;;;;;;;;;;;AAwCA;;;;;;;gDAOwC;AAAA,UAC5B7H,iBAD4B,GACC,KAAKZ,KADN,CAC5BY,iBAD4B;AAEpC,aAAO,SAAcA,iBAAd,EAAiC;AACpCqC,QAAAA,aAAa,EAAE;AADqB,OAAjC,CAAP;AAGH;AAED;;;;;;;;;;;;AA8DA;;;;;;uCAMyB;AAAA,UACb+F,SADa,GACQ,KAAKlJ,KADb,CACbkJ,SADa;AAAA,UAGI/F,aAHJ,GAIV,KAAKjD,KAJK,CAGjBY,iBAHiB,CAGIqC,aAHJ,EAMrB;;AACA,UAAI,KAAKV,SAAL,IAAkB,CAACyG,SAAvB,EAAkC;AAC9B,aAAKzG,SAAL,GAAiB,KAAjB;AACA;AACH,OAVoB,CAYrB;;;AACA,UAAIU,aAAa,KAAK,GAAlB,IAAyB,CAACpF,kBAAkB,CAAC6K,QAAQ,CAACO,aAAV,CAAhD,EAA0E;AACtElL,QAAAA,KAAK,CAAC,KAAKyE,WAAN,EAAmB,eAAnB,CAAL;AACA,aAAK9B,QAAL,CAAc;AAAEkF,UAAAA,UAAU,EAAE;AAAd,SAAd;AACH;;AAED,WAAKrD,SAAL,GAAiB,KAAjB;AACH;AAED;;;;;;;;;;;+CAQ2BM,U,EAAwBpB,sB,EAAuC;AAAA,UAC9EC,YAD8E,GACtD,KAAK5B,KADiD,CAC9E4B,YAD8E;AAAA,UAE9Ef,EAF8E,GAErDkC,UAFqD,CAE9ElC,EAF8E;AAAA,UAE1EuD,IAF0E,GAErDrB,UAFqD,CAE1EqB,IAF0E,EAItF;;AACA,UAAM2C,QAAQ,GAAG;AACbjG,QAAAA,iBAAiB,EAAEiC,UADN;AAEbwF,QAAAA,QAAQ,EAAE1H,EAAE,KAAKe,YAAP,GAAsBwC,IAAtB,GAA6B;AAF1B,OAAjB,CALsF,CAUtF;;AACA,WAAKgF,WAAL;;AAEA,UAAIzH,sBAAJ,EAA4B;AACxB;AACA,aAAKf,QAAL,CAAcmG,QAAd,EAAwB,KAAKxD,gBAA7B;AACH,OAHD,MAGO;AACH,aAAK3C,QAAL,CAAcmG,QAAd;AACH;AACJ;AAED;;;;;;;;;;;;AAsDA;;;;;;;;2CAQuBhE,U,EAAwBpB,sB,EAAuC;AAClF,UAAMoF,QAAQ,GAAG;AAAEjG,QAAAA,iBAAiB,EAAEiC;AAArB,OAAjB;;AACA,UAAIpB,sBAAJ,EAA4B;AACxB,aAAKf,QAAL,CAAcmG,QAAd,EAAwB,KAAKxD,gBAA7B;AACH,OAFD,MAEO;AACH,aAAK3C,QAAL,CAAcmG,QAAd;AACH;AACJ;AAED;;;;;;;;;;;;kCAS0D;AAAA;;AAAA,UAA9CpF,sBAA8C,uEAAZ,IAAY;AAAA,UAC9CC,YAD8C,GACtB,KAAK5B,KADiB,CAC9C4B,YAD8C,EAGtD;;AACA,WAAKhB,QAAL,CAAc;AACVI,QAAAA,WAAW,EAAE,EADH;AAEVD,QAAAA,IAAI,EAAErB,YAFI;AAGVoB,QAAAA,iBAAiB,EAAE,KAAK6B,yBAAL,EAHT;AAIVb,QAAAA,aAAa,EAAE;AAJL,OAAd,EAJsD,CAWtD;;AACA,WAAKc,GAAL,CAASyG,aAAT,GAAyBC,OAAzB,CACI1H,YADJ,EAEI,UAACmB,UAAD,EAA4B;AACxB,QAAA,MAAI,CAACwG,sBAAL,CAA4BxG,UAA5B,EAAwCpB,sBAAxC;AACH,OAJL,EAKI,KAAKsB,aALT,EAMI;AAAEC,QAAAA,UAAU,EAAE;AAAd,OANJ;AAQH;AAED;;;;;;;;;;AA8iBA;;;;;;;6BAOS;AAAA,yBAwBM,KAAKlD,KAxBX;AAAA,UAEDgI,QAFC,gBAEDA,QAFC;AAAA,UAGDwB,QAHC,gBAGDA,QAHC;AAAA,UAID5H,YAJC,gBAIDA,YAJC;AAAA,UAKD6H,OALC,gBAKDA,OALC;AAAA,UAMD1F,SANC,gBAMDA,SANC;AAAA,UAODc,iBAPC,gBAODA,iBAPC;AAAA,UAQDP,kBARC,gBAQDA,kBARC;AAAA,UASDoF,UATC,gBASDA,UATC;AAAA,UAUD3E,aAVC,gBAUDA,aAVC;AAAA,UAWDrD,IAXC,gBAWDA,IAXC;AAAA,UAYD2G,KAZC,gBAYDA,KAZC;AAAA,UAaDF,UAbC,gBAaDA,UAbC;AAAA,UAcDC,kBAdC,gBAcDA,kBAdC;AAAA,UAeDR,OAfC,gBAeDA,OAfC;AAAA,UAgBDU,UAhBC,gBAgBDA,UAhBC;AAAA,UAiBDqB,OAjBC,gBAiBDA,OAjBC;AAAA,UAkBDC,SAlBC,gBAkBDA,SAlBC;AAAA,UAmBDC,UAnBC,gBAmBDA,UAnBC;AAAA,UAoBDC,iBApBC,gBAoBDA,iBApBC;AAAA,UAqBDC,iBArBC,gBAqBDA,iBArBC;AAAA,UAsBD9B,kBAtBC,gBAsBDA,kBAtBC;AAAA,UAuBDC,mBAvBC,gBAuBDA,mBAvBC;AAAA,yBAqCM,KAAKhI,KArCX;AAAA,UA0BDa,IA1BC,gBA0BDA,IA1BC;AAAA,UA2BDwH,QA3BC,gBA2BDA,QA3BC;AAAA,UA4BDtI,QA5BC,gBA4BDA,QA5BC;AAAA,UA6BDa,iBA7BC,gBA6BDA,iBA7BC;AAAA,UA8BDkB,eA9BC,gBA8BDA,eA9BC;AAAA,UA+BDhB,WA/BC,gBA+BDA,WA/BC;AAAA,UAgCDqD,uBAhCC,gBAgCDA,uBAhCC;AAAA,UAiCDH,iBAjCC,gBAiCDA,iBAjCC;AAAA,UAkCDM,SAlCC,gBAkCDA,SAlCC;AAAA,UAmCDD,SAnCC,gBAmCDA,SAnCC;AAAA,UAoCDuB,UApCC,gBAoCDA,UApCC;AAAA,UAsCGjF,EAtCH,GAsCuDC,iBAtCvD,CAsCGD,EAtCH;AAAA,UAsCO2B,MAtCP,GAsCuD1B,iBAtCvD,CAsCO0B,MAtCP;AAAA,UAsCesB,WAtCf,GAsCuDhD,iBAtCvD,CAsCegD,WAtCf;AAAA,UAsC4BkG,UAtC5B,GAsCuDlJ,iBAtCvD,CAsC4BkJ,UAtC5B;;AAAA,kBAuCqClG,WAAW,IAAI,EAvCpD;AAAA,UAuCGG,UAvCH,SAuCGA,UAvCH;;AAwCL,UAAMiB,aAAqB,GAAG7E,MAAM,CAACC,IAAP,CAAYL,QAAZ,EAAsBsC,MAApD;AACA,UAAM0H,cAAc,GAAGlF,aAAa,KAAK,CAAzC;AACA,UAAMI,oBAA6B,GAAGD,aAAa,KAAKH,aAAlB,IAAmC,CAACkF,cAA1E;AACA,UAAMC,WAAoB,GAAGnG,SAAS,IAAI,CAAC,CAACE,UAA5C;AACA,UAAMkG,WAAoB,GAAG7F,kBAAkB,IAAI,CAAC,CAACL,UAArD;AACA,UAAMmG,cAAc,GAAGjN,UAAU,CAAC,QAAD,EAAWyM,SAAX,CAAjC;AAEA;;AACA;;AACA,0BACI,oBAAC,gBAAD;AAAkB,QAAA,QAAQ,EAAE5B,QAA5B;AAAsC,QAAA,QAAQ,EAAEwB;AAAhD,sBACI;AAAK,QAAA,EAAE,EAAE,KAAK3I,EAAd;AAAkB,QAAA,SAAS,EAAEuJ,cAA7B;AAA6C,QAAA,GAAG,EAAEP;AAAlD,sBACI;AAAK,QAAA,SAAS,EAAC,gBAAf;AAAgC,QAAA,SAAS,EAAE,KAAKQ,SAAhD;AAA2D,QAAA,QAAQ,EAAE;AAArE,sBACI,oBAAC,MAAD;AACI,QAAA,IAAI,EAAEtJ,IADV;AAEI,QAAA,OAAO,EAAE4I,OAFb;AAGI,QAAA,WAAW,EAAE3I,WAHjB;AAII,QAAA,OAAO,EAAEyI,OAJb;AAKI,QAAA,QAAQ,EAAE,KAAKtI;AALnB,QADJ,eAQI,oBAAC,SAAD;AACI,QAAA,IAAI,EAAEJ,IADV;AAEI,QAAA,MAAM,EAAEa,YAFZ;AAGI,QAAA,OAAO,EAAE+H,OAHb;AAII,QAAA,QAAQ,EAAEpB,QAJd;AAKI,QAAA,iBAAiB,EAAEzH,iBALvB;AAMI,QAAA,SAAS,EAAEoJ,WANf;AAOI,QAAA,kBAAkB,EAAEC,WAPxB;AAQI,QAAA,QAAQ,EAAE,KAAK1C,MARnB;AASI,QAAA,QAAQ,EAAE,KAAKC,YATnB;AAUI,QAAA,WAAW,EAAE,KAAKzG,WAVtB;AAWI,QAAA,YAAY,EAAE,KAAKqJ;AAXvB,QARJ,eAqBI,oBAAC,OAAD;AACI,QAAA,IAAI,EAAEvJ,IADV;AAEI,QAAA,OAAO,EAAE4I,OAFb;AAGI,QAAA,MAAM,EAAE/H,YAHZ;AAII,QAAA,WAAW,EAAE,KAAKc,WAJtB;AAKI,QAAA,UAAU,EAAEoD,UALhB;AAMI,QAAA,cAAc,EAAEpE,IANpB;AAOI,QAAA,iBAAiB,EAAEmD,iBAPvB;AAQI,QAAA,mBAAmB,EAAE6E,UARzB;AASI,QAAA,oBAAoB,EAAEvE,oBAT1B;AAUI,QAAA,iBAAiB,EAAErE,iBAVvB;AAWI,QAAA,cAAc,EAAEmJ,cAXpB;AAYI,QAAA,QAAQ,EAAE,KAAKM,QAZnB;AAaI,QAAA,YAAY,EAAE,KAAK7D,MAbvB;AAcI,QAAA,WAAW,EAAE,KAAK8D,WAdtB;AAeI,QAAA,aAAa,EAAE,KAAKC,aAfxB;AAgBI,QAAA,mBAAmB,EAAE,KAAKjE;AAhB9B,QArBJ,eAuCI,oBAAC,MAAD;AACI,QAAA,aAAa,EAAEtB,aADnB;AAEI,QAAA,oBAAoB,EAAEC,oBAF1B;AAGI,QAAA,cAAc,EAAE8E,cAHpB;AAII,QAAA,eAAe,EAAE,KAAK7I,YAJ1B;AAKI,QAAA,QAAQ,EAAE,KAAKoG,MALnB;AAMI,QAAA,QAAQ,EAAE,KAAK3D,MANnB;AAOI,QAAA,iBAAiB,EAAEiG,iBAPvB;AAQI,QAAA,iBAAiB,EAAEC;AARvB,sBAUI,oBAAC,UAAD;AACI,QAAA,MAAM,EAAEvH,MADZ;AAEI,QAAA,QAAQ,EAAE,KAAKkI,QAFnB;AAGI,QAAA,QAAQ,EAAE1I,eAHd;AAII,QAAA,UAAU,EAAEgI;AAJhB,QAVJ,CAvCJ,CADJ,EA0DKE,WAAW,IAAI,CAAC,CAAC,KAAKpB,UAAtB,gBACG,oBAAC,YAAD;AACI,QAAA,MAAM,EAAE5E,iBADZ;AAEI,QAAA,eAAe,EAAErD,EAFrB;AAGI,QAAA,KAAK,EAAEwH,KAHX;AAII,QAAA,UAAU,EAAEF,UAJhB;AAKI,QAAA,kBAAkB,EAAEC,kBALxB;AAMI,QAAA,OAAO,EAAER,OANb;AAOI,QAAA,UAAU,EAAEU,UAPhB;AAQI,QAAA,OAAO,EAAE,KAAKqC,oBARlB;AASI,QAAA,aAAa,EAAE,KAAKjI,WATxB;AAUI,QAAA,UAAU,EAAE,KAAKoG,UAVrB;AAWI,QAAA,kBAAkB,EAAEb,kBAXxB;AAYI,QAAA,mBAAmB,EAAEC;AAZzB,QADH,GAeG,IAzER,EA0EKiC,WAAW,IAAI,CAAC,CAAC,KAAKrB,UAAtB,gBACG,oBAAC,kBAAD;AACI,QAAA,MAAM,EAAEzE,uBADZ;AAEI,QAAA,QAAQ,EAAE,KAAKF,oBAFnB;AAGI,QAAA,QAAQ,EAAE,KAAKiF,WAHnB;AAII,QAAA,SAAS,EAAE5E,SAJf;AAKI,QAAA,SAAS,EAAED,SALf;AAMI,QAAA,aAAa,EAAE,KAAK7B,WANxB;AAOI,QAAA,UAAU,EAAE,KAAKoG;AAPrB,QADH,GAUG,IApFR,CADJ,CADJ;AA0FA;;AACA;AACH;;;;EAvnCuB5L,S;;gBAAtB6C,a,kBAmBoB;AAClB2B,EAAAA,IAAI,EAAE5B,WADY;AAElB8B,EAAAA,YAAY,EAAElD,YAFI;AAGlByB,EAAAA,QAAQ,EAAE5C,IAHQ;AAIlBmD,EAAAA,QAAQ,EAAEnD,IAJQ;AAKlBuK,EAAAA,WAAW,EAAEtJ,mBALK;AAMlBuJ,EAAAA,eAAe,EAAEtJ,iBANC;AAOlBwD,EAAAA,MAAM,EAAEhD,UAPU;AAQlBiD,EAAAA,aAAa,EAAE/C,QARG;AASlBuK,EAAAA,UAAU,EAAE,EATM;AAUlB3E,EAAAA,aAAa,EAAE6F,QAVG;AAWlB7G,EAAAA,SAAS,EAAE,IAXO;AAYlBc,EAAAA,iBAAiB,EAAE,IAZD;AAalBP,EAAAA,kBAAkB,EAAE,IAbF;AAclB4E,EAAAA,SAAS,EAAE,KAdO;AAelBU,EAAAA,SAAS,EAAE,EAfO;AAgBlBhC,EAAAA,OAAO,EAAEtJ,oBAhBS;AAiBlBgK,EAAAA,UAAU,EAAE/J,uBAjBM;AAkBlBsJ,EAAAA,UAAU,EAAExJ,0BAlBM;AAmBlBqK,EAAAA,WAAW,EAAE9J;AAnBK,C;;AAumC1B,SAASmB,aAAa,IAAI8K,sBAA1B;AACA,eAAehN,cAAc,CAACkC,aAAD,CAA7B","sourcesContent":["/**\n * @flow\n * @file Content Picker Component\n * @author Box\n */\n\nimport 'regenerator-runtime/runtime';\nimport React, { Component } from 'react';\nimport classNames from 'classnames';\nimport debounce from 'lodash/debounce';\nimport getProp from 'lodash/get';\nimport uniqueid from 'lodash/uniqueId';\nimport noop from 'lodash/noop';\nimport Header from '../common/header';\nimport SubHeader from '../common/sub-header/SubHeader';\nimport UploadDialog from '../common/upload-dialog';\nimport CreateFolderDialog from '../common/create-folder-dialog';\nimport Internationalize from '../common/Internationalize';\nimport makeResponsive from '../common/makeResponsive';\nimport Pagination from '../common/pagination/Pagination';\nimport { isFocusableElement, isInputElement, focus } from '../../utils/dom';\nimport API from '../../api';\nimport Content from './Content';\nimport Footer from './Footer';\nimport {\n    CLIENT_NAME_CONTENT_PICKER,\n    DEFAULT_HOSTNAME_API,\n    DEFAULT_HOSTNAME_UPLOAD,\n    DEFAULT_PAGE_NUMBER,\n    DEFAULT_PAGE_SIZE,\n    DEFAULT_ROOT,\n    DEFAULT_SEARCH_DEBOUNCE,\n    DEFAULT_VIEW_FILES,\n    DEFAULT_VIEW_RECENTS,\n    ERROR_CODE_ITEM_NAME_IN_USE,\n    ERROR_CODE_ITEM_NAME_INVALID,\n    ERROR_CODE_ITEM_NAME_TOO_LONG,\n    FIELD_NAME,\n    FIELD_SHARED_LINK,\n    SORT_ASC,\n    TYPE_FILE,\n    TYPE_FOLDER,\n    TYPE_WEBLINK,\n    TYPED_ID_FOLDER_PREFIX,\n    VIEW_ERROR,\n    VIEW_FOLDER,\n    VIEW_RECENTS,\n    VIEW_SEARCH,\n    VIEW_SELECTED,\n} from '../../constants';\nimport { FILE_SHARED_LINK_FIELDS_TO_FETCH } from '../../utils/fields';\nimport '../common/fonts.scss';\nimport '../common/base.scss';\nimport '../common/modal.scss';\nimport './ContentPicker.scss';\n\ntype Props = {\n    apiHost: string,\n    autoFocus: boolean,\n    canCreateNewFolder: boolean,\n    canSetShareAccess: boolean,\n    canUpload: boolean,\n    cancelButtonLabel?: string,\n    chooseButtonLabel?: string,\n    className: string,\n    clientName: string,\n    currentFolderId?: string,\n    defaultView: DefaultView,\n    extensions: string[],\n    initialPage: number,\n    initialPageSize: number,\n    isLarge: boolean,\n    isSmall: boolean,\n    isTouch: boolean,\n    language?: string,\n    logoUrl?: string,\n    maxSelectable: number,\n    measureRef?: Function,\n    messages?: StringMap,\n    onCancel: Function,\n    onChoose: Function,\n    requestInterceptor?: Function,\n    responseInterceptor?: Function,\n    rootFolderId: string,\n    sharedLink?: string,\n    sharedLinkPassword?: string,\n    sortBy: SortBy,\n    sortDirection: SortDirection,\n    token: Token,\n    type: string,\n    uploadHost: string,\n};\n\ntype State = {\n    currentCollection: Collection,\n    currentOffset: number,\n    currentPageSize: number,\n    errorCode: string,\n    focusedRow: number,\n    isCreateFolderModalOpen: boolean,\n    isLoading: boolean,\n    isUploadModalOpen: boolean,\n    rootName: string,\n    searchQuery: string,\n    selected: { [string]: BoxItem },\n    sortBy: SortBy,\n    sortDirection: SortDirection,\n    view: View,\n};\n\nconst defaultType = `${TYPE_FILE},${TYPE_WEBLINK}`;\n\nclass ContentPicker extends Component<Props, State> {\n    id: string;\n\n    api: API;\n\n    state: State;\n\n    props: Props;\n\n    table: any;\n\n    rootElement: HTMLElement;\n\n    appElement: HTMLElement;\n\n    globalModifier: boolean;\n\n    firstLoad: boolean = true; // Keeps track of very 1st load\n\n    static defaultProps = {\n        type: defaultType,\n        rootFolderId: DEFAULT_ROOT,\n        onChoose: noop,\n        onCancel: noop,\n        initialPage: DEFAULT_PAGE_NUMBER,\n        initialPageSize: DEFAULT_PAGE_SIZE,\n        sortBy: FIELD_NAME,\n        sortDirection: SORT_ASC,\n        extensions: [],\n        maxSelectable: Infinity,\n        canUpload: true,\n        canSetShareAccess: true,\n        canCreateNewFolder: true,\n        autoFocus: false,\n        className: '',\n        apiHost: DEFAULT_HOSTNAME_API,\n        uploadHost: DEFAULT_HOSTNAME_UPLOAD,\n        clientName: CLIENT_NAME_CONTENT_PICKER,\n        defaultView: DEFAULT_VIEW_FILES,\n    };\n\n    /**\n     * [constructor]\n     *\n     * @private\n     * @return {ContentPicker}\n     */\n    constructor(props: Props) {\n        super(props);\n\n        const {\n            apiHost,\n            clientName,\n            initialPage,\n            initialPageSize,\n            language,\n            requestInterceptor,\n            responseInterceptor,\n            rootFolderId,\n            sharedLink,\n            sharedLinkPassword,\n            sortBy,\n            sortDirection,\n            token,\n            uploadHost,\n        } = props;\n\n        this.api = new API({\n            apiHost,\n            clientName,\n            id: `${TYPED_ID_FOLDER_PREFIX}${rootFolderId}`,\n            language,\n            requestInterceptor,\n            responseInterceptor,\n            sharedLink,\n            sharedLinkPassword,\n            token,\n            uploadHost,\n        });\n\n        this.id = uniqueid('bcp_');\n\n        this.state = {\n            sortBy,\n            sortDirection,\n            rootName: '',\n            currentCollection: {},\n            currentOffset: initialPageSize * (initialPage - 1),\n            currentPageSize: initialPageSize,\n            selected: {},\n            searchQuery: '',\n            view: VIEW_FOLDER,\n            isCreateFolderModalOpen: false,\n            isUploadModalOpen: false,\n            focusedRow: 0,\n            isLoading: false,\n            errorCode: '',\n        };\n    }\n\n    /**\n     * Destroys api instances\n     *\n     * @private\n     * @return {void}\n     */\n    clearCache(): void {\n        this.api.destroy(true);\n    }\n\n    /**\n     * Cleanup\n     *\n     * @private\n     * @inheritdoc\n     * @return {void}\n     */\n    componentWillUnmount() {\n        this.clearCache();\n    }\n\n    /**\n     * Fetches the root folder on load\n     *\n     * @private\n     * @inheritdoc\n     * @return {void}\n     */\n    componentDidMount() {\n        const { defaultView, currentFolderId }: Props = this.props;\n        this.rootElement = ((document.getElementById(this.id): any): HTMLElement);\n        this.appElement = ((this.rootElement.firstElementChild: any): HTMLElement);\n\n        if (defaultView === DEFAULT_VIEW_RECENTS) {\n            this.showRecents();\n        } else {\n            this.fetchFolder(currentFolderId);\n        }\n    }\n\n    /**\n     * Fetches the current folder if different\n     * from what was already fetched before.\n     *\n     * @private\n     * @inheritdoc\n     * @return {void}\n     */\n    componentDidUpdate({ currentFolderId: prevFolderId }: Props, prevState: State): void {\n        const { currentFolderId }: Props = this.props;\n        const {\n            currentCollection: { id },\n        }: State = prevState;\n\n        if (prevFolderId === currentFolderId) {\n            return;\n        }\n\n        if (typeof currentFolderId === 'string' && id !== currentFolderId) {\n            this.fetchFolder(currentFolderId);\n        }\n    }\n\n    /**\n     * Choose button action.\n     * Clones values before returning so that\n     * object references are broken. Also cleans\n     * up the selected attribute since it was\n     * added by the file picker.\n     *\n     * @private\n     * @fires choose\n     * @return {void}\n     */\n    choose = (): void => {\n        const { selected }: State = this.state;\n        const { onChoose }: Props = this.props;\n        const results: BoxItem[] = Object.keys(selected).map(key => {\n            const clone: BoxItem = { ...selected[key] };\n            delete clone.selected;\n            return clone;\n        });\n        onChoose(results);\n    };\n\n    /**\n     * Cancel button action\n     *\n     * @private\n     * @fires cancel\n     * @return {void}\n     */\n    cancel = (): void => {\n        const { onCancel }: Props = this.props;\n        const { selected }: State = this.state;\n\n        // Clear out the selected field\n        Object.keys(selected).forEach(key => delete selected[key].selected);\n\n        // Reset the selected state\n        this.setState({ selected: {} }, () => onCancel());\n    };\n\n    /**\n     * Resets the percentLoaded in the collection\n     * so that the loading bar starts showing\n     *\n     * @private\n     * @return {Collection}\n     */\n    currentUnloadedCollection(): Collection {\n        const { currentCollection }: State = this.state;\n        return Object.assign(currentCollection, {\n            percentLoaded: 0,\n        });\n    }\n\n    /**\n     * Refreshing the item collection depending\n     * upon the view. Collection is gotten from cache.\n     * Navigation event is prevented.\n     *\n     * @private\n     * @return {void}\n     */\n    refreshCollection = (): void => {\n        const {\n            currentCollection: { id },\n            view,\n            searchQuery,\n        }: State = this.state;\n        if (view === VIEW_FOLDER && id) {\n            this.fetchFolder(id, false);\n        } else if (view === VIEW_RECENTS) {\n            this.showRecents(false);\n        } else if (view === VIEW_SEARCH && searchQuery) {\n            this.search(searchQuery);\n        } else if (view === VIEW_SELECTED) {\n            this.showSelected();\n        } else {\n            throw new Error('Cannot refresh incompatible view!');\n        }\n    };\n\n    /**\n     * Network error callback\n     *\n     * @private\n     * @param {Error} error error object\n     * @return {void}\n     */\n    errorCallback = (error: ElementsXhrError, code: string): void => {\n        this.setState({ view: VIEW_ERROR });\n        /* eslint-disable no-console */\n        console.error(error, code);\n        /* eslint-enable no-console */\n    };\n\n    /**\n     * Action performed when clicking on an item\n     *\n     * @private\n     * @param {Object|string} item - the clicked box item\n     * @return {void}\n     */\n    onItemClick = (item: BoxItem | string): void => {\n        // If the id was passed in, just use that\n        if (typeof item === 'string') {\n            this.fetchFolder(item);\n            return;\n        }\n\n        // If the item was passed in\n        const { id, type }: BoxItem = item;\n        if (type === TYPE_FOLDER) {\n            this.fetchFolder(id);\n        }\n    };\n\n    /**\n     * Focuses the grid\n     *\n     * @private\n     * @return {void}\n     */\n    finishNavigation(): void {\n        const { autoFocus }: Props = this.props;\n        const {\n            currentCollection: { percentLoaded },\n        }: State = this.state;\n\n        // If loading for the very first time, only allow focus if autoFocus is true\n        if (this.firstLoad && !autoFocus) {\n            this.firstLoad = false;\n            return;\n        }\n\n        // Don't focus the grid until its loaded and user is not already on an interactable element\n        if (percentLoaded === 100 && !isFocusableElement(document.activeElement)) {\n            focus(this.rootElement, '.bcp-item-row');\n            this.setState({ focusedRow: 0 });\n        }\n\n        this.firstLoad = false;\n    }\n\n    /**\n     * Folder fetch success callback\n     *\n     * @private\n     * @param {Object} collection item collection object\n     * @param {Boolean|void} triggerNavigationEvent - To focus the grid\n     * @return {void}\n     */\n    fetchFolderSuccessCallback(collection: Collection, triggerNavigationEvent: boolean): void {\n        const { rootFolderId }: Props = this.props;\n        const { id, name }: Collection = collection;\n\n        // New folder state\n        const newState = {\n            currentCollection: collection,\n            rootName: id === rootFolderId ? name : '',\n        };\n\n        // Close any open modals\n        this.closeModals();\n\n        if (triggerNavigationEvent) {\n            // Fire folder navigation event\n            this.setState(newState, this.finishNavigation);\n        } else {\n            this.setState(newState);\n        }\n    }\n\n    /**\n     * Fetches a folder, defaults to fetching root folder\n     *\n     * @private\n     * @param {string|void} [id] folder id\n     * @param {Boolean|void} [triggerNavigationEvent] - To focus the grid\n     * @return {void}\n     */\n    fetchFolder = (id?: string, triggerNavigationEvent?: boolean = true): void => {\n        const { rootFolderId }: Props = this.props;\n        const {\n            currentCollection: { id: currentId },\n            currentOffset,\n            currentPageSize: limit,\n            searchQuery = '',\n            sortBy,\n            sortDirection,\n        }: State = this.state;\n        const folderId: string = typeof id === 'string' ? id : rootFolderId;\n        const hasFolderChanged = currentId && currentId !== folderId;\n        const hasSearchQuery = !!searchQuery.trim().length;\n        const offset = hasFolderChanged || hasSearchQuery ? 0 : currentOffset; // Reset offset on folder or mode change\n\n        // If we are navigating around, aka not first load\n        // then reset the focus to the root so that after\n        // the collection loads the activeElement is not the\n        // button that was clicked to fetch the folder\n        if (!this.firstLoad) {\n            this.rootElement.focus();\n        }\n\n        // Reset search state, the view and show busy indicator\n        this.setState({\n            searchQuery: '',\n            view: VIEW_FOLDER,\n            currentCollection: this.currentUnloadedCollection(),\n            currentOffset: offset,\n        });\n\n        // Fetch the folder using folder API\n        this.api.getFolderAPI().getFolder(\n            folderId,\n            limit,\n            offset,\n            sortBy,\n            sortDirection,\n            (collection: Collection) => {\n                this.fetchFolderSuccessCallback(collection, triggerNavigationEvent);\n            },\n            this.errorCallback,\n            { forceFetch: true },\n        );\n    };\n\n    /**\n     * Recents fetch success callback\n     *\n     * @private\n     * @param {Object} collection item collection object\n     * @param {Boolean|void} [triggerNavigationEvent] To trigger navigate event\n     * @return {void}\n     */\n    recentsSuccessCallback(collection: Collection, triggerNavigationEvent: boolean): void {\n        const newState = { currentCollection: collection };\n        if (triggerNavigationEvent) {\n            this.setState(newState, this.finishNavigation);\n        } else {\n            this.setState(newState);\n        }\n    }\n\n    /**\n     * Shows recents.\n     * We always try to force fetch recents.\n     *\n     * @private\n     * @param {Boolean|void} [triggerNavigationEvent] To trigger navigate event\n     * @param {Boolean|void} [forceFetch] To void cache\n     * @return {void}\n     */\n    showRecents(triggerNavigationEvent: boolean = true): void {\n        const { rootFolderId }: Props = this.props;\n\n        // Reset search state, the view and show busy indicator\n        this.setState({\n            searchQuery: '',\n            view: VIEW_RECENTS,\n            currentCollection: this.currentUnloadedCollection(),\n            currentOffset: 0,\n        });\n\n        // Fetch the folder using folder API\n        this.api.getRecentsAPI().recents(\n            rootFolderId,\n            (collection: Collection) => {\n                this.recentsSuccessCallback(collection, triggerNavigationEvent);\n            },\n            this.errorCallback,\n            { forceFetch: true },\n        );\n    }\n\n    /**\n     * Shows the selected items\n     *\n     * @private\n     * @return {void}\n     */\n    showSelected = (): void => {\n        const { selected, sortBy, sortDirection }: State = this.state;\n        this.setState(\n            {\n                searchQuery: '',\n                view: VIEW_SELECTED,\n                currentCollection: {\n                    sortBy,\n                    sortDirection,\n                    percentLoaded: 100,\n                    items: Object.keys(selected).map(key => this.api.getCache().get(key)),\n                },\n            },\n            this.finishNavigation,\n        );\n    };\n\n    /**\n     * Search success callback\n     *\n     * @private\n     * @param {Object} collection item collection object\n     * @return {void}\n     */\n    searchSuccessCallback = (collection: Collection): void => {\n        const { currentCollection }: State = this.state;\n        this.setState({\n            currentCollection: Object.assign(currentCollection, collection),\n        });\n    };\n\n    /**\n     * Debounced searching\n     *\n     * @private\n     * @param {string} id folder id\n     * @param {string} query search string\n     * @param {Boolean|void} [forceFetch] To void cache\n     * @return {void}\n     */\n    debouncedSearch: Function = debounce((id: string, query: string): void => {\n        const { currentOffset, currentPageSize }: State = this.state;\n\n        this.api\n            .getSearchAPI()\n            .search(id, query, currentPageSize, currentOffset, this.searchSuccessCallback, this.errorCallback, {\n                forceFetch: true,\n            });\n    }, DEFAULT_SEARCH_DEBOUNCE);\n\n    /**\n     * Searches\n     *\n     * @private\n     * @param {string} query search string\n     * @return {void}\n     */\n    search = (query: string): void => {\n        const { rootFolderId }: Props = this.props;\n        const {\n            currentCollection: { id },\n            currentOffset,\n            searchQuery,\n        }: State = this.state;\n        const folderId = typeof id === 'string' ? id : rootFolderId;\n        const trimmedQuery: string = query.trim();\n\n        if (!query) {\n            // Cancel the debounce so we don't search on a previous query\n            this.debouncedSearch.cancel();\n\n            // Query was cleared out, load the prior folder\n            // The prior folder is always the parent folder for search\n            this.setState({ currentOffset: 0 }, () => {\n                this.fetchFolder(folderId, false);\n            });\n\n            return;\n        }\n\n        if (!trimmedQuery) {\n            // Query now only has bunch of spaces\n            // do nothing and but update prior state\n            this.setState({\n                searchQuery: query,\n            });\n            return;\n        }\n\n        this.setState({\n            searchQuery: query,\n            view: VIEW_SEARCH,\n            currentCollection: this.currentUnloadedCollection(),\n            currentOffset: trimmedQuery === searchQuery ? currentOffset : 0,\n        });\n\n        this.debouncedSearch(folderId, query);\n    };\n\n    /**\n     * Uploads\n     *\n     * @private\n     * @param {File} file dom file object\n     * @return {void}\n     */\n    upload = (): void => {\n        const {\n            currentCollection: { id, permissions },\n        }: State = this.state;\n        const { canUpload }: Props = this.props;\n        if (!id || !permissions) {\n            return;\n        }\n\n        const { can_upload: canUploadPermission }: BoxItemPermission = permissions;\n        if (!canUpload || !canUploadPermission) {\n            return;\n        }\n\n        this.setState({ isUploadModalOpen: true });\n    };\n\n    /**\n     * Upload success handler\n     *\n     * @private\n     * @param {File} file dom file object\n     * @return {void}\n     */\n    uploadSuccessHandler = (): void => {\n        const {\n            currentCollection: { id },\n        }: State = this.state;\n        this.fetchFolder(id, false);\n    };\n\n    /**\n     * Creates a new folder\n     *\n     * @private\n     * @return {void}\n     */\n    createFolder = (): void => {\n        this.createFolderCallback();\n    };\n\n    /**\n     * New folder callback\n     *\n     * @private\n     * @param {string} name - folder name\n     * @return {void}\n     */\n    createFolderCallback = (name?: string): void => {\n        const { isCreateFolderModalOpen, currentCollection }: State = this.state;\n        const { canCreateNewFolder }: Props = this.props;\n        if (!canCreateNewFolder) {\n            return;\n        }\n\n        const { id, permissions }: Collection = currentCollection;\n        if (!id || !permissions) {\n            return;\n        }\n\n        const { can_upload }: BoxItemPermission = permissions;\n        if (!can_upload) {\n            return;\n        }\n\n        if (!isCreateFolderModalOpen || !name) {\n            this.setState({ isCreateFolderModalOpen: true, errorCode: '' });\n            return;\n        }\n\n        if (!name) {\n            this.setState({\n                errorCode: ERROR_CODE_ITEM_NAME_INVALID,\n                isLoading: false,\n            });\n            return;\n        }\n\n        if (name.length > 255) {\n            this.setState({\n                errorCode: ERROR_CODE_ITEM_NAME_TOO_LONG,\n                isLoading: false,\n            });\n            return;\n        }\n\n        this.setState({ isLoading: true });\n        this.api.getFolderAPI().create(\n            id,\n            name,\n            () => {\n                this.fetchFolder(id);\n            },\n            ({ response: { status } }) => {\n                this.setState({\n                    errorCode: status === 409 ? ERROR_CODE_ITEM_NAME_IN_USE : ERROR_CODE_ITEM_NAME_INVALID,\n                    isLoading: false,\n                });\n            },\n        );\n    };\n\n    /**\n     * Selects or unselects an item\n     *\n     * @private\n     * @param {Object} item file or folder object\n     * @param {boolean} options.forceSharedLink Force a shared link if no link exists\n     * @return {void}\n     */\n    select = (item: BoxItem, { forceSharedLink = true }: StringAnyMap = {}): void => {\n        const { canSetShareAccess, type: selectableType, maxSelectable }: Props = this.props;\n        const {\n            view,\n            selected,\n            currentCollection: { items = [] },\n        }: State = this.state;\n        const { id, type }: BoxItem = item;\n\n        if (!id || !type || selectableType.indexOf(type) === -1) {\n            return;\n        }\n\n        const selectedKeys: Array<string> = Object.keys(selected);\n        const selectedCount: number = selectedKeys.length;\n        const hasHitSelectionLimit: boolean = selectedCount === maxSelectable;\n        const isSingleFileSelection: boolean = maxSelectable === 1;\n        const cacheKey: string = this.api.getAPI(type).getCacheKey(id);\n        const existing: BoxItem = selected[cacheKey];\n        const existingFromCache: BoxItem = this.api.getCache().get(cacheKey);\n        const existInSelected = selectedKeys.indexOf(cacheKey) !== -1;\n        const itemCanSetShareAccess = getProp(item, 'permissions.can_set_share_access', false);\n\n        // Existing object could have mutated and we just need to update the\n        // reference in the selected map. In that case treat it like a new selection.\n        if (existing && existing === existingFromCache) {\n            // We are selecting the same item that was already\n            // selected. Unselect it in this case. Toggle case.\n            delete existing.selected;\n            delete selected[cacheKey];\n        } else {\n            // We are selecting a new item that was never\n            // selected before. However if we are in a single\n            // item selection mode, we should also unselect any\n            // prior item that was item that was selected.\n\n            // Check if we hit the selection limit and if selection\n            // is not already currently in the selected data structure.\n            // Ignore when in single file selection mode.\n            if (hasHitSelectionLimit && !isSingleFileSelection && !existInSelected) {\n                return;\n            }\n\n            // Clear out the prior item for single file selection mode\n            if (selectedCount > 0 && isSingleFileSelection) {\n                const prior = selectedKeys[0]; // only one item\n                delete selected[prior].selected;\n                delete selected[prior];\n            }\n\n            // Select the new item\n            item.selected = true;\n            selected[cacheKey] = item;\n\n            // If can set share access, fetch the shared link properties of the item\n            // In the case where another item is selected, any in flight XHR will get\n            // cancelled\n            if (canSetShareAccess && itemCanSetShareAccess && forceSharedLink) {\n                this.fetchSharedLinkInfo(item);\n            }\n        }\n\n        const focusedRow = items.findIndex((i: BoxItem) => i.id === item.id);\n        this.setState({ selected, focusedRow }, () => {\n            if (view === VIEW_SELECTED) {\n                // Need to refresh the selected view\n                this.showSelected();\n            }\n        });\n    };\n\n    /**\n     * Fetch the shared link info\n     * @param {BoxItem} item - The item (folder, file, weblink)\n     * @returns {void}\n     */\n    fetchSharedLinkInfo = (item: BoxItem): void => {\n        const { id, type }: BoxItem = item;\n\n        switch (type) {\n            case TYPE_FOLDER:\n                this.api.getFolderAPI().getFolderFields(id, this.handleSharedLinkSuccess, noop, {\n                    fields: FILE_SHARED_LINK_FIELDS_TO_FETCH,\n                });\n                break;\n            case TYPE_FILE:\n                this.api\n                    .getFileAPI()\n                    .getFile(id, this.handleSharedLinkSuccess, noop, { fields: FILE_SHARED_LINK_FIELDS_TO_FETCH });\n                break;\n            case TYPE_WEBLINK:\n                this.api\n                    .getWebLinkAPI()\n                    .getWeblink(id, this.handleSharedLinkSuccess, noop, { fields: FILE_SHARED_LINK_FIELDS_TO_FETCH });\n                break;\n            default:\n                throw new Error('Unknown Type');\n        }\n    };\n\n    /**\n     * Handles the shared link info by either creating a share link using enterprise defaults if\n     * it does not already exist, otherwise update the item in the state currentCollection.\n     *\n     * @param {Object} item file or folder\n     * @returns {void}\n     */\n    handleSharedLinkSuccess = (item: BoxItem) => {\n        // if no shared link currently exists, create a shared link with enterprise default\n        if (!item[FIELD_SHARED_LINK]) {\n            this.changeShareAccess(null, item);\n        } else {\n            const { selected } = this.state;\n            const { id, type } = item;\n            const cacheKey = this.api.getAPI(type).getCacheKey(id);\n            // if shared link already exists, update the collection in state\n            this.updateItemInCollection(item);\n            if (item.selected && item !== selected[cacheKey]) {\n                this.select(item, { forceSharedLink: false });\n            }\n        }\n    };\n\n    /**\n     * Changes the share access of an item\n     *\n     * @private\n     * @param {string} access share access\n     * @param {Object} item file or folder object\n     * @return {void}\n     */\n    changeShareAccess = (access: Access, item: BoxItem): void => {\n        const { canSetShareAccess }: Props = this.props;\n        if (!item || !canSetShareAccess) {\n            return;\n        }\n\n        const { permissions, type }: BoxItem = item;\n        if (!permissions || !type) {\n            return;\n        }\n\n        const { can_set_share_access }: BoxItemPermission = permissions;\n        if (!can_set_share_access) {\n            return;\n        }\n\n        this.api.getAPI(type).share(item, access, (updatedItem: BoxItem) => {\n            this.updateItemInCollection(updatedItem);\n            if (item.selected) {\n                this.select(updatedItem, { forceSharedLink: false });\n            }\n        });\n    };\n\n    /**\n     * Updates the BoxItem in the state's currentCollection\n     *\n     * @param {Object} item file or folder object\n     * @returns {void}\n     */\n    updateItemInCollection = (item: BoxItem) => {\n        const { currentCollection } = this.state;\n        const { items = [] } = currentCollection;\n        const newState = {\n            currentCollection: {\n                ...currentCollection,\n                items: items.map(collectionItem => (collectionItem.id === item.id ? item : collectionItem)),\n            },\n        };\n        this.setState(newState);\n    };\n\n    /**\n     * Chages the sort by and sort direction\n     *\n     * @private\n     * @param {string} sortBy - field to sorty by\n     * @param {string} sortDirection - sort direction\n     * @return {void}\n     */\n    sort = (sortBy: SortBy, sortDirection: SortDirection) => {\n        const {\n            currentCollection: { id },\n        }: State = this.state;\n        if (id) {\n            this.setState({ sortBy, sortDirection }, this.refreshCollection);\n        }\n    };\n\n    /**\n     * Saves reference to table component\n     *\n     * @private\n     * @param {Component} react component\n     * @return {void}\n     */\n    tableRef = (table: React$Component<*, *>) => {\n        this.table = table;\n    };\n\n    /**\n     * Closes the modal dialogs that may be open\n     *\n     * @private\n     * @return {void}\n     */\n    closeModals = (): void => {\n        const { focusedRow }: State = this.state;\n\n        this.setState({\n            isLoading: false,\n            isCreateFolderModalOpen: false,\n            isUploadModalOpen: false,\n        });\n\n        const {\n            selected,\n            currentCollection: { items = [] },\n        }: State = this.state;\n        if (selected && items.length > 0) {\n            focus(this.rootElement, `.bcp-item-row-${focusedRow}`);\n        }\n    };\n\n    /**\n     * Keyboard events\n     *\n     * @private\n     * @inheritdoc\n     * @return {void}\n     */\n    onKeyDown = (event: SyntheticKeyboardEvent<HTMLElement>) => {\n        if (isInputElement(event.target)) {\n            return;\n        }\n\n        const { rootFolderId }: Props = this.props;\n        const key = event.key.toLowerCase();\n\n        switch (key) {\n            case '/':\n                focus(this.rootElement, '.be-search input[type=\"search\"]', false);\n                event.preventDefault();\n                break;\n            case 'arrowdown':\n                focus(this.rootElement, '.bcp-item-row', false);\n                this.setState({ focusedRow: 0 });\n                event.preventDefault();\n                break;\n            case 'g':\n                break;\n            case 'b':\n                if (this.globalModifier) {\n                    focus(this.rootElement, '.be-breadcrumb button', false);\n                    event.preventDefault();\n                }\n\n                break;\n            case 'f':\n                if (this.globalModifier) {\n                    this.fetchFolder(rootFolderId);\n                    event.preventDefault();\n                }\n\n                break;\n            case 'c':\n                if (this.globalModifier) {\n                    this.choose();\n                    event.preventDefault();\n                }\n\n                break;\n            case 'x':\n                if (this.globalModifier) {\n                    this.cancel();\n                    event.preventDefault();\n                }\n\n                break;\n            case 's':\n                if (this.globalModifier) {\n                    this.showSelected();\n                    event.preventDefault();\n                }\n\n                break;\n            case 'u':\n                if (this.globalModifier) {\n                    this.upload();\n                    event.preventDefault();\n                }\n\n                break;\n            case 'r':\n                if (this.globalModifier) {\n                    this.showRecents();\n                    event.preventDefault();\n                }\n\n                break;\n            case 'n':\n                if (this.globalModifier) {\n                    this.createFolder();\n                    event.preventDefault();\n                }\n\n                break;\n            default:\n                this.globalModifier = false;\n                return;\n        }\n\n        this.globalModifier = key === 'g';\n    };\n\n    /**\n     * Updates the focused row based on key binder\n     *\n     * @private\n     * @param {number} focusedRow - the row index thats focused\n     * @return {void}\n     */\n    onFocusChange = (focusedRow: number) => {\n        this.setState({ focusedRow });\n    };\n\n    /**\n     * Handle pagination changes\n     *\n     * @param {number} newOffset - the new page offset value\n     */\n    paginate = (newOffset: number) => {\n        this.setState({ currentOffset: newOffset }, this.refreshCollection);\n    };\n\n    /**\n     * Renders the file picker\n     *\n     * @private\n     * @inheritdoc\n     * @return {Element}\n     */\n    render() {\n        const {\n            language,\n            messages,\n            rootFolderId,\n            logoUrl,\n            canUpload,\n            canSetShareAccess,\n            canCreateNewFolder,\n            extensions,\n            maxSelectable,\n            type,\n            token,\n            sharedLink,\n            sharedLinkPassword,\n            apiHost,\n            uploadHost,\n            isSmall,\n            className,\n            measureRef,\n            chooseButtonLabel,\n            cancelButtonLabel,\n            requestInterceptor,\n            responseInterceptor,\n        }: Props = this.props;\n        const {\n            view,\n            rootName,\n            selected,\n            currentCollection,\n            currentPageSize,\n            searchQuery,\n            isCreateFolderModalOpen,\n            isUploadModalOpen,\n            isLoading,\n            errorCode,\n            focusedRow,\n        }: State = this.state;\n        const { id, offset, permissions, totalCount }: Collection = currentCollection;\n        const { can_upload }: BoxItemPermission = permissions || {};\n        const selectedCount: number = Object.keys(selected).length;\n        const isSingleSelect = maxSelectable === 1;\n        const hasHitSelectionLimit: boolean = selectedCount === maxSelectable && !isSingleSelect;\n        const allowUpload: boolean = canUpload && !!can_upload;\n        const allowCreate: boolean = canCreateNewFolder && !!can_upload;\n        const styleClassName = classNames('be bcp', className);\n\n        /* eslint-disable jsx-a11y/no-static-element-interactions */\n        /* eslint-disable jsx-a11y/no-noninteractive-tabindex */\n        return (\n            <Internationalize language={language} messages={messages}>\n                <div id={this.id} className={styleClassName} ref={measureRef} data-testid=\"content-picker\">\n                    <div className=\"be-app-element\" onKeyDown={this.onKeyDown} tabIndex={0}>\n                        <Header\n                            view={view}\n                            isSmall={isSmall}\n                            searchQuery={searchQuery}\n                            logoUrl={logoUrl}\n                            onSearch={this.search}\n                        />\n                        <SubHeader\n                            view={view}\n                            rootId={rootFolderId}\n                            isSmall={isSmall}\n                            rootName={rootName}\n                            currentCollection={currentCollection}\n                            canUpload={allowUpload}\n                            canCreateNewFolder={allowCreate}\n                            onUpload={this.upload}\n                            onCreate={this.createFolder}\n                            onItemClick={this.fetchFolder}\n                            onSortChange={this.sort}\n                        />\n                        <Content\n                            view={view}\n                            isSmall={isSmall}\n                            rootId={rootFolderId}\n                            rootElement={this.rootElement}\n                            focusedRow={focusedRow}\n                            selectableType={type}\n                            canSetShareAccess={canSetShareAccess}\n                            extensionsWhitelist={extensions}\n                            hasHitSelectionLimit={hasHitSelectionLimit}\n                            currentCollection={currentCollection}\n                            isSingleSelect={isSingleSelect}\n                            tableRef={this.tableRef}\n                            onItemSelect={this.select}\n                            onItemClick={this.onItemClick}\n                            onFocusChange={this.onFocusChange}\n                            onShareAccessChange={this.changeShareAccess}\n                        />\n                        <Footer\n                            selectedCount={selectedCount}\n                            hasHitSelectionLimit={hasHitSelectionLimit}\n                            isSingleSelect={isSingleSelect}\n                            onSelectedClick={this.showSelected}\n                            onChoose={this.choose}\n                            onCancel={this.cancel}\n                            chooseButtonLabel={chooseButtonLabel}\n                            cancelButtonLabel={cancelButtonLabel}\n                        >\n                            <Pagination\n                                offset={offset}\n                                onChange={this.paginate}\n                                pageSize={currentPageSize}\n                                totalCount={totalCount}\n                            />\n                        </Footer>\n                    </div>\n                    {allowUpload && !!this.appElement ? (\n                        <UploadDialog\n                            isOpen={isUploadModalOpen}\n                            currentFolderId={id}\n                            token={token}\n                            sharedLink={sharedLink}\n                            sharedLinkPassword={sharedLinkPassword}\n                            apiHost={apiHost}\n                            uploadHost={uploadHost}\n                            onClose={this.uploadSuccessHandler}\n                            parentElement={this.rootElement}\n                            appElement={this.appElement}\n                            requestInterceptor={requestInterceptor}\n                            responseInterceptor={responseInterceptor}\n                        />\n                    ) : null}\n                    {allowCreate && !!this.appElement ? (\n                        <CreateFolderDialog\n                            isOpen={isCreateFolderModalOpen}\n                            onCreate={this.createFolderCallback}\n                            onCancel={this.closeModals}\n                            isLoading={isLoading}\n                            errorCode={errorCode}\n                            parentElement={this.rootElement}\n                            appElement={this.appElement}\n                        />\n                    ) : null}\n                </div>\n            </Internationalize>\n        );\n        /* eslint-enable jsx-a11y/no-static-element-interactions */\n        /* eslint-enable jsx-a11y/no-noninteractive-tabindex */\n    }\n}\n\nexport { ContentPicker as ContentPickerComponent };\nexport default makeResponsive(ContentPicker);\n"],"file":"ContentPicker.js"}