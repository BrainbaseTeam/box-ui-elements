{"version":3,"sources":["../../../src/elements/content-picker/ItemList.js"],"names":["React","classNames","Table","Column","AutoSizer","KeyBinder","nameCellRenderer","iconCellRenderer","isFocusableElement","focus","shareAccessCellRenderer","selectionCellRenderer","isRowSelectable","VIEW_SELECTED","FIELD_NAME","FIELD_ID","FIELD_SHARED_LINK","TYPE_FOLDER","ItemList","view","rootId","isSmall","rootElement","focusedRow","selectableType","canSetShareAccess","hasHitSelectionLimit","isSingleSelect","extensionsWhitelist","onItemSelect","onItemClick","onShareAccessChange","onFocusChange","currentCollection","tableRef","iconCell","nameCell","selectionCell","shareAccessCell","id","items","rowCount","length","rowClassName","index","selected","type","isSelectable","onRowClick","event","rowData","target","scrollToRow","onSectionRendered","focusOnRender","width","height","startIndex","stopIndex","rowStartIndex","rowStopIndex"],"mappings":"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","sourcesContent":["/**\n * @flow\n * @file Item list component\n * @author Box\n */\n\nimport React from 'react';\nimport classNames from 'classnames';\nimport { Table, Column } from 'react-virtualized/dist/es/Table';\nimport AutoSizer from 'react-virtualized/dist/es/AutoSizer';\nimport KeyBinder from '../common/KeyBinder';\nimport nameCellRenderer from '../common/item/nameCellRenderer';\nimport iconCellRenderer from '../common/item/iconCellRenderer';\nimport { isFocusableElement, focus } from '../../utils/dom';\nimport shareAccessCellRenderer from './shareAccessCellRenderer';\nimport selectionCellRenderer from './selectionCellRenderer';\nimport isRowSelectable from './cellRendererHelper';\nimport { VIEW_SELECTED, FIELD_NAME, FIELD_ID, FIELD_SHARED_LINK, TYPE_FOLDER } from '../../constants';\nimport type { View, Collection, BoxItem } from '../../common/types/core';\nimport 'react-virtualized/styles.css';\nimport './ItemList.scss';\n\ntype Props = {\n    canSetShareAccess: boolean,\n    currentCollection: Collection,\n    extensionsWhitelist: string[],\n    focusedRow: number,\n    hasHitSelectionLimit: boolean,\n    isSingleSelect: boolean,\n    isSmall: boolean,\n    onFocusChange: Function,\n    onItemClick: Function,\n    onItemSelect: Function,\n    onShareAccessChange: Function,\n    rootElement?: HTMLElement,\n    rootId: string,\n    selectableType: string,\n    tableRef: Function,\n    view: View,\n};\n\nconst ItemList = ({\n    view,\n    rootId,\n    isSmall,\n    rootElement,\n    focusedRow,\n    selectableType,\n    canSetShareAccess,\n    hasHitSelectionLimit,\n    isSingleSelect,\n    extensionsWhitelist,\n    onItemSelect,\n    onItemClick,\n    onShareAccessChange,\n    onFocusChange,\n    currentCollection,\n    tableRef,\n}: Props) => {\n    const iconCell = iconCellRenderer();\n    const nameCell = nameCellRenderer(rootId, view, onItemClick);\n    const selectionCell = selectionCellRenderer(\n        onItemSelect,\n        selectableType,\n        extensionsWhitelist,\n        hasHitSelectionLimit,\n        isSingleSelect,\n    );\n    const shareAccessCell = shareAccessCellRenderer(\n        onShareAccessChange,\n        canSetShareAccess,\n        selectableType,\n        extensionsWhitelist,\n        hasHitSelectionLimit,\n    );\n    const { id, items = [] }: Collection = currentCollection;\n    const rowCount: number = items.length;\n\n    const rowClassName = ({ index }) => {\n        if (index === -1) {\n            return '';\n        }\n\n        const { selected, type } = items[index];\n        const isSelectable = isRowSelectable(selectableType, extensionsWhitelist, hasHitSelectionLimit, items[index]);\n        return classNames(`bcp-item-row bcp-item-row-${index}`, {\n            'bcp-item-row-selected': selected && view !== VIEW_SELECTED,\n            'bcp-item-row-unselectable': type !== TYPE_FOLDER && !isSelectable, // folder row should never dim\n        });\n    };\n\n    const onRowClick = ({\n        event,\n        rowData,\n        index,\n    }: {\n        event: Event & { target: HTMLElement },\n        index: number,\n        rowData: BoxItem,\n    }) => {\n        // If the click is happening on a clickable element on the item row, ignore row selection\n        if (\n            isRowSelectable(selectableType, extensionsWhitelist, hasHitSelectionLimit, rowData) &&\n            !isFocusableElement(event.target)\n        ) {\n            onItemSelect(rowData);\n        } else {\n            onFocusChange(index);\n        }\n    };\n\n    return (\n        <KeyBinder\n            columnCount={1}\n            rowCount={rowCount}\n            className=\"bcp-item-grid\"\n            id={id}\n            items={items}\n            onSelect={onItemSelect}\n            onOpen={onItemClick}\n            scrollToRow={focusedRow}\n            onScrollToChange={({ scrollToRow }) => focus(rootElement, `.bcp-item-row-${scrollToRow}`)}\n        >\n            {({ onSectionRendered, scrollToRow, focusOnRender }) => (\n                <AutoSizer>\n                    {({ width, height }) => (\n                        <Table\n                            width={width}\n                            height={height}\n                            disableHeader\n                            headerHeight={0}\n                            rowHeight={isSmall ? 70 : 50}\n                            rowCount={rowCount}\n                            rowGetter={({ index }) => items[index]}\n                            ref={tableRef}\n                            rowClassName={rowClassName}\n                            onRowClick={onRowClick}\n                            scrollToIndex={scrollToRow}\n                            onRowsRendered={({ startIndex, stopIndex }) => {\n                                onSectionRendered({\n                                    rowStartIndex: startIndex,\n                                    rowStopIndex: stopIndex,\n                                });\n                                if (focusOnRender) {\n                                    focus(rootElement, `.bcp-item-row-${scrollToRow}`);\n                                }\n                            }}\n                        >\n                            <Column\n                                dataKey={FIELD_ID}\n                                cellRenderer={iconCell}\n                                width={isSmall ? 30 : 50}\n                                flexShrink={0}\n                            />\n                            <Column dataKey={FIELD_NAME} cellRenderer={nameCell} width={300} flexGrow={1} />\n                            {isSmall ? null : (\n                                <Column\n                                    dataKey={FIELD_SHARED_LINK}\n                                    cellRenderer={shareAccessCell}\n                                    width={260}\n                                    flexShrink={0}\n                                />\n                            )}\n                            <Column\n                                dataKey={FIELD_ID}\n                                cellRenderer={selectionCell}\n                                width={isSmall ? 20 : 30}\n                                flexShrink={0}\n                            />\n                        </Table>\n                    )}\n                </AutoSizer>\n            )}\n        </KeyBinder>\n    );\n};\n\nexport default ItemList;\n"],"file":"ItemList.js"}