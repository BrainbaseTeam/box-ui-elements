{"version":3,"sources":["../../../src/elements/content-explorer/ContentExplorer.js"],"names":["React","Component","classNames","cloneDeep","debounce","flow","noop","uniqueid","CreateFolderDialog","UploadDialog","Header","Pagination","SubHeader","makeResponsive","openUrlInsideIframe","Internationalize","API","Footer","PreviewDialog","ShareDialog","RenameDialog","DeleteConfirmationDialog","Content","isFocusableElement","isInputElement","focus","FILE_SHARED_LINK_FIELDS_TO_FETCH","FOLDER_FIELDS_TO_FETCH","LocalStore","withFeatureConsumer","withFeatureProvider","DEFAULT_HOSTNAME_UPLOAD","DEFAULT_HOSTNAME_API","DEFAULT_HOSTNAME_APP","DEFAULT_HOSTNAME_STATIC","DEFAULT_SEARCH_DEBOUNCE","SORT_ASC","FIELD_NAME","DEFAULT_ROOT","VIEW_SEARCH","VIEW_FOLDER","VIEW_ERROR","VIEW_RECENTS","VIEW_METADATA","VIEW_MODE_LIST","TYPE_FILE","TYPE_WEBLINK","TYPE_FOLDER","CLIENT_NAME_CONTENT_EXPLORER","DEFAULT_PAGE_NUMBER","DEFAULT_PAGE_SIZE","DEFAULT_VIEW_FILES","DEFAULT_VIEW_RECENTS","DEFAULT_VIEW_METADATA","ERROR_CODE_ITEM_NAME_INVALID","ERROR_CODE_ITEM_NAME_TOO_LONG","TYPED_ID_FOLDER_PREFIX","GRID_VIEW_MAX_COLUMNS","GRID_VIEW_MIN_COLUMNS","localStoreViewMode","ContentExplorer","props","error","setState","view","console","state","id","currentCollection","searchQuery","fetchFolder","showRecents","search","Error","triggerNavigationEvent","rootFolderId","currentId","currentOffset","limit","currentPageSize","sortBy","sortDirection","folderId","hasFolderChanged","hasSearchQuery","trim","length","offset","firstLoad","rootElement","currentUnloadedCollection","fields","push","api","getFolderAPI","getFolder","collection","fetchFolderSuccessCallback","errorCallback","forceFetch","item","type","isTouch","preview","selected","closeModals","updateCollection","query","getSearchAPI","searchSuccessCallback","trimmedQuery","debouncedSearch","cancel","undefined","permissions","canUpload","can_upload","isUploadModalOpen","access","canSetShareAccess","can_set_share_access","isLoading","getAPI","share","updatedItem","select","refreshCollection","callback","items","onSelect","selectedItem","focusedRow","findIndex","i","picked","selectedKeys","Object","keys","cacheKey","getCacheKey","existing","pickedItem","log","onSetThumbnail","onRemoveThumbnail","url","window","open","previewCallback","canPreview","can_preview","isPreviewModalOpen","downloadCallback","onBatchDownload","results","map","key","clone","onBatchCancel","forEach","canDownload","onDownload","can_download","openUrl","getFileAPI","getDownloadUrl","deleteCallback","isDeleteModalOpen","canDelete","onDelete","parent","parentId","can_delete","deleteItem","renameCallback","nameWithoutExt","extension","isRenameModalOpen","canRename","onRename","can_rename","errorCode","name","rename","code","createFolderCallback","isCreateFolderModalOpen","canCreateNewFolder","onCreate","create","shareCallback","getFolderFields","handleSharedLinkSuccess","getFile","getWebLinkAPI","getWeblink","newItem","isShareModalOpen","canShare","can_share","fetchSharedLinkInfo","table","event","target","toLowerCase","preventDefault","globalModifier","upload","createFolder","newOffset","store","getItem","isSmall","isMedium","isLarge","maxWidthColumns","viewMode","setItem","forceUpdate","sliderValue","gridColumnCount","apiHost","initialPage","initialPageSize","language","requestInterceptor","responseInterceptor","sharedLink","sharedLinkPassword","token","uploadHost","clientName","rootName","destroy","clearCache","currentFolderId","defaultView","document","getElementById","appElement","firstElementChild","showMetadataQueryResults","prevState","prevFolderId","metadataQueryCollection","percentLoaded","metadataQuery","getMetadataQueryAPI","queryMetadata","showMetadataQueryResultsSuccessCallback","autoFocus","activeElement","onNavigate","boxItem","finishNavigation","getRecentsAPI","recents","recentsSuccessCallback","fileAPI","newCollection","selectedId","Promise","all","getThumbnailUrl","thumbnails","obj","index","isSelected","currentItem","isPicked","thumbnailUrl","metadata","newSelectedItem","messages","logoUrl","appHost","staticHost","className","measureRef","onPreview","onUpload","contentPreviewProps","metadataColumnsToShow","totalCount","styleClassName","allowUpload","allowCreate","hasHeader","pickedCount","getViewMode","maxGridColumnCount","getMaxNumberOfGridViewColumnsForWidth","onKeyDown","onGridViewSliderChange","sort","changeViewMode","Math","min","onItemClick","delete","download","pick","setThumbnail","removeThumbnail","tableRef","batchDownload","batchCancel","paginate","uploadSuccessHandler","changeShareAccess","getCache","contentSidebarProps","ContentExplorerComponent"],"mappings":"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","sourcesContent":["/**\n * @flow\n * @file Content Explorer Component\n * @author Box\n */\n\nimport 'regenerator-runtime/runtime';\nimport React, { Component } from 'react';\nimport classNames from 'classnames';\nimport cloneDeep from 'lodash/cloneDeep';\nimport debounce from 'lodash/debounce';\nimport flow from 'lodash/flow';\nimport noop from 'lodash/noop';\nimport uniqueid from 'lodash/uniqueId';\nimport CreateFolderDialog from '../common/create-folder-dialog';\nimport UploadDialog from '../common/upload-dialog';\nimport Header from '../common/header';\nimport Pagination from '../common/pagination';\nimport SubHeader from '../common/sub-header/SubHeader';\nimport makeResponsive from '../common/makeResponsive';\nimport openUrlInsideIframe from '../../utils/iframe';\nimport Internationalize from '../common/Internationalize';\nimport API from '../../api';\nimport Footer from './Footer';\nimport PreviewDialog from './PreviewDialog';\nimport ShareDialog from './ShareDialog';\nimport RenameDialog from './RenameDialog';\nimport DeleteConfirmationDialog from './DeleteConfirmationDialog';\nimport Content from './Content';\nimport { isFocusableElement, isInputElement, focus } from '../../utils/dom';\nimport { FILE_SHARED_LINK_FIELDS_TO_FETCH, FOLDER_FIELDS_TO_FETCH } from '../../utils/fields';\nimport LocalStore from '../../utils/LocalStore';\nimport { withFeatureConsumer, withFeatureProvider, type FeatureConfig } from '../common/feature-checking';\nimport {\n    DEFAULT_HOSTNAME_UPLOAD,\n    DEFAULT_HOSTNAME_API,\n    DEFAULT_HOSTNAME_APP,\n    DEFAULT_HOSTNAME_STATIC,\n    DEFAULT_SEARCH_DEBOUNCE,\n    SORT_ASC,\n    FIELD_NAME,\n    DEFAULT_ROOT,\n    VIEW_SEARCH,\n    VIEW_FOLDER,\n    VIEW_ERROR,\n    VIEW_RECENTS,\n    VIEW_METADATA,\n    VIEW_MODE_LIST,\n    TYPE_FILE,\n    TYPE_WEBLINK,\n    TYPE_FOLDER,\n    CLIENT_NAME_CONTENT_EXPLORER,\n    DEFAULT_PAGE_NUMBER,\n    DEFAULT_PAGE_SIZE,\n    DEFAULT_VIEW_FILES,\n    DEFAULT_VIEW_RECENTS,\n    DEFAULT_VIEW_METADATA,\n    ERROR_CODE_ITEM_NAME_INVALID,\n    ERROR_CODE_ITEM_NAME_TOO_LONG,\n    TYPED_ID_FOLDER_PREFIX,\n} from '../../constants';\nimport type { ViewMode } from '../common/flowTypes';\nimport type { MetadataQuery, MetadataQueryResponse, MetadataColumnsToShow } from '../../common/types/metadataQueries';\nimport '../common/fonts.scss';\nimport '../common/base.scss';\nimport '../common/modal.scss';\nimport './ContentExplorer.scss';\n\nconst GRID_VIEW_MAX_COLUMNS = 7;\nconst GRID_VIEW_MIN_COLUMNS = 1;\n\ntype Props = {\n    apiHost: string,\n    appHost: string,\n    autoFocus: boolean,\n    canCreateNewFolder: boolean,\n    canDelete: boolean,\n    canDownload: boolean,\n    canPreview: boolean,\n    canRename: boolean,\n    canSetShareAccess: boolean,\n    canShare: boolean,\n    canUpload: boolean,\n    className: string,\n    contentPreviewProps: ContentPreviewProps,\n    currentFolderId?: string,\n    defaultView: DefaultView,\n    features: FeatureConfig,\n    initialPage: number,\n    initialPageSize: number,\n    isLarge: boolean,\n    isMedium: boolean,\n    isSmall: boolean,\n    isTouch: boolean,\n    isVeryLarge: boolean,\n    language?: string,\n    logoUrl?: string,\n    measureRef?: Function,\n    messages?: StringMap,\n    metadataColumnsToShow: MetadataColumnsToShow,\n    metadataQuery: MetadataQuery,\n    onBatchCancel: Function,\n    onBatchDownload: Function,\n    onCreate: Function,\n    onDelete: Function,\n    onDownload: Function,\n    onNavigate: Function,\n    onPreview: Function,\n    onRename: Function,\n    onSelect: Function,\n    onSetThumbnail: Function,\n    onRemoveThumbnail: Function,\n    onUpload: Function,\n    requestInterceptor?: Function,\n    responseInterceptor?: Function,\n    rootFolderId: string,\n    sharedLink?: string,\n    sharedLinkPassword?: string,\n    sortBy: SortBy,\n    sortDirection: SortDirection,\n    staticHost: string,\n    token: Token,\n    uploadHost: string,\n};\n\ntype State = {\n    currentCollection: Collection,\n    currentOffset: number,\n    currentPageSize: number,\n    errorCode: string,\n    focusedRow: number,\n    gridColumnCount: number,\n    isCreateFolderModalOpen: boolean,\n    isDeleteModalOpen: boolean,\n    isLoading: boolean,\n    isPreviewModalOpen: boolean,\n    isRenameModalOpen: boolean,\n    isShareModalOpen: boolean,\n    isUploadModalOpen: boolean,\n    picked: { [string]: BoxItem },\n    rootName: string,\n    searchQuery: string,\n    selected?: BoxItem,\n    sortBy: SortBy,\n    sortDirection: SortDirection,\n    view: View,\n};\n\nconst localStoreViewMode = 'bce.defaultViewMode';\n\nclass ContentExplorer extends Component<Props, State> {\n    id: string;\n\n    api: API;\n\n    state: State;\n\n    props: Props;\n\n    table: any;\n\n    rootElement: HTMLElement;\n\n    appElement: HTMLElement;\n\n    globalModifier: boolean;\n\n    firstLoad: boolean = true; // Keeps track of very 1st load\n\n    store: LocalStore = new LocalStore();\n\n    static defaultProps = {\n        rootFolderId: DEFAULT_ROOT,\n        sortBy: FIELD_NAME,\n        sortDirection: SORT_ASC,\n        canDownload: true,\n        canDelete: true,\n        canUpload: true,\n        canRename: true,\n        canShare: true,\n        canPreview: true,\n        canSetShareAccess: true,\n        canCreateNewFolder: true,\n        autoFocus: false,\n        apiHost: DEFAULT_HOSTNAME_API,\n        appHost: DEFAULT_HOSTNAME_APP,\n        staticHost: DEFAULT_HOSTNAME_STATIC,\n        uploadHost: DEFAULT_HOSTNAME_UPLOAD,\n        className: '',\n        onBatchCancel: noop,\n        onBatchDownload: noop,\n        onDelete: noop,\n        onDownload: noop,\n        onPreview: noop,\n        onRename: noop,\n        onCreate: noop,\n        onSelect: noop,\n        onSetThumbnail: noop,\n        onRemoveThumbnail: noop,\n        onUpload: noop,\n        onNavigate: noop,\n        defaultView: DEFAULT_VIEW_FILES,\n        initialPage: DEFAULT_PAGE_NUMBER,\n        initialPageSize: DEFAULT_PAGE_SIZE,\n        contentPreviewProps: {\n            contentSidebarProps: {},\n        },\n    };\n\n    /**\n     * [constructor]\n     *\n     * @private\n     * @return {ContentExplorer}\n     */\n    constructor(props: Props) {\n        super(props);\n\n        const {\n            apiHost,\n            initialPage,\n            initialPageSize,\n            language,\n            requestInterceptor,\n            responseInterceptor,\n            rootFolderId,\n            sharedLink,\n            sharedLinkPassword,\n            sortBy,\n            sortDirection,\n            token,\n            uploadHost,\n        }: Props = props;\n\n        this.api = new API({\n            apiHost,\n            clientName: CLIENT_NAME_CONTENT_EXPLORER,\n            id: `${TYPED_ID_FOLDER_PREFIX}${rootFolderId}`,\n            language,\n            requestInterceptor,\n            responseInterceptor,\n            sharedLink,\n            sharedLinkPassword,\n            token,\n            uploadHost,\n        });\n\n        this.id = uniqueid('bce_');\n\n        this.state = {\n            currentCollection: {},\n            currentOffset: initialPageSize * (initialPage - 1),\n            currentPageSize: initialPageSize,\n            errorCode: '',\n            focusedRow: 0,\n            gridColumnCount: 4,\n            isCreateFolderModalOpen: false,\n            isDeleteModalOpen: false,\n            isLoading: false,\n            isPreviewModalOpen: false,\n            isRenameModalOpen: false,\n            isShareModalOpen: false,\n            isUploadModalOpen: false,\n            picked: {},\n            rootName: '',\n            searchQuery: '',\n            sortBy,\n            sortDirection,\n            view: VIEW_FOLDER,\n        };\n    }\n\n    /**\n     * Destroys api instances\n     *\n     * @private\n     * @return {void}\n     */\n    clearCache(): void {\n        this.api.destroy(true);\n    }\n\n    /**\n     * Cleanup\n     *\n     * @private\n     * @inheritdoc\n     * @return {void}\n     */\n    componentWillUnmount() {\n        this.clearCache();\n    }\n\n    /**\n     * Fetches the root folder on load\n     *\n     * @private\n     * @inheritdoc\n     * @return {void}\n     */\n    componentDidMount() {\n        const { currentFolderId, defaultView }: Props = this.props;\n        this.rootElement = ((document.getElementById(this.id): any): HTMLElement);\n        this.appElement = ((this.rootElement.firstElementChild: any): HTMLElement);\n\n        switch (defaultView) {\n            case DEFAULT_VIEW_RECENTS:\n                this.showRecents();\n                break;\n            case DEFAULT_VIEW_METADATA:\n                this.showMetadataQueryResults();\n                break;\n            default:\n                this.fetchFolder(currentFolderId);\n        }\n    }\n\n    /**\n     * Fetches the current folder if different\n     * from what was already fetched before.\n     *\n     * @private\n     * @inheritdoc\n     * @return {void}\n     */\n    componentDidUpdate({ currentFolderId: prevFolderId }: Props, prevState: State): void {\n        const { currentFolderId }: Props = this.props;\n        const {\n            currentCollection: { id },\n        }: State = prevState;\n\n        if (prevFolderId === currentFolderId) {\n            return;\n        }\n\n        if (typeof currentFolderId === 'string' && id !== currentFolderId) {\n            this.fetchFolder(currentFolderId);\n        }\n    }\n\n    /**\n     * Metadata queries success callback\n     *\n     * @private\n     * @param {Object} metadataQueryCollection - Metadata query response collection\n     * @return {void}\n     */\n    showMetadataQueryResultsSuccessCallback(metadataQueryCollection: MetadataQueryResponse) {\n        const { currentCollection }: State = this.state;\n        this.setState({\n            currentCollection: { ...currentCollection, ...metadataQueryCollection, percentLoaded: 100 },\n        });\n    }\n\n    /**\n     * Queries metadata_queries/execute API and fetches the result\n     *\n     * @private\n     * @return {void}\n     */\n    showMetadataQueryResults() {\n        const { metadataQuery }: Props = this.props;\n        // Reset search state, the view and show busy indicator\n        this.setState({\n            searchQuery: '',\n            currentCollection: this.currentUnloadedCollection(),\n            view: VIEW_METADATA,\n        });\n\n        // Fetch the Metadata Query Results\n        this.api.getMetadataQueryAPI().queryMetadata(\n            metadataQuery,\n            (metadataQueryCollection: MetadataQueryResponse) => {\n                this.showMetadataQueryResultsSuccessCallback(metadataQueryCollection);\n            },\n            this.errorCallback,\n            { forceFetch: true },\n        );\n    }\n\n    /**\n     * Resets the collection so that the loading bar starts showing\n     *\n     * @private\n     * @return {Collection}\n     */\n    currentUnloadedCollection(): Collection {\n        const { currentCollection }: State = this.state;\n        return Object.assign(currentCollection, {\n            percentLoaded: 0,\n        });\n    }\n\n    /**\n     * Network error callback\n     *\n     * @private\n     * @param {Error} error error object\n     * @return {void}\n     */\n    errorCallback = (error: any) => {\n        this.setState({\n            view: VIEW_ERROR,\n        });\n        /* eslint-disable no-console */\n        console.error(error);\n        /* eslint-enable no-console */\n    };\n\n    /**\n     * Focuses the grid and fires navigate event\n     *\n     * @private\n     * @return {void}\n     */\n    finishNavigation() {\n        const { autoFocus }: Props = this.props;\n        const {\n            currentCollection: { percentLoaded },\n        }: State = this.state;\n\n        // If loading for the very first time, only allow focus if autoFocus is true\n        if (this.firstLoad && !autoFocus) {\n            this.firstLoad = false;\n            return;\n        }\n\n        // Don't focus the grid until its loaded and user is not already on an interactable element\n        if (percentLoaded === 100 && !isFocusableElement(document.activeElement)) {\n            focus(this.rootElement, '.bce-item-row');\n            this.setState({ focusedRow: 0 });\n        }\n\n        this.firstLoad = false;\n    }\n\n    /**\n     * Refreshing the item collection depending upon the view.\n     * Navigation event is prevented.\n     *\n     * @private\n     * @return {void}\n     */\n    refreshCollection = () => {\n        const {\n            currentCollection: { id },\n            view,\n            searchQuery,\n        }: State = this.state;\n        if (view === VIEW_FOLDER && id) {\n            this.fetchFolder(id, false);\n        } else if (view === VIEW_RECENTS) {\n            this.showRecents(false);\n        } else if (view === VIEW_SEARCH && searchQuery) {\n            this.search(searchQuery);\n        } else {\n            throw new Error('Cannot refresh incompatible view!');\n        }\n    };\n\n    /**\n     * Folder fetch success callback\n     *\n     * @private\n     * @param {Object} collection - item collection object\n     * @param {Boolean|void} triggerNavigationEvent - To trigger navigate event and focus grid\n     * @return {void}\n     */\n    fetchFolderSuccessCallback(collection: Collection, triggerNavigationEvent: boolean): void {\n        const { onNavigate, rootFolderId }: Props = this.props;\n        const { boxItem, id, name }: Collection = collection;\n        const { selected, picked }: State = this.state;\n        const rootName = id === rootFolderId ? name : '';\n\n        // Close any open modals\n        this.closeModals();\n\n        this.updateCollection(collection, selected, () => {\n            if (triggerNavigationEvent) {\n                // Fire folder navigation event\n                this.setState({ rootName }, this.finishNavigation);\n                if (boxItem) {\n                    onNavigate(cloneDeep(boxItem));\n                }\n            } else {\n                this.setState({ rootName });\n            }\n        });\n    }\n\n    /**\n     * Fetches a folder, defaults to fetching root folder\n     *\n     * @private\n     * @param {string|void} [id] folder id\n     * @param {Boolean|void} [triggerNavigationEvent] To trigger navigate event\n     * @return {void}\n     */\n    fetchFolder = (id?: string, triggerNavigationEvent?: boolean = true) => {\n        const { rootFolderId }: Props = this.props;\n        const {\n            currentCollection: { id: currentId },\n            currentOffset,\n            currentPageSize: limit,\n            searchQuery = '',\n            sortBy,\n            sortDirection,\n        }: State = this.state;\n        const folderId: string = typeof id === 'string' ? id : rootFolderId;\n        const hasFolderChanged = currentId && currentId !== folderId;\n        const hasSearchQuery = !!searchQuery.trim().length;\n        const offset = hasFolderChanged || hasSearchQuery ? 0 : currentOffset; // Reset offset on folder or mode change\n\n        // If we are navigating around, aka not first load\n        // then reset the focus to the root so that after\n        // the collection loads the activeElement is not the\n        // button that was clicked to fetch the folder\n        if (!this.firstLoad) {\n            this.rootElement.focus();\n        }\n\n        // Reset search state, the view and show busy indicator\n        this.setState({\n            searchQuery: '',\n            view: VIEW_FOLDER,\n            currentCollection: this.currentUnloadedCollection(),\n            currentOffset: offset,\n        });\n\n        let fields = FOLDER_FIELDS_TO_FETCH;\n        fields.push('metadata.enterprise_261189234.customThumbnail');\n\n        // Fetch the folder using folder API\n        this.api.getFolderAPI().getFolder(\n            folderId,\n            limit,\n            offset,\n            sortBy,\n            sortDirection,\n            (collection: Collection) => {\n                this.fetchFolderSuccessCallback(collection, triggerNavigationEvent);\n            },\n            this.errorCallback,\n            { fields, forceFetch: true },\n        );\n    };\n\n    /**\n     * Action performed when clicking on an item\n     *\n     * @private\n     * @param {Object|string} item - the clicked box item\n     * @return {void}\n     */\n    onItemClick = (item: BoxItem | string) => {\n        // If the id was passed in, just use that\n        if (typeof item === 'string') {\n            this.fetchFolder(item);\n            return;\n        }\n\n        const { id, type }: BoxItem = item;\n        const { isTouch }: Props = this.props;\n\n        if (type === TYPE_FOLDER) {\n            this.fetchFolder(id);\n            return;\n        }\n\n        if (isTouch) {\n            return;\n        }\n\n        this.preview(item);\n    };\n\n    /**\n     * Search success callback\n     *\n     * @private\n     * @param {Object} collection item collection object\n     * @return {void}\n     */\n    searchSuccessCallback = (collection: Collection) => {\n        const { selected }: State = this.state;\n\n        // Close any open modals\n        this.closeModals();\n\n        this.updateCollection(collection, selected);\n    };\n\n    /**\n     * Debounced searching\n     *\n     * @private\n     * @param {string} id folder id\n     * @param {string} query search string\n     * @return {void}\n     */\n    debouncedSearch = debounce((id: string, query: string) => {\n        const { currentOffset, currentPageSize }: State = this.state;\n\n        this.api\n            .getSearchAPI()\n            .search(id, query, currentPageSize, currentOffset, this.searchSuccessCallback, this.errorCallback, {\n                fields: FOLDER_FIELDS_TO_FETCH,\n                forceFetch: true,\n            });\n    }, DEFAULT_SEARCH_DEBOUNCE);\n\n    /**\n     * Searches\n     *\n     * @private\n     * @param {string} query search string\n     * @return {void}\n     */\n    search = (query: string) => {\n        const { rootFolderId }: Props = this.props;\n        const {\n            currentCollection: { id },\n            currentOffset,\n            searchQuery,\n        }: State = this.state;\n        const folderId = typeof id === 'string' ? id : rootFolderId;\n        const trimmedQuery: string = query.trim();\n\n        if (!query) {\n            // Cancel the debounce so we don't search on a previous query\n            this.debouncedSearch.cancel();\n\n            // Query was cleared out, load the prior folder\n            // The prior folder is always the parent folder for search\n            this.setState({ currentOffset: 0 }, () => {\n                this.fetchFolder(folderId, false);\n            });\n\n            return;\n        }\n\n        if (!trimmedQuery) {\n            // Query now only has bunch of spaces\n            // do nothing and but update prior state\n            this.setState({\n                searchQuery: query,\n            });\n            return;\n        }\n\n        this.setState({\n            currentCollection: this.currentUnloadedCollection(),\n            currentOffset: trimmedQuery === searchQuery ? currentOffset : 0,\n            searchQuery: query,\n            selected: undefined,\n            view: VIEW_SEARCH,\n        });\n\n        this.debouncedSearch(folderId, query);\n    };\n\n    /**\n     * Recents fetch success callback\n     *\n     * @private\n     * @param {Object} collection item collection object\n     * @param {Boolean} triggerNavigationEvent - To trigger navigate event\n     * @return {void}\n     */\n    recentsSuccessCallback(collection: Collection, triggerNavigationEvent: boolean) {\n        if (triggerNavigationEvent) {\n            this.updateCollection(collection, undefined, this.finishNavigation);\n        } else {\n            this.updateCollection(collection);\n        }\n    }\n\n    /**\n     * Shows recents.\n     *\n     * @private\n     * @param {Boolean|void} [triggerNavigationEvent] To trigger navigate event\n     * @return {void}\n     */\n    showRecents(triggerNavigationEvent: boolean = true): void {\n        const { rootFolderId }: Props = this.props;\n\n        // Reset search state, the view and show busy indicator\n        this.setState({\n            searchQuery: '',\n            view: VIEW_RECENTS,\n            currentCollection: this.currentUnloadedCollection(),\n            currentOffset: 0,\n        });\n\n        // Fetch the folder using folder API\n        this.api.getRecentsAPI().recents(\n            rootFolderId,\n            (collection: Collection) => {\n                this.recentsSuccessCallback(collection, triggerNavigationEvent);\n            },\n            this.errorCallback,\n            { fields: FOLDER_FIELDS_TO_FETCH, forceFetch: true },\n        );\n    }\n\n    /**\n     * Uploads\n     *\n     * @private\n     * @param {File} file dom file object\n     * @return {void}\n     */\n    upload = () => {\n        const {\n            currentCollection: { id, permissions },\n        }: State = this.state;\n        const { canUpload }: Props = this.props;\n        if (!canUpload || !id || !permissions) {\n            return;\n        }\n\n        const { can_upload }: BoxItemPermission = permissions;\n        if (!can_upload) {\n            return;\n        }\n\n        this.setState({\n            isUploadModalOpen: true,\n        });\n    };\n\n    /**\n     * Upload success handler\n     *\n     * @private\n     * @param {File} file dom file object\n     * @return {void}\n     */\n    uploadSuccessHandler = () => {\n        const {\n            currentCollection: { id },\n        }: State = this.state;\n        this.fetchFolder(id, false);\n    };\n\n    /**\n     * Changes the share access of an item\n     *\n     * @private\n     * @param {Object} item file or folder object\n     * @param {string} access share access\n     * @return {void}\n     */\n    changeShareAccess = (access: Access) => {\n        const { selected }: State = this.state;\n        const { canSetShareAccess }: Props = this.props;\n        if (!selected || !canSetShareAccess) {\n            return;\n        }\n\n        const { permissions, type }: BoxItem = selected;\n        if (!permissions || !type) {\n            return;\n        }\n\n        const { can_set_share_access }: BoxItemPermission = permissions;\n        if (!can_set_share_access) {\n            return;\n        }\n\n        this.setState({ isLoading: true });\n        this.api.getAPI(type).share(selected, access, (updatedItem: BoxItem) => {\n            this.setState({ isLoading: false });\n            this.select(updatedItem);\n        });\n    };\n\n    /**\n     * Chages the sort by and sort direction\n     *\n     * @private\n     * @param {string} sortBy - field to sort by\n     * @param {string} sortDirection - sort direction\n     * @return {void}\n     */\n    sort = (sortBy: SortBy, sortDirection: SortDirection) => {\n        const {\n            currentCollection: { id },\n        }: State = this.state;\n        if (id) {\n            this.setState({ sortBy, sortDirection }, this.refreshCollection);\n        }\n    };\n\n    /**\n     * Sets state with currentCollection updated to have items.selected properties\n     * set according to the given selected param. Also updates the selected item in the\n     * currentcollection. selectedItem will be set to the selected state\n     * item if it is in currentCollection, otherwise it will be set to undefined.\n     *\n     * @private\n     * @param {Collection} collection - collection that needs to be updated\n     * @param {Object} [selectedItem] - The item that should be selected in that collection (if present)\n     * @param {Function} [callback] - callback function that should be called after setState occurs\n     * @return {void}\n     */\n    async updateCollection(collection: Collection, selectedItem: ?BoxItem, callback: Function = noop): Object {\n        const { items = [] } = collection;\n        const fileAPI = this.api.getFileAPI(false);\n        const newCollection: Collection = { ...collection };\n        const selectedId = selectedItem ? selectedItem.id : null;\n        const thumbnails = await Promise.all(items.map(item => fileAPI.getThumbnailUrl(item)));\n        let newSelectedItem: ?BoxItem;\n\n        const { picked }: State = this.state;\n\n        newCollection.items = items.map((obj, index) => {\n            const isSelected = obj.id === selectedId;\n            const currentItem = isSelected ? selectedItem : obj;\n\n            const key = `${obj.type}_${obj.id}`;\n            let isPicked = false;\n            if (key in picked && picked[key].picked) {\n                isPicked = true;\n            }\n\n            const newItem = {\n                ...currentItem,\n                selected: isSelected,\n                thumbnailUrl: thumbnails[index],\n                picked: isPicked,\n\n                // Force metadata always to be updated. This causes thumbnails\n                // to reloaded.\n                metadata: obj.metadata,\n            };\n\n            // Only if selectedItem is in the current collection do we want to set selected state\n            if (isSelected) {\n                newSelectedItem = newItem;\n            }\n\n            return newItem;\n        });\n        this.setState({ currentCollection: newCollection, selected: newSelectedItem }, callback);\n    }\n\n    /**\n     * Selects or unselects an item\n     *\n     * @private\n     * @param {Object} item - file or folder object\n     * @param {Function|void} [onSelect] - optional on select callback\n     * @return {void}\n     */\n    select = (item: BoxItem, callback: Function = noop): void => {\n        const { selected, currentCollection }: State = this.state;\n        const { items = [] } = currentCollection;\n        const { onSelect }: Props = this.props;\n\n        if (item === selected) {\n            callback(item);\n            return;\n        }\n\n        const selectedItem: BoxItem = { ...item, selected: true };\n\n        this.updateCollection(currentCollection, selectedItem, () => {\n            onSelect(cloneDeep([selectedItem]));\n            callback(selectedItem);\n        });\n\n        const focusedRow: number = items.findIndex((i: BoxItem) => i.id === item.id);\n\n        this.setState({ focusedRow });\n    };\n\n    /**\n     * Picks or unpicks item for batch download\n     *\n     * @private\n     * @param {Object} item - file or folder object\n     * @return {void}\n     */\n    pick = (item: BoxItem): void => {\n        const { id, type }: BoxItem = item;\n        const { picked, currentCollection }: State = this.state;\n        const { items = [] } = currentCollection;\n        const selectedKeys: Array<string> = Object.keys(picked);\n        const cacheKey: string = this.api.getAPI(type).getCacheKey(id);\n        const existing = picked[cacheKey];\n\n        if (existing) {\n            item.picked = false;\n            delete picked[cacheKey];\n        } else {\n            item.picked = true;\n            picked[cacheKey] = item;\n        }\n\n        const pickedItem: BoxItem = { ...item };\n        this.updateCollection(currentCollection, pickedItem);\n\n        this.setState({ picked });\n    };\n\n    /**\n     * ...\n     *\n     * @private\n     * @param {Object} item - file or folder object\n     * @return {void}\n     */\n    setThumbnail = (item: BoxItem): void => {\n        console.log('setting thumbnail', item);\n\n        const { onSetThumbnail }: Props = this.props;\n\n        onSetThumbnail(item);\n    };\n\n    /**\n     * ...\n     *\n     * @private\n     * @param {Object} item - file or folder object\n     * @return {void}\n     */\n    removeThumbnail = (item: BoxItem): void => {\n        console.log('remove thumbnail', item);\n\n        const { onRemoveThumbnail }: Props = this.props;\n\n        onRemoveThumbnail(item);\n    };\n\n    /**\n     * Selects the clicked file and then previews it\n     * or opens it, if it was a web link\n     *\n     * @private\n     * @param {Object} item - file or folder object\n     * @return {void}\n     */\n    preview = (item: BoxItem): void => {\n        const { type, url }: BoxItem = item;\n        if (type === TYPE_WEBLINK) {\n            window.open(url);\n            return;\n        }\n\n        this.select(item, this.previewCallback);\n    };\n\n    /**\n     * Previews a file\n     *\n     * @private\n     * @param {Object} item - file or folder object\n     * @return {void}\n     */\n    previewCallback = (): void => {\n        const { selected }: State = this.state;\n        const { canPreview }: Props = this.props;\n        if (!selected || !canPreview) {\n            return;\n        }\n\n        const { permissions } = selected;\n        if (!permissions) {\n            return;\n        }\n\n        const { can_preview }: BoxItemPermission = permissions;\n        if (!can_preview) {\n            return;\n        }\n\n        this.setState({ isPreviewModalOpen: true });\n    };\n\n    /**\n     * Selects the clicked file and then downloads it\n     *\n     * @private\n     * @param {Object} item - file or folder object\n     * @return {void}\n     */\n    download = (item: BoxItem): void => {\n        this.select(item, this.downloadCallback);\n    };\n\n    /**\n     * Starts batch download\n     *\n     * @private\n     * @return {void}\n     */\n    batchDownload = (): void => {\n        const { onBatchDownload }: Props = this.props;\n        const { picked }: State = this.state;\n\n        const results: BoxItem[] = Object.keys(picked).map(key => {\n            const clone: BoxItem = { ...picked[key] };\n            delete clone.picked;\n            return clone;\n        });\n\n        onBatchDownload(results);\n    };\n\n    /**\n     * Clears items marked for batch download\n     *\n     * @private\n     * @return {void}\n     */\n    batchCancel = (): void => {\n        const { onBatchCancel }: Props = this.props;\n        const { picked, currentCollection }: State = this.state;\n\n        Object.keys(picked).forEach(key => delete picked[key].picked);\n\n        this.setState({ picked: {} }, () => onBatchCancel());\n\n        // Remove picked properties from currentCollection so UI also reflects changed state\n        Object.keys(currentCollection).forEach(key => {\n            delete currentCollection[key].picked;\n        });\n\n        this.updateCollection(currentCollection);\n    };\n\n    /**\n     * Downloads a file\n     *\n     * @private\n     * @return {void}\n     */\n    downloadCallback = (): void => {\n        const { selected }: State = this.state;\n        const { canDownload, onDownload }: Props = this.props;\n        if (!selected || !canDownload) {\n            return;\n        }\n\n        const { id, permissions } = selected;\n        if (!id || !permissions) {\n            return;\n        }\n\n        const { can_download }: BoxItemPermission = permissions;\n        if (!can_download) {\n            return;\n        }\n\n        const openUrl: Function = (url: string) => {\n            openUrlInsideIframe(url);\n            onDownload(cloneDeep([selected]));\n        };\n\n        const { type }: BoxItem = selected;\n        if (type === TYPE_FILE) {\n            this.api.getFileAPI().getDownloadUrl(id, selected, openUrl, noop);\n        }\n    };\n\n    /**\n     * Selects the clicked file and then deletes it\n     *\n     * @private\n     * @param {Object} item - file or folder object\n     * @return {void}\n     */\n    delete = (item: BoxItem): void => {\n        this.select(item, this.deleteCallback);\n    };\n\n    /**\n     * Deletes a file\n     *\n     * @private\n     * @return {void}\n     */\n    deleteCallback = (): void => {\n        const { selected, isDeleteModalOpen }: State = this.state;\n        const { canDelete, onDelete }: Props = this.props;\n        if (!selected || !canDelete) {\n            return;\n        }\n\n        const { id, permissions, parent, type }: BoxItem = selected;\n        if (!id || !permissions || !parent || !type) {\n            return;\n        }\n\n        const { id: parentId } = parent;\n        const { can_delete }: BoxItemPermission = permissions;\n        if (!can_delete || !parentId) {\n            return;\n        }\n\n        if (!isDeleteModalOpen) {\n            this.setState({ isDeleteModalOpen: true });\n            return;\n        }\n\n        this.setState({ isLoading: true });\n        this.api.getAPI(type).deleteItem(selected, () => {\n            onDelete(cloneDeep([selected]));\n            this.refreshCollection();\n        });\n    };\n\n    /**\n     * Selects the clicked file and then renames it\n     *\n     * @private\n     * @param {Object} item - file or folder object\n     * @return {void}\n     */\n    rename = (item: BoxItem): void => {\n        this.select(item, this.renameCallback);\n    };\n\n    /**\n     * Callback for renaming an item\n     *\n     * @private\n     * @param {string} value new item name\n     * @return {void}\n     */\n    renameCallback = (nameWithoutExt: string, extension: string): void => {\n        const { selected, isRenameModalOpen }: State = this.state;\n        const { canRename, onRename }: Props = this.props;\n        if (!selected || !canRename) {\n            return;\n        }\n\n        const { id, permissions, type }: BoxItem = selected;\n        if (!id || !permissions || !type) {\n            return;\n        }\n\n        const { can_rename }: BoxItemPermission = permissions;\n        if (!can_rename) {\n            return;\n        }\n\n        if (!isRenameModalOpen || !nameWithoutExt) {\n            this.setState({ isRenameModalOpen: true, errorCode: '' });\n            return;\n        }\n\n        const name = `${nameWithoutExt}${extension}`;\n        if (!nameWithoutExt.trim()) {\n            this.setState({\n                errorCode: ERROR_CODE_ITEM_NAME_INVALID,\n                isLoading: false,\n            });\n            return;\n        }\n\n        this.setState({ isLoading: true });\n        this.api.getAPI(type).rename(\n            selected,\n            name,\n            (updatedItem: BoxItem) => {\n                this.setState({ isRenameModalOpen: false });\n                this.refreshCollection();\n                this.select(updatedItem);\n                onRename(cloneDeep(selected));\n            },\n            ({ code }) => {\n                this.setState({ errorCode: code, isLoading: false });\n            },\n        );\n    };\n\n    /**\n     * Creates a new folder\n     *\n     * @private\n     * @return {void}\n     */\n    createFolder = (): void => {\n        this.createFolderCallback();\n    };\n\n    /**\n     * New folder callback\n     *\n     * @private\n     * @param {string} name - folder name\n     * @return {void}\n     */\n    createFolderCallback = (name?: string): void => {\n        const { isCreateFolderModalOpen, currentCollection }: State = this.state;\n        const { canCreateNewFolder, onCreate }: Props = this.props;\n        if (!canCreateNewFolder) {\n            return;\n        }\n\n        const { id, permissions }: Collection = currentCollection;\n        if (!id || !permissions) {\n            return;\n        }\n\n        const { can_upload }: BoxItemPermission = permissions;\n        if (!can_upload) {\n            return;\n        }\n\n        if (!isCreateFolderModalOpen || !name) {\n            this.setState({ isCreateFolderModalOpen: true, errorCode: '' });\n            return;\n        }\n\n        if (!name) {\n            this.setState({\n                errorCode: ERROR_CODE_ITEM_NAME_INVALID,\n                isLoading: false,\n            });\n            return;\n        }\n\n        if (name.length > 255) {\n            this.setState({\n                errorCode: ERROR_CODE_ITEM_NAME_TOO_LONG,\n                isLoading: false,\n            });\n            return;\n        }\n\n        this.setState({ isLoading: true });\n        this.api.getFolderAPI().create(\n            id,\n            name,\n            (item: BoxItem) => {\n                this.refreshCollection();\n                this.select(item);\n                onCreate(cloneDeep(item));\n            },\n            ({ code }) => {\n                this.setState({\n                    errorCode: code,\n                    isLoading: false,\n                });\n            },\n        );\n    };\n\n    /**\n     * Selects the clicked file and then shares it\n     *\n     * @private\n     * @param {Object} item - file or folder object\n     * @return {void}\n     */\n    share = (item: BoxItem): void => {\n        this.select(item, this.shareCallback);\n    };\n\n    /**\n     * Fetch the shared link info\n     * @param {BoxItem} item - The item (folder, file, weblink)\n     * @returns {void}\n     */\n    fetchSharedLinkInfo = (item: BoxItem): void => {\n        const { id, type }: BoxItem = item;\n\n        switch (type) {\n            case TYPE_FOLDER:\n                this.api.getFolderAPI().getFolderFields(id, this.handleSharedLinkSuccess, noop, {\n                    fields: FILE_SHARED_LINK_FIELDS_TO_FETCH,\n                });\n                break;\n            case TYPE_FILE:\n                this.api\n                    .getFileAPI()\n                    .getFile(id, this.handleSharedLinkSuccess, noop, { fields: FILE_SHARED_LINK_FIELDS_TO_FETCH });\n                break;\n            case TYPE_WEBLINK:\n                this.api\n                    .getWebLinkAPI()\n                    .getWeblink(id, this.handleSharedLinkSuccess, noop, { fields: FILE_SHARED_LINK_FIELDS_TO_FETCH });\n                break;\n            default:\n                throw new Error('Unknown Type');\n        }\n    };\n\n    /**\n     * Handles the shared link info by either creating a share link using enterprise defaults if\n     * it does not already exist, otherwise update the item in the state currentCollection.\n     *\n     * @param {Object} item file or folder\n     * @returns {void}\n     */\n    handleSharedLinkSuccess = (newItem: BoxItem) => {\n        const { currentCollection } = this.state;\n\n        // Update item in collection\n        this.updateCollection(currentCollection, newItem, () => this.setState({ isShareModalOpen: true }));\n    };\n\n    /**\n     * Chages the sort by and sort direction\n     *\n     * @private\n     * @return {void}\n     */\n    shareCallback = (): void => {\n        const { selected }: State = this.state;\n        const { canShare }: Props = this.props;\n\n        if (!selected || !canShare) {\n            return;\n        }\n\n        const { permissions } = selected;\n        if (!permissions) {\n            return;\n        }\n\n        const { can_share }: BoxItemPermission = permissions;\n        if (!can_share) {\n            return;\n        }\n\n        this.fetchSharedLinkInfo(selected);\n    };\n\n    /**\n     * Saves reference to table component\n     *\n     * @private\n     * @param {Component} react component\n     * @return {void}\n     */\n    tableRef = (table: React$Component<*, *>): void => {\n        this.table = table;\n    };\n\n    /**\n     * Closes the modal dialogs that may be open\n     *\n     * @private\n     * @return {void}\n     */\n    closeModals = (): void => {\n        const { focusedRow }: State = this.state;\n\n        this.setState({\n            isLoading: false,\n            isDeleteModalOpen: false,\n            isRenameModalOpen: false,\n            isCreateFolderModalOpen: false,\n            isShareModalOpen: false,\n            isUploadModalOpen: false,\n            isPreviewModalOpen: false,\n        });\n\n        const {\n            selected,\n            currentCollection: { items = [] },\n        }: State = this.state;\n        if (selected && items.length > 0) {\n            focus(this.rootElement, `.bce-item-row-${focusedRow}`);\n        }\n    };\n\n    /**\n     * Keyboard events\n     *\n     * @private\n     * @return {void}\n     */\n    onKeyDown = (event: SyntheticKeyboardEvent<HTMLElement>) => {\n        if (isInputElement(event.target)) {\n            return;\n        }\n\n        const { rootFolderId }: Props = this.props;\n        const key = event.key.toLowerCase();\n\n        switch (key) {\n            case '/':\n                focus(this.rootElement, '.be-search input[type=\"search\"]', false);\n                event.preventDefault();\n                break;\n            case 'arrowdown':\n                focus(this.rootElement, '.bce-item-row', false);\n                this.setState({ focusedRow: 0 });\n                event.preventDefault();\n                break;\n            case 'g':\n                break;\n            case 'b':\n                if (this.globalModifier) {\n                    focus(this.rootElement, '.be-breadcrumb button', false);\n                    event.preventDefault();\n                }\n\n                break;\n            case 'f':\n                if (this.globalModifier) {\n                    this.fetchFolder(rootFolderId);\n                    event.preventDefault();\n                }\n\n                break;\n            case 'u':\n                if (this.globalModifier) {\n                    this.upload();\n                    event.preventDefault();\n                }\n\n                break;\n            case 'r':\n                if (this.globalModifier) {\n                    this.showRecents();\n                    event.preventDefault();\n                }\n\n                break;\n            case 'n':\n                if (this.globalModifier) {\n                    this.createFolder();\n                    event.preventDefault();\n                }\n\n                break;\n            default:\n                this.globalModifier = false;\n                return;\n        }\n\n        this.globalModifier = key === 'g';\n    };\n\n    /**\n     * Handle pagination changes\n     *\n     * @param {number} newOffset - the new page offset value\n     */\n    paginate = (newOffset: number) => {\n        this.setState({ currentOffset: newOffset }, this.refreshCollection);\n    };\n\n    /**\n     * Get the current viewMode, checking local store if applicable\n     *\n     * @return {ViewMode}\n     */\n    getViewMode = (): ViewMode => this.store.getItem(localStoreViewMode) || VIEW_MODE_LIST;\n\n    /**\n     * Get the maximum number of grid view columns based on the current width of the\n     * content explorer.\n     *\n     * @return {number}\n     */\n    getMaxNumberOfGridViewColumnsForWidth = (): number => {\n        const { isSmall, isMedium, isLarge } = this.props;\n        let maxWidthColumns = GRID_VIEW_MAX_COLUMNS;\n        if (isSmall) {\n            maxWidthColumns = 1;\n        } else if (isMedium) {\n            maxWidthColumns = 3;\n        } else if (isLarge) {\n            maxWidthColumns = 5;\n        }\n        return maxWidthColumns;\n    };\n\n    /**\n     * Change the current view mode\n     *\n     * @param {ViewMode} viewMode - the new view mode\n     * @return {void}\n     */\n    changeViewMode = (viewMode: ViewMode): void => {\n        this.store.setItem(localStoreViewMode, viewMode);\n        this.forceUpdate();\n    };\n\n    /**\n     * Callback for when value of GridViewSlider changes\n     *\n     * @param {number} sliderValue - value of slider\n     * @return {void}\n     */\n    onGridViewSliderChange = (sliderValue: number): void => {\n        // need to do this calculation since lowest value of grid view slider\n        // means highest number of columns\n        const gridColumnCount = GRID_VIEW_MAX_COLUMNS - sliderValue + 1;\n        this.setState({ gridColumnCount });\n    };\n\n    /**\n     * Renders the file picker\n     *\n     * @private\n     * @inheritdoc\n     * @return {Element}\n     */\n    render() {\n        const {\n            language,\n            messages,\n            rootFolderId,\n            logoUrl,\n            canUpload,\n            canCreateNewFolder,\n            canSetShareAccess,\n            canDelete,\n            canRename,\n            canDownload,\n            canPreview,\n            canShare,\n            token,\n            sharedLink,\n            sharedLinkPassword,\n            apiHost,\n            appHost,\n            staticHost,\n            uploadHost,\n            isSmall,\n            isMedium,\n            isTouch,\n            className,\n            measureRef,\n            onPreview,\n            onDownload,\n            onUpload,\n            requestInterceptor,\n            responseInterceptor,\n            contentPreviewProps,\n            metadataColumnsToShow,\n        }: Props = this.props;\n\n        const {\n            view,\n            rootName,\n            currentCollection,\n            currentPageSize,\n            searchQuery,\n            gridColumnCount,\n            isDeleteModalOpen,\n            isRenameModalOpen,\n            isShareModalOpen,\n            isUploadModalOpen,\n            isPreviewModalOpen,\n            isCreateFolderModalOpen,\n            selected,\n            picked,\n            isLoading,\n            errorCode,\n            focusedRow,\n        }: State = this.state;\n\n        const { id, offset, permissions, totalCount }: Collection = currentCollection;\n        const { can_upload }: BoxItemPermission = permissions || {};\n        const styleClassName = classNames('be bce', className);\n        const allowUpload: boolean = canUpload && !!can_upload;\n        const allowCreate: boolean = canCreateNewFolder && !!can_upload;\n        const hasHeader: boolean = view !== VIEW_METADATA; // Show Header and SubHeader when it's not metadata view\n        const pickedCount: number = Object.keys(picked).length;\n\n        const viewMode = this.getViewMode();\n        const maxGridColumnCount = this.getMaxNumberOfGridViewColumnsForWidth();\n\n        /* eslint-disable jsx-a11y/no-static-element-interactions */\n        /* eslint-disable jsx-a11y/no-noninteractive-tabindex */\n        return (\n            <Internationalize language={language} messages={messages}>\n                <div id={this.id} className={styleClassName} ref={measureRef} data-testid=\"content-explorer\">\n                    <div className=\"be-app-element\" onKeyDown={this.onKeyDown} tabIndex={0}>\n                        {hasHeader && (\n                            <>\n                                <Header\n                                    view={view}\n                                    isSmall={isSmall}\n                                    searchQuery={searchQuery}\n                                    logoUrl={logoUrl}\n                                    onSearch={this.search}\n                                />\n                                <SubHeader\n                                    view={view}\n                                    viewMode={viewMode}\n                                    rootId={rootFolderId}\n                                    isSmall={isSmall}\n                                    rootName={rootName}\n                                    currentCollection={currentCollection}\n                                    canUpload={allowUpload}\n                                    canCreateNewFolder={allowCreate}\n                                    gridColumnCount={gridColumnCount}\n                                    gridMaxColumns={GRID_VIEW_MAX_COLUMNS}\n                                    gridMinColumns={GRID_VIEW_MIN_COLUMNS}\n                                    maxGridColumnCountForWidth={maxGridColumnCount}\n                                    onUpload={this.upload}\n                                    onCreate={this.createFolder}\n                                    onGridViewSliderChange={this.onGridViewSliderChange}\n                                    onItemClick={this.fetchFolder}\n                                    onSortChange={this.sort}\n                                    onViewModeChange={this.changeViewMode}\n                                />\n                            </>\n                        )}\n                        <Content\n                            canDelete={canDelete}\n                            canDownload={canDownload}\n                            canPreview={canPreview}\n                            canRename={canRename}\n                            canSetShareAccess={canSetShareAccess}\n                            canShare={canShare}\n                            currentCollection={currentCollection}\n                            focusedRow={focusedRow}\n                            gridColumnCount={Math.min(gridColumnCount, maxGridColumnCount)}\n                            isMedium={isMedium}\n                            isSmall={isSmall}\n                            isTouch={isTouch}\n                            onItemClick={this.onItemClick}\n                            onItemDelete={this.delete}\n                            onItemDownload={this.download}\n                            onItemPick={this.pick}\n                            onItemPreview={this.preview}\n                            onItemRename={this.rename}\n                            onItemSelect={this.select}\n                            onItemShare={this.share}\n                            onItemSetThumbnail={this.setThumbnail}\n                            onItemRemoveThumbnail={this.removeThumbnail}\n                            onSortChange={this.sort}\n                            rootElement={this.rootElement}\n                            rootId={rootFolderId}\n                            tableRef={this.tableRef}\n                            view={view}\n                            viewMode={viewMode}\n                            metadataColumnsToShow={metadataColumnsToShow}\n                        />\n                        <Footer\n                            pickedCount={pickedCount}\n                            onBatchDownload={this.batchDownload}\n                            onBatchCancel={this.batchCancel}\n                        >\n                            <Pagination\n                                offset={offset}\n                                onChange={this.paginate}\n                                pageSize={currentPageSize}\n                                totalCount={totalCount}\n                            />\n                        </Footer>\n                    </div>\n                    {allowUpload && !!this.appElement ? (\n                        <UploadDialog\n                            isOpen={isUploadModalOpen}\n                            currentFolderId={id}\n                            token={token}\n                            sharedLink={sharedLink}\n                            sharedLinkPassword={sharedLinkPassword}\n                            apiHost={apiHost}\n                            uploadHost={uploadHost}\n                            onClose={this.uploadSuccessHandler}\n                            parentElement={this.rootElement}\n                            appElement={this.appElement}\n                            onUpload={onUpload}\n                            requestInterceptor={requestInterceptor}\n                            responseInterceptor={responseInterceptor}\n                        />\n                    ) : null}\n                    {allowCreate && !!this.appElement ? (\n                        <CreateFolderDialog\n                            isOpen={isCreateFolderModalOpen}\n                            onCreate={this.createFolderCallback}\n                            onCancel={this.closeModals}\n                            isLoading={isLoading}\n                            errorCode={errorCode}\n                            parentElement={this.rootElement}\n                            appElement={this.appElement}\n                        />\n                    ) : null}\n                    {canDelete && selected && !!this.appElement ? (\n                        <DeleteConfirmationDialog\n                            isOpen={isDeleteModalOpen}\n                            onDelete={this.deleteCallback}\n                            onCancel={this.closeModals}\n                            item={selected}\n                            isLoading={isLoading}\n                            parentElement={this.rootElement}\n                            appElement={this.appElement}\n                        />\n                    ) : null}\n                    {canRename && selected && !!this.appElement ? (\n                        <RenameDialog\n                            isOpen={isRenameModalOpen}\n                            onRename={this.renameCallback}\n                            onCancel={this.closeModals}\n                            item={selected}\n                            isLoading={isLoading}\n                            errorCode={errorCode}\n                            parentElement={this.rootElement}\n                            appElement={this.appElement}\n                        />\n                    ) : null}\n                    {canShare && selected && !!this.appElement ? (\n                        <ShareDialog\n                            isOpen={isShareModalOpen}\n                            canSetShareAccess={canSetShareAccess}\n                            onShareAccessChange={this.changeShareAccess}\n                            onCancel={this.refreshCollection}\n                            item={selected}\n                            isLoading={isLoading}\n                            parentElement={this.rootElement}\n                            appElement={this.appElement}\n                        />\n                    ) : null}\n                    {canPreview && selected && !!this.appElement ? (\n                        <PreviewDialog\n                            isOpen={isPreviewModalOpen}\n                            isTouch={isTouch}\n                            onCancel={this.closeModals}\n                            item={selected}\n                            currentCollection={currentCollection}\n                            token={token}\n                            parentElement={this.rootElement}\n                            appElement={this.appElement}\n                            onPreview={onPreview}\n                            onDownload={onDownload}\n                            canDownload={canDownload}\n                            cache={this.api.getCache()}\n                            apiHost={apiHost}\n                            appHost={appHost}\n                            staticHost={staticHost}\n                            sharedLink={sharedLink}\n                            sharedLinkPassword={sharedLinkPassword}\n                            contentPreviewProps={contentPreviewProps}\n                            requestInterceptor={requestInterceptor}\n                            responseInterceptor={responseInterceptor}\n                        />\n                    ) : null}\n                </div>\n            </Internationalize>\n        );\n        /* eslint-enable jsx-a11y/no-static-element-interactions */\n        /* eslint-enable jsx-a11y/no-noninteractive-tabindex */\n    }\n}\n\nexport { ContentExplorer as ContentExplorerComponent };\nexport default flow([makeResponsive, withFeatureConsumer, withFeatureProvider])(ContentExplorer);\n"],"file":"ContentExplorer.js"}