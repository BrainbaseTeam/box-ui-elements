{"version":3,"sources":["../../../src/elements/content-explorer/Content.js"],"names":["React","EmptyState","ProgressBar","ItemGrid","ItemList","MetadataBasedItemList","VIEW_ERROR","VIEW_METADATA","VIEW_MODE_LIST","VIEW_MODE_GRID","VIEW_SELECTED","isEmpty","view","currentCollection","fieldsToShow","items","length","Content","focusedRow","gridColumnCount","isMedium","onSortChange","tableRef","viewMode","rest","isViewEmpty","isMetadataBasedView","isListView","isGridView","percentLoaded"],"mappings":";;;;;;AAAA;;;;;AAMA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,UAAP,MAAuB,uBAAvB;AACA,OAAOC,WAAP,MAAwB,wBAAxB;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,qBAAP,MAAkC,oCAAlC;AACA,SAASC,UAAT,EAAqBC,aAArB,EAAoCC,cAApC,EAAoDC,cAApD,EAAoEC,aAApE,QAAyF,iBAAzF;AAIA,OAAO,gBAAP;AAEA;;;;;;;;;AAQA,SAASC,OAAT,CAAiBC,IAAjB,EAA6BC,iBAA7B,EAA4DC,YAA5D,EAAiG;AAAA,8BAC1DD,iBAD0D,CACrFE,KADqF;AAAA,MACrFA,KADqF,sCAC7E,EAD6E;AAE7F,SAAOH,IAAI,KAAKN,UAAT,IAAuB,CAACS,KAAK,CAACC,MAA9B,IAAyCJ,IAAI,KAAKL,aAAT,IAA0B,CAACO,YAAY,CAACE,MAAxF;AACH;;AA+BD,IAAMC,OAAO,GAAG,SAAVA,OAAU,OAWH;AAAA,MAVTJ,iBAUS,QAVTA,iBAUS;AAAA,MATTK,UASS,QATTA,UASS;AAAA,kCARTC,eAQS;AAAA,MARTA,eAQS,qCARS,CAQT;AAAA,MAPTC,QAOS,QAPTA,QAOS;AAAA,MANTC,YAMS,QANTA,YAMS;AAAA,MALTC,QAKS,QALTA,QAKS;AAAA,MAJTV,IAIS,QAJTA,IAIS;AAAA,2BAHTW,QAGS;AAAA,MAHTA,QAGS,8BAHEf,cAGF;AAAA,+BAFTM,YAES;AAAA,MAFTA,YAES,kCAFM,EAEN;AAAA,MADNU,IACM;;AACT,MAAMC,WAAW,GAAGd,OAAO,CAACC,IAAD,EAAOC,iBAAP,EAA0BC,YAA1B,CAA3B;AACA,MAAMY,mBAAmB,GAAGd,IAAI,KAAKL,aAArC;AACA,MAAMoB,UAAU,GAAG,CAACD,mBAAD,IAAwBH,QAAQ,KAAKf,cAAxD,CAHS,CAG+D;;AACxE,MAAMoB,UAAU,GAAG,CAACF,mBAAD,IAAwBH,QAAQ,KAAKd,cAAxD,CAJS,CAI+D;;AAExE,SACI;AAAK,IAAA,SAAS,EAAC;AAAf,KACKG,IAAI,KAAKN,UAAT,IAAuBM,IAAI,KAAKF,aAAhC,GAAgD,IAAhD,GACG,oBAAC,WAAD;AAAa,IAAA,OAAO,EAAEG,iBAAiB,CAACgB;AAAxC,IAFR,EAKKJ,WAAW,IAAI,oBAAC,UAAD;AAAY,IAAA,IAAI,EAAEb,IAAlB;AAAwB,IAAA,SAAS,EAAEC,iBAAiB,CAACgB,aAAlB,KAAoC;AAAvE,IALpB,EAMK,CAACJ,WAAD,IAAgBC,mBAAhB,IACG,oBAAC,qBAAD;AAAuB,IAAA,iBAAiB,EAAEb,iBAA1C;AAA6D,IAAA,YAAY,EAAEC;AAA3E,KAA6FU,IAA7F,EAPR,EASK,CAACC,WAAD,IAAgBE,UAAhB,IACG,oBAAC,QAAD;AACI,IAAA,iBAAiB,EAAEd,iBADvB;AAEI,IAAA,YAAY,EAAEQ,YAFlB;AAGI,IAAA,UAAU,EAAEH,UAHhB;AAII,IAAA,QAAQ,EAAEE,QAJd;AAKI,IAAA,QAAQ,EAAEE,QALd;AAMI,IAAA,IAAI,EAAEV;AANV,KAOQY,IAPR,EAVR,EAoBK,CAACC,WAAD,IAAgBG,UAAhB,IACG,oBAAC,QAAD;AACI,IAAA,iBAAiB,EAAEf,iBADvB;AAEI,IAAA,eAAe,EAAEM,eAFrB;AAGI,IAAA,IAAI,EAAEP;AAHV,KAIQY,IAJR,EArBR,CADJ;AA+BH,CAhDD;;AAkDA,eAAeP,OAAf","sourcesContent":["/**\n * @flow\n * @file File picker header and list component\n * @author Box\n */\n\nimport React from 'react';\nimport EmptyState from '../common/empty-state';\nimport ProgressBar from '../common/progress-bar';\nimport ItemGrid from './ItemGrid';\nimport ItemList from './ItemList';\nimport MetadataBasedItemList from '../../features/metadata-based-view';\nimport { VIEW_ERROR, VIEW_METADATA, VIEW_MODE_LIST, VIEW_MODE_GRID, VIEW_SELECTED } from '../../constants';\nimport type { ViewMode } from '../common/flowTypes';\nimport type { FieldsToShow } from '../../common/types/metadataQueries';\nimport type { View, Collection } from '../../common/types/core';\nimport './Content.scss';\n\n/**\n * Determines if we should show the empty state\n *\n * @param {string} view the current view\n * @param {Object} currentCollection the current collection\n * @param {FieldsToShow} fieldsToShow list of metadata template fields to show\n * @return {boolean} empty or not\n */\nfunction isEmpty(view: View, currentCollection: Collection, fieldsToShow: FieldsToShow): boolean {\n    const { items = [] }: Collection = currentCollection;\n    return view === VIEW_ERROR || !items.length || (view === VIEW_METADATA && !fieldsToShow.length);\n}\n\ntype Props = {\n    canDelete: boolean,\n    canDownload: boolean,\n    canPreview: boolean,\n    canRename: boolean,\n    canShare: boolean,\n    currentCollection: Collection,\n    fieldsToShow?: FieldsToShow,\n    focusedRow: number,\n    gridColumnCount?: number,\n    isMedium: boolean,\n    isSmall: boolean,\n    isTouch: boolean,\n    onItemClick: Function,\n    onItemDelete: Function,\n    onItemDownload: Function,\n    onItemPreview: Function,\n    onItemRename: Function,\n    onItemSelect: Function,\n    onItemShare: Function,\n    onMetadataUpdate: Function,\n    onSortChange: Function,\n    rootElement?: HTMLElement,\n    rootId: string,\n    tableRef: Function,\n    view: View,\n    viewMode?: ViewMode,\n};\n\nconst Content = ({\n    currentCollection,\n    focusedRow,\n    gridColumnCount = 1,\n    isMedium,\n    onSortChange,\n    tableRef,\n    view,\n    viewMode = VIEW_MODE_LIST,\n    fieldsToShow = [],\n    ...rest\n}: Props) => {\n    const isViewEmpty = isEmpty(view, currentCollection, fieldsToShow);\n    const isMetadataBasedView = view === VIEW_METADATA;\n    const isListView = !isMetadataBasedView && viewMode === VIEW_MODE_LIST; // Folder view or Recents view\n    const isGridView = !isMetadataBasedView && viewMode === VIEW_MODE_GRID; // Folder view or Recents view\n\n    return (\n        <div className=\"bce-content\">\n            {view === VIEW_ERROR || view === VIEW_SELECTED ? null : (\n                <ProgressBar percent={currentCollection.percentLoaded} />\n            )}\n\n            {isViewEmpty && <EmptyState view={view} isLoading={currentCollection.percentLoaded !== 100} />}\n            {!isViewEmpty && isMetadataBasedView && (\n                <MetadataBasedItemList currentCollection={currentCollection} fieldsToShow={fieldsToShow} {...rest} />\n            )}\n            {!isViewEmpty && isListView && (\n                <ItemList\n                    currentCollection={currentCollection}\n                    onSortChange={onSortChange}\n                    focusedRow={focusedRow}\n                    isMedium={isMedium}\n                    tableRef={tableRef}\n                    view={view}\n                    {...rest}\n                />\n            )}\n            {!isViewEmpty && isGridView && (\n                <ItemGrid\n                    currentCollection={currentCollection}\n                    gridColumnCount={gridColumnCount}\n                    view={view}\n                    {...rest}\n                />\n            )}\n        </div>\n    );\n};\n\nexport default Content;\n"],"file":"Content.js"}