{"version":3,"sources":["../../../src/elements/content-explorer/ItemGrid.js"],"names":["React","getProp","AutoSizer","GridView","ItemGridCell","ItemGrid","currentCollection","gridColumnCount","rootId","rest","slotRenderer","slotIndex","item","height","width"],"mappings":";;;;;;AACA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,OAAP,MAAoB,YAApB;AACA,OAAOC,SAAP,MAAsB,qCAAtB;AACA,OAAOC,QAAP,MAAqB,qCAArB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;;AAUA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,OAAoE;AAAA,MAAjEC,iBAAiE,QAAjEA,iBAAiE;AAAA,MAA9CC,eAA8C,QAA9CA,eAA8C;AAAA,MAA7BC,MAA6B,QAA7BA,MAA6B;AAAA,MAAlBC,IAAkB;;AACjF;;;;;;AAMA,MAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,SAAD,EAA4C;AAC7D,QAAMC,IAAc,GAAGX,OAAO,CAACK,iBAAD,kBAA6BK,SAA7B,OAA9B;AAEA,WAAOC,IAAI,GAAG,oBAAC,YAAD;AAAc,MAAA,IAAI,EAAEA,IAApB;AAA0B,MAAA,MAAM,EAAEJ;AAAlC,OAA8CC,IAA9C,EAAH,GAA4D,IAAvE;AACH,GAJD;;AAMA,SACI,oBAAC,SAAD,QACK;AAAA,QAAGI,MAAH,SAAGA,MAAH;AAAA,QAAWC,KAAX,SAAWA,KAAX;AAAA,WACG,oBAAC,QAAD;AACI,MAAA,WAAW,EAAEP,eADjB;AAEI,MAAA,iBAAiB,EAAED,iBAFvB;AAGI,MAAA,MAAM,EAAEO,MAHZ;AAII,MAAA,YAAY,EAAEH,YAJlB;AAKI,MAAA,KAAK,EAAEI;AALX,MADH;AAAA,GADL,CADJ;AAaH,CA1BD;;AA4BA,eAAeT,QAAf","sourcesContent":["// @flow\nimport * as React from 'react';\nimport getProp from 'lodash/get';\nimport AutoSizer from 'react-virtualized/dist/es/AutoSizer';\nimport GridView from '../../components/grid-view/GridView';\nimport ItemGridCell from './ItemGridCell';\nimport type { ItemGridProps } from './flowTypes';\nimport type { BoxItem, Collection } from '../../common/types/core';\n\ntype Props = {\n    currentCollection: Collection,\n    gridColumnCount: number,\n    ...$Exact<ItemGridProps>,\n};\n\nconst ItemGrid = ({ currentCollection, gridColumnCount, rootId, ...rest }: Props) => {\n    /**\n     * Renderer used for cards in grid view\n     *\n     * @param {number} slotIndex - index of item in currentCollection.items\n     * @return {React.Element} - Element to display in card\n     */\n    const slotRenderer = (slotIndex: number): ?React.Element<any> => {\n        const item: ?BoxItem = getProp(currentCollection, `items[${slotIndex}]`);\n\n        return item ? <ItemGridCell item={item} rootId={rootId} {...rest} /> : null;\n    };\n\n    return (\n        <AutoSizer>\n            {({ height, width }) => (\n                <GridView\n                    columnCount={gridColumnCount}\n                    currentCollection={currentCollection}\n                    height={height}\n                    slotRenderer={slotRenderer}\n                    width={width}\n                />\n            )}\n        </AutoSizer>\n    );\n};\n\nexport default ItemGrid;\n"],"file":"ItemGrid.js"}